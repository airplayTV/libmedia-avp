{"version":3,"file":"src_avformat_formats_IFlacFormat_ts.avtranscoder.js","mappings":"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","sources":["webpack://AVTranscoder/./src/avformat/formats/IFlacFormat.ts","webpack://AVTranscoder/./src/avformat/formats/IFormat.ts","webpack://AVTranscoder/./src/avformat/formats/flac/iflac.ts","webpack://AVTranscoder/./src/avformat/formats/ogg/OggPage.ts","webpack://AVTranscoder/./src/avformat/formats/ogg/vorbis.ts","webpack://AVTranscoder/./src/avformat/function/getBytesByDuration.ts","webpack://AVTranscoder/./src/avformat/function/seekInBytes.ts","webpack://AVTranscoder/./src/avutil/codecs/flac.ts","webpack://AVTranscoder/./src/common/math/crc8.ts"],"sourcesContent":["/*\r\n * libmedia flac decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVStream from 'avutil/AVStream'\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport { AVCodecID, AVMediaType } from 'avutil/codec'\r\nimport * as logger from 'common/util/logger'\r\nimport * as errorType from 'avutil/error'\r\nimport IFormat from './IFormat'\r\nimport { AVFormat, AVSeekFlags } from 'avutil/avformat'\r\nimport { mapSafeUint8Array, memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport { addAVPacketData } from 'avutil/util/avpacket'\r\nimport { IOError } from 'common/io/error'\r\nimport { MetaDataBlockType } from 'avutil/codecs/flac'\r\nimport { FlacContext, FrameInfo } from './flac/type'\r\nimport { decodeFrameHeader } from './flac/iflac'\r\nimport BitReader from 'common/io/BitReader'\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\nimport { AV_MILLI_TIME_BASE_Q, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport seekInBytes from '../function/seekInBytes'\r\nimport * as array from 'common/util/array'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport { AVStreamMetadataKey } from 'avutil/AVStream'\r\nimport { parseVorbisComment } from './ogg/vorbis'\r\n\r\nconst PACKET_SIZE = 1024\r\n\r\nexport default class IFlacFormat extends IFormat {\r\n\r\n  public type: AVFormat = AVFormat.FLAC\r\n\r\n  context: FlacContext\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  public init(formatContext: AVIFormatContext): void {\r\n    formatContext.ioReader.setEndian(true)\r\n\r\n    this.context = {\r\n      streamInfo: {\r\n        minimumBlockSize: 0,\r\n        maximumBlockSize: 0,\r\n        minimumFrameSize: 0,\r\n        maximumFrameSize: 0,\r\n        sampleRate: 0,\r\n        channels: 0,\r\n        bitPerSample: 0,\r\n        samples: 0n,\r\n        md5: ''\r\n      },\r\n      frameInfo: {\r\n        sampleRate: 0,\r\n        channels: 0,\r\n        bps: 0,\r\n        blocksize: 0,\r\n        chMode: 0,\r\n        frameOrSampleNum: 0n,\r\n        isVarSize: 0\r\n      },\r\n      seekPoints: [],\r\n      cueSheet: {\r\n        catalogNumber: '',\r\n        leadInSamples: 0n,\r\n        compactDisc: false,\r\n        tracks: []\r\n      },\r\n      picture: {\r\n        type: 0,\r\n        mimeType: '',\r\n        description: '',\r\n        width: 0,\r\n        height: 0,\r\n        colorDepth: 0,\r\n        indexedColor: 0,\r\n        data: null\r\n      },\r\n\r\n      cacheBuffer: null,\r\n      cachePos: 0n,\r\n      bitReader: new BitReader(16),\r\n      fileSize: 0n,\r\n      firstFramePos: 0n,\r\n      isVarSize: -1\r\n    }\r\n  }\r\n\r\n  public async readHeader(formatContext: AVIFormatContext): Promise<number> {\r\n\r\n    const signature = await formatContext.ioReader.readString(4)\r\n\r\n    if (signature !== 'fLaC') {\r\n      logger.error('the file format is not flac')\r\n      return errorType.DATA_INVALID\r\n    }\r\n\r\n    this.context.fileSize = await formatContext.ioReader.fileSize()\r\n\r\n    const stream = formatContext.createStream()\r\n    stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_AUDIO\r\n    stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_FLAC\r\n\r\n    while (true) {\r\n      const blockHeader = await formatContext.ioReader.readUint8()\r\n      const blockLen = await formatContext.ioReader.readUint24()\r\n      const blockType = blockHeader & (~0x80)\r\n\r\n      if (blockType === MetaDataBlockType.STREAMINFO) {\r\n        stream.codecpar.extradata = avMalloc(blockLen)\r\n        stream.codecpar.extradataSize = blockLen\r\n        memcpyFromUint8Array(stream.codecpar.extradata, blockLen, await formatContext.ioReader.peekBuffer(blockLen))\r\n\r\n        this.context.streamInfo.minimumBlockSize = await formatContext.ioReader.readUint16()\r\n        this.context.streamInfo.maximumBlockSize = await formatContext.ioReader.readUint16()\r\n\r\n        this.context.streamInfo.minimumFrameSize = await formatContext.ioReader.readUint24()\r\n        this.context.streamInfo.maximumFrameSize = await formatContext.ioReader.readUint24()\r\n\r\n        const sampleRate = await formatContext.ioReader.readUint24()\r\n        stream.codecpar.sampleRate = (sampleRate >> 4)\r\n        stream.codecpar.chLayout.nbChannels = ((sampleRate & 0x0f) >>> 1) + 1\r\n\r\n        this.context.streamInfo.sampleRate = stream.codecpar.sampleRate\r\n        this.context.streamInfo.channels = stream.codecpar.chLayout.nbChannels\r\n\r\n        const bitPerSample = await formatContext.ioReader.readUint8()\r\n        stream.codecpar.bitsPerRawSample = (((sampleRate & 0x01) << 4) | ((bitPerSample & 0xf0) >>> 4)) + 1\r\n\r\n        this.context.streamInfo.bitPerSample = stream.codecpar.bitsPerRawSample\r\n\r\n        const samplesLow = await formatContext.ioReader.readUint32()\r\n\r\n        const samples = (static_cast<int64>(bitPerSample & 0x0f) << 32n) | static_cast<int64>(samplesLow)\r\n        this.context.streamInfo.samples = samples\r\n\r\n        stream.timeBase.den = stream.codecpar.sampleRate\r\n        stream.timeBase.num = 1\r\n        stream.duration = samples\r\n        stream.startTime = 0n\r\n\r\n        this.context.streamInfo.md5 = await formatContext.ioReader.readString(16)\r\n      }\r\n      else if (blockType === MetaDataBlockType.APPLICATION) {\r\n        const stream = formatContext.createStream()\r\n        stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_DATA\r\n        stream.codecpar.codecTag = await formatContext.ioReader.readUint32()\r\n        stream.codecpar.extradata = avMalloc(blockLen - 4)\r\n        stream.codecpar.extradataSize = blockLen - 4\r\n        await formatContext.ioReader.readBuffer(blockLen - 4, mapSafeUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize)))\r\n      }\r\n      else if (blockType === MetaDataBlockType.SEEKTABLE) {\r\n        for (let i = 0; i < blockLen / 18; i++) {\r\n          const pts = await formatContext.ioReader.readUint64()\r\n          const pos = await formatContext.ioReader.readUint64()\r\n          const samples = await formatContext.ioReader.readUint16()\r\n          this.context.seekPoints.push({\r\n            pts,\r\n            pos,\r\n            samples\r\n          })\r\n        }\r\n      }\r\n      else if (blockType === MetaDataBlockType.VORBIS_COMMENT) {\r\n        formatContext.ioReader.setEndian(false)\r\n        const vendorStringLength = await formatContext.ioReader.readUint32()\r\n        const vendorString = await formatContext.ioReader.readString(vendorStringLength)\r\n        const userCommentListLength = await formatContext.ioReader.readUint32()\r\n        const comments: string[] = []\r\n        for (let i = 0; i < userCommentListLength; i++) {\r\n          const length = await formatContext.ioReader.readUint32()\r\n          comments.push(await formatContext.ioReader.readString(length))\r\n        }\r\n        stream.metadata[AVStreamMetadataKey.VENDOR] = vendorString\r\n        parseVorbisComment(comments, stream.metadata)\r\n        formatContext.ioReader.setEndian(true)\r\n      }\r\n      else if (blockType === MetaDataBlockType.CUESHEET) {\r\n        this.context.cueSheet.catalogNumber = await formatContext.ioReader.readString(128)\r\n        this.context.cueSheet.leadInSamples = await formatContext.ioReader.readUint64()\r\n        this.context.cueSheet.compactDisc = !!((await formatContext.ioReader.readUint8()) >>> 7)\r\n        await formatContext.ioReader.skip(258)\r\n\r\n        const trackCount = await formatContext.ioReader.readUint8()\r\n        for (let i = 0; i < trackCount; i++) {\r\n          const offset = await formatContext.ioReader.readUint64()\r\n          const number = await formatContext.ioReader.readUint8()\r\n          const isrc = await formatContext.ioReader.readBuffer(12)\r\n          const flags = await formatContext.ioReader.readUint8()\r\n          await formatContext.ioReader.skip(13)\r\n          const pointCount = await formatContext.ioReader.readUint8()\r\n\r\n          const points = []\r\n          for (let j = 0; j < pointCount; j++) {\r\n            points.push({\r\n              offset: await formatContext.ioReader.readUint64(),\r\n              point: await formatContext.ioReader.readUint8()\r\n            })\r\n            await formatContext.ioReader.skip(3)\r\n          }\r\n\r\n          this.context.cueSheet.tracks.push({\r\n            offset,\r\n            number,\r\n            isrc,\r\n            type: flags >>> 7,\r\n            preEmphasisFlag: (flags >>> 6) & 0x01,\r\n            points\r\n          })\r\n        }\r\n      }\r\n      else if (blockType === MetaDataBlockType.PICTURE) {\r\n        this.context.picture.type = await formatContext.ioReader.readUint32()\r\n        let len = await formatContext.ioReader.readUint32()\r\n        this.context.picture.mimeType = await formatContext.ioReader.readString(len)\r\n        len = await formatContext.ioReader.readUint32()\r\n        this.context.picture.description = await formatContext.ioReader.readString(len)\r\n        this.context.picture.width = await formatContext.ioReader.readUint32()\r\n        this.context.picture.height = await formatContext.ioReader.readUint32()\r\n        this.context.picture.colorDepth = await formatContext.ioReader.readUint32()\r\n        this.context.picture.indexedColor = await formatContext.ioReader.readUint32()\r\n        len = await formatContext.ioReader.readUint32()\r\n        this.context.picture.data = await formatContext.ioReader.readBuffer(len)\r\n      }\r\n      else {\r\n        await formatContext.ioReader.skip(blockLen)\r\n      }\r\n      if (blockHeader & 0x80) {\r\n        break\r\n      }\r\n    }\r\n\r\n    this.context.firstFramePos = formatContext.ioReader.getPos()\r\n\r\n    stream.privData = this.context\r\n\r\n    return 0\r\n  }\r\n\r\n  private async getNextFrame(formatContext: AVIFormatContext) {\r\n    const buffers: Uint8Array[] = []\r\n    while (true) {\r\n\r\n      if (formatContext.ioReader.getPos() === this.context.fileSize) {\r\n        if (this.context.cacheBuffer) {\r\n          buffers.push(this.context.cacheBuffer)\r\n          this.context.cacheBuffer = null\r\n        }\r\n        break\r\n      }\r\n\r\n      if (!this.context.cacheBuffer) {\r\n        this.context.cachePos = formatContext.ioReader.getPos()\r\n        this.context.cacheBuffer = await formatContext.ioReader.readBuffer(Math.min(PACKET_SIZE, static_cast<int32>(this.context.fileSize - formatContext.ioReader.getPos())))\r\n      }\r\n      else if (this.context.cacheBuffer.length < 17) {\r\n        this.context.cacheBuffer = concatTypeArray(\r\n          Uint8Array,\r\n          [\r\n            this.context.cacheBuffer,\r\n            await formatContext.ioReader.readBuffer(Math.min(PACKET_SIZE, static_cast<int32>(this.context.fileSize - formatContext.ioReader.getPos())))\r\n          ]\r\n        )\r\n      }\r\n\r\n      let i = buffers.length ? 0 : 2\r\n\r\n      const sync = this.context.isVarSize < 0 ? [0xf8, 0xf9] : (this.context.isVarSize ? [0xf9] : [0xf8])\r\n\r\n      const end = this.context.cacheBuffer.length - 2\r\n      for (; i < end; i++) {\r\n        if (this.context.cacheBuffer[i] === 0xff && array.has(sync, this.context.cacheBuffer[i + 1])) {\r\n          if (i) {\r\n            buffers.push(this.context.cacheBuffer.subarray(0, i))\r\n            this.context.cacheBuffer = this.context.cacheBuffer.subarray(i)\r\n            this.context.cachePos += static_cast<int64>(i)\r\n          }\r\n          break\r\n        }\r\n      }\r\n\r\n      if (i === end) {\r\n        if (formatContext.ioReader.getPos() === this.context.fileSize) {\r\n          buffers.push(this.context.cacheBuffer)\r\n          this.context.cachePos += static_cast<int64>(this.context.cacheBuffer.length)\r\n          this.context.cacheBuffer = null\r\n        }\r\n        else {\r\n          buffers.push(this.context.cacheBuffer.subarray(0, i))\r\n          this.context.cachePos += static_cast<int64>(i)\r\n          this.context.cacheBuffer = this.context.cacheBuffer.subarray(i)\r\n        }\r\n        continue\r\n      }\r\n\r\n      if (this.context.cacheBuffer.length < 16) {\r\n        this.context.cacheBuffer = concatTypeArray(\r\n          Uint8Array,\r\n          [\r\n            this.context.cacheBuffer,\r\n            await formatContext.ioReader.readBuffer(Math.min(PACKET_SIZE, static_cast<int32>(this.context.fileSize - formatContext.ioReader.getPos())))\r\n          ]\r\n        )\r\n      }\r\n\r\n      this.context.bitReader.reset()\r\n      this.context.bitReader.appendBuffer(this.context.cacheBuffer.subarray(0, 16))\r\n\r\n      const info: Partial<FrameInfo> = {}\r\n      // 检查下一帧的数据是否合法，不合法说明和前面的是同一帧数据\r\n      if (decodeFrameHeader(this.context.bitReader, info, true) < 0\r\n        // || info.sampleRate !== this.context.frameInfo.sampleRate\r\n        // || info.channels !== this.context.frameInfo.channels\r\n        || ((info.frameOrSampleNum - this.context.frameInfo.frameOrSampleNum !== static_cast<int64>(this.context.frameInfo.blocksize))\r\n          && (info.frameOrSampleNum !== this.context.frameInfo.frameOrSampleNum + 1n)\r\n        )\r\n      ) {\r\n        buffers.push(this.context.cacheBuffer.subarray(0, 2))\r\n        this.context.cachePos += 2n\r\n        this.context.cacheBuffer = this.context.cacheBuffer.subarray(2)\r\n      }\r\n      else {\r\n        break\r\n      }\r\n    }\r\n\r\n    if (buffers.length === 1) {\r\n      return buffers[0]\r\n    }\r\n    return concatTypeArray(Uint8Array, buffers)\r\n  }\r\n\r\n  public async readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number> {\r\n\r\n    const stream: AVStream = formatContext.streams.find((stream) => {\r\n      return stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_AUDIO\r\n    })\r\n\r\n    try {\r\n      let now = formatContext.ioReader.getPos()\r\n\r\n      if (now === this.context.fileSize) {\r\n        return IOError.END\r\n      }\r\n\r\n      this.context.bitReader.reset()\r\n\r\n      if (this.context.cacheBuffer) {\r\n        now = this.context.cachePos\r\n        if (this.context.cacheBuffer.length < 16) {\r\n          this.context.cacheBuffer = concatTypeArray(\r\n            Uint8Array,\r\n            [\r\n              this.context.cacheBuffer,\r\n              await formatContext.ioReader.readBuffer(Math.min(PACKET_SIZE, static_cast<int32>(this.context.fileSize - formatContext.ioReader.getPos())))\r\n            ]\r\n          )\r\n        }\r\n        this.context.bitReader.appendBuffer(this.context.cacheBuffer.subarray(0, 16))\r\n      }\r\n      else {\r\n        this.context.bitReader.appendBuffer(await formatContext.ioReader.peekBuffer(16))\r\n      }\r\n\r\n      if (decodeFrameHeader(this.context.bitReader, this.context.frameInfo) < 0) {\r\n        return errorType.DATA_INVALID\r\n      }\r\n\r\n      const nextFrame = await this.getNextFrame(formatContext)\r\n\r\n      const data: pointer<uint8> = avMalloc(nextFrame.length)\r\n      memcpyFromUint8Array(data, nextFrame.length, nextFrame)\r\n      addAVPacketData(avpacket, data, nextFrame.length)\r\n\r\n      avpacket.pos = now\r\n      avpacket.streamIndex = stream.index\r\n      avpacket.timeBase.den = stream.timeBase.den\r\n      avpacket.timeBase.num = stream.timeBase.num\r\n      avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n      avpacket.dts = avpacket.pts = this.context.frameInfo.isVarSize\r\n        ? this.context.frameInfo.frameOrSampleNum\r\n        : this.context.frameInfo.frameOrSampleNum * static_cast<int64>(this.context.frameInfo.blocksize)\r\n\r\n      if (this.context.isVarSize < 0) {\r\n        this.context.isVarSize = this.context.frameInfo.isVarSize\r\n      }\r\n\r\n      return 0\r\n    }\r\n    catch (error) {\r\n      if (formatContext.ioReader.error !== IOError.END\r\n        && formatContext.ioReader.error !== IOError.ABORT\r\n      ) {\r\n        logger.error(`read packet error, ${error}`)\r\n        return errorType.DATA_INVALID\r\n      }\r\n      return formatContext.ioReader.error\r\n    }\r\n  }\r\n\r\n  private async syncFrame(formatContext: AVIFormatContext) {\r\n    let pos: int64 = NOPTS_VALUE_BIGINT\r\n    while (true) {\r\n      try {\r\n        const word = await formatContext.ioReader.peekUint16()\r\n        if (word === 0xfff9 || word === 0xfff8) {\r\n          pos = formatContext.ioReader.getPos()\r\n          this.context.bitReader.reset()\r\n          this.context.bitReader.appendBuffer(await formatContext.ioReader.peekBuffer(16))\r\n          if (!decodeFrameHeader(this.context.bitReader, {}, true)) {\r\n            break\r\n          }\r\n        }\r\n        await formatContext.ioReader.skip(1)\r\n      }\r\n      catch (error) {\r\n        break\r\n      }\r\n    }\r\n\r\n    if (pos !== NOPTS_VALUE_BIGINT) {\r\n      await formatContext.ioReader.seek(pos)\r\n    }\r\n  }\r\n\r\n  public async seek(formatContext: AVIFormatContext, stream: AVStream, timestamp: int64, flags: int32): Promise<int64> {\r\n    const now = formatContext.ioReader.getPos()\r\n\r\n    const context = stream.privData as FlacContext\r\n\r\n    if (flags & AVSeekFlags.BYTE) {\r\n\r\n      const size = await formatContext.ioReader.fileSize()\r\n\r\n      if (size <= 0n) {\r\n        return static_cast<int64>(errorType.FORMAT_NOT_SUPPORT)\r\n      }\r\n\r\n      if (timestamp < 0n) {\r\n        timestamp = 0n\r\n      }\r\n      else if (timestamp > size) {\r\n        timestamp = size\r\n      }\r\n      await formatContext.ioReader.seek(timestamp)\r\n\r\n      if (!(flags & AVSeekFlags.ANY)) {\r\n        await this.syncFrame(formatContext)\r\n      }\r\n      return now\r\n    }\r\n\r\n    if (stream && stream.sampleIndexes.length) {\r\n      let index = array.binarySearch(stream.sampleIndexes, (item) => {\r\n        if (item.pts > timestamp) {\r\n          return -1\r\n        }\r\n        return 1\r\n      })\r\n      if (index > 0 && avRescaleQ(timestamp - stream.sampleIndexes[index - 1].pts, stream.timeBase, AV_MILLI_TIME_BASE_Q) < 5000n) {\r\n        logger.debug(`seek in sampleIndexes, found index: ${index}, pts: ${stream.sampleIndexes[index - 1].pts}, pos: ${stream.sampleIndexes[index - 1].pos}`)\r\n        await formatContext.ioReader.seek(stream.sampleIndexes[index - 1].pos)\r\n        context.cacheBuffer = null\r\n        return now\r\n      }\r\n    }\r\n\r\n    if (context.seekPoints.length) {\r\n      let index = 0\r\n      for (let i = 0; i < context.seekPoints.length; i++) {\r\n        if (context.seekPoints[i].pts === timestamp) {\r\n          index = i\r\n          break\r\n        }\r\n        else if (context.seekPoints[i].pts > timestamp) {\r\n          index = Math.max(i - 1, 0)\r\n          break\r\n        }\r\n      }\r\n      const cue =  context.seekPoints[index]\r\n      logger.debug(`seek in seekPoints, found index: ${index}, pts: ${cue.pts}, pos: ${cue.pos + context.firstFramePos}`)\r\n      await formatContext.ioReader.seek(cue.pos + context.firstFramePos)\r\n      context.cacheBuffer = null\r\n      return now\r\n    }\r\n\r\n    logger.debug('not found any keyframe index, try to seek in bytes')\r\n\r\n    const ret = await seekInBytes(\r\n      formatContext,\r\n      stream,\r\n      timestamp,\r\n      context.firstFramePos,\r\n      this.readAVPacket.bind(this),\r\n      this.syncFrame.bind(this)\r\n    )\r\n    if (ret > 0) {\r\n      context.cacheBuffer = null\r\n    }\r\n    return ret\r\n  }\r\n\r\n  public getAnalyzeStreamsCount(): number {\r\n    return 1\r\n  }\r\n}\r\n","/*\r\n * libmedia abstract format decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport { AVFormat } from 'avutil/avformat'\r\n\r\nexport default abstract class IFormat {\r\n\r\n  public type: AVFormat = AVFormat.UNKNOWN\r\n\r\n  public onStreamAdd: (stream: Stream) => void\r\n\r\n  public abstract init(formatContext: AVIFormatContext): void\r\n\r\n  public async destroy(formatContext: AVIFormatContext): Promise<void> {}\r\n\r\n  public abstract getAnalyzeStreamsCount(): number\r\n  public abstract readHeader(formatContext: AVIFormatContext): Promise<number>\r\n  public abstract readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number>\r\n\r\n  /**\r\n   * seek\r\n   * \r\n   * @param context \r\n   * @param stream \r\n   * @param timestamp 毫秒时间戳\r\n   * @param flags \r\n   * \r\n   * @returns 返回 seek 之前的下一个 avpacket pos（若不知道返回 0n 方便之后可以再 seek 回来）返回负数表示 seek 失败\r\n   */\r\n  public abstract seek(\r\n    formatContext: AVIFormatContext,\r\n    stream: Stream,\r\n    timestamp: int64,\r\n    flags: int32\r\n  ): Promise<int64>\r\n}\r\n","/*\r\n * libmedia flac input util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport BitReader from 'common/io/BitReader'\r\nimport { FrameInfo } from './type'\r\nimport * as errorType from 'avutil/error'\r\nimport * as logger from 'common/util/logger'\r\nimport { BlockSizeTable, FLAC_MAX_CHANNELS, FlacCHMode, SampleRateTable, SampleSizeTable } from 'avutil/codecs/flac'\r\nimport crc8 from 'common/math/crc8'\r\n\r\nexport function getUtf8(reader: BitReader) {\r\n  let value = static_cast<int64>(reader.readU(8))\r\n  let top = (value & 128n) >> 1n\r\n  if ((value & 0xc0n) === 0x80n || value >= 0xfen) {\r\n    return -1n\r\n  }\r\n  while (value & top) {\r\n    const tmp = static_cast<int64>(reader.readU(8)) - 128n\r\n    if (tmp >> 6n) {\r\n      return -1n\r\n    }\r\n    value = (value << 6n) + tmp\r\n    top <<= 5n\r\n  }\r\n  value &= (top << 1n) - 1n\r\n\r\n  return value\r\n}\r\n\r\nexport function decodeFrameHeader(bitReader: BitReader, info: Partial<FrameInfo>, check: boolean = false) {\r\n\r\n  const start = bitReader.getPointer()\r\n\r\n  if ((bitReader.readU(15) & 0x7fff) != 0x7ffc) {\r\n    !check && logger.error('invalid sync code')\r\n    return errorType.DATA_INVALID\r\n  }\r\n  info.isVarSize = bitReader.readU1()\r\n\r\n  const bsCode = bitReader.readU(4)\r\n  const srCode = bitReader.readU(4)\r\n\r\n  info.chMode = bitReader.readU(4)\r\n\r\n  if (info.chMode < FLAC_MAX_CHANNELS) {\r\n    info.channels = info.chMode + 1\r\n    info.chMode = FlacCHMode.INDEPENDENT\r\n  }\r\n  else if (info.chMode < FLAC_MAX_CHANNELS + FlacCHMode.MID_SIDE) {\r\n    info.channels = 2\r\n    info.chMode -= FLAC_MAX_CHANNELS - 1\r\n  }\r\n  else {\r\n    !check && logger.error(`invalid channel mode: ${info.chMode}`)\r\n    return errorType.DATA_INVALID\r\n  }\r\n\r\n  const bpsCode = bitReader.readU(3)\r\n  if (bpsCode === 3) {\r\n    !check && logger.error(`invalid sample size code: ${bpsCode}`)\r\n    return errorType.DATA_INVALID\r\n  }\r\n  info.bps = SampleSizeTable[bpsCode]\r\n\r\n  if (bitReader.readU1()) {\r\n    !check && logger.error('broken stream, invalid padding')\r\n    return errorType.DATA_INVALID\r\n  }\r\n\r\n  info.frameOrSampleNum = getUtf8(bitReader)\r\n\r\n  if (info.frameOrSampleNum < 0) {\r\n    !check && logger.error('sample/frame number invalid')\r\n    return errorType.DATA_INVALID\r\n  }\r\n\r\n  if (bsCode === 0) {\r\n    !check && logger.error('reserved blocksize code: 0')\r\n    return errorType.DATA_INVALID\r\n  }\r\n  else if (bsCode === 6) {\r\n    info.blocksize = bitReader.readU(8) + 1\r\n  }\r\n  else if (bsCode === 7) {\r\n    info.blocksize = bitReader.readU(16) + 1\r\n  }\r\n  else {\r\n    info.blocksize = BlockSizeTable[bsCode]\r\n  }\r\n\r\n  if (srCode < 12) {\r\n    info.sampleRate = SampleRateTable[srCode]\r\n  }\r\n  else if (srCode === 12) {\r\n    info.sampleRate = bitReader.readU(8) * 1000\r\n  }\r\n  else if (srCode === 13) {\r\n    info.sampleRate = bitReader.readU(16)\r\n  }\r\n  else if (srCode === 14) {\r\n    info.sampleRate = bitReader.readU(16) * 10\r\n  }\r\n  else {\r\n    !check && logger.error(`illegal sample rate code ${srCode}`)\r\n    return errorType.DATA_INVALID\r\n  }\r\n\r\n  const crc = crc8(bitReader.getBuffer().subarray(start, bitReader.getPointer()))\r\n\r\n  if (crc !== bitReader.readU(8)) {\r\n    !check && logger.error('header crc mismatch')\r\n    return errorType.DATA_INVALID\r\n  }\r\n\r\n  return 0\r\n}\r\n","/*\r\n * libmedia oggs page parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport IOReaderSync from 'common/io/IOReaderSync'\r\nimport { NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport * as text from 'common/util/text'\r\n\r\nexport interface PagePayload {\r\n  signature: string\r\n  read(ioReader: IOReaderSync): void\r\n  write(ioWriter: IOWriter): void\r\n  setCodec(codecpar: AVCodecParameters): void\r\n  streamIndex: number\r\n}\r\n\r\nclass UserComment {\r\n\r\n  public list: string[]\r\n\r\n  constructor() {\r\n    this.list = []\r\n  }\r\n\r\n  public read(ioReader: IOReaderSync, count: number) {\r\n    for (let i = 0; i < count; i++) {\r\n      const length = ioReader.readUint32()\r\n      this.list.push(ioReader.readString(length))\r\n    }\r\n  }\r\n\r\n  public write(ioWriter: IOWriter) {\r\n    for (let i = 0; i < this.list.length; i++) {\r\n      const buffer = text.encode(this.list[i])\r\n      ioWriter.writeUint32(buffer.length)\r\n      ioWriter.writeBuffer(buffer)\r\n    }\r\n  }\r\n\r\n  public addComment(comment: string) {\r\n    this.list.push(comment)\r\n  }\r\n}\r\n\r\nexport class OggPage {\r\n  /**\r\n   * 4 bytes 页标识， OggS ASCII 字符\r\n   */\r\n  public capturePattern: string\r\n\r\n  /**\r\n   * 1 bytes 版本 id, 目前为 0\r\n   */\r\n  public streamStructureVersion: number\r\n\r\n  /**\r\n   * 1 bytes 类型标识， 表示该页为逻辑流的第一页\r\n   * \r\n   * - 0x01：本页媒体编码数据与前一页属于同一个逻辑流的同一个 packet，若此位没有设，表示本页是以一个新的 packet 开始的；\r\n   * - 0x02：表示该页为逻辑流的第一页，bos 标识，如果此位未设置，那表示不是第一页；\r\n   * - 0x04：表示该页为逻辑流的最后一页，eos 标识，如果此位未设置，那表示本页不是最后一页；\r\n   */\r\n  public headerTypeFlag: number\r\n\r\n  /**\r\n   * 8 bytes 媒体编码相关的参数信息\r\n   * \r\n   * 对于音频流来说，它存储着到本页为止逻辑流在 PCM 输出中采样码的数目，可以由它来算得时间戳\r\n   * 对于视频流来说，它存储着到本页为止视频帧编码的数目\r\n   * 若此值为 -1，那表示截止到本页，逻辑流的 packet 未结束\r\n   */\r\n  public granulePosition: bigint\r\n\r\n  /**\r\n   * 4 bytes 当前页中的流的 id，它是区分本页所属逻辑流与其他逻辑流的序号，我们可以通过这个值来划分流\r\n   */\r\n  public serialNumber: number\r\n\r\n  /**\r\n   * 4 bytes 本页在逻辑流的序号\r\n   */\r\n  public pageSequenceNumber: number\r\n\r\n  /**\r\n   * 4 bytes 循环冗余效验码效验， 用来效验每页的有效性\r\n   */\r\n  public crcCheckSum: number\r\n\r\n  /**\r\n   * 1 bytes 给定本页在 segment_table 域中出现的 segment 个数\r\n   */\r\n  public numberPageSegments: number\r\n\r\n  /**\r\n   * segment 长度表\r\n   * \r\n   * 表示着每个 segment 的长度，取值范围是 0~255\r\n   * 由 segment（1 个 segment 就是 1 个字节）可以得到 packet 的值，每个 packet 的大小是以最后一个不等于 255 的 segment 结束的\r\n   */\r\n  public segmentTable: number[]\r\n\r\n  public payload: Uint8Array\r\n\r\n  public pos: int64\r\n\r\n  constructor() {\r\n    this.reset()\r\n  }\r\n\r\n  public reset() {\r\n    this.capturePattern = 'OggS'\r\n    this.streamStructureVersion = 0\r\n    this.headerTypeFlag = 0\r\n    this.granulePosition = NOPTS_VALUE_BIGINT\r\n    this.serialNumber = 0\r\n    this.pageSequenceNumber = 0\r\n    this.crcCheckSum = 0\r\n    this.numberPageSegments = 0\r\n    this.segmentTable = []\r\n    this.pos = 0n\r\n  }\r\n\r\n  public async read(ioReader: IOReader) {\r\n    this.pos = ioReader.getPos()\r\n    await this.readPageHeader(ioReader)\r\n\r\n    const length = this.segmentTable.reduce((prev, len) => {\r\n      return prev + len\r\n    }, 0)\r\n\r\n    if (length) {\r\n      this.payload = await ioReader.readBuffer(length)\r\n    }\r\n  }\r\n\r\n  public async readPageHeader(ioReader: IOReader) {\r\n    this.capturePattern = await ioReader.readString(4)\r\n    this.streamStructureVersion = await ioReader.readUint8()\r\n    this.headerTypeFlag = await ioReader.readUint8()\r\n    this.granulePosition = await ioReader.readUint64()\r\n    this.serialNumber = await ioReader.readUint32()\r\n    this.pageSequenceNumber = await ioReader.readUint32()\r\n    this.crcCheckSum = await ioReader.readUint32()\r\n    this.numberPageSegments = await ioReader.readUint8()\r\n\r\n    if (this.numberPageSegments) {\r\n      for (let i = 0; i < this.numberPageSegments; i++) {\r\n        const len = await ioReader.readUint8()\r\n        this.segmentTable.push(len)\r\n      }\r\n    }\r\n  }\r\n\r\n  public write(ioWriter: IOWriter) {\r\n    this.pos = ioWriter.getPos()\r\n    ioWriter.writeString(this.capturePattern)\r\n    ioWriter.writeUint8(this.streamStructureVersion)\r\n    ioWriter.writeUint8(this.headerTypeFlag)\r\n    ioWriter.writeUint64(this.granulePosition)\r\n    ioWriter.writeUint32(this.serialNumber)\r\n    ioWriter.writeUint32(this.pageSequenceNumber)\r\n    ioWriter.writeUint32(this.crcCheckSum)\r\n\r\n    if (this.payload) {\r\n      this.numberPageSegments = Math.floor(this.payload.length / 255) + 1\r\n      const last = this.payload.length % 255\r\n\r\n      ioWriter.writeUint8(this.numberPageSegments)\r\n\r\n      for (let i = 0; i < this.numberPageSegments - 1; i++) {\r\n        ioWriter.writeUint8(255)\r\n      }\r\n      ioWriter.writeUint8(last)\r\n      ioWriter.writeBuffer(this.payload)\r\n    }\r\n    else {\r\n      ioWriter.writeUint8(0)\r\n    }\r\n  }\r\n}\r\n\r\nexport class OggsCommentPage implements PagePayload {\r\n\r\n  public streamIndex: number\r\n\r\n  /**\r\n   * 8 bytes Magic Signature: OpusTags\r\n   */\r\n  public signature: string\r\n\r\n  /**\r\n   * 4 bytes unsigned\r\n   */\r\n  public vendorStringLength: number\r\n\r\n  /**\r\n   * 长度由 Vendor String Length 指定， utf-8 编码\r\n   */\r\n  public vendorString: string\r\n\r\n  /**\r\n   * 4 bytes unsigned, 该字段指示用户提供的注释数。它可能表示用户提供的评论为零，在这种情况下数据包中没有其他字段。\r\n   * 一定不要表示评论太多，以至于评论字符串长度将需要比其余的可用数据更多的数据数据包\r\n   */\r\n  public userCommentListLength: number\r\n\r\n  public comments: UserComment\r\n\r\n  constructor() {\r\n    this.vendorString = defined(VERSION)\r\n    this.vendorStringLength = this.vendorString.length\r\n    this.userCommentListLength = 0\r\n    this.comments = new UserComment()\r\n  }\r\n\r\n  public read(ioReader: IOReaderSync) {\r\n    this.vendorStringLength = ioReader.readUint32()\r\n    this.vendorString = ioReader.readString(this.vendorStringLength)\r\n    this.userCommentListLength = ioReader.readUint32()\r\n    if (this.userCommentListLength) {\r\n      this.comments.read(ioReader, this.userCommentListLength)\r\n    }\r\n  }\r\n\r\n  public write(ioWriter: IOWriter) {\r\n    const buffer = text.encode(this.vendorString)\r\n    ioWriter.writeUint32(buffer.length)\r\n    ioWriter.writeBuffer(buffer)\r\n\r\n    ioWriter.writeUint32(this.comments.list.length)\r\n    this.comments.write(ioWriter)\r\n  }\r\n\r\n  public addComment(comment: string) {\r\n    this.comments.addComment(comment)\r\n  }\r\n\r\n  public setCodec(codecpar: AVCodecParameters) {\r\n  }\r\n}\r\n","/*\r\n * libmedia oggs vorbis page parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\n/**\r\n * oggs vorbis IDPage 和 commentPage\r\n * \r\n * https://datatracker.ietf.org/doc/html/rfc7845\r\n */\r\n\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { OggsCommentPage, PagePayload } from './OggPage'\r\nimport IOReaderSync from 'common/io/IOReaderSync'\r\nimport { Data } from 'common/types/type'\r\nimport { AVStreamMetadataKey } from 'avutil/AVStream'\r\nimport * as object from 'common/util/object'\r\nimport isDef from 'common/function/isDef'\r\n\r\nconst CommentKeyMap = {\r\n  'album': AVStreamMetadataKey.ALBUM,\r\n  'artist': AVStreamMetadataKey.ARTIST,\r\n  'description': AVStreamMetadataKey.DESCRIPTION,\r\n  'encoder': AVStreamMetadataKey.ENCODER,\r\n  'title': AVStreamMetadataKey.TITLE,\r\n  'tracknumber': AVStreamMetadataKey.TRACK,\r\n  'date': AVStreamMetadataKey.DATE,\r\n  'genre': AVStreamMetadataKey.GENRE,\r\n  'comment': AVStreamMetadataKey.COMMENT,\r\n  'albumartist': AVStreamMetadataKey.ALBUM_ARTIST,\r\n  'composer': AVStreamMetadataKey.COMPOSER,\r\n  'performer': AVStreamMetadataKey.PERFORMER,\r\n  'discnumber': AVStreamMetadataKey.DISC,\r\n  'organization': AVStreamMetadataKey.VENDOR,\r\n  'copyright': AVStreamMetadataKey.COPYRIGHT,\r\n  'license': AVStreamMetadataKey.LICENSE,\r\n  'isrc': AVStreamMetadataKey.ISRC,\r\n  'lyrics': AVStreamMetadataKey.LYRICS,\r\n  'language': AVStreamMetadataKey.LANGUAGE,\r\n  'label': AVStreamMetadataKey.VENDOR,\r\n  'script': AVStreamMetadataKey.LYRICS,\r\n  'encoded_by': AVStreamMetadataKey.VENDOR\r\n}\r\n\r\nexport function parseVorbisComment(list: string[], metadata: Data) {\r\n  if (!list) {\r\n    return\r\n  }\r\n  list.forEach((value) => {\r\n    const l = value.split('=')\r\n    if (l.length === 2) {\r\n      const k = l[0].trim().toLowerCase()\r\n      const v = l[1].trim()\r\n      if (CommentKeyMap[k]) {\r\n        metadata[CommentKeyMap[k]] = v\r\n      }\r\n      else {\r\n        metadata[k.toLowerCase()] = v\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\nexport function addVorbisComment(metadata: Data) {\r\n  const list: string[] = []\r\n  object.each(CommentKeyMap, (value, key) => {\r\n    if (isDef(metadata[value])) {\r\n      list.push(`${key.toUpperCase()}=${metadata[value]}`)\r\n    }\r\n  })\r\n  return list\r\n}\r\n\r\nexport class VorbisOggsIdPage implements PagePayload {\r\n\r\n  public streamIndex: number\r\n\r\n  /**\r\n   * 8 bits packet_type \r\n   */\r\n  public packetType: number\r\n\r\n  /**\r\n   * 6 bytes Magic Signature: vorbis\r\n   */\r\n  public signature: string\r\n\r\n  /**\r\n   * 4 bytes unsigned, 对应值 0x01\r\n   */\r\n  public version: number\r\n\r\n  /**\r\n   * 1 bytes unsigned, 声道数\r\n   */\r\n  public channels: number\r\n\r\n  /**\r\n   * 4 bytes unsigned, 原始输入采样率\r\n   */\r\n  public sampleRate: number\r\n\r\n  /**\r\n   * 4 bytes \r\n   */\r\n  public bitrateMaximum: number\r\n\r\n  /**\r\n   * 4 bytes \r\n   */\r\n  public bitrateNominal: number\r\n\r\n  /**\r\n   * 4 bytes \r\n   */\r\n  public bitrateMinimum: number\r\n\r\n  /**\r\n   * 4 bits\r\n   */\r\n  public blocksize0: number\r\n\r\n  /**\r\n   * 4 bits\r\n   */\r\n  public blocksize1: number\r\n\r\n  /**\r\n   * 1 bit\r\n   */\r\n  public framingFlag: number\r\n\r\n  constructor(signature: string = 'vorbis') {\r\n    this.signature = signature\r\n    this.version = 0\r\n    this.channels = 1\r\n    this.sampleRate = 48000\r\n    this.bitrateMaximum = 0\r\n    this.bitrateNominal = 0\r\n    this.bitrateMinimum = 0\r\n    this.blocksize0 = 2048\r\n    this.blocksize1 = 256\r\n  }\r\n\r\n  public read(ioReader: IOReaderSync) {\r\n    this.packetType = ioReader.readUint8()\r\n    this.signature = ioReader.readString(6)\r\n    this.version = ioReader.readUint32()\r\n    this.channels = ioReader.readUint8()\r\n    this.sampleRate = ioReader.readInt32()\r\n    this.bitrateMaximum = ioReader.readInt32()\r\n    this.bitrateNominal = ioReader.readInt32()\r\n    this.bitrateMinimum = ioReader.readInt32()\r\n\r\n    const block = ioReader.readUint8() & 0xff\r\n\r\n    this.blocksize0 = Math.pow(2, block >>> 4)\r\n    this.blocksize1 = Math.pow(2, block & 0x0f)\r\n\r\n    this.framingFlag = ioReader.readUint8()\r\n  }\r\n\r\n  public write(ioWriter: IOWriter) {\r\n    ioWriter.writeUint8(0x01)\r\n    ioWriter.writeString(this.signature)\r\n    ioWriter.writeUint32(this.version)\r\n    ioWriter.writeUint8(this.channels)\r\n    ioWriter.writeInt32(this.sampleRate)\r\n    ioWriter.writeInt32(this.bitrateMaximum)\r\n    ioWriter.writeInt32(this.bitrateNominal)\r\n    ioWriter.writeInt32(this.bitrateMinimum)\r\n\r\n    ioWriter.writeUint8((Math.log2(this.blocksize0) << 4) | Math.log2(this.blocksize1))\r\n\r\n    ioWriter.writeUint8(0x01)\r\n  }\r\n\r\n  public setCodec(codecpar: AVCodecParameters) {\r\n    this.sampleRate = codecpar.sampleRate\r\n    this.channels = codecpar.chLayout.nbChannels\r\n  }\r\n}\r\n\r\nexport class VorbisOggsCommentPage extends OggsCommentPage {\r\n  /**\r\n   * 8 bits packet_type \r\n   */\r\n  public packetType: number\r\n\r\n  /**\r\n   * 1 bit\r\n   */\r\n  public framingFlag: number\r\n\r\n  constructor(signature: string = 'vorbis') {\r\n    super()\r\n    this.signature = signature\r\n    this.packetType = 0x01\r\n    this.framingFlag = 0x01\r\n  }\r\n\r\n  public read(ioReader: IOReaderSync) {\r\n    this.packetType = ioReader.readUint8()\r\n    this.signature = ioReader.readString(6)\r\n    super.read(ioReader)\r\n    if (this.signature === 'vorbis') {\r\n      this.framingFlag = ioReader.readUint8()\r\n    }\r\n  }\r\n\r\n  public write(ioWriter: IOWriter) {\r\n    ioWriter.writeUint8(this.packetType)\r\n    ioWriter.writeString(this.signature)\r\n    super.write(ioWriter)\r\n    if (this.signature === 'vorbis') {\r\n      ioWriter.writeUint8(this.framingFlag)\r\n    }\r\n  }\r\n\r\n  public addComment(comment: string) {\r\n    this.comments.addComment(comment)\r\n  }\r\n\r\n  public setCodec(codecpar: AVCodecParameters) {\r\n  }\r\n}\r\n","/*\r\n * libmedia get bytes by duration\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport AVStream from 'avutil/AVStream'\r\nimport * as array from 'common/util/array'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport { AV_MILLI_TIME_BASE_Q } from 'avutil/constant'\r\n\r\nexport function getBytesByDuration(streams: AVStream[], duration: int64, timeBase: Rational) {\r\n  let bytes = 0n\r\n  array.each(streams, (st) => {\r\n    bytes += st.codecpar.bitrate * avRescaleQ(duration, timeBase, AV_MILLI_TIME_BASE_Q) / 8000n\r\n  })\r\n  return bytes\r\n}\r\n","/*\r\n * libmedia seek in bytes with timestamp\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVStream from 'avutil/AVStream'\r\nimport { AV_MILLI_TIME_BASE_Q, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport { avRescaleQ, avRescaleQ2 } from 'avutil/util/rational'\r\nimport { getBytesByDuration } from './getBytesByDuration'\r\nimport { createAVPacket, destroyAVPacket, unrefAVPacket } from 'avutil/util/avpacket'\r\nimport * as errorType from 'avutil/error'\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport * as logger from 'common/util/logger'\r\nimport { IOFlags } from 'avutil/avformat'\r\nimport { IOError } from 'common/io/error'\r\n\r\nexport default async function seekInBytes(\r\n  context: AVIFormatContext,\r\n  stream: AVStream,\r\n  timestamp: int64,\r\n  firstPacketPos: int64,\r\n  readAVPacket: (context: AVIFormatContext, avpacket: pointer<AVPacket>) => Promise<int32>,\r\n  syncAVPacket: (context: AVIFormatContext) => Promise<void>\r\n) {\r\n\r\n  const now = context.ioReader.getPos()\r\n\r\n  const fileSize = await context.ioReader.fileSize()\r\n  let pos: int64 = NOPTS_VALUE_BIGINT\r\n  let duration = timestamp\r\n  if (stream.startTime !== NOPTS_VALUE_BIGINT) {\r\n    duration -= stream.startTime\r\n  }\r\n  else {\r\n    duration -= stream.firstDTS\r\n  }\r\n\r\n  const pointPts = avRescaleQ(timestamp, stream.timeBase, AV_MILLI_TIME_BASE_Q)\r\n\r\n  // 头十秒直接回到开始位置\r\n  if (pointPts < 10000n) {\r\n    logger.debug(`seek pts is earlier then 10s, seek to first packet pos(${firstPacketPos}) directly`)\r\n    await context.ioReader.seek(firstPacketPos)\r\n    return now\r\n  }\r\n\r\n  let bytes = getBytesByDuration(context.streams, duration, stream.timeBase)\r\n  // 最大到结尾往前 10 秒\r\n  const max = fileSize - getBytesByDuration(context.streams, 10000n, AV_MILLI_TIME_BASE_Q)\r\n  const length = getBytesByDuration(context.streams, 10000n, AV_MILLI_TIME_BASE_Q)\r\n  if (bytes > max) {\r\n    bytes = max\r\n  }\r\n  if (bytes < firstPacketPos) {\r\n    await context.ioReader.seek(firstPacketPos)\r\n    return now\r\n  }\r\n  const avpacket = createAVPacket()\r\n  let seekMax = fileSize\r\n  let seekMin = 0n\r\n\r\n  failed: while (true) {\r\n    if (seekMax - seekMin < length) {\r\n      bytes = seekMin\r\n    }\r\n    await context.ioReader.seek(bytes)\r\n    await syncAVPacket(context)\r\n    if (context.ioReader.flags & IOFlags.ABORT) {\r\n      break\r\n    }\r\n\r\n    let ret = await readAVPacket(context, avpacket)\r\n    let now = avpacket.pos\r\n\r\n    if (ret >= 0) {\r\n      const currentPts = avRescaleQ2(avpacket.pts, addressof(avpacket.timeBase), AV_MILLI_TIME_BASE_Q)\r\n      let diff = currentPts - pointPts\r\n\r\n      logger.debug(`try to seek to pos: ${bytes}, got packet pts: ${avpacket.pts}(${currentPts}ms), diff: ${diff}ms`)\r\n\r\n      // seek 时间戳的前面 10 秒内\r\n      if (diff <= 0n && -diff < 10000n || seekMax - seekMin < length) {\r\n        // 查找最近的关键帧\r\n        const keyPos: int64[] = [now]\r\n        while (diff <= 0) {\r\n          if (avpacket.streamIndex === stream.index && (avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY)) {\r\n            keyPos.push(now)\r\n          }\r\n          unrefAVPacket(avpacket)\r\n          ret = await readAVPacket(context, avpacket)\r\n          if (ret < 0) {\r\n            if (ret === IOError.END) {\r\n              break\r\n            }\r\n            else if (ret === IOError.AGAIN) {\r\n              continue\r\n            }\r\n            // 失败了重新 seek 回原来的位置\r\n            else {\r\n              pos = NOPTS_VALUE_BIGINT\r\n              break failed\r\n            }\r\n          }\r\n          now = avpacket.pos\r\n          diff = avRescaleQ2(avpacket.pts, addressof(avpacket.timeBase), AV_MILLI_TIME_BASE_Q) - pointPts\r\n        }\r\n        pos = keyPos.pop()\r\n        break\r\n      }\r\n      // seek 后面\r\n      else if (diff > 0n) {\r\n        seekMax = bytes\r\n        bytes = (seekMin + seekMax) >> 1n\r\n      }\r\n      // seek 前面 10 秒外\r\n      else {\r\n        seekMin = bytes\r\n        bytes = (seekMin + seekMax) >> 1n\r\n      }\r\n    }\r\n    else {\r\n      // 失败了重新 seek 回原来的位置\r\n      pos = NOPTS_VALUE_BIGINT\r\n      break\r\n    }\r\n    if (context.ioReader.flags & IOFlags.ABORT) {\r\n      break\r\n    }\r\n  }\r\n\r\n  destroyAVPacket(avpacket)\r\n\r\n  if (pos !== NOPTS_VALUE_BIGINT) {\r\n    logger.debug(`finally seek to pos ${pos}`)\r\n\r\n    await context.ioReader.seek(pos)\r\n    await syncAVPacket(context)\r\n    return now\r\n  }\r\n  else {\r\n    await context.ioReader.seek(now)\r\n    if (context.ioReader.flags & IOFlags.ABORT) {\r\n      return static_cast<int64>(errorType.EOF)\r\n    }\r\n  }\r\n\r\n  return static_cast<int64>(errorType.FORMAT_NOT_SUPPORT)\r\n}\r\n","/*\r\n * libmedia flac util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport Stream from '../AVStream'\r\nimport { AVPacketSideDataType } from '../codec'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport const enum MetaDataBlockType {\r\n  STREAMINFO,\r\n  PADDING,\r\n  APPLICATION,\r\n  SEEKTABLE,\r\n  VORBIS_COMMENT,\r\n  CUESHEET,\r\n  PICTURE\r\n}\r\n\r\nexport const enum FlacCHMode {\r\n  INDEPENDENT = 0,\r\n  LEFT_SIDE = 1,\r\n  RIGHT_SIDE = 2,\r\n  MID_SIDE = 3\r\n}\r\n\r\nexport const FLAC_STREAMINFO_SIZE = 34\r\nexport const FLAC_MAX_CHANNELS = 8\r\nexport const FLAC_MIN_BLOCKSIZE = 16\r\nexport const FLAC_MAX_BLOCKSIZE = 65535\r\nexport const FLAC_MIN_FRAME_SIZE = 10\r\n\r\nexport const SampleSizeTable: number[] = [0, 8, 12, 0, 16, 20, 24, 32]\r\n\r\nexport const SampleRateTable: number[] = [\r\n  0, 88200, 176400, 192000, 8000, 16000, 22050,\r\n  24000, 32000, 44100, 48000, 96000,\r\n  0, 0, 0, 0\r\n]\r\n\r\nexport const BlockSizeTable: number[] = [\r\n  0, 192, 576 << 0, 576 << 1, 576 << 2, 576 << 3, 0, 0,\r\n  256 << 0, 256 << 1, 256 << 2, 256 << 3, 256 << 4, 256 << 5, 256 << 6, 256 << 7\r\n]\r\n\r\nexport const enum FlacChmode {\r\n  FLAC_CHMODE_INDEPENDENT = 0,\r\n  FLAC_CHMODE_LEFT_SIDE   = 1,\r\n  FLAC_CHMODE_RIGHT_SIDE  = 2,\r\n  FLAC_CHMODE_MID_SIDE    = 3,\r\n}\r\n\r\nexport const enum FlacMetadataType {\r\n  FLAC_METADATA_TYPE_STREAMINFO = 0,\r\n  FLAC_METADATA_TYPE_PADDING,\r\n  FLAC_METADATA_TYPE_APPLICATION,\r\n  FLAC_METADATA_TYPE_SEEKTABLE,\r\n  FLAC_METADATA_TYPE_VORBIS_COMMENT,\r\n  FLAC_METADATA_TYPE_CUESHEET,\r\n  FLAC_METADATA_TYPE_PICTURE,\r\n  FLAC_METADATA_TYPE_INVALID = 127\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: Stream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length === FLAC_STREAMINFO_SIZE) {\r\n    const { bitsPerRawSample, sampleRate, channels } = getAVCodecParameters(extradata)\r\n    stream.codecpar.bitsPerRawSample = bitsPerRawSample\r\n    stream.codecpar.sampleRate = sampleRate\r\n    stream.codecpar.chLayout.nbChannels = channels\r\n  }\r\n}\r\n\r\nfunction getAVCodecParameters(extradata: Uint8ArrayInterface) {\r\n  const bufferReader = new BufferReader(extradata)\r\n  bufferReader.skip(10)\r\n  const value = bufferReader.readUint24()\r\n  const sampleRate = (value >> 4)\r\n  const channels = ((value & 0x0f) >>> 1) + 1\r\n  const bitPerSample = bufferReader.readUint8()\r\n  return {\r\n    sampleRate,\r\n    channels,\r\n    bitsPerRawSample: (((value & 0x01) << 4) | ((bitPerSample & 0xf0) >>> 4)) + 1\r\n  }\r\n}\r\n","export default function crc8(data: Uint8Array, crc: number = 0x00) {\r\n  const polynomial = 0x07\r\n\r\n  for (let i = 0; i < data.length; i++) {\r\n    crc ^= data[i]\r\n\r\n    for (let j = 0; j < 8; j++) {\r\n      if (crc & 0x80) {\r\n        crc = (crc << 1) ^ polynomial\r\n      }\r\n      else {\r\n        crc <<= 1\r\n      }\r\n    }\r\n  }\r\n\r\n  return crc & 0xFF\r\n}\r\n"],"names":[],"sourceRoot":""}