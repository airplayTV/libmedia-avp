{"version":3,"file":"src_avformat_formats_IWavFormat_ts.avtranscoder.js","mappings":"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,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAE9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CA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","sources":["webpack://AVTranscoder/./src/avformat/formats/IFormat.ts","webpack://AVTranscoder/./src/avformat/formats/IWavFormat.ts","webpack://AVTranscoder/./src/avformat/formats/riff/iriff.ts","webpack://AVTranscoder/./src/avformat/formats/riff/riff.ts","webpack://AVTranscoder/./src/avformat/function/mktagle.ts","webpack://AVTranscoder/./src/avutil/util/pcm.ts"],"sourcesContent":["/*\r\n * libmedia abstract format decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport { AVFormat } from 'avutil/avformat'\r\n\r\nexport default abstract class IFormat {\r\n\r\n  public type: AVFormat = AVFormat.UNKNOWN\r\n\r\n  public onStreamAdd: (stream: Stream) => void\r\n\r\n  public abstract init(formatContext: AVIFormatContext): void\r\n\r\n  public async destroy(formatContext: AVIFormatContext): Promise<void> {}\r\n\r\n  public abstract getAnalyzeStreamsCount(): number\r\n  public abstract readHeader(formatContext: AVIFormatContext): Promise<number>\r\n  public abstract readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number>\r\n\r\n  /**\r\n   * seek\r\n   * \r\n   * @param context \r\n   * @param stream \r\n   * @param timestamp 毫秒时间戳\r\n   * @param flags \r\n   * \r\n   * @returns 返回 seek 之前的下一个 avpacket pos（若不知道返回 0n 方便之后可以再 seek 回来）返回负数表示 seek 失败\r\n   */\r\n  public abstract seek(\r\n    formatContext: AVIFormatContext,\r\n    stream: Stream,\r\n    timestamp: int64,\r\n    flags: int32\r\n  ): Promise<int64>\r\n}\r\n","/*\r\n * libmedia wav decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVStream from 'avutil/AVStream'\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport { AVMediaType } from 'avutil/codec'\r\nimport * as logger from 'common/util/logger'\r\nimport * as errorType from 'avutil/error'\r\nimport IFormat from './IFormat'\r\nimport { AVFormat, AVSeekFlags } from 'avutil/avformat'\r\nimport { mapSafeUint8Array } from 'cheap/std/memory'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport { addAVPacketData } from 'avutil/util/avpacket'\r\nimport { IOError } from 'common/io/error'\r\nimport { readFormatTag } from './riff/iriff'\r\nimport { getBitsPerSample } from 'avutil/util/pcm'\r\n\r\nconst PACKET_SAMPLE_COUNT = 1024\r\n\r\nexport default class IWavFormat extends IFormat {\r\n\r\n  public type: AVFormat = AVFormat.WAV\r\n\r\n  private dataSize: int64\r\n  private sampleCount: int64\r\n  private pcmStartPos: int64\r\n  private currentPts: int64\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  public init(formatContext: AVIFormatContext): void {\r\n    formatContext.ioReader.setEndian(false)\r\n  }\r\n\r\n  public async readHeader(formatContext: AVIFormatContext): Promise<number> {\r\n    const signature = await formatContext.ioReader.readString(4)\r\n\r\n    switch (signature) {\r\n\r\n      case 'RIFF':\r\n      case 'RF64':\r\n      case 'BW64':\r\n        break\r\n      case 'RIFX':\r\n        formatContext.ioReader.setEndian(true)\r\n        break\r\n      default:\r\n        logger.error('the file format is not wav')\r\n        return errorType.DATA_INVALID\r\n    }\r\n\r\n    // chunk size\r\n    await formatContext.ioReader.skip(4)\r\n\r\n    const dataType = await formatContext.ioReader.readString(4)\r\n\r\n    if (dataType !== 'WAVE') {\r\n      logger.error(`invalid start code ${dataType} in RIFF header`)\r\n      return errorType.DATA_INVALID\r\n    }\r\n\r\n    if (signature === 'RF64' || signature === 'BW64') {\r\n      const tag = await formatContext.ioReader.readString(4)\r\n      if (tag !== 'ds64') {\r\n        return errorType.DATA_INVALID\r\n      }\r\n      const size = await formatContext.ioReader.readUint32()\r\n      if (size < 24) {\r\n        return errorType.DATA_INVALID\r\n      }\r\n\r\n      // riff size\r\n      await formatContext.ioReader.skip(8)\r\n      this.dataSize = await formatContext.ioReader.readUint64()\r\n      this.sampleCount = await formatContext.ioReader.readUint64()\r\n\r\n      if (this.dataSize < 0 || this.sampleCount < 0) {\r\n        logger.error('negative data_size and/or sample_count in ds64')\r\n        return errorType.DATA_INVALID\r\n      }\r\n      await formatContext.ioReader.skip(size - 24)\r\n    }\r\n\r\n    const stream = formatContext.createStream()\r\n\r\n    const fileSize = await formatContext.ioReader.fileSize()\r\n\r\n    let gotFmt = false\r\n    let gotXma2 = false\r\n\r\n    while (formatContext.ioReader.getPos() < fileSize) {\r\n      const tag = await formatContext.ioReader.readString(4)\r\n      const size = await formatContext.ioReader.readUint32()\r\n\r\n      if (tag === 'fmt ') {\r\n        if (!gotFmt) {\r\n          let ret = await readFormatTag(formatContext.ioReader, addressof(stream.codecpar), size)\r\n          if (ret < 0) {\r\n            return ret\r\n          }\r\n        }\r\n        else {\r\n          logger.warn('found more than one \\'fmt \\' tag, ignore it')\r\n        }\r\n      }\r\n      else if (tag === 'data') {\r\n        this.pcmStartPos = formatContext.ioReader.getPos()\r\n        if (!this.dataSize) {\r\n          this.dataSize = static_cast<int64>(size)\r\n        }\r\n        if (this.pcmStartPos + this.dataSize === fileSize) {\r\n          break\r\n        }\r\n        await formatContext.ioReader.seek(this.pcmStartPos + this.dataSize)\r\n      }\r\n      else {\r\n        if (this.pcmStartPos + this.dataSize === fileSize) {\r\n          break\r\n        }\r\n        await formatContext.ioReader.seek(formatContext.ioReader.getPos() + static_cast<int64>(size))\r\n      }\r\n    }\r\n\r\n    if (!this.sampleCount) {\r\n      this.sampleCount = (this.dataSize << 3n) / BigInt(stream.codecpar.chLayout.nbChannels * getBitsPerSample(stream.codecpar.codecId))\r\n    }\r\n\r\n    stream.timeBase.den = stream.codecpar.sampleRate\r\n    stream.timeBase.num = 1\r\n\r\n    if (this.sampleCount) {\r\n      stream.duration = this.sampleCount\r\n    }\r\n\r\n    this.currentPts = 0n\r\n\r\n    await formatContext.ioReader.seek(this.pcmStartPos)\r\n\r\n    return 0\r\n  }\r\n\r\n  public async readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number> {\r\n\r\n    const stream: AVStream = formatContext.streams.find((stream) => {\r\n      return stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_AUDIO\r\n    })\r\n\r\n    try {\r\n\r\n      const length = (PACKET_SAMPLE_COUNT * stream.codecpar.chLayout.nbChannels * getBitsPerSample(stream.codecpar.codecId)) >>> 3\r\n\r\n      const data: pointer<uint8> = avMalloc(length)\r\n      addAVPacketData(avpacket, data, length)\r\n      avpacket.dts = avpacket.pts = this.currentPts\r\n      avpacket.pos = formatContext.ioReader.getPos()\r\n      await formatContext.ioReader.readBuffer(length, mapSafeUint8Array(data, length))\r\n      avpacket.streamIndex = stream.index\r\n      avpacket.timeBase.den = stream.timeBase.den\r\n      avpacket.timeBase.num = stream.timeBase.num\r\n\r\n      this.currentPts += static_cast<int64>(PACKET_SAMPLE_COUNT)\r\n      return 0\r\n    }\r\n    catch (error) {\r\n      if (formatContext.ioReader.error !== IOError.END\r\n        && formatContext.ioReader.error !== IOError.ABORT\r\n      ) {\r\n        logger.error(`read packet error, ${error}`)\r\n        return errorType.DATA_INVALID\r\n      }\r\n      return formatContext.ioReader.error\r\n    }\r\n  }\r\n\r\n  public async seek(formatContext: AVIFormatContext, stream: AVStream, timestamp: int64, flags: int32): Promise<int64> {\r\n    const now = formatContext.ioReader.getPos()\r\n    if (flags & AVSeekFlags.BYTE) {\r\n      const size = await formatContext.ioReader.fileSize()\r\n\r\n      if (size <= 0n) {\r\n        return static_cast<int64>(errorType.FORMAT_NOT_SUPPORT)\r\n      }\r\n\r\n      if (timestamp < 0n) {\r\n        timestamp = 0n\r\n      }\r\n      else if (timestamp > size) {\r\n        timestamp = size\r\n      }\r\n      await formatContext.ioReader.seek(timestamp)\r\n\r\n      if (!(flags & AVSeekFlags.ANY)) {\r\n        this.currentPts = ((timestamp - this.pcmStartPos) << 3n) / BigInt( stream.codecpar.chLayout.nbChannels * getBitsPerSample(stream.codecpar.codecId))\r\n      }\r\n      return now\r\n    }\r\n    else {\r\n      const pos = this.pcmStartPos + (timestamp * BigInt(stream.codecpar.chLayout.nbChannels * getBitsPerSample(stream.codecpar.codecId)) >> 3n)\r\n      await formatContext.ioReader.seek(pos)\r\n      this.currentPts = timestamp\r\n      return now\r\n    }\r\n  }\r\n\r\n  public getAnalyzeStreamsCount(): number {\r\n    return 1\r\n  }\r\n}\r\n","import AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport IOReader from 'common/io/IOReader'\r\nimport * as logger from 'common/util/logger'\r\nimport * as errorType from 'avutil/error'\r\nimport { AVCodecID, AVMediaType } from 'avutil/codec'\r\nimport { AMBISONIC_BASE_GUID, BROKEN_BASE_GUID, codecBmpGuid, MEDIASUBTYPE_BASE_GUID, WavTag2CodecId } from './riff'\r\nimport { getPcmCodecId } from 'avutil/util/pcm'\r\nimport { avFree, avMalloc } from 'avutil/util/mem'\r\nimport { mapSafeUint8Array, mapUint8Array } from 'cheap/std/memory'\r\nimport * as intread from 'avutil/util/intread'\r\nimport { AVChannelOrder } from 'avutil/audiosamplefmt'\r\nimport { Data } from 'common/types/type'\r\nimport AVStream from 'avutil/AVStream'\r\nimport { setChannelLayoutFromMask, unInitChannelLayout } from 'avutil/util/channel'\r\n\r\nexport function getWavCodecId(tag: int32, bitsPerCodedSample: int32) {\r\n  let codecId: AVCodecID = WavTag2CodecId[tag]\r\n\r\n  if (!codecId) {\r\n    return AVCodecID.AV_CODEC_ID_NONE\r\n  }\r\n\r\n  if (codecId === AVCodecID.AV_CODEC_ID_PCM_U8) {\r\n    codecId = getPcmCodecId(bitsPerCodedSample, false, false, ~1)\r\n  }\r\n  else if (codecId === AVCodecID.AV_CODEC_ID_PCM_F32LE) {\r\n    codecId = getPcmCodecId(bitsPerCodedSample, true, false, 0)\r\n  }\r\n\r\n  if (codecId === AVCodecID.AV_CODEC_ID_ADPCM_IMA_WAV && bitsPerCodedSample === 8) {\r\n    codecId = AVCodecID.AV_CODEC_ID_ADPCM_ZORK\r\n  }\r\n\r\n  return codecId\r\n}\r\n\r\nexport function getGuidCodecId(guid: string) {\r\n  let codecId: AVCodecID = codecBmpGuid[guid.toLocaleUpperCase()]\r\n\r\n  if (!codecId) {\r\n    return AVCodecID.AV_CODEC_ID_NONE\r\n  }\r\n\r\n  return codecId\r\n}\r\n\r\nexport async function readFormatTag(ioReader: IOReader, codecpar: pointer<AVCodecParameters>, size: int32) {\r\n  if (size < 14) {\r\n    logger.error('wav format size < 14')\r\n    return errorType.DATA_INVALID\r\n  }\r\n\r\n  codecpar.codecType = AVMediaType.AVMEDIA_TYPE_AUDIO\r\n\r\n  const audioFormat = await ioReader.readUint16()\r\n  let channels = await ioReader.readUint16()\r\n  const sampleRate = await ioReader.readUint32()\r\n  let bitrate = await ioReader.readUint32() * 8\r\n  const blockAlgin = await ioReader.readUint16()\r\n\r\n  codecpar.sampleRate = sampleRate\r\n  codecpar.blockAlign = blockAlgin\r\n\r\n  if (size === 14) {\r\n    codecpar.bitsPerCodedSample = 8\r\n  }\r\n  else {\r\n    codecpar.bitsPerCodedSample = await ioReader.readUint16()\r\n  }\r\n\r\n  if (audioFormat === 0xfffe) {\r\n    codecpar.codecTag = 0\r\n  }\r\n  else {\r\n    codecpar.codecTag = audioFormat\r\n    codecpar.codecId = getWavCodecId(audioFormat, codecpar.bitsPerCodedSample)\r\n  }\r\n\r\n  if (size >= 18 && audioFormat !== 0x0165) {\r\n    let cbSize = await ioReader.readUint16()\r\n    size -= 18\r\n\r\n    cbSize = Math.min(size, cbSize)\r\n\r\n    if (cbSize >= 22 && audioFormat === 0xfffe) {\r\n      // TODO parse wave format ex\r\n      await ioReader.skip(22)\r\n      cbSize -= 22\r\n      size   -= 22\r\n    }\r\n\r\n    if (cbSize > 0) {\r\n      codecpar.extradata = avMalloc(cbSize)\r\n      codecpar.extradataSize = cbSize\r\n      await ioReader.readBuffer(cbSize, mapSafeUint8Array(codecpar.extradata, cbSize))\r\n\r\n      size -= cbSize\r\n    }\r\n\r\n    if (size > 0) {\r\n      await ioReader.skip(size)\r\n    }\r\n  }\r\n  else if (audioFormat === 0x0165 && size >= 32) {\r\n    size -= 4\r\n\r\n    codecpar.extradata = avMalloc(reinterpret_cast<size>(size))\r\n    codecpar.extradataSize = size\r\n    await ioReader.readBuffer(size, mapSafeUint8Array(codecpar.extradata, reinterpret_cast<size>(size)))\r\n\r\n    const streams = intread.rl16(codecpar.extradata + 4)\r\n    codecpar.sampleRate = intread.rl32(codecpar.extradata + 12)\r\n\r\n    channels = 0\r\n    bitrate = 0\r\n\r\n    if (size < 8 + streams * 20) {\r\n      return errorType.DATA_INVALID\r\n    }\r\n\r\n    for (let i = 0; i < streams; i++) {\r\n      channels += codecpar.extradata[8 + i * 20 + 17]\r\n    }\r\n  }\r\n\r\n  codecpar.bitrate = BigInt(bitrate)\r\n\r\n  if (codecpar.sampleRate < 0) {\r\n    logger.error(`Invalid sample rate: ${codecpar.sampleRate}`)\r\n    return errorType.DATA_INVALID\r\n  }\r\n\r\n  if (codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC_LATM) {\r\n    channels = 0\r\n    codecpar.sampleRate = 0\r\n  }\r\n\r\n  if (codecpar.codecId == AVCodecID.AV_CODEC_ID_ADPCM_G726 && codecpar.sampleRate) {\r\n    codecpar.bitsPerCodedSample = static_cast<int32>(codecpar.bitrate) / codecpar.sampleRate\r\n  }\r\n  if (channels != codecpar.chLayout.nbChannels) {\r\n    codecpar.chLayout.order = AVChannelOrder.AV_CHANNEL_ORDER_UNSPEC\r\n    codecpar.chLayout.nbChannels = channels\r\n  }\r\n  return 0\r\n}\r\n\r\nexport async function readInfo(ioReader: IOReader, size: int64, metadata: Data) {\r\n  const end = ioReader.getPos() + size\r\n  while (ioReader.getPos() < end) {\r\n    const key = await ioReader.readString(4)\r\n    const size = await ioReader.readUint32()\r\n    const value = await ioReader.readString(size)\r\n    metadata[key] = value\r\n    if (size % 2) {\r\n      await ioReader.skip(1)\r\n    }\r\n  }\r\n}\r\n\r\nexport async function readBmpHeader(ioReader: IOReader, stream: AVStream) {\r\n  const esize = await ioReader.readUint32()\r\n  stream.codecpar.width = await ioReader.readUint32()\r\n  stream.codecpar.height = await ioReader.readUint32()\r\n  await ioReader.skip(2)\r\n  stream.codecpar.bitsPerCodedSample = await ioReader.readUint16()\r\n  stream.codecpar.codecTag = await ioReader.readUint32()\r\n  await ioReader.skip(20)\r\n  return esize\r\n}\r\n\r\nexport async function readWaveformatex(ioReader: IOReader, stream: AVStream) {\r\n  const bsp = await ioReader.readUint16()\r\n  if (bsp) {\r\n    stream.codecpar.bitsPerCodedSample = bsp\r\n  }\r\n  const mask: uint32 = await ioReader.readUint32()\r\n  setChannelLayoutFromMask(addressof(stream.codecpar.chLayout), static_cast<uint64>(mask))\r\n  const subFormat = (await ioReader.readHex(16)).toLocaleUpperCase()\r\n  if (subFormat.slice(4) === AMBISONIC_BASE_GUID\r\n    || subFormat.slice(4) === BROKEN_BASE_GUID\r\n    || subFormat.slice(4) === MEDIASUBTYPE_BASE_GUID\r\n  ) {\r\n    stream.codecpar.codecTag = await ioReader.readUint32()\r\n    stream.codecpar.codecId = getWavCodecId(reinterpret_cast<int32>(stream.codecpar.codecTag), stream.codecpar.bitsPerCodedSample)\r\n  }\r\n  else {\r\n    stream.codecpar.codecId = getGuidCodecId(subFormat)\r\n    if (!stream.codecpar.codecId) {\r\n      logger.warn(`unknown subformat: ${subFormat}`)\r\n    }\r\n  }\r\n}\r\n\r\nexport async function readWavHeader(ioReader: IOReader, stream: AVStream, size: int32) {\r\n  if (size < 14) {\r\n    logger.error('wav header size < 14')\r\n    return errorType.DATA_INVALID\r\n  }\r\n  unInitChannelLayout(addressof(stream.codecpar.chLayout))\r\n  let id: number\r\n  let channels: number\r\n  let bitrate: number\r\n\r\n  id = await ioReader.readUint16()\r\n  if (id !== 0x0165 || ioReader.isBigEndian()) {\r\n    channels = await ioReader.readUint16()\r\n    stream.codecpar.sampleRate = await ioReader.readUint32()\r\n    bitrate = (await ioReader.readUint32()) * 8\r\n    stream.codecpar.blockAlign = await ioReader.readUint16()\r\n  }\r\n\r\n  if (size === 14) {\r\n    stream.codecpar.bitsPerCodedSample = 8\r\n  }\r\n  else {\r\n    stream.codecpar.bitsPerCodedSample = await ioReader.readUint16()\r\n  }\r\n  if (id === 0xFFFE) {\r\n    stream.codecpar.codecTag = 0\r\n  }\r\n  else {\r\n    stream.codecpar.codecTag = id\r\n    stream.codecpar.codecId = getWavCodecId(id, stream.codecpar.bitsPerCodedSample)\r\n  }\r\n  if (size >= 18 && id != 0x0165) {\r\n    let cbSize = await ioReader.readUint16()\r\n    if (ioReader.isBigEndian()) {\r\n      logger.error('WAVEFORMATEX support for RIFX files')\r\n      return errorType.DATA_INVALID\r\n    }\r\n    size  -= 18\r\n    cbSize = Math.min(cbSize, size)\r\n    if (cbSize >= 22 && id == 0xfffe) {\r\n      await readWaveformatex(ioReader, stream)\r\n      cbSize -= 22\r\n      size -= 22\r\n    }\r\n    if (cbSize > 0) {\r\n      if (stream.codecpar.extradata) {\r\n        avFree(stream.codecpar.extradata)\r\n      }\r\n      stream.codecpar.extradataSize = cbSize\r\n      stream.codecpar.extradata = avMalloc(reinterpret_cast<size>(cbSize as uint32))\r\n      await ioReader.readBuffer(cbSize, mapSafeUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(cbSize as uint32)))\r\n      size -= cbSize\r\n    }\r\n    if (size > 0) {\r\n      await ioReader.skip(size)\r\n    }\r\n  }\r\n  else if (id == 0x0165 && size >= 32) {\r\n    size -= 4\r\n    if (stream.codecpar.extradata) {\r\n      avFree(stream.codecpar.extradata)\r\n    }\r\n    stream.codecpar.extradataSize = size\r\n    stream.codecpar.extradata = avMalloc(reinterpret_cast<size>(size))\r\n    await ioReader.readBuffer(size, mapSafeUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(size)))\r\n    const nbStreams = intread.rl16(stream.codecpar.extradata + 4)\r\n    stream.codecpar.sampleRate = intread.rl32(stream.codecpar.extradata + 12)\r\n    if (size < 8 + nbStreams * 20) {\r\n      return errorType.DATA_INVALID\r\n    }\r\n    for (let i = 0; i < nbStreams; i++) {\r\n      channels += stream.codecpar.extradata[8 + i * 20 + 17]\r\n    }\r\n  }\r\n\r\n  stream.codecpar.bitrate = static_cast<int64>(bitrate as int32)\r\n  if (stream.codecpar.sampleRate < 0) {\r\n    logger.error(`Invalid sample rate ${stream.codecpar.sampleRate}`)\r\n    return errorType.DATA_INVALID\r\n  }\r\n  if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC_LATM) {\r\n    channels = 0\r\n    stream.codecpar.sampleRate = 0\r\n  }\r\n  if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_ADPCM_G726 && stream.codecpar.sampleRate) {\r\n    stream.codecpar.bitsPerCodedSample = static_cast<double>(stream.codecpar.bitrate) / stream.codecpar.sampleRate\r\n  }\r\n  if (channels !== stream.codecpar.chLayout.nbChannels) {\r\n    unInitChannelLayout(addressof(stream.codecpar.chLayout))\r\n    stream.codecpar.chLayout.order = AVChannelOrder.AV_CHANNEL_ORDER_UNSPEC\r\n    stream.codecpar.chLayout.nbChannels = channels\r\n  }\r\n  return 0\r\n}\r\n","import { AVStreamMetadataKey } from 'avutil/AVStream'\r\nimport mktagle from '../../function/mktagle'\r\nimport { AVCodecID } from 'avutil/codec'\r\n\r\nexport const WavTag2CodecId = {\r\n  0x0001: AVCodecID.AV_CODEC_ID_PCM_U8,\r\n  0x0002: AVCodecID.AV_CODEC_ID_ADPCM_MS,\r\n  0x0003: AVCodecID.AV_CODEC_ID_PCM_F32LE,\r\n  0x0006: AVCodecID.AV_CODEC_ID_PCM_ALAW,\r\n  0x0007: AVCodecID.AV_CODEC_ID_PCM_MULAW,\r\n  0x000A: AVCodecID.AV_CODEC_ID_WMAVOICE,\r\n  0x0010: AVCodecID.AV_CODEC_ID_ADPCM_IMA_OKI,\r\n  0x0011: AVCodecID.AV_CODEC_ID_ADPCM_IMA_WAV,\r\n  0x0017: AVCodecID.AV_CODEC_ID_ADPCM_IMA_OKI,\r\n  0x0020: AVCodecID.AV_CODEC_ID_ADPCM_YAMAHA,\r\n  0x0022: AVCodecID.AV_CODEC_ID_TRUESPEECH,\r\n  0x0031: AVCodecID.AV_CODEC_ID_GSM_MS,\r\n  0x0032: AVCodecID.AV_CODEC_ID_GSM_MS,\r\n  0x0038: AVCodecID.AV_CODEC_ID_AMR_NB,\r\n  0x0042: AVCodecID.AV_CODEC_ID_G723_1,\r\n  0x0045: AVCodecID.AV_CODEC_ID_ADPCM_G726,\r\n  0x0014: AVCodecID.AV_CODEC_ID_ADPCM_G726,\r\n  0x0040: AVCodecID.AV_CODEC_ID_ADPCM_G726,\r\n  0x0050: AVCodecID.AV_CODEC_ID_MP2,\r\n  0x0055: AVCodecID.AV_CODEC_ID_MP3,\r\n  0x0057: AVCodecID.AV_CODEC_ID_AMR_NB,\r\n  0x0058: AVCodecID.AV_CODEC_ID_AMR_WB,\r\n  0x0061: AVCodecID.AV_CODEC_ID_ADPCM_IMA_DK4,\r\n  0x0062: AVCodecID.AV_CODEC_ID_ADPCM_IMA_DK3,\r\n  0x0064: AVCodecID.AV_CODEC_ID_ADPCM_G726,\r\n  0x0069: AVCodecID.AV_CODEC_ID_ADPCM_IMA_WAV,\r\n  0x0075: AVCodecID.AV_CODEC_ID_METASOUND,\r\n  0x0083: AVCodecID.AV_CODEC_ID_G729,\r\n  0x00ff: AVCodecID.AV_CODEC_ID_AAC,\r\n  0x0111: AVCodecID.AV_CODEC_ID_G723_1,\r\n  0x0130: AVCodecID.AV_CODEC_ID_SIPR,\r\n  0x0135: AVCodecID.AV_CODEC_ID_ACELP_KELVIN,\r\n  0x0160: AVCodecID.AV_CODEC_ID_WMAV1,\r\n  0x0161: AVCodecID.AV_CODEC_ID_WMAV2,\r\n  0x0162: AVCodecID.AV_CODEC_ID_WMAPRO,\r\n  0x0163: AVCodecID.AV_CODEC_ID_WMALOSSLESS,\r\n  0x0165: AVCodecID.AV_CODEC_ID_XMA1,\r\n  0x0166: AVCodecID.AV_CODEC_ID_XMA2,\r\n  0x0180: AVCodecID.AV_CODEC_ID_FTR,\r\n  0x0200: AVCodecID.AV_CODEC_ID_ADPCM_CT,\r\n  0x0215: AVCodecID.AV_CODEC_ID_DVAUDIO,\r\n  0x0216: AVCodecID.AV_CODEC_ID_DVAUDIO,\r\n  0x0270: AVCodecID.AV_CODEC_ID_ATRAC3,\r\n  0x028E: AVCodecID.AV_CODEC_ID_MSNSIREN,\r\n  0x028F: AVCodecID.AV_CODEC_ID_ADPCM_G722,\r\n  0x0350: AVCodecID.AV_CODEC_ID_MISC4,\r\n  0x0401: AVCodecID.AV_CODEC_ID_IMC,\r\n  0x0402: AVCodecID.AV_CODEC_ID_IAC,\r\n  0x0500: AVCodecID.AV_CODEC_ID_ON2AVC,\r\n  0x0501: AVCodecID.AV_CODEC_ID_ON2AVC,\r\n  0x1500: AVCodecID.AV_CODEC_ID_GSM_MS,\r\n  0x1501: AVCodecID.AV_CODEC_ID_TRUESPEECH,\r\n\r\n  // ADTS AAC\r\n  0x1600: AVCodecID.AV_CODEC_ID_AAC,\r\n  0x1602: AVCodecID.AV_CODEC_ID_AAC_LATM,\r\n  0x2000: AVCodecID.AV_CODEC_ID_AC3,\r\n  0x2001: AVCodecID.AV_CODEC_ID_DTS,\r\n  0x2048: AVCodecID.AV_CODEC_ID_SONIC,\r\n  0x2222: AVCodecID.AV_CODEC_ID_G729,\r\n  0x6c75: AVCodecID.AV_CODEC_ID_PCM_MULAW,\r\n  0x706d: AVCodecID.AV_CODEC_ID_AAC,\r\n  0x4143: AVCodecID.AV_CODEC_ID_AAC,\r\n  0x4180: AVCodecID.AV_CODEC_ID_FTR,\r\n  0x594a: AVCodecID.AV_CODEC_ID_XAN_DPCM,\r\n  0x729A: AVCodecID.AV_CODEC_ID_G729,\r\n  0x8180: AVCodecID.AV_CODEC_ID_FTR,\r\n  0xA100: AVCodecID.AV_CODEC_ID_G723_1,\r\n  0xA106: AVCodecID.AV_CODEC_ID_AAC,\r\n  0xA109: AVCodecID.AV_CODEC_ID_SPEEX,\r\n  0xF1AC: AVCodecID.AV_CODEC_ID_FLAC,\r\n  0xFFFE: AVCodecID.AV_CODEC_ID_DFPWM,\r\n  0x5346: AVCodecID.AV_CODEC_ID_ADPCM_SWF,\r\n  0x566f: AVCodecID.AV_CODEC_ID_VORBIS\r\n}\r\n\r\nexport const codecBmpTags: Record<int32, AVCodecID> = {\r\n  [mktagle('H261')]: AVCodecID.AV_CODEC_ID_H261,\r\n  [mktagle('H263')]: AVCodecID.AV_CODEC_ID_H263,\r\n  [mktagle('X263')]: AVCodecID.AV_CODEC_ID_H263,\r\n  [mktagle('T263')]: AVCodecID.AV_CODEC_ID_H263,\r\n  [mktagle('L263')]: AVCodecID.AV_CODEC_ID_H263,\r\n  [mktagle('VX1K')]: AVCodecID.AV_CODEC_ID_H263,\r\n  [mktagle('ZyGo')]: AVCodecID.AV_CODEC_ID_H263,\r\n  [mktagle('M263')]: AVCodecID.AV_CODEC_ID_H263,\r\n  [mktagle('lsvm')]: AVCodecID.AV_CODEC_ID_H263,\r\n  [mktagle('I263')]: AVCodecID.AV_CODEC_ID_H263I,\r\n  [mktagle('U263')]: AVCodecID.AV_CODEC_ID_H263,\r\n  [mktagle('VSM4')]: AVCodecID.AV_CODEC_ID_H263,\r\n\r\n  [mktagle('H264')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('h264')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('X264')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('x264')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('avc1')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('DAVC')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('SMV2')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('VSSH')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('Q264')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('V264')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('GAVC')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('UMSV')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('tshd')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('INMC')]: AVCodecID.AV_CODEC_ID_H264,\r\n\r\n  [mktagle('FMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DIVX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DX50')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('XVID')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('MP4S')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('M4S2')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DIVX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [0x04 as int32]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('ZMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DIV1')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('BLZ0')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('mp4v')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('UMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('WV1F')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('SEDG')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('RMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('3IV2')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('WAWV')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('FFDS')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('FVFW')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DCOD')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('MVXM')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('PM4V')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('SMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DXGM')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('VIDM')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('M4T3')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('GEOX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('G264')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('HDX4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DM4V')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DMK2')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DYM4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DIGI')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('EPHV')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('EM4A')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('M4CC')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('SN40')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('VSPX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('ULDX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('GEOV')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('SIPP')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('SM4V')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('XVIX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DreX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('QMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('PLV1')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('GLV4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('GMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('MNM4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('GTM4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n\r\n  [mktagle('MPG4')]: AVCodecID.AV_CODEC_ID_MSMPEG4V1,\r\n  [mktagle('MP41')]: AVCodecID.AV_CODEC_ID_MSMPEG4V1,\r\n  [mktagle('MP42')]: AVCodecID.AV_CODEC_ID_MSMPEG4V2,\r\n  [mktagle('DIV2')]: AVCodecID.AV_CODEC_ID_MSMPEG4V2,\r\n  [mktagle('MP43')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('DIV3')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('MPG3')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('DIV5')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('DIV6')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('DIV4')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('DVX3')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('AP41')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('COL1')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('COL0')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n\r\n  [mktagle('WMV1')]: AVCodecID.AV_CODEC_ID_WMV1,\r\n  [mktagle('WMV2')]: AVCodecID.AV_CODEC_ID_WMV2,\r\n  [mktagle('GXVE')]: AVCodecID.AV_CODEC_ID_WMV2,\r\n\r\n  [mktagle('dvsd')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('dvhd')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('dvh1')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('dvsl')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('dv25')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('dv50')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('cdvc')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('CDVH')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('CDV5')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('dvc ')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('dvcs')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('dvh1')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('dvis')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('pdvc')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('SL25')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('SLDV')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('AVd1')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n\r\n  [mktagle('mpg1')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('mpg2')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('MPEG')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('PIM1')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('PIM2')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('VCR2')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [0x10000001 as uint32]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [0x10000002 as uint32]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [0x10000004 as uint32]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('DVR ')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('MMES')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('LMP2')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('slif')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('EM2V')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('M701')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('M702')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('M703')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('M704')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('M705')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('mpgv')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('BW10')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('XMPG')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('MJPG')]: AVCodecID.AV_CODEC_ID_MJPEG,\r\n\r\n  [mktagle('RV40')]: AVCodecID.AV_CODEC_ID_RV40,\r\n  [mktagle('AV01')]: AVCodecID.AV_CODEC_ID_AV1,\r\n  [mktagle('VP80')]: AVCodecID.AV_CODEC_ID_VP8,\r\n  [mktagle('VP90')]: AVCodecID.AV_CODEC_ID_VP9,\r\n  [mktagle('HEVC')]: AVCodecID.AV_CODEC_ID_HEVC,\r\n  [mktagle('H265')]: AVCodecID.AV_CODEC_ID_HEVC\r\n}\r\n\r\nexport const MEDIASUBTYPE_BASE_GUID = '00001000800000AA00389B71'\r\nexport const AMBISONIC_BASE_GUID = '2107D3118644C8C1CA000000'\r\nexport const BROKEN_BASE_GUID = '0000000000001000800000AA'\r\n\r\nexport const codecBmpGuid: Record<string, AVCodecID> = {\r\n  '2C806DE046DBCF11B4D100805F6CBBEA': AVCodecID.AV_CODEC_ID_AC3,\r\n  'BFAA23E958CB7144A119FFFA01E4CE62': AVCodecID.AV_CODEC_ID_ATRAC3P,\r\n  'D242E147BA368D4D88FC61654F8C836C': AVCodecID.AV_CODEC_ID_ATRAC9,\r\n  'AF87FBA7022DFB42A4D405CD93843BDD': AVCodecID.AV_CODEC_ID_EAC3,\r\n  '2B806DE046DBCF11B4D100805F6CBBEA': AVCodecID.AV_CODEC_ID_MP2,\r\n  '82EC1F6ACADB1945BDE756D3B3EF981D': AVCodecID.AV_CODEC_ID_ADPCM_AGM,\r\n  '3AC1FA38811D4361A40DCE53CA607CD1': AVCodecID.AV_CODEC_ID_DFPWM\r\n}\r\n\r\nexport const RiffInfo: Record<string, string> = {\r\n  'IART': AVStreamMetadataKey.ARTIST,\r\n  'ICMT': AVStreamMetadataKey.COMMENT,\r\n  'ICOP': AVStreamMetadataKey.COPYRIGHT,\r\n  'ICRD': AVStreamMetadataKey.DATE,\r\n  'IGNR': AVStreamMetadataKey.GENRE,\r\n  'ILNG': AVStreamMetadataKey.LANGUAGE,\r\n  'INAM': AVStreamMetadataKey.LANGUAGE,\r\n  'IPRD': AVStreamMetadataKey.ALBUM,\r\n  'IPRT': AVStreamMetadataKey.TRACK,\r\n  'ITRK': AVStreamMetadataKey.TRACK,\r\n  'ISFT': AVStreamMetadataKey.ENCODER,\r\n  'ISMP': AVStreamMetadataKey.TIME_CODE,\r\n  'ITCH': AVStreamMetadataKey.VENDOR\r\n}\r\n","/*\r\n * libmedia string tag to uint32 in litten end\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as logger from 'common/util/logger'\r\n\r\nexport default function mktagle(tag: string): number {\r\n  if (tag.length !== 4) {\r\n    logger.warn(`tag length is not 4, tag: ${tag}`)\r\n  }\r\n\r\n  let value = 0\r\n  for (let i = 3; i >= 0; i--) {\r\n    value = (value << 8) | tag.charCodeAt(i)\r\n  }\r\n\r\n  return value\r\n}\r\n","/*\r\n * libmedia pcm util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVCodecID } from '../codec'\r\n\r\nexport function getPcmCodecId(bps: int32, flt: boolean, be: boolean, flags: int32) {\r\n  if (bps <= 0 || bps > 64) {\r\n    return AVCodecID.AV_CODEC_ID_NONE\r\n  }\r\n\r\n  if (flt) {\r\n    switch (bps) {\r\n      case 32:\r\n        return be ? AVCodecID.AV_CODEC_ID_PCM_F32BE : AVCodecID.AV_CODEC_ID_PCM_F32LE\r\n      case 64:\r\n        return be ? AVCodecID.AV_CODEC_ID_PCM_F64BE : AVCodecID.AV_CODEC_ID_PCM_F64LE\r\n      default:\r\n        return AVCodecID.AV_CODEC_ID_NONE\r\n    }\r\n  }\r\n  else {\r\n    bps += 7\r\n    bps >>>= 3\r\n\r\n    if (flags & (1 << (bps - 1))) {\r\n      switch (bps) {\r\n        case 1:\r\n          return AVCodecID.AV_CODEC_ID_PCM_S8\r\n        case 2:\r\n          return be ? AVCodecID.AV_CODEC_ID_PCM_S16BE : AVCodecID.AV_CODEC_ID_PCM_S16LE\r\n        case 3:\r\n          return be ? AVCodecID.AV_CODEC_ID_PCM_S24BE : AVCodecID.AV_CODEC_ID_PCM_S24LE\r\n        case 4:\r\n          return be ? AVCodecID.AV_CODEC_ID_PCM_S32BE : AVCodecID.AV_CODEC_ID_PCM_S32LE\r\n        case 8:\r\n          return be ? AVCodecID.AV_CODEC_ID_PCM_S64BE : AVCodecID.AV_CODEC_ID_PCM_S64LE\r\n        default:\r\n          return AVCodecID.AV_CODEC_ID_NONE\r\n      }\r\n    }\r\n    else {\r\n      switch (bps) {\r\n        case 1:\r\n          return AVCodecID.AV_CODEC_ID_PCM_U8\r\n        case 2:\r\n          return be ? AVCodecID.AV_CODEC_ID_PCM_U16BE : AVCodecID.AV_CODEC_ID_PCM_U16LE\r\n        case 3:\r\n          return be ? AVCodecID.AV_CODEC_ID_PCM_U24BE : AVCodecID.AV_CODEC_ID_PCM_U24LE\r\n        case 4:\r\n          return be ? AVCodecID.AV_CODEC_ID_PCM_U32BE : AVCodecID.AV_CODEC_ID_PCM_U32LE\r\n        default:\r\n          return AVCodecID.AV_CODEC_ID_NONE\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function getExactBitsPerSample(codecId: AVCodecID) {\r\n  switch (codecId) {\r\n    case AVCodecID.AV_CODEC_ID_8SVX_EXP:\r\n    case AVCodecID.AV_CODEC_ID_8SVX_FIB:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_ARGO:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_CT:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_IMA_ALP:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_IMA_AMV:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_IMA_APC:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_IMA_APM:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_IMA_EA_SEAD:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_IMA_OKI:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_IMA_WS:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_IMA_SSI:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_G722:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_YAMAHA:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_AICA:\r\n      return 4\r\n    case AVCodecID.AV_CODEC_ID_DSD_LSBF:\r\n    case AVCodecID.AV_CODEC_ID_DSD_MSBF:\r\n    case AVCodecID.AV_CODEC_ID_DSD_LSBF_PLANAR:\r\n    case AVCodecID.AV_CODEC_ID_DSD_MSBF_PLANAR:\r\n    case AVCodecID.AV_CODEC_ID_PCM_ALAW:\r\n    case AVCodecID.AV_CODEC_ID_PCM_MULAW:\r\n    case AVCodecID.AV_CODEC_ID_PCM_VIDC:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S8:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S8_PLANAR:\r\n    case AVCodecID.AV_CODEC_ID_PCM_SGA:\r\n    case AVCodecID.AV_CODEC_ID_PCM_U8:\r\n    case AVCodecID.AV_CODEC_ID_SDX2_DPCM:\r\n    case AVCodecID.AV_CODEC_ID_DERF_DPCM:\r\n      return 8\r\n    case AVCodecID.AV_CODEC_ID_PCM_S16BE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S16BE_PLANAR:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S16LE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S16LE_PLANAR:\r\n    case AVCodecID.AV_CODEC_ID_PCM_U16BE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_U16LE:\r\n      return 16\r\n    case AVCodecID.AV_CODEC_ID_PCM_S24DAUD:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S24BE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S24LE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S24LE_PLANAR:\r\n    case AVCodecID.AV_CODEC_ID_PCM_U24BE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_U24LE:\r\n      return 24\r\n    case AVCodecID.AV_CODEC_ID_PCM_S32BE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S32LE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S32LE_PLANAR:\r\n    case AVCodecID.AV_CODEC_ID_PCM_U32BE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_U32LE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_F32BE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_F32LE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_F24LE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_F16LE:\r\n      return 32\r\n    case AVCodecID.AV_CODEC_ID_PCM_F64BE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_F64LE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S64BE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S64LE:\r\n      return 64\r\n    default:\r\n      return 0\r\n  }\r\n}\r\n\r\nexport function getBitsPerSample(codecId: AVCodecID) {\r\n  switch (codecId) {\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_SBPRO_2:\r\n      return 2\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_SBPRO_3:\r\n      return 3\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_SBPRO_4:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_IMA_WAV:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_IMA_QT:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_SWF:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_MS:\r\n      return 4\r\n    default:\r\n      return getExactBitsPerSample(codecId)\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}