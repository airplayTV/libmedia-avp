{"version":3,"file":"src_avformat_formats_mov_boxType_ts-src_avformat_formats_mov_function_createFragmentTrack_ts--47564e.avtranscoder.js","mappings":"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AAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,IAAI,CAAE;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,IAAI,CAAE;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,IAAI,CAAE;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,IAAI,CAAE;IACpB,CAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAE;IACpB,CAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAE;IACpB,CAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAE;IACpB,CAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAE;IACpB,C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","sources":["webpack://AVTranscoder/./src/avformat/formats/mov/boxType.ts","webpack://AVTranscoder/./src/avformat/formats/mov/function/createFragmentTrack.ts","webpack://AVTranscoder/./src/avformat/formats/mov/function/createMovContext.ts","webpack://AVTranscoder/./src/avformat/formats/mov/function/createMovStreamContext.ts","webpack://AVTranscoder/./src/avformat/formats/mov/mov.ts","webpack://AVTranscoder/./src/avformat/function/mktag.ts","webpack://AVTranscoder/./src/avutil/codecs/ac3.ts","webpack://AVTranscoder/./src/avutil/codecs/flac.ts","webpack://AVTranscoder/./src/avutil/util/encryption.ts"],"sourcesContent":["/*\r\n * libmedia mp4 box defined\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nexport const enum BoxType {\r\n  MDAT = 'mdat',\r\n  IDAT = 'idat',\r\n  FREE = 'free',\r\n  WIDE = 'wide',\r\n  SKIP = 'skip',\r\n  MECO = 'meco',\r\n  STRK = 'strk',\r\n  HMHD = 'hmhd',\r\n  NMHD = 'nmhd',\r\n  IODS = 'iods',\r\n  XML = 'xml ',\r\n  BXML = 'bxml',\r\n  IPRO = 'ipro',\r\n  MERE = 'mere',\r\n  MOOV = 'moov',\r\n  TRAK = 'trak',\r\n  EDTS = 'edts',\r\n  MDIA = 'mdia',\r\n  MINF = 'minf',\r\n  SMHD = 'smhd',\r\n  DINF = 'dinf',\r\n  DREF = 'dref',\r\n  STBL = 'stbl',\r\n  MVEX = 'mvex',\r\n  MOOF = 'moof',\r\n  TRAF = 'traf',\r\n  VTTE = 'vtte',\r\n  VTTC = 'vttc',\r\n  PAYL = 'payl',\r\n  TREF = 'tref',\r\n  IREF = 'iref',\r\n  MFRA = 'mfra',\r\n  HNTI = 'hnti',\r\n  HINF = 'hinf',\r\n  STRD = 'strd',\r\n  SINF = 'sinf',\r\n  RINF = 'rinf',\r\n  SCHI = 'schi',\r\n  TRGR = 'trgr',\r\n  UDTA = 'udta',\r\n  IPRP = 'iprp',\r\n  IPCO = 'ipco',\r\n  UUID = 'uuid',\r\n  STTS = 'stts',\r\n  CTTS = 'ctts',\r\n  STSS = 'stss',\r\n  STSZ = 'stsz',\r\n  STZ2 = 'stz2',\r\n  STSC = 'stsc',\r\n  STCO = 'stco',\r\n  CO64 = 'co64',\r\n  MVHD = 'mvhd',\r\n  TKHD = 'tkhd',\r\n  MDHD = 'mdhd',\r\n  HDLR = 'hdlr',\r\n  FTYP = 'ftyp',\r\n  STSD = 'stsd',\r\n  AVC1 = 'avc1',\r\n  AVC3 = 'avc3',\r\n  AVCC = 'avcC',\r\n  HEV1 = 'hev1',\r\n  HVC1 = 'hvc1',\r\n  HVCC = 'hvcC',\r\n  VVC1 = 'vvc1',\r\n  VVI1 = 'vvi1',\r\n  VVCC = 'vvcC',\r\n  MP4A = 'mp4a',\r\n  MP4V = 'mp4v',\r\n  VP09 = 'vp09',\r\n  VPCC = 'vpcC',\r\n  AV01 = 'av01',\r\n  AV1C = 'av1C',\r\n  OPUS = 'Opus',\r\n  FLAC = 'fLaC',\r\n  ESDS = 'esds',\r\n  WAVE = 'wave',\r\n  DFLA = 'dfLa',\r\n  DOPS = 'dOps',\r\n  TREX = 'trex',\r\n  MFHD = 'mfhd',\r\n  TFHD = 'tfhd',\r\n  TFDT = 'tfdt',\r\n  TRUN = 'trun',\r\n  COLR = 'colr',\r\n  PASP = 'pasp',\r\n  BTRT = 'btrt',\r\n  TEXT = 'text',\r\n  VMHD = 'vmhd',\r\n  ELST = 'elst',\r\n  URL = 'url ',\r\n  NONE = 'none',\r\n  STPP = 'stpp',\r\n  WVTT = 'wvtt',\r\n  TX3G = 'tx3g',\r\n  C608 = 'c608',\r\n  MFRO = 'mfro',\r\n  TFRA = 'tfra',\r\n  MINF_HDLR = 'minf_hdlr',\r\n  FRMA = 'frma',\r\n  DAC3 = 'dac3',\r\n  DEC3 = 'dec3',\r\n  EC_3 = 'ec-3',\r\n  AC_3 = 'ac-3',\r\n  PSSH = 'pssh',\r\n  ENCV = 'encv',\r\n  ENCA = 'enca',\r\n  SAIZ = 'saiz',\r\n  SAIO = 'saio',\r\n  SENC = 'senc',\r\n  SCHM = 'schm',\r\n  TENC = 'tenc'\r\n}\r\n\r\nexport const BasicBoxs = [\r\n  BoxType.FTYP,\r\n  BoxType.MDAT,\r\n  BoxType.IDAT,\r\n  BoxType.FREE,\r\n  BoxType.SKIP,\r\n  BoxType.MECO,\r\n  BoxType.STRK,\r\n]\r\n\r\nexport const FullBoxs = [\r\n  BoxType.HMHD,\r\n  BoxType.NMHD,\r\n  BoxType.IODS,\r\n  BoxType.XML,\r\n  BoxType.URL,\r\n  BoxType.BXML,\r\n  BoxType.IPRO,\r\n  BoxType.MERE,\r\n  BoxType.STTS,\r\n  BoxType.CTTS,\r\n  BoxType.STSS,\r\n  BoxType.STSZ,\r\n  BoxType.STZ2,\r\n  BoxType.STSC,\r\n  BoxType.STCO,\r\n  BoxType.CO64,\r\n  BoxType.STSD,\r\n  BoxType.DREF,\r\n\r\n  BoxType.MVHD,\r\n  BoxType.TKHD,\r\n  BoxType.MDHD,\r\n  BoxType.HDLR\r\n]\r\n\r\nexport const ContainerBoxs = [\r\n  BoxType.MOOV,\r\n  BoxType.TRAK,\r\n  BoxType.EDTS,\r\n  BoxType.MDIA,\r\n  BoxType.MINF,\r\n  BoxType.DINF,\r\n  BoxType.STBL,\r\n  BoxType.MVEX,\r\n  BoxType.MOOF,\r\n  BoxType.TRAF,\r\n  BoxType.VTTC,\r\n  BoxType.TREF,\r\n  BoxType.IREF,\r\n  BoxType.MFRA,\r\n  BoxType.HNTI,\r\n  BoxType.HINF,\r\n  BoxType.STRD,\r\n  BoxType.SINF,\r\n  BoxType.RINF,\r\n  BoxType.SCHI,\r\n  BoxType.TRGR,\r\n  BoxType.UDTA,\r\n  BoxType.IPRP,\r\n  BoxType.IPCO,\r\n  BoxType.STRK,\r\n  BoxType.MECO,\r\n  BoxType.ENCV,\r\n  BoxType.ENCA,\r\n  BoxType.SINF,\r\n  BoxType.SCHI\r\n]\r\n\r\nexport const enum TFHDFlags {\r\n  BASE_DATA_OFFSET = 0x01,\r\n  SAMPLE_DESCRIPTION\t= 0x02,\r\n  SAMPLE_DURATION = 0x08,\r\n  SAMPLE_SIZE\t= 0x10,\r\n  SAMPLE_FLAGS = 0x20,\r\n  DURATION_EMPTY = 0x10000,\r\n  DEFAULT_BASE_IS_MOOF = 0x20000\r\n}\r\n\r\nexport const enum TRUNFlags {\r\n  DATA_OFFSET = 0x01,\r\n  FIRST_FLAG = 0x04,\r\n  DURATION = 0x100,\r\n  SIZE = 0x200,\r\n  FLAGS = 0x400,\r\n  CTS_OFFSET = 0x800\r\n}\r\n\r\nexport const enum SampleFlags {\r\n  DEGRADATION_PRIORITY_MASK = 0x0000ffff,\r\n  IS_NON_SYN = 0x00010000,\r\n  PADDING_MASK = 0x000e0000,\r\n  REDUNDANCY_MASK = 0x00300000,\r\n  DEPENDED_MASK = 0x00c00000,\r\n  DEPENDS_MASK = 0x03000000,\r\n  DEPENDS_NO = 0x02000000,\r\n  DEPENDS_YES = 0x01000000\r\n}\r\n\r\nexport const enum MP4Tag {\r\n  MP4_O_DESCR_TAG = 0x01,\r\n  MP4_IO_DESCR_TAG = 0x02,\r\n  MP4_ES_DESCR_TAG = 0x03,\r\n  MP4_DEC_CONFIG_DESCR_TAG = 0x04,\r\n  MP4_DEC_SPECIFIC_DESCR_TAG = 0x05,\r\n  MP4_SL_DESCR_TAG = 0x06\r\n}\r\n\r\nexport const enum TKHDFlags {\r\n  ENABLED = 0x0001,\r\n  IN_MOVIE = 0x0002,\r\n  IN_PREVIEW = 0x0004,\r\n  POSTER = 0x0008\r\n}\r\n","/*\r\n * libmedia create fragment track\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport { FragmentTrack } from '../type'\r\n\r\nexport default function createFragmentTrack(): FragmentTrack {\r\n  return {\r\n    trackId: 0,\r\n    baseDataOffset: 0n,\r\n    defaultSampleDuration: 0,\r\n    defaultSampleSize: 0,\r\n    defaultSampleFlags: 0,\r\n    baseMediaDecodeTime: 0n,\r\n    sampleCount: 0,\r\n    dataOffset: 0,\r\n    remainDataOffsets: [],\r\n    remainDataOffsetIndex: [],\r\n    dataOffsetPos: 0n,\r\n    firstSampleFlags: 0,\r\n    sampleDurations: [],\r\n    sampleSizes: [],\r\n    sampleFlags: [],\r\n    sampleCompositionTimeOffset: [],\r\n    baseIsMoof: false,\r\n    ioWriter: null,\r\n    buffers: [],\r\n    lastFragIndexDts: 0n,\r\n    tfdtDelay: NOPTS_VALUE_BIGINT,\r\n    trunPtsDelay: 0n\r\n  }\r\n}\r\n","/*\r\n * libmedia create mov context\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { MOVContext } from '../type'\r\nimport { NOPTS_VALUE, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\n\r\nexport default function createMovContext(): MOVContext {\r\n  return {\r\n    isom: false,\r\n    timescale: NOPTS_VALUE,\r\n    duration: NOPTS_VALUE_BIGINT,\r\n    foundMoov: false,\r\n    foundMdat: false,\r\n    majorBrand: 0,\r\n    minorVersion: 0,\r\n    compatibleBrand: [],\r\n    creationTime: 0n,\r\n    modificationTime: 0n,\r\n    rate: NOPTS_VALUE,\r\n    volume: NOPTS_VALUE,\r\n    matrix: null,\r\n    nextTrackId: 1,\r\n    fragment: false,\r\n    trexs: [],\r\n    currentFragment: null,\r\n    boxsPositionInfo: [],\r\n    holdMoovPos: 0n,\r\n    currentChunk: null\r\n  }\r\n}\r\n","/*\r\n * libmedia create mov stream context\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { MOVStreamContext } from '../type'\r\nimport { NOPTS_VALUE, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\n\r\nexport default function createMovStreamContext(): MOVStreamContext {\r\n  return {\r\n    chunkOffsets: null,\r\n    cttsSampleCounts: null,\r\n    cttsSampleOffsets: null,\r\n    stscFirstChunk: null,\r\n    stscSamplesPerChunk: null,\r\n    stscSampleDescriptionIndex: null,\r\n    stssSampleNumbersMap: null,\r\n    stssSampleNumbers: null,\r\n    sampleSizes: null,\r\n    sttsSampleCounts: null,\r\n    sttsSampleDeltas: null,\r\n\r\n    duration: 0n,\r\n    trackId: NOPTS_VALUE,\r\n    layer: 0,\r\n    alternateGroup: 0,\r\n    volume: 0,\r\n    matrix: null,\r\n    width: 0,\r\n    height: 0,\r\n\r\n    audioCid: 0,\r\n    samplesPerFrame: 0,\r\n    bytesPerFrame: 0,\r\n\r\n    currentSample: 0,\r\n    sampleEnd: false,\r\n    samplesIndex: [],\r\n    samplesEncryption: [],\r\n    fragIndexes: [],\r\n\r\n    lastPts: NOPTS_VALUE_BIGINT,\r\n    lastDts: NOPTS_VALUE_BIGINT,\r\n    startDts: NOPTS_VALUE_BIGINT,\r\n    startCT: NOPTS_VALUE,\r\n    startPts: NOPTS_VALUE_BIGINT,\r\n    lastDuration: 0,\r\n    chunkCount: 0,\r\n    firstWrote: false,\r\n    lastStscCount: 0,\r\n    perStreamGrouping: false,\r\n    index: 0,\r\n    flags: 0\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 identify defined\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport mktag from '../../function/mktag'\r\nimport { AVCodecID } from 'avutil/codec'\r\nimport { AVMediaType } from 'avutil/codec'\r\nimport { BoxType } from './boxType'\r\n\r\nexport const Mp4Tag2AVCodecID = {\r\n  mp4v: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  avc1: AVCodecID.AV_CODEC_ID_H264,\r\n  avc3: AVCodecID.AV_CODEC_ID_H264,\r\n  hev1: AVCodecID.AV_CODEC_ID_HEVC,\r\n  hvc1: AVCodecID.AV_CODEC_ID_HEVC,\r\n  vvc1: AVCodecID.AV_CODEC_ID_VVC,\r\n  vvi1: AVCodecID.AV_CODEC_ID_VVC,\r\n  vp09: AVCodecID.AV_CODEC_ID_VP9,\r\n  av01: AVCodecID.AV_CODEC_ID_AV1,\r\n  mp4a: AVCodecID.AV_CODEC_ID_AAC,\r\n  opus: AVCodecID.AV_CODEC_ID_OPUS\r\n}\r\n\r\nexport const AVCodecID2Mp4a = {\r\n  [AVCodecID.AV_CODEC_ID_AAC]: 0x40,\r\n  [AVCodecID.AV_CODEC_ID_MP3]: 0x69,\r\n  [AVCodecID.AV_CODEC_ID_OPUS]: 0xAD,\r\n  [AVCodecID.AV_CODEC_ID_FLAC]: 0xC1,\r\n  [AVCodecID.AV_CODEC_ID_VORBIS]: 0xDD,\r\n\r\n  [AVCodecID.AV_CODEC_ID_MPEG4]: 0x20,\r\n  [AVCodecID.AV_CODEC_ID_H264]: 0x21,\r\n  [AVCodecID.AV_CODEC_ID_HEVC]: 0x23,\r\n  [AVCodecID.AV_CODEC_ID_VVC]: 0x33,\r\n  [AVCodecID.AV_CODEC_ID_VP9]: 0xB1,\r\n  [AVCodecID.AV_CODEC_ID_NONE]: 0\r\n}\r\n\r\nexport const Mp4aObj2AVCodecID = {\r\n  0x20: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  0x21: AVCodecID.AV_CODEC_ID_H264,\r\n  0x23: AVCodecID.AV_CODEC_ID_HEVC,\r\n  0x33: AVCodecID.AV_CODEC_ID_VVC,\r\n  0xB1: AVCodecID.AV_CODEC_ID_VP9,\r\n\r\n  0x40: AVCodecID.AV_CODEC_ID_AAC,\r\n  0x66: AVCodecID.AV_CODEC_ID_AAC,\r\n  0x67: AVCodecID.AV_CODEC_ID_AAC,\r\n  0x68: AVCodecID.AV_CODEC_ID_AAC,\r\n  0x69: AVCodecID.AV_CODEC_ID_MP3,\r\n  0x6B: AVCodecID.AV_CODEC_ID_MP3,\r\n  0xAD: AVCodecID.AV_CODEC_ID_OPUS,\r\n  0xC1: AVCodecID.AV_CODEC_ID_FLAC,\r\n  0xDD: AVCodecID.AV_CODEC_ID_VORBIS,\r\n  0: AVCodecID.AV_CODEC_ID_NONE\r\n}\r\n\r\nexport const HandlerType2MediaType = {\r\n  vide: AVMediaType.AVMEDIA_TYPE_VIDEO,\r\n  soun: AVMediaType.AVMEDIA_TYPE_AUDIO,\r\n  clcp: AVMediaType.AVMEDIA_TYPE_SUBTITLE,\r\n  sbtl: AVMediaType.AVMEDIA_TYPE_SUBTITLE,\r\n  subt: AVMediaType.AVMEDIA_TYPE_SUBTITLE,\r\n  subp: AVMediaType.AVMEDIA_TYPE_SUBTITLE,\r\n  text: AVMediaType.AVMEDIA_TYPE_SUBTITLE\r\n}\r\n\r\nexport const tag2CodecId = {\r\n  [mktag(BoxType.MP4A)]: AVCodecID.AV_CODEC_ID_AAC,\r\n  [0x6D730055]: AVCodecID.AV_CODEC_ID_MP3,\r\n  [mktag('Opus')]: AVCodecID.AV_CODEC_ID_OPUS,\r\n  [mktag('fLaC')]: AVCodecID.AV_CODEC_ID_FLAC,\r\n  [mktag('spex')]: AVCodecID.AV_CODEC_ID_SPEEX,\r\n  [mktag('SPXN')]: AVCodecID.AV_CODEC_ID_SPEEX,\r\n  [mktag('ac-3')]: AVCodecID.AV_CODEC_ID_AC3,\r\n  [mktag('sac3')]: AVCodecID.AV_CODEC_ID_AC3,\r\n\r\n  [mktag[BoxType.MP4V]]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktag('av01')]: AVCodecID.AV_CODEC_ID_AV1,\r\n  [mktag('vp08')]: AVCodecID.AV_CODEC_ID_VP8,\r\n  [mktag('vp09')]: AVCodecID.AV_CODEC_ID_VP9,\r\n  [mktag('avc1')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktag('hev1')]: AVCodecID.AV_CODEC_ID_HEVC,\r\n  [mktag('hvc1')]: AVCodecID.AV_CODEC_ID_HEVC,\r\n  [mktag('vvc1')]: AVCodecID.AV_CODEC_ID_VVC,\r\n  [mktag('vvi1')]: AVCodecID.AV_CODEC_ID_VVC,\r\n\r\n  [mktag('text')]: AVCodecID.AV_CODEC_ID_MOV_TEXT,\r\n  [mktag('tx3g')]: AVCodecID.AV_CODEC_ID_MOV_TEXT\r\n}\r\n\r\nexport const enum MovFragmentMode {\r\n  GOP,\r\n  FRAME\r\n}\r\n\r\nexport const enum MovMode {\r\n  MP4,\r\n  MOV\r\n}\r\n","/*\r\n * libmedia string tag to uint32 in big end\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as logger from 'common/util/logger'\r\n\r\nexport default function mktag(tag: string): number {\r\n  if (tag.length !== 4) {\r\n    logger.warn(`tag length is not 4, tag: ${tag}`)\r\n  }\r\n\r\n  let value = 0\r\n  for (let i = 0; i < 4; i++) {\r\n    value = (value << 8) | tag.charCodeAt(i)\r\n  }\r\n\r\n  return value\r\n}\r\n","/*\r\n * libmedia ac3 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVChannelLayout } from '../audiosamplefmt'\r\nimport BitReader from 'common/io/BitReader'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport const enum AC3DeltaStrategy {\r\n  DBA_REUSE = 0,\r\n  DBA_NEW,\r\n  DBA_NONE,\r\n  DBA_RESERVED\r\n}\r\n\r\nexport const enum AC3ChannelMode {\r\n  AC3_CHMODE_DUALMONO = 0,\r\n  AC3_CHMODE_MONO,\r\n  AC3_CHMODE_STEREO,\r\n  AC3_CHMODE_3F,\r\n  AC3_CHMODE_2F1R,\r\n  AC3_CHMODE_3F1R,\r\n  AC3_CHMODE_2F2R,\r\n  AC3_CHMODE_3F2R\r\n}\r\n\r\nexport const enum AC3DolbySurroundMode {\r\n  AC3_DSURMOD_NOTINDICATED = 0,\r\n  AC3_DSURMOD_OFF,\r\n  AC3_DSURMOD_ON,\r\n  AC3_DSURMOD_RESERVED\r\n}\r\n\r\nexport const enum AC3DolbySurroundEXMode {\r\n  AC3_DSUREXMOD_NOTINDICATED = 0,\r\n  AC3_DSUREXMOD_OFF,\r\n  AC3_DSUREXMOD_ON,\r\n  AC3_DSUREXMOD_PLIIZ\r\n}\r\n\r\nexport const enum AC3DolbyHeadphoneMode {\r\n  AC3_DHEADPHONMOD_NOTINDICATED = 0,\r\n  AC3_DHEADPHONMOD_OFF,\r\n  AC3_DHEADPHONMOD_ON,\r\n  AC3_DHEADPHONMOD_RESERVED\r\n}\r\n\r\nexport const enum AC3PreferredStereoDownmixMode {\r\n  AC3_DMIXMOD_NOTINDICATED = 0,\r\n  AC3_DMIXMOD_LTRT,\r\n  AC3_DMIXMOD_LORO,\r\n  // reserved value in A/52, but used by encoders to indicate DPL2\r\n  AC3_DMIXMOD_DPLII\r\n}\r\n\r\nexport const enum EAC3FrameType {\r\n  EAC3_FRAME_TYPE_INDEPENDENT = 0,\r\n  EAC3_FRAME_TYPE_DEPENDENT,\r\n  EAC3_FRAME_TYPE_AC3_CONVERT,\r\n  EAC3_FRAME_TYPE_RESERVED\r\n}\r\n\r\nexport const AC3ChannelLayout: uint32[] = [\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_STEREO,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_MONO,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_STEREO,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_SURROUND,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_2_1,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_4POINT0,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_2_2,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_5POINT0\r\n]\r\n\r\nexport interface AC3HeaderInfo {\r\n  syncWord: uint16\r\n  crc1: uint16\r\n  srCode: uint8\r\n  bitstreamId: uint8\r\n  bitstreamMode: uint8\r\n  channelMode: uint8\r\n  lfeOn: uint8\r\n  frameType: uint8\r\n  substreamId: int32\r\n  centerMixLevel: int32\r\n  surroundMixLevel: int32\r\n  channelMap: uint16\r\n  numBlocks: int32\r\n  dolbySurroundMode: int32\r\n  srShift: uint8\r\n  sampleRate: uint16\r\n  bitrate: uint32\r\n  channels: uint8\r\n  frameSize: uint16\r\n  channelLayout: uint64\r\n  ac3BitrateCode: int8\r\n}\r\n\r\nconst AC3FrameSizeTab = [\r\n  [ 64,   69,   96   ],\r\n  [ 64,   70,   96   ],\r\n  [ 80,   87,   120  ],\r\n  [ 80,   88,   120  ],\r\n  [ 96,   104,  144  ],\r\n  [ 96,   105,  144  ],\r\n  [ 112,  121,  168  ],\r\n  [ 112,  122,  168  ],\r\n  [ 128,  139,  192  ],\r\n  [ 128,  140,  192  ],\r\n  [ 160,  174,  240  ],\r\n  [ 160,  175,  240  ],\r\n  [ 192,  208,  288  ],\r\n  [ 192,  209,  288  ],\r\n  [ 224,  243,  336  ],\r\n  [ 224,  244,  336  ],\r\n  [ 256,  278,  384  ],\r\n  [ 256,  279,  384  ],\r\n  [ 320,  348,  480  ],\r\n  [ 320,  349,  480  ],\r\n  [ 384,  417,  576  ],\r\n  [ 384,  418,  576  ],\r\n  [ 448,  487,  672  ],\r\n  [ 448,  488,  672  ],\r\n  [ 512,  557,  768  ],\r\n  [ 512,  558,  768  ],\r\n  [ 640,  696,  960  ],\r\n  [ 640,  697,  960  ],\r\n  [ 768,  835,  1152 ],\r\n  [ 768,  836,  1152 ],\r\n  [ 896,  975,  1344 ],\r\n  [ 896,  976,  1344 ],\r\n  [ 1024, 1114, 1536 ],\r\n  [ 1024, 1115, 1536 ],\r\n  [ 1152, 1253, 1728 ],\r\n  [ 1152, 1254, 1728 ],\r\n  [ 1280, 1393, 1920 ],\r\n  [ 1280, 1394, 1920 ],\r\n]\r\n\r\nconst CenterLevelsTab = [4, 5, 6, 5]\r\nconst SurroundLevelsTab = [4, 6, 7, 6]\r\nconst AC3SampleRateTab = [48000, 44100, 32000, 0]\r\nconst AC3BitrateTab = [\r\n  32, 40, 48, 56, 64, 80, 96, 112, 128,\r\n  160, 192, 224, 256, 320, 384, 448, 512, 576, 640\r\n]\r\nconst AC3ChannelsTab = [\r\n  2, 1, 2, 3, 3, 4, 4, 5\r\n]\r\n\r\nconst EAC3Blocks = [\r\n  1, 2, 3, 6\r\n]\r\n\r\nconst AC3_HEADER_SIZE = 7\r\n\r\nexport function parseHeader(buf: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader(buf.length)\r\n  bitReader.appendBuffer(buf)\r\n\r\n  const info: AC3HeaderInfo = {\r\n    syncWord: 0,\r\n    crc1: 0,\r\n    srCode: 0,\r\n    bitstreamId: 0,\r\n    bitstreamMode: 0,\r\n    channelMode: 0,\r\n    lfeOn: 0,\r\n    frameType: 0,\r\n    substreamId: 0,\r\n    centerMixLevel: 0,\r\n    surroundMixLevel: 0,\r\n    channelMap: 0,\r\n    numBlocks: 0,\r\n    dolbySurroundMode: 0,\r\n    srShift: 0,\r\n    sampleRate: 0,\r\n    bitrate: 0,\r\n    channels: 0,\r\n    frameSize: 0,\r\n    channelLayout: 0n,\r\n    ac3BitrateCode: 0\r\n  }\r\n\r\n  info.syncWord = bitReader.readU(16)\r\n\r\n  if (info.syncWord !== 0x0B77) {\r\n    return -1\r\n  }\r\n\r\n  info.bitstreamId = bitReader.peekU(29) & 0x1f\r\n\r\n  if (info.bitstreamId > 16) {\r\n    return -2\r\n  }\r\n\r\n  info.numBlocks = 6\r\n  info.ac3BitrateCode = -1\r\n  info.centerMixLevel = 5\r\n  info.surroundMixLevel = 6\r\n\r\n  info.dolbySurroundMode = AC3DolbySurroundMode.AC3_DSURMOD_NOTINDICATED\r\n\r\n  if (info.bitstreamId <= 10) {\r\n    info.crc1 = bitReader.readU(16)\r\n    info.srCode = bitReader.readU(2)\r\n\r\n    if (info.srCode === 3) {\r\n      return -3\r\n    }\r\n\r\n    const frameSizeCode = bitReader.readU(6)\r\n    if (frameSizeCode > 37) {\r\n      return -4\r\n    }\r\n\r\n    info.ac3BitrateCode = (frameSizeCode >> 1)\r\n\r\n    bitReader.readU(5)\r\n\r\n    info.bitstreamMode = bitReader.readU(3)\r\n    info.channelMode = bitReader.readU(3)\r\n\r\n    if (info.channelMode == AC3ChannelMode.AC3_CHMODE_STEREO) {\r\n      info.dolbySurroundMode = bitReader.readU(2)\r\n    }\r\n    else {\r\n      if ((info.channelMode & 1) && info.channelMode != AC3ChannelMode.AC3_CHMODE_MONO) {\r\n        info.centerMixLevel = CenterLevelsTab[bitReader.readU(2)]\r\n      }\r\n      if (info.channelMode & 4) {\r\n        info.surroundMixLevel = SurroundLevelsTab[bitReader.readU(2)]\r\n      }\r\n    }\r\n    info.lfeOn = bitReader.readU(1)\r\n\r\n    info.srShift = Math.max(info.bitstreamId, 8) - 8\r\n    info.sampleRate = AC3SampleRateTab[info.srCode] >> info.srShift\r\n    info.bitrate = (AC3BitrateTab[info.ac3BitrateCode] * 1000) >> info.srShift\r\n    info.channels = AC3ChannelsTab[info.channelMode] + info.lfeOn\r\n    info.frameSize = AC3FrameSizeTab[frameSizeCode][info.srCode] * 2\r\n    info.frameType = EAC3FrameType.EAC3_FRAME_TYPE_AC3_CONVERT\r\n    info.substreamId = 0\r\n  }\r\n  else {\r\n    /* Enhanced AC-3 */\r\n    info.crc1 = 0\r\n    info.frameType = bitReader.readU(2)\r\n    if (info.frameType == EAC3FrameType.EAC3_FRAME_TYPE_RESERVED) {\r\n      return -5\r\n    }\r\n    info.substreamId = bitReader.readU(3)\r\n\r\n    info.frameSize = (bitReader.readU(11) + 1) << 1\r\n    if (info.frameSize < AC3_HEADER_SIZE) {\r\n      return -6\r\n    }\r\n\r\n    info.srCode = bitReader.readU(2)\r\n    if (info.srCode == 3) {\r\n      const srCode2 = bitReader.readU(2)\r\n      if (srCode2 == 3) {\r\n        return -7\r\n      }\r\n      info.sampleRate = AC3SampleRateTab[srCode2] / 2\r\n      info.srShift = 1\r\n    }\r\n    else {\r\n      info.numBlocks = EAC3Blocks[bitReader.readU(2)]\r\n      info.sampleRate = AC3SampleRateTab[info.srCode]\r\n      info.srShift = 0\r\n    }\r\n\r\n    info.channelMode = bitReader.readU(3)\r\n    info.lfeOn = bitReader.readU(1)\r\n\r\n    info.bitrate = 8 * info.frameSize * info.sampleRate / (info.numBlocks * 256)\r\n    info.channels = AC3ChannelsTab[info.channelMode] + info.lfeOn\r\n  }\r\n  info.channelLayout = static_cast<uint64>(AC3ChannelLayout[info.channelMode])\r\n  if (info.lfeOn) {\r\n    info.channelLayout |= static_cast<uint64>(AVChannelLayout.AV_CHANNEL_LAYOUT_LOW_FREQUENCY as uint32)\r\n  }\r\n\r\n  return info\r\n}\r\n","/*\r\n * libmedia flac util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport Stream from '../AVStream'\r\nimport { AVPacketSideDataType } from '../codec'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport const enum MetaDataBlockType {\r\n  STREAMINFO,\r\n  PADDING,\r\n  APPLICATION,\r\n  SEEKTABLE,\r\n  VORBIS_COMMENT,\r\n  CUESHEET,\r\n  PICTURE\r\n}\r\n\r\nexport const enum FlacCHMode {\r\n  INDEPENDENT = 0,\r\n  LEFT_SIDE = 1,\r\n  RIGHT_SIDE = 2,\r\n  MID_SIDE = 3\r\n}\r\n\r\nexport const FLAC_STREAMINFO_SIZE = 34\r\nexport const FLAC_MAX_CHANNELS = 8\r\nexport const FLAC_MIN_BLOCKSIZE = 16\r\nexport const FLAC_MAX_BLOCKSIZE = 65535\r\nexport const FLAC_MIN_FRAME_SIZE = 10\r\n\r\nexport const SampleSizeTable: number[] = [0, 8, 12, 0, 16, 20, 24, 32]\r\n\r\nexport const SampleRateTable: number[] = [\r\n  0, 88200, 176400, 192000, 8000, 16000, 22050,\r\n  24000, 32000, 44100, 48000, 96000,\r\n  0, 0, 0, 0\r\n]\r\n\r\nexport const BlockSizeTable: number[] = [\r\n  0, 192, 576 << 0, 576 << 1, 576 << 2, 576 << 3, 0, 0,\r\n  256 << 0, 256 << 1, 256 << 2, 256 << 3, 256 << 4, 256 << 5, 256 << 6, 256 << 7\r\n]\r\n\r\nexport const enum FlacChmode {\r\n  FLAC_CHMODE_INDEPENDENT = 0,\r\n  FLAC_CHMODE_LEFT_SIDE   = 1,\r\n  FLAC_CHMODE_RIGHT_SIDE  = 2,\r\n  FLAC_CHMODE_MID_SIDE    = 3,\r\n}\r\n\r\nexport const enum FlacMetadataType {\r\n  FLAC_METADATA_TYPE_STREAMINFO = 0,\r\n  FLAC_METADATA_TYPE_PADDING,\r\n  FLAC_METADATA_TYPE_APPLICATION,\r\n  FLAC_METADATA_TYPE_SEEKTABLE,\r\n  FLAC_METADATA_TYPE_VORBIS_COMMENT,\r\n  FLAC_METADATA_TYPE_CUESHEET,\r\n  FLAC_METADATA_TYPE_PICTURE,\r\n  FLAC_METADATA_TYPE_INVALID = 127\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: Stream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length === FLAC_STREAMINFO_SIZE) {\r\n    const { bitsPerRawSample, sampleRate, channels } = getAVCodecParameters(extradata)\r\n    stream.codecpar.bitsPerRawSample = bitsPerRawSample\r\n    stream.codecpar.sampleRate = sampleRate\r\n    stream.codecpar.chLayout.nbChannels = channels\r\n  }\r\n}\r\n\r\nfunction getAVCodecParameters(extradata: Uint8ArrayInterface) {\r\n  const bufferReader = new BufferReader(extradata)\r\n  bufferReader.skip(10)\r\n  const value = bufferReader.readUint24()\r\n  const sampleRate = (value >> 4)\r\n  const channels = ((value & 0x0f) >>> 1) + 1\r\n  const bitPerSample = bufferReader.readUint8()\r\n  return {\r\n    sampleRate,\r\n    channels,\r\n    bitsPerRawSample: (((value & 0x01) << 4) | ((bitPerSample & 0xf0) >>> 4)) + 1\r\n  }\r\n}\r\n","/*\r\n * libmedia encryption util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport { EncryptionInfo, EncryptionInitInfo } from '../struct/encryption'\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\n\r\n// The format of the AVEncryptionInfo side data:\r\n// u32be scheme\r\n// u32be crypt_byte_block\r\n// u32be skip_byte_block\r\n// u32be key_id_size\r\n// u32be iv_size\r\n// u32be subsample_count\r\n// u8[key_id_size] key_id\r\n// u8[iv_size] iv\r\n// {\r\n//   u32be bytes_of_clear_data\r\n//   u32be bytes_of_protected_data\r\n// }[subsample_count]\r\n\r\nexport function encryptionSideData2Info(buffer: Uint8ArrayInterface): EncryptionInfo {\r\n  const bufferReader = new BufferReader(buffer, true)\r\n\r\n  const scheme = bufferReader.readUint32()\r\n  const cryptByteBlock = bufferReader.readUint32()\r\n  const skipByteBlock = bufferReader.readUint32()\r\n  const keyIdSize = bufferReader.readUint32()\r\n  const ivSize = bufferReader.readUint32()\r\n  const subsampleCount = bufferReader.readUint32()\r\n  const info: EncryptionInfo = {\r\n    scheme,\r\n    cryptByteBlock,\r\n    skipByteBlock,\r\n    keyId: bufferReader.readBuffer(keyIdSize),\r\n    iv: bufferReader.readBuffer(ivSize),\r\n    subsamples: []\r\n  }\r\n  if (subsampleCount) {\r\n    for (let i = 0; i < subsampleCount; i++) {\r\n      info.subsamples.push({\r\n        bytesOfClearData: bufferReader.readUint32(),\r\n        bytesOfProtectedData: bufferReader.readUint32()\r\n      })\r\n    }\r\n  }\r\n  return info\r\n}\r\n\r\nexport function encryptionInfo2SideData(info: EncryptionInfo): Uint8Array {\r\n  const buffer = new Uint8Array(4 * 6 + info.keyId.length + info.iv.length + info.subsamples.length * 8)\r\n  const writer = new BufferWriter(buffer, true)\r\n  writer.writeUint32(info.scheme)\r\n  writer.writeUint32(info.cryptByteBlock)\r\n  writer.writeUint32(info.skipByteBlock)\r\n  writer.writeUint32(info.keyId.length)\r\n  writer.writeUint32(info.iv.length)\r\n  writer.writeUint32(info.subsamples.length)\r\n  writer.writeBuffer(info.keyId)\r\n  writer.writeBuffer(info.iv)\r\n  info.subsamples.forEach((item) => {\r\n    writer.writeUint32(item.bytesOfClearData)\r\n    writer.writeUint32(item.bytesOfProtectedData)\r\n  })\r\n\r\n  return buffer\r\n}\r\n\r\n// The format of the AVEncryptionInitInfo side data:\r\n// u32be init_info_count\r\n// {\r\n//   u32be system_id_size\r\n//   u32be num_key_ids\r\n//   u32be key_id_size\r\n//   u32be data_size\r\n//   u8[system_id_size] system_id\r\n//   u8[key_id_size][num_key_id] key_ids\r\n//   u8[data_size] data\r\n// }[init_info_count]\r\n\r\nexport function encryptionSideData2InitInfo(buffer: Uint8ArrayInterface): EncryptionInitInfo[] {\r\n  const bufferReader = new BufferReader(buffer, true)\r\n\r\n  const count = bufferReader.readUint32()\r\n\r\n  const infos: EncryptionInitInfo[] = []\r\n  for (let i = 0; i < count; i++) {\r\n    const systemIdSize = bufferReader.readUint32()\r\n    const numKeyIds = bufferReader.readUint32()\r\n    const keyIdSize = bufferReader.readUint32()\r\n    const dataSize = bufferReader.readUint32()\r\n    const info: EncryptionInitInfo = {\r\n      systemId: bufferReader.readBuffer(systemIdSize),\r\n      keyIds: [],\r\n      data: null\r\n    }\r\n    if (numKeyIds) {\r\n      for (let i = 0; i < numKeyIds; i++) {\r\n        info.keyIds.push(bufferReader.readBuffer(keyIdSize))\r\n      }\r\n    }\r\n    info.data = bufferReader.readBuffer(dataSize)\r\n    infos.push(info)\r\n  }\r\n  return infos\r\n}\r\n\r\nexport function encryptionInitInfo2SideData(infos: EncryptionInitInfo[]): Uint8Array {\r\n  let size = 4\r\n  infos.forEach((info) => {\r\n    size += 4 * 4 + info.systemId.length + info.keyIds.length * (info.keyIds.length ? info.keyIds[0].length : 0) + info.data.length\r\n  })\r\n  const buffer = new Uint8Array(size)\r\n  const writer = new BufferWriter(buffer, true)\r\n  writer.writeUint32(infos.length)\r\n  infos.forEach((info) => {\r\n    writer.writeUint32(info.systemId.length)\r\n    writer.writeUint32(info.keyIds.length)\r\n    writer.writeUint32(info.keyIds.length ? info.keyIds[0].length : 0)\r\n    writer.writeUint32(info.data.length)\r\n    writer.writeBuffer(info.systemId)\r\n    info.keyIds.forEach((keyId) => {\r\n      writer.writeBuffer(keyId)\r\n    })\r\n    writer.writeBuffer(info.data)\r\n  })\r\n  return buffer\r\n}\r\n"],"names":[],"sourceRoot":""}