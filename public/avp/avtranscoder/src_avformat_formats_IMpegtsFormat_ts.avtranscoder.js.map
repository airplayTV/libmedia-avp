{"version":3,"file":"src_avformat_formats_IMpegtsFormat_ts.avtranscoder.js","mappings":"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","sources":["webpack://AVTranscoder/./src/avformat/bsf/AVBSFilter.ts","webpack://AVTranscoder/./src/avformat/bsf/aac/ADTS2RawFilter.ts","webpack://AVTranscoder/./src/avformat/bsf/aac/LATM2RawFilter.ts","webpack://AVTranscoder/./src/avformat/bsf/opus/Mpegts2RawFilter.ts","webpack://AVTranscoder/./src/avformat/formats/IFormat.ts","webpack://AVTranscoder/./src/avformat/formats/IMpegtsFormat.ts","webpack://AVTranscoder/./src/avformat/formats/mpegts/function/analyzeTSLength.ts","webpack://AVTranscoder/./src/avformat/formats/mpegts/function/clearTSSliceQueue.ts","webpack://AVTranscoder/./src/avformat/formats/mpegts/function/createMpegtsContext.ts","webpack://AVTranscoder/./src/avformat/formats/mpegts/function/createMpegtsStreamContext.ts","webpack://AVTranscoder/./src/avformat/formats/mpegts/function/handleSectionSlice.ts","webpack://AVTranscoder/./src/avformat/formats/mpegts/function/initStream.ts","webpack://AVTranscoder/./src/avformat/formats/mpegts/function/parseAdaptationField.ts","webpack://AVTranscoder/./src/avformat/formats/mpegts/function/parsePAT.ts","webpack://AVTranscoder/./src/avformat/formats/mpegts/function/parsePES.ts","webpack://AVTranscoder/./src/avformat/formats/mpegts/function/parsePESSlice.ts","webpack://AVTranscoder/./src/avformat/formats/mpegts/function/parsePMT.ts","webpack://AVTranscoder/./src/avformat/formats/mpegts/function/parseSCTE35.ts","webpack://AVTranscoder/./src/avformat/formats/mpegts/function/parseSection.ts","webpack://AVTranscoder/./src/avformat/formats/mpegts/impegts.ts","webpack://AVTranscoder/./src/avformat/formats/mpegts/mpegts.ts","webpack://AVTranscoder/./src/avformat/formats/mpegts/struct.ts","webpack://AVTranscoder/./src/avformat/function/getBytesByDuration.ts","webpack://AVTranscoder/./src/avformat/function/seekInBytes.ts","webpack://AVTranscoder/./src/avutil/codecs/aac.ts","webpack://AVTranscoder/./src/avutil/codecs/ac3.ts","webpack://AVTranscoder/./src/avutil/codecs/dts.ts","webpack://AVTranscoder/./src/avutil/codecs/mp3.ts","webpack://AVTranscoder/./src/avutil/codecs/opus.ts","webpack://AVTranscoder/./src/common/math/median.ts"],"sourcesContent":["/*\r\n * libmedia AVBSFilter\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport { avMallocz } from 'avutil/util/mem'\r\nimport { copyCodecParameters, freeCodecParameters } from 'avutil/util/codecparameters'\r\n\r\nexport default abstract class AVBSFilter {\r\n\r\n  inCodecpar: pointer<AVCodecParameters>\r\n  inTimeBase: Rational\r\n\r\n  outCodecpar: pointer<AVCodecParameters>\r\n\r\n  public init(codecpar: pointer<AVCodecParameters>, timeBase: pointer<Rational>): number {\r\n    this.inCodecpar = reinterpret_cast<pointer<AVCodecParameters>>(avMallocz(sizeof(AVCodecParameters)))\r\n    copyCodecParameters(this.inCodecpar, codecpar)\r\n\r\n    this.inTimeBase = {\r\n      den: timeBase.den,\r\n      num: timeBase.num\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  public destroy() {\r\n    if (this.inCodecpar) {\r\n      freeCodecParameters(this.inCodecpar)\r\n      this.inCodecpar = nullptr\r\n    }\r\n  }\r\n\r\n  public abstract sendAVPacket(avpacket: pointer<AVPacket>): number\r\n  public abstract receiveAVPacket(avpacket: pointer<AVPacket>): number\r\n  public abstract reset(): number\r\n}\r\n","/*\r\n * libmedia ADTS2RawFilter\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport AVBSFilter from '../AVBSFilter'\r\nimport { mapUint8Array, memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport * as logger from 'common/util/logger'\r\nimport * as errorType from 'avutil/error'\r\nimport { AV_TIME_BASE, AV_TIME_BASE_Q, NOPTS_VALUE, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport { avCodecParameters2Extradata } from 'avutil/codecs/aac'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport { avFree, avMalloc } from 'avutil/util/mem'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport { addAVPacketData, addAVPacketSideData, unrefAVPacket } from 'avutil/util/avpacket'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport * as aac from 'avutil/codecs/aac'\r\nimport * as is from 'common/util/is'\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\n\r\ninterface CacheItem {\r\n  duration: number\r\n  dts: bigint\r\n  buffer: Uint8Array\r\n  extradata: Uint8Array\r\n  pos: int64\r\n}\r\n\r\ninterface PendingItem extends CacheItem {\r\n  miss: number\r\n}\r\n\r\nexport default class ADTS2RawFilter extends AVBSFilter {\r\n\r\n  private streamMuxConfig: {\r\n    profile: number\r\n    sampleRate: number\r\n    channels: number\r\n  }\r\n\r\n  private caches: CacheItem[]\r\n  private pendingItem: PendingItem\r\n\r\n  public init(codecpar: pointer<AVCodecParameters>, timeBase: pointer<Rational>): number {\r\n    super.init(codecpar, timeBase)\r\n\r\n    this.caches = []\r\n    this.streamMuxConfig = {\r\n      profile: NOPTS_VALUE,\r\n      sampleRate: NOPTS_VALUE,\r\n      channels: NOPTS_VALUE\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  public sendAVPacket(avpacket: pointer<AVPacket>): number {\r\n    let i = 0\r\n\r\n    let lastDts = avpacket.dts !== NOPTS_VALUE_BIGINT ? avpacket.dts : avpacket.pts\r\n    let buffer = mapUint8Array(avpacket.data, reinterpret_cast<size>(avpacket.size)).slice()\r\n\r\n    if (this.pendingItem) {\r\n      this.pendingItem.buffer = concatTypeArray(Uint8Array, [this.pendingItem.buffer, buffer.subarray(0, this.pendingItem.miss)])\r\n      buffer = buffer.subarray(this.pendingItem.miss)\r\n      this.caches.push(this.pendingItem)\r\n      this.pendingItem = null\r\n    }\r\n\r\n    while (i < buffer.length) {\r\n\r\n      const info = aac.parseADTSHeader(buffer.subarray(i))\r\n\r\n      if (is.number(info)) {\r\n        let j = i + 1\r\n        for (; j < buffer.length - 1; j++) {\r\n          const syncWord = (buffer[j] << 4) | (buffer[j + 1] >> 4)\r\n          if (syncWord === 0xfff) {\r\n            i = j\r\n            break\r\n          }\r\n        }\r\n        if (j < buffer.length - 1) {\r\n          continue\r\n        }\r\n        logger.error('AACADTSParser parse failed')\r\n        return errorType.DATA_INVALID\r\n      }\r\n\r\n      const item: CacheItem = {\r\n        dts: lastDts,\r\n        buffer: null,\r\n        extradata: null,\r\n        duration: NOPTS_VALUE,\r\n        pos: avpacket.pos\r\n      }\r\n\r\n      item.buffer = buffer.subarray(i + info.headerLength, i + info.headerLength + info.framePayloadLength)\r\n\r\n      this.streamMuxConfig.profile = info.profile\r\n      this.streamMuxConfig.sampleRate = info.sampleRate\r\n      this.streamMuxConfig.channels = info.channels\r\n\r\n      const hasNewExtraData = this.inCodecpar.profile !== this.streamMuxConfig.profile\r\n        || this.inCodecpar.sampleRate !== this.streamMuxConfig.sampleRate\r\n        || this.inCodecpar.chLayout.nbChannels !== this.streamMuxConfig.channels\r\n\r\n\r\n      const duration = avRescaleQ(\r\n        static_cast<int64>((info.numberOfRawDataBlocksInFrame + 1) * 1024 / this.streamMuxConfig.sampleRate * AV_TIME_BASE),\r\n        AV_TIME_BASE_Q,\r\n        this.inTimeBase\r\n      )\r\n\r\n      item.duration = Number(duration)\r\n\r\n      if (hasNewExtraData) {\r\n        this.inCodecpar.profile = this.streamMuxConfig.profile\r\n        this.inCodecpar.sampleRate = this.streamMuxConfig.sampleRate\r\n        this.inCodecpar.chLayout.nbChannels = this.streamMuxConfig.channels\r\n\r\n        const extradata = avCodecParameters2Extradata(accessof(this.inCodecpar))\r\n\r\n        if (this.inCodecpar.extradata) {\r\n          avFree(this.inCodecpar.extradata)\r\n        }\r\n        this.inCodecpar.extradata = avMalloc(extradata.length)\r\n        memcpyFromUint8Array(this.inCodecpar.extradata, extradata.length, extradata)\r\n        this.inCodecpar.extradataSize = extradata.length\r\n        item.extradata = extradata\r\n      }\r\n\r\n      if (item.buffer.length < info.framePayloadLength) {\r\n        this.pendingItem = {\r\n          ...item,\r\n          miss: info.framePayloadLength - item.buffer.length\r\n        }\r\n      }\r\n      else {\r\n        this.caches.push(item)\r\n      }\r\n\r\n      i += info.aacFrameLength\r\n      lastDts += duration\r\n    }\r\n    return 0\r\n  }\r\n\r\n  public receiveAVPacket(avpacket: pointer<AVPacket>): number {\r\n    if (this.caches.length) {\r\n\r\n      unrefAVPacket(avpacket)\r\n\r\n      const item = this.caches.shift()!\r\n\r\n      const data: pointer<uint8> = avMalloc(item.buffer.length)\r\n      memcpyFromUint8Array(data, item.buffer.length, item.buffer)\r\n      addAVPacketData(avpacket, data, item.buffer.length)\r\n\r\n      avpacket.dts = avpacket.pts = item.dts\r\n      avpacket.pos = item.pos\r\n      avpacket.duration = static_cast<int64>(item.duration)\r\n      avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n      if (item.extradata) {\r\n        const extradata = avMalloc(item.extradata.length)\r\n        memcpyFromUint8Array(extradata, item.extradata.length, item.extradata)\r\n        addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, extradata, item.extradata.length)\r\n      }\r\n      return 0\r\n    }\r\n    else {\r\n      return errorType.EOF\r\n    }\r\n  }\r\n\r\n  public reset(): number {\r\n    this.pendingItem = null\r\n    this.caches.length = 0\r\n    return 0\r\n  }\r\n}\r\n","/*\r\n * libmedia LATM2RawFilter\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport AVBSFilter from '../AVBSFilter'\r\nimport { mapUint8Array, memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport * as logger from 'common/util/logger'\r\nimport * as errorType from 'avutil/error'\r\nimport { AV_TIME_BASE, AV_TIME_BASE_Q, NOPTS_VALUE, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport { avCodecParameters2Extradata } from 'avutil/codecs/aac'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport { avFree, avMalloc } from 'avutil/util/mem'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport { addAVPacketData, addAVPacketSideData, unrefAVPacket } from 'avutil/util/avpacket'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport BitReader from 'common/io/BitReader'\r\nimport * as aac from 'avutil/codecs/aac'\r\nimport * as is from 'common/util/is'\r\n\r\n\r\nexport default class LATM2RawFilter extends AVBSFilter {\r\n\r\n  private bitReader: BitReader\r\n\r\n  private streamMuxConfig: {\r\n    profile: number\r\n    sampleRate: number\r\n    channels: number\r\n  }\r\n\r\n  private caches: {\r\n    dts: bigint\r\n    buffer: Uint8Array\r\n    extradata: Uint8Array\r\n    pos: int64\r\n  }[]\r\n\r\n  private refSampleDuration: bigint\r\n\r\n  public init(codecpar: pointer<AVCodecParameters>, timeBase: pointer<Rational>): number {\r\n\r\n    super.init(codecpar, timeBase)\r\n\r\n    this.caches = []\r\n    this.refSampleDuration = 0n\r\n\r\n    this.bitReader = new BitReader()\r\n    this.streamMuxConfig = {\r\n      profile: NOPTS_VALUE,\r\n      sampleRate: NOPTS_VALUE,\r\n      channels: NOPTS_VALUE\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  public sendAVPacket(avpacket: pointer<AVPacket>): number {\r\n\r\n    const buffer = mapUint8Array(avpacket.data, reinterpret_cast<size>(avpacket.size))\r\n\r\n    this.bitReader.appendBuffer(buffer)\r\n\r\n    let lastDts = avpacket.dts !== NOPTS_VALUE_BIGINT ? avpacket.dts : avpacket.pts\r\n\r\n    while (this.bitReader.remainingLength() >= 20) {\r\n\r\n      const now = this.bitReader.getPointer()\r\n\r\n      const info = aac.parseLATMHeader(null, this.bitReader)\r\n\r\n      if (is.number(info)) {\r\n        let synced = false\r\n        while (this.bitReader.remainingLength() >= 20) {\r\n          const syncWord = this.bitReader.peekU(11)\r\n          if (syncWord === 0x2B7) {\r\n            synced = true\r\n            break\r\n          }\r\n          this.bitReader.readU1()\r\n        }\r\n        if (synced) {\r\n          continue\r\n        }\r\n        logger.error('AACLATMParser parse failed')\r\n        this.bitReader.reset()\r\n        return errorType.DATA_INVALID\r\n      }\r\n\r\n      if (info.framePayloadLength >= this.bitReader.remainingLength()) {\r\n        this.bitReader.skipPadding()\r\n        this.bitReader.setPointer(now)\r\n        break\r\n      }\r\n\r\n      if (!info.useSameStreamMux) {\r\n        this.streamMuxConfig.profile = info.profile\r\n        this.streamMuxConfig.sampleRate = info.sampleRate\r\n        this.streamMuxConfig.channels = info.channels\r\n      }\r\n\r\n      const length = info.framePayloadLength\r\n\r\n      const rawData = new Uint8Array(length)\r\n      for (let i = 0; i < length; i++) {\r\n        rawData[i] = this.bitReader.readU(8)\r\n      }\r\n\r\n      const item = {\r\n        dts: lastDts,\r\n        buffer: rawData,\r\n        extradata: null,\r\n        pos: avpacket.pos\r\n      }\r\n\r\n      const hasNewExtraData = this.inCodecpar.profile !== this.streamMuxConfig.profile\r\n        || this.inCodecpar.sampleRate !== this.streamMuxConfig.sampleRate\r\n        || this.inCodecpar.chLayout.nbChannels !== this.streamMuxConfig.channels\r\n\r\n      if (hasNewExtraData) {\r\n\r\n        this.refSampleDuration = avRescaleQ(\r\n          static_cast<int64>(1024 / this.streamMuxConfig.sampleRate * AV_TIME_BASE),\r\n          AV_TIME_BASE_Q,\r\n          this.inTimeBase\r\n        )\r\n\r\n        this.inCodecpar.profile = this.streamMuxConfig.profile\r\n        this.inCodecpar.sampleRate = this.streamMuxConfig.sampleRate\r\n        this.inCodecpar.chLayout.nbChannels = this.streamMuxConfig.channels\r\n\r\n        const extradata = avCodecParameters2Extradata(accessof(this.inCodecpar))\r\n\r\n        if (this.inCodecpar.extradata) {\r\n          avFree(this.inCodecpar.extradata)\r\n        }\r\n        this.inCodecpar.extradata = avMalloc(extradata.length)\r\n        memcpyFromUint8Array(this.inCodecpar.extradata, extradata.length, extradata)\r\n        this.inCodecpar.extradataSize = extradata.length\r\n        item.extradata = extradata\r\n      }\r\n\r\n      this.caches.push(item)\r\n      lastDts += this.refSampleDuration\r\n\r\n      this.bitReader.skipPadding()\r\n    }\r\n    return 0\r\n  }\r\n\r\n  public receiveAVPacket(avpacket: pointer<AVPacket>): number {\r\n    if (this.caches.length) {\r\n\r\n      unrefAVPacket(avpacket)\r\n\r\n      const item = this.caches.shift()\r\n\r\n      const data: pointer<uint8> = avMalloc(item.buffer.length)\r\n      memcpyFromUint8Array(data, item.buffer.length, item.buffer)\r\n      addAVPacketData(avpacket, data, item.buffer.length)\r\n\r\n      avpacket.dts = avpacket.pts = item.dts\r\n      avpacket.pos = item.pos\r\n      avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n      avpacket.duration = this.refSampleDuration\r\n      if (item.extradata) {\r\n        const extradata = avMalloc(item.extradata.length)\r\n        memcpyFromUint8Array(extradata, item.extradata.length, item.extradata)\r\n        addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, extradata, item.extradata.length)\r\n      }\r\n      return 0\r\n    }\r\n    else {\r\n      return errorType.EOF\r\n    }\r\n  }\r\n\r\n  public reset(): number {\r\n    this.bitReader.reset()\r\n    this.caches.length = 0\r\n    return 0\r\n  }\r\n}\r\n","/*\r\n * libmedia Mpegts2RawFilter\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport AVBSFilter from '../AVBSFilter'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport { AV_TIME_BASE, AV_TIME_BASE_Q, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport * as opus from 'avutil/codecs/opus'\r\nimport * as logger from 'common/util/logger'\r\nimport * as errorType from 'avutil/error'\r\nimport { addAVPacketData, getAVPacketData, unrefAVPacket } from 'avutil/util/avpacket'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport { memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\n\r\ninterface CacheItem {\r\n  duration: number\r\n  dts: bigint\r\n  buffer: Uint8Array\r\n  pos: int64\r\n}\r\n\r\ninterface PendingItem extends CacheItem {\r\n  miss: number\r\n}\r\n\r\nexport default class Mpegts2RawFilter extends AVBSFilter {\r\n\r\n  private caches: CacheItem[]\r\n  private pendingItem: PendingItem\r\n\r\n  public init(codecpar: pointer<AVCodecParameters>, timeBase: pointer<Rational>): number {\r\n    super.init(codecpar, timeBase)\r\n\r\n    this.caches = []\r\n\r\n    return 0\r\n  }\r\n\r\n  public sendAVPacket(avpacket: pointer<AVPacket>): number {\r\n    let i = 0\r\n\r\n    let lastDts = avpacket.dts !== NOPTS_VALUE_BIGINT ? avpacket.dts : avpacket.pts\r\n\r\n    let buffer = getAVPacketData(avpacket)\r\n\r\n    if (this.pendingItem) {\r\n      this.pendingItem.buffer = concatTypeArray(Uint8Array, [this.pendingItem.buffer, buffer.subarray(0, this.pendingItem.miss)])\r\n      buffer = buffer.subarray(this.pendingItem.miss)\r\n      this.caches.push(this.pendingItem)\r\n      this.pendingItem = null\r\n    }\r\n\r\n    while (i < buffer.length) {\r\n\r\n      const syncWord = (buffer[i] << 3) | (buffer[i + 1] >> 5)\r\n\r\n      if (syncWord !== 0x3ff) {\r\n        let j = i + 1\r\n        for (; j < buffer.length - 1; j++) {\r\n          const syncWord = (buffer[j] << 3) | (buffer[j + 1] >> 5)\r\n          if (syncWord === 0x3ff) {\r\n            i = j\r\n            break\r\n          }\r\n        }\r\n        if (j < buffer.length - 1) {\r\n          continue\r\n        }\r\n        logger.error(`MpegtsOpusParser found syncWord not 0x3ff, got: 0x${syncWord.toString(16)}`)\r\n        return errorType.DATA_INVALID\r\n      }\r\n\r\n      const opusPendingTrimStart = (buffer[i + 1] & 0x10) !== 0\r\n      const trimEnd = (buffer[i + 1] & 0x08) !== 0\r\n      let index = i + 2\r\n      let size = 0\r\n\r\n      while (buffer[index] === 0xFF) {\r\n        size += 255\r\n        index++\r\n      }\r\n      size += buffer[index]\r\n      index++\r\n\r\n      index += opusPendingTrimStart ? 2 : 0\r\n      index += trimEnd ? 2 : 0\r\n\r\n      let samples = buffer.subarray(index, index + size)\r\n\r\n      const sampleRate = this.inCodecpar.sampleRate > 0 ? this.inCodecpar.sampleRate : 48000\r\n\r\n      const duration = avRescaleQ(\r\n        static_cast<int64>(opus.getBufferSamples(samples) / sampleRate * AV_TIME_BASE),\r\n        AV_TIME_BASE_Q,\r\n        this.inTimeBase\r\n      )\r\n\r\n      const item: CacheItem = {\r\n        dts: lastDts,\r\n        buffer: samples.slice(),\r\n        duration: Number(duration),\r\n        pos: avpacket.pos\r\n      }\r\n      if (item.buffer.length < size) {\r\n        this.pendingItem = {\r\n          ...item,\r\n          miss: size - item.buffer.length\r\n        }\r\n      }\r\n      else {\r\n        this.caches.push(item)\r\n      }\r\n      lastDts += duration\r\n      i = index + size\r\n    }\r\n  }\r\n\r\n  public receiveAVPacket(avpacket: pointer<AVPacket>): number {\r\n    if (this.caches.length) {\r\n\r\n      unrefAVPacket(avpacket)\r\n\r\n      const item = this.caches.shift()\r\n\r\n      const data: pointer<uint8> = avMalloc(item.buffer.length)\r\n      memcpyFromUint8Array(data, item.buffer.length, item.buffer)\r\n      addAVPacketData(avpacket, data, item.buffer.length)\r\n\r\n      avpacket.dts = avpacket.pts = item.dts\r\n      avpacket.pos = item.pos\r\n      avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n      avpacket.duration = static_cast<int64>(item.duration)\r\n      return 0\r\n    }\r\n    else {\r\n      return errorType.DATA_INVALID\r\n    }\r\n  }\r\n\r\n  public reset(): number {\r\n    this.pendingItem = null\r\n    this.caches.length = 0\r\n    return 0\r\n  }\r\n}\r\n","/*\r\n * libmedia abstract format decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport { AVFormat } from 'avutil/avformat'\r\n\r\nexport default abstract class IFormat {\r\n\r\n  public type: AVFormat = AVFormat.UNKNOWN\r\n\r\n  public onStreamAdd: (stream: Stream) => void\r\n\r\n  public abstract init(formatContext: AVIFormatContext): void\r\n\r\n  public async destroy(formatContext: AVIFormatContext): Promise<void> {}\r\n\r\n  public abstract getAnalyzeStreamsCount(): number\r\n  public abstract readHeader(formatContext: AVIFormatContext): Promise<number>\r\n  public abstract readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number>\r\n\r\n  /**\r\n   * seek\r\n   * \r\n   * @param context \r\n   * @param stream \r\n   * @param timestamp 毫秒时间戳\r\n   * @param flags \r\n   * \r\n   * @returns 返回 seek 之前的下一个 avpacket pos（若不知道返回 0n 方便之后可以再 seek 回来）返回负数表示 seek 失败\r\n   */\r\n  public abstract seek(\r\n    formatContext: AVIFormatContext,\r\n    stream: Stream,\r\n    timestamp: int64,\r\n    flags: int32\r\n  ): Promise<int64>\r\n}\r\n","/*\r\n * libmedia mpegts decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport * as logger from 'common/util/logger'\r\n\r\nimport { IOError } from 'common/io/error'\r\nimport { MpegtsContext, MpegtsStreamContext } from './mpegts/type'\r\nimport createMpegtsContext from './mpegts/function/createMpegtsContext'\r\nimport * as impegts from './mpegts/impegts'\r\nimport * as mpegts from './mpegts/mpegts'\r\nimport handleSectionSlice from './mpegts/function/handleSectionSlice'\r\nimport * as errorType from 'avutil/error'\r\nimport parsePES from './mpegts/function/parsePES'\r\nimport parsePESSlice from './mpegts/function/parsePESSlice'\r\nimport clearTSSliceQueue from './mpegts/function/clearTSSliceQueue'\r\nimport { PES, TSSliceQueue } from './mpegts/struct'\r\nimport IFormat from './IFormat'\r\nimport initStream from './mpegts/function/initStream'\r\nimport { AVFormat, AVSeekFlags } from 'avutil/avformat'\r\nimport { addAVPacketData, createAVPacket, deleteAVPacketSideData,\r\n  destroyAVPacket, getAVPacketData, getAVPacketSideData\r\n} from 'avutil/util/avpacket'\r\nimport { AV_MILLI_TIME_BASE_Q, NOPTS_VALUE, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport AVStream from 'avutil/AVStream'\r\nimport seekInBytes from '../function/seekInBytes'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport * as array from 'common/util/array'\r\nimport * as mp3 from 'avutil/codecs/mp3'\r\nimport * as h264 from 'avutil/codecs/h264'\r\nimport * as hevc from 'avutil/codecs/hevc'\r\nimport * as vvc from 'avutil/codecs/vvc'\r\nimport * as aac from 'avutil/codecs/aac'\r\nimport * as opus from 'avutil/codecs/opus'\r\nimport * as ac3 from 'avutil/codecs/ac3'\r\nimport * as dts from 'avutil/codecs/dts'\r\nimport { AVCodecID, AVMediaType, AVPacketSideDataType } from 'avutil/codec'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport { memcpy, mapSafeUint8Array, memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport * as is from 'common/util/is'\r\nimport * as nalusUtil from 'avutil/util/nalu'\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\n\r\nexport default class IMpegtsFormat extends IFormat {\r\n\r\n  public type: AVFormat = AVFormat.MPEGTS\r\n\r\n  private context: MpegtsContext\r\n\r\n  private firstTSPacketPos: int64\r\n\r\n  private cacheAVPacket: pointer<AVPacket>\r\n\r\n  constructor() {\r\n    super()\r\n    this.context = createMpegtsContext()\r\n  }\r\n\r\n  public init(formatContext: AVIFormatContext): void {\r\n    if (formatContext.ioReader) {\r\n      formatContext.ioReader.setEndian(true)\r\n    }\r\n    this.cacheAVPacket = nullptr\r\n  }\r\n\r\n  public async destroy(formatContext: AVIFormatContext) {\r\n    if (this.cacheAVPacket) {\r\n      destroyAVPacket(this.cacheAVPacket)\r\n      this.cacheAVPacket = nullptr\r\n    }\r\n    array.each(formatContext.streams, (stream) => {\r\n      const streamContext = stream.privData as MpegtsStreamContext\r\n      if (streamContext.filter) {\r\n        streamContext.filter.destroy()\r\n        streamContext.filter = null\r\n      }\r\n    })\r\n  }\r\n\r\n  public async readHeader(formatContext: AVIFormatContext): Promise<number> {\r\n    try {\r\n\r\n      let ret = 0\r\n\r\n      let packetSize = await impegts.getPacketSize(formatContext.ioReader)\r\n\r\n      if (!packetSize) {\r\n        packetSize = mpegts.TS_PACKET_SIZE\r\n      }\r\n\r\n      this.context.tsPacketSize = packetSize\r\n\r\n      // 码流可能存在一些非 ts packet 数据，跳过\r\n      if (this.context.tsPacketSize !== mpegts.TS_DVHS_PACKET_SIZE\r\n        && (await formatContext.ioReader.peekUint8() !== 0x47)\r\n      ) {\r\n        await this.syncTSPacket(formatContext, false)\r\n      }\r\n\r\n      while ((!this.context.hasPAT || !this.context.hasPMT)) {\r\n        const tsPacket = await impegts.parseTSPacket(formatContext.ioReader, this.context)\r\n\r\n        if (!tsPacket.payload) {\r\n          continue\r\n        }\r\n\r\n        if (tsPacket.pid === 0\r\n          || tsPacket.pid === this.context.currentPmtPid\r\n          || this.context.pmt.pid2StreamType.get(tsPacket.pid) === mpegts.TSStreamType.kSCTE35\r\n        ) {\r\n          handleSectionSlice(tsPacket, this.context)\r\n        }\r\n      }\r\n\r\n      if (!this.context.hasPAT || !this.context.hasPMT) {\r\n        return errorType.DATA_INVALID\r\n      }\r\n      else {\r\n        this.firstTSPacketPos = formatContext.ioReader.getPos()\r\n      }\r\n\r\n      return ret\r\n    }\r\n    catch (error) {\r\n      logger.error(error.message)\r\n      return formatContext.ioReader.error\r\n    }\r\n\r\n  }\r\n\r\n  private checkExtradata(avpacket: pointer<AVPacket>, stream: AVStream) {\r\n    if (!stream.codecpar.extradata) {\r\n      let element = getAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA)\r\n      if (!element) {\r\n        return\r\n      }\r\n      stream.codecpar.extradata = avMalloc(element.size)\r\n      memcpy(stream.codecpar.extradata, element.data, element.size)\r\n      stream.codecpar.extradataSize = static_cast<int32>(element.size)\r\n      deleteAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA)\r\n\r\n      if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC) {\r\n        aac.parseAVCodecParameters(stream, mapSafeUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize)))\r\n      }\r\n      else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_OPUS) {\r\n        opus.parseAVCodecParameters(stream, mapSafeUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize)))\r\n      }\r\n    }\r\n  }\r\n\r\n  private handlePES(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>, pes: PES, stream: AVStream) {\r\n\r\n    if (pes.randomAccessIndicator || stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_AUDIO) {\r\n      avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n    }\r\n\r\n    const streamContext = stream.privData as MpegtsStreamContext\r\n    if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n      || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H265\r\n      || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n    ) {\r\n      avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_H26X_ANNEXB\r\n    }\r\n\r\n    avpacket.streamIndex = stream.index\r\n    avpacket.dts = pes.dts\r\n    avpacket.pts = pes.pts\r\n    avpacket.pos = pes.pos\r\n    avpacket.timeBase.den = 90000\r\n    avpacket.timeBase.num = 1\r\n    avpacket.flags |= pes.flags\r\n\r\n    if (stream.startTime === NOPTS_VALUE_BIGINT) {\r\n      stream.startTime = avpacket.pts || avpacket.dts\r\n    }\r\n\r\n    const payload: pointer<uint8> = avMalloc(pes.payload.length)\r\n    memcpyFromUint8Array(payload, pes.payload.length, pes.payload)\r\n    addAVPacketData(avpacket, payload, pes.payload.length)\r\n\r\n    if (streamContext.filter) {\r\n      let ret = 0\r\n      ret = streamContext.filter.sendAVPacket(avpacket)\r\n\r\n      if (ret < 0) {\r\n        logger.error('send avpacket to bsf failed')\r\n        return errorType.DATA_INVALID\r\n      }\r\n\r\n      ret = streamContext.filter.receiveAVPacket(avpacket)\r\n\r\n      if (ret < 0) {\r\n        if (!this.context.ioEnd) {\r\n          return IOError.AGAIN\r\n        }\r\n        logger.error('receive avpacket from bsf failed')\r\n        return errorType.DATA_INVALID\r\n      }\r\n\r\n      avpacket.timeBase.den = 90000\r\n      avpacket.timeBase.num = 1\r\n      avpacket.streamIndex = stream.index\r\n\r\n      this.checkExtradata(avpacket, stream)\r\n\r\n      while (true) {\r\n        const avpacket = this.cacheAVPacket || createAVPacket()\r\n        ret = streamContext.filter.receiveAVPacket(avpacket)\r\n        if (ret === 0) {\r\n          avpacket.timeBase.den = 90000\r\n          avpacket.timeBase.num = 1\r\n          avpacket.streamIndex = stream.index\r\n          this.checkExtradata(avpacket, stream)\r\n          formatContext.interval.packetBuffer.push(avpacket)\r\n          this.cacheAVPacket = nullptr\r\n        }\r\n        else {\r\n          this.cacheAVPacket = avpacket\r\n          break\r\n        }\r\n      }\r\n    }\r\n    else {\r\n      const streamType = this.context.pmt.pid2StreamType.get(streamContext.pid)\r\n      if (streamType === mpegts.TSStreamType.AUDIO_MPEG1\r\n        || streamType === mpegts.TSStreamType.AUDIO_MPEG2\r\n      ) {\r\n        avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n\r\n        const buffer = getAVPacketData(avpacket)\r\n\r\n        const ver = (buffer[1] >>> 3) & 0x03\r\n        const layer = (buffer[1] & 0x06) >> 1\r\n        // const bitrateIndex = (buffer[2] & 0xF0) >>> 4\r\n        const samplingFreqIndex = (buffer[2] & 0x0C) >>> 2\r\n\r\n        const channelMode = (buffer[3] >>> 6) & 0x03\r\n\r\n        const channelCount = channelMode !== 3 ? 2 : 1\r\n        const profile = mp3.getProfileByLayer(layer)\r\n        const sampleRate = mp3.getSampleRateByVersionIndex(ver, samplingFreqIndex)\r\n\r\n        const hasNewExtraData = stream.codecpar.profile !== profile\r\n          || stream.codecpar.sampleRate !== sampleRate\r\n          || stream.codecpar.chLayout.nbChannels !== channelCount\r\n\r\n        if (hasNewExtraData) {\r\n          stream.codecpar.profile = profile\r\n          stream.codecpar.sampleRate = sampleRate\r\n          stream.codecpar.chLayout.nbChannels = channelCount\r\n        }\r\n      }\r\n      else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264) {\r\n        if (!stream.codecpar.extradata) {\r\n          const extradata = h264.generateAnnexbExtradata(getAVPacketData(avpacket))\r\n          if (extradata) {\r\n            stream.codecpar.extradata = avMalloc(extradata.length)\r\n            memcpyFromUint8Array(stream.codecpar.extradata, extradata.length, extradata)\r\n            stream.codecpar.extradataSize = extradata.length\r\n            h264.parseAVCodecParameters(stream, extradata)\r\n            avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n          }\r\n        }\r\n      }\r\n      else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC) {\r\n        if (!stream.codecpar.extradata) {\r\n          const extradata = hevc.generateAnnexbExtradata(getAVPacketData(avpacket))\r\n          if (extradata) {\r\n            stream.codecpar.extradata = avMalloc(extradata.length)\r\n            memcpyFromUint8Array(stream.codecpar.extradata, extradata.length, extradata)\r\n            stream.codecpar.extradataSize = extradata.length\r\n            hevc.parseAVCodecParameters(stream, extradata)\r\n            avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n          }\r\n        }\r\n      }\r\n      else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC) {\r\n        if (!stream.codecpar.extradata) {\r\n          const extradata = vvc.generateAnnexbExtradata(getAVPacketData(avpacket))\r\n          if (extradata) {\r\n            stream.codecpar.extradata = avMalloc(extradata.length)\r\n            memcpyFromUint8Array(stream.codecpar.extradata, extradata.length, extradata)\r\n            stream.codecpar.extradataSize = extradata.length\r\n            vvc.parseAVCodecParameters(stream, extradata)\r\n            avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n          }\r\n        }\r\n      }\r\n      else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AC3\r\n        || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_EAC3\r\n      ) {\r\n        if (stream.codecpar.sampleRate === NOPTS_VALUE) {\r\n          const info = ac3.parseHeader(getAVPacketData(avpacket))\r\n          if (!is.number(info)) {\r\n            stream.codecpar.sampleRate = reinterpret_cast<int32>(info.sampleRate)\r\n            stream.codecpar.chLayout.nbChannels = reinterpret_cast<int32>(info.channels)\r\n          }\r\n        }\r\n      }\r\n      else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_DTS) {\r\n        if (stream.codecpar.sampleRate === NOPTS_VALUE) {\r\n          const info = dts.parseHeader(getAVPacketData(avpacket))\r\n          if (!is.number(info)) {\r\n            stream.codecpar.sampleRate = reinterpret_cast<int32>(info.sampleRate)\r\n            stream.codecpar.chLayout.nbChannels = reinterpret_cast<int32>(info.channels)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return 0\r\n  }\r\n\r\n  private parsePESSlice(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>, queue: TSSliceQueue, stream: AVStream) {\r\n\r\n    const streamContext = stream.privData as MpegtsStreamContext\r\n\r\n    let pes = parsePESSlice(queue)\r\n\r\n    let ret = parsePES(pes)\r\n\r\n    if (ret) {\r\n      return ret\r\n    }\r\n\r\n    clearTSSliceQueue(queue)\r\n\r\n    if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n      || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H265\r\n      || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n    ) {\r\n      if (!streamContext.pendingPES && !this.context.ioEnd) {\r\n        streamContext.pendingPES = pes\r\n        return IOError.AGAIN\r\n      }\r\n      if (streamContext.pendingPES) {\r\n        let offset = 0\r\n        while (true) {\r\n          const next = nalusUtil.getNextNaluStart(pes.payload, offset)\r\n          if (next.offset >= 0) {\r\n            if (next.startCode === 4) {\r\n              offset = next.offset\r\n              break\r\n            }\r\n            offset += 3\r\n          }\r\n          else {\r\n            offset = -1\r\n            break\r\n          }\r\n        }\r\n        if (offset >= 0) {\r\n          if (offset > 0) {\r\n            streamContext.pendingPES.payload = concatTypeArray(Uint8Array, [streamContext.pendingPES.payload, pes.payload.subarray(0, offset)])\r\n            pes.payload = pes.payload.subarray(offset)\r\n          }\r\n          let pendingPES = streamContext.pendingPES\r\n          streamContext.pendingPES = pes\r\n          pes = pendingPES\r\n        }\r\n        else {\r\n          streamContext.pendingPES.payload = concatTypeArray(Uint8Array, [streamContext.pendingPES.payload, pes.payload])\r\n          if (this.context.ioEnd) {\r\n            pes = streamContext.pendingPES\r\n            streamContext.pendingPES = null\r\n          }\r\n          else {\r\n            return IOError.AGAIN\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return this.handlePES(formatContext, avpacket, pes, stream)\r\n  }\r\n\r\n  private async readAVPacket_(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number> {\r\n    if (this.context.ioEnd) {\r\n\r\n      const end = () => {\r\n        const stream = formatContext.streams.find((stream) => {\r\n          return !!(stream.privData as MpegtsStreamContext).pendingPES\r\n        })\r\n        if (stream) {\r\n          const context = stream.privData as MpegtsStreamContext\r\n          const pes = context.pendingPES\r\n          context.pendingPES = null\r\n          return this.handlePES(formatContext, avpacket, pes, stream)\r\n        }\r\n        return IOError.END\r\n      }\r\n\r\n      if (!this.context.tsSliceQueueMap.size) {\r\n        return end()\r\n      }\r\n\r\n      const it = this.context.tsSliceQueueMap.values()\r\n\r\n      let queue: TSSliceQueue\r\n\r\n      while (true) {\r\n        const next = it.next()\r\n\r\n        if (next.value && next.value.slices.length) {\r\n          queue = next.value\r\n          break\r\n        }\r\n\r\n        if (next.done) {\r\n          break\r\n        }\r\n      }\r\n\r\n      if (!queue) {\r\n        return end()\r\n      }\r\n\r\n      const stream = formatContext.streams.find((stream) => {\r\n        return (stream.privData as MpegtsStreamContext).pid === queue.pid\r\n      })\r\n\r\n      if (stream) {\r\n        return this.parsePESSlice(formatContext, avpacket, queue, stream)\r\n      }\r\n      else {\r\n        clearTSSliceQueue(queue)\r\n        return this.readAVPacket_(formatContext, avpacket)\r\n      }\r\n    }\r\n    else {\r\n      try {\r\n        while (true) {\r\n          // 码流可能存在一些非 ts packet 数据，跳过\r\n          if (this.context.tsPacketSize !== mpegts.TS_DVHS_PACKET_SIZE\r\n            && (await formatContext.ioReader.peekUint8() !== 0x47)\r\n          ) {\r\n            // 将剩余缓冲区移动到头部，方便 syncTSPacket 往回 seek\r\n            // m3u8 切片是不支持通过字节位置 seek 的\r\n            try {\r\n              await formatContext.ioReader.flush()\r\n            }\r\n            catch (e) {}\r\n            await this.syncTSPacket(formatContext, false)\r\n          }\r\n          const tsPacket = await impegts.parseTSPacket(formatContext.ioReader, this.context)\r\n          if (!tsPacket.payload) {\r\n            continue\r\n          }\r\n\r\n          if (tsPacket.pid === 0\r\n            || tsPacket.pid === this.context.currentPmtPid\r\n            || this.context.pmt.pid2StreamType.get(tsPacket.pid) === mpegts.TSStreamType.kSCTE35\r\n          ) {\r\n            handleSectionSlice(tsPacket, this.context)\r\n            continue\r\n          }\r\n\r\n          const streamType = this.context.pmt.pid2StreamType.get(tsPacket.pid)\r\n\r\n          if (!streamType) {\r\n            continue\r\n          }\r\n\r\n          let stream = formatContext.streams.find((stream) => {\r\n            return (stream.privData as MpegtsStreamContext).pid === tsPacket.pid\r\n          })\r\n\r\n          if (!stream) {\r\n            stream = formatContext.createStream()\r\n            initStream(tsPacket.pid, stream, this.context)\r\n          }\r\n\r\n          let pesPacketLength = (tsPacket.payload[4] << 8) | tsPacket.payload[5]\r\n\r\n          let pesSliceQueue = this.context.tsSliceQueueMap.get(tsPacket.pid)\r\n\r\n          let packetGot = false\r\n\r\n          if (pesSliceQueue) {\r\n            if (pesSliceQueue.totalLength > 0 && tsPacket.payloadUnitStartIndicator) {\r\n              const ret = this.parsePESSlice(formatContext, avpacket, pesSliceQueue, stream)\r\n              if (ret < 0) {\r\n                if (ret === IOError.AGAIN) {\r\n                  pesSliceQueue.randomAccessIndicator = tsPacket.adaptationFieldInfo?.randomAccessIndicator ?? 0\r\n                  pesSliceQueue.pos = tsPacket.pos\r\n                  pesSliceQueue.pid = tsPacket.pid\r\n                  pesSliceQueue.streamType = streamType\r\n                  pesSliceQueue.expectedLength = pesPacketLength === 0 ? 0 : pesPacketLength + 6\r\n                  pesSliceQueue.slices.push(tsPacket.payload)\r\n                  pesSliceQueue.totalLength += tsPacket.payload.length\r\n                  continue\r\n                }\r\n                return ret\r\n              }\r\n              packetGot = true\r\n            }\r\n          }\r\n          else {\r\n            if (!tsPacket.payloadUnitStartIndicator) {\r\n              if (defined(ENABLE_LOG_TRACE)) {\r\n                logger.trace('got ts packet before payload unit start indicator, ignore it')\r\n              }\r\n              continue\r\n            }\r\n            pesSliceQueue = new TSSliceQueue()\r\n            this.context.tsSliceQueueMap.set(tsPacket.pid, pesSliceQueue)\r\n          }\r\n\r\n          if (tsPacket.payloadUnitStartIndicator) {\r\n            pesSliceQueue.randomAccessIndicator = tsPacket.adaptationFieldInfo?.randomAccessIndicator ?? 0\r\n            pesSliceQueue.pos = tsPacket.pos\r\n            pesSliceQueue.pid = tsPacket.pid\r\n            pesSliceQueue.streamType = streamType\r\n            pesSliceQueue.expectedLength = pesPacketLength === 0 ? 0 : pesPacketLength + 6\r\n          }\r\n\r\n          pesSliceQueue.slices.push(tsPacket.payload)\r\n          pesSliceQueue.totalLength += tsPacket.payload.length\r\n\r\n          if (pesSliceQueue.expectedLength > 0 && pesSliceQueue.expectedLength === pesSliceQueue.totalLength) {\r\n            const ret = this.parsePESSlice(formatContext, avpacket, pesSliceQueue, stream)\r\n            if (ret < 0) {\r\n              if (ret === IOError.AGAIN) {\r\n                continue\r\n              }\r\n              return ret\r\n            }\r\n            packetGot = true\r\n          }\r\n\r\n          if (packetGot) {\r\n            return 0\r\n          }\r\n        }\r\n      }\r\n      catch (error) {\r\n        if (formatContext.ioReader.error === IOError.END && !this.context.ioEnd) {\r\n          this.context.ioEnd = true\r\n          return this.readAVPacket_(formatContext, avpacket)\r\n        }\r\n        else if (formatContext.ioReader.error === IOError.END\r\n          || formatContext.ioReader.error === IOError.ABORT\r\n        ) {\r\n          return formatContext.ioReader.error\r\n        }\r\n        else {\r\n          logger.error(`read packet error, ${error}`)\r\n          return errorType.DATA_INVALID\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public async readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number> {\r\n    try {\r\n      return this.readAVPacket_(formatContext, avpacket)\r\n    }\r\n    catch (error) {\r\n      if (formatContext.ioReader.error !== IOError.END\r\n        && formatContext.ioReader.error !== IOError.ABORT\r\n      ) {\r\n        logger.error(error.message)\r\n      }\r\n      return formatContext.ioReader.error\r\n    }\r\n  }\r\n\r\n  private async syncTSPacket(formatContext: AVIFormatContext, syncPES: boolean = true) {\r\n    let pos: int64 = NOPTS_VALUE_BIGINT\r\n\r\n    const analyzeCount = 10\r\n\r\n    while (true) {\r\n      try {\r\n        const byte = await formatContext.ioReader.readUint8()\r\n        if (byte === 0x47) {\r\n          if (this.context.tsPacketSize === mpegts.TS_DVHS_PACKET_SIZE) {\r\n            pos = formatContext.ioReader.getPos() - 5n\r\n          }\r\n          else {\r\n            pos = formatContext.ioReader.getPos() - 1n\r\n          }\r\n          let count = 0\r\n          let now = formatContext.ioReader.getPos()\r\n          while (count <= analyzeCount) {\r\n            await formatContext.ioReader.skip(this.context.tsPacketSize - 1)\r\n\r\n            const byte = await formatContext.ioReader.readUint8()\r\n\r\n            if (byte === 0x47) {\r\n              count++\r\n            }\r\n            else {\r\n              break\r\n            }\r\n          }\r\n          if (count < analyzeCount) {\r\n            pos = NOPTS_VALUE_BIGINT\r\n            await formatContext.ioReader.seek(now)\r\n            continue\r\n          }\r\n          else {\r\n            break\r\n          }\r\n        }\r\n      }\r\n      catch (error) {\r\n        pos = NOPTS_VALUE_BIGINT\r\n        break\r\n      }\r\n    }\r\n\r\n    if (pos !== NOPTS_VALUE_BIGINT) {\r\n      // 移动到 ts packet 的开始\r\n      await formatContext.ioReader.seek(pos)\r\n      if (syncPES) {\r\n        while (true) {\r\n          const tsPacket = await impegts.parseTSPacket(formatContext.ioReader, this.context)\r\n          // 移动到下一个 pes 的开始\r\n          if (tsPacket.payloadUnitStartIndicator) {\r\n            // 返回到上一个 ts packet 的开始\r\n            await formatContext.ioReader.seek(pos)\r\n            formatContext.streams.forEach((stream) => {\r\n              let pesSliceQueue = this.context.tsSliceQueueMap.get((stream.privData as MpegtsStreamContext).pid)\r\n              if (pesSliceQueue) {\r\n                clearTSSliceQueue(pesSliceQueue)\r\n              }\r\n              const streamContext = stream.privData as MpegtsStreamContext\r\n              streamContext.pendingPES = null\r\n              if (streamContext.filter) {\r\n                streamContext.filter.reset()\r\n              }\r\n            })\r\n            break\r\n          }\r\n          pos = formatContext.ioReader.getPos()\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public async seek(\r\n    formatContext: AVIFormatContext,\r\n    stream: AVStream,\r\n    timestamp: int64,\r\n    flags: int32\r\n  ): Promise<int64> {\r\n\r\n    let now = formatContext.ioReader.getPos()\r\n\r\n    this.context.tsSliceQueueMap.forEach((queue) => {\r\n      if (queue.slices.length && queue.pos < now) {\r\n        now = queue.pos\r\n      }\r\n    })\r\n    formatContext.streams.forEach((stream) => {\r\n      const streamContext = stream.privData as MpegtsStreamContext\r\n      if (streamContext.pendingPES?.pos < now) {\r\n        now = streamContext.pendingPES.pos\r\n      }\r\n    })\r\n\r\n    const end = () => {\r\n      this.context.tsSliceQueueMap.forEach((queue) => {\r\n        clearTSSliceQueue(queue)\r\n      })\r\n\r\n      formatContext.streams.forEach((stream) => {\r\n        const streamContext = stream.privData as MpegtsStreamContext\r\n        streamContext.pendingPES = null\r\n        if (streamContext.filter) {\r\n          streamContext.filter.reset()\r\n        }\r\n      })\r\n    }\r\n\r\n    this.context.pmt.pid2StreamType.forEach((streamType, pid) => {\r\n      this.context.tsSliceQueueMap.delete(pid)\r\n    })\r\n\r\n    // m3u8 使用时间戳去 seek\r\n    if (flags & AVSeekFlags.TIMESTAMP) {\r\n      const seekTime = avRescaleQ(timestamp, stream.timeBase, AV_MILLI_TIME_BASE_Q)\r\n      await formatContext.ioReader.seek(seekTime, true)\r\n      this.context.ioEnd = false\r\n      end()\r\n      return 0n\r\n    }\r\n\r\n    if (flags & AVSeekFlags.BYTE) {\r\n\r\n      const size = await formatContext.ioReader.fileSize()\r\n\r\n      if (size <= 0n) {\r\n        return static_cast<int64>(errorType.FORMAT_NOT_SUPPORT)\r\n      }\r\n\r\n      if (timestamp < 0n) {\r\n        timestamp = 0n\r\n      }\r\n      else if (timestamp > size) {\r\n        timestamp = size\r\n      }\r\n      await formatContext.ioReader.seek(timestamp)\r\n\r\n      if (!(flags & AVSeekFlags.ANY)) {\r\n        await this.syncTSPacket(formatContext)\r\n      }\r\n\r\n      this.context.ioEnd = false\r\n      end()\r\n      return now\r\n    }\r\n    else {\r\n\r\n      if (stream && stream.sampleIndexes.length) {\r\n        let index = array.binarySearch(stream.sampleIndexes, (item) => {\r\n          if (item.pts > timestamp) {\r\n            return -1\r\n          }\r\n          return 1\r\n        })\r\n        if (index > 0 && avRescaleQ(timestamp - stream.sampleIndexes[index - 1].pts, stream.timeBase, AV_MILLI_TIME_BASE_Q) < 10000n) {\r\n          logger.debug(`seek in sampleIndexes, found index: ${index}, pts: ${stream.sampleIndexes[index - 1].pts}, pos: ${stream.sampleIndexes[index - 1].pos}`)\r\n          await formatContext.ioReader.seek(stream.sampleIndexes[index - 1].pos)\r\n          this.context.ioEnd = false\r\n          end()\r\n          return now\r\n        }\r\n      }\r\n\r\n      logger.debug('not found any keyframe index, try to seek in bytes')\r\n\r\n      let ret = await seekInBytes(\r\n        formatContext,\r\n        stream,\r\n        timestamp,\r\n        this.firstTSPacketPos,\r\n        this.readAVPacket.bind(this),\r\n        this.syncTSPacket.bind(this)\r\n      )\r\n      if (ret >= 0) {\r\n        this.context.ioEnd = false\r\n        end()\r\n      }\r\n      return ret\r\n    }\r\n  }\r\n\r\n  public getAnalyzeStreamsCount(): number {\r\n    return this.context.pmt?.pid2StreamType.size ?? 1\r\n  }\r\n}\r\n","/*\r\n * libmedia analyze ts packet length\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as mpegts from '../mpegts'\r\n\r\nexport default function analyzeTSLength(buffer: Uint8Array, packetSize: number, probe: boolean) {\r\n  const stat = new Uint8Array(mpegts.TS_MAX_PACKET_SIZE)\r\n  let statAll = 0\r\n  let bestScore = 0\r\n\r\n  for (let i = 0; i < buffer.length - 3; i++) {\r\n    if (buffer[i] === 0x47) {\r\n      const pid = ((buffer[i + 1] << 8) | buffer[i + 2]) & 0x1FFF\r\n      let asc = buffer[i + 3] & 0x30\r\n      if (!probe || pid === 0x1FFF || asc) {\r\n        const x = i % packetSize\r\n        stat[x]++\r\n        statAll++\r\n        if (stat[x] > bestScore) {\r\n          bestScore = stat[x]\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return bestScore - Math.max(statAll - 10 * bestScore, 0) / 10\r\n}\r\n","/*\r\n * libmedia clear ts packet slice queue\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { TSSliceQueue } from '../struct'\r\n\r\nexport default function clearTSSliceQueue(queue: TSSliceQueue) {\r\n  queue.slices = []\r\n  queue.totalLength = 0\r\n  queue.expectedLength = -1\r\n}\r\n","/*\r\n * libmedia create mpegts context\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { NOPTS_VALUE } from 'avutil/constant'\r\nimport { PAT, PMT } from '../struct'\r\nimport { MpegtsContext } from '../type'\r\n\r\nexport default function createMpegtsContext(): MpegtsContext {\r\n\r\n  return {\r\n    currentProgram: NOPTS_VALUE,\r\n    currentPmtPid: NOPTS_VALUE,\r\n    tsPacketSize: NOPTS_VALUE,\r\n    hasPAT: false,\r\n    hasPMT: false,\r\n    tsSliceQueueMap: new Map(),\r\n    pat: new PAT(),\r\n    pmt: new PMT(),\r\n    program2Pmt: new Map(),\r\n    ioEnd: false,\r\n\r\n    startPid: 0x100,\r\n    delay: 0n\r\n  }\r\n}\r\n","/*\r\n * libmedia create mpegts stream context\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { NOPTS_VALUE } from 'avutil/constant'\r\nimport { MpegtsStreamContext } from '../type'\r\n\r\nexport default function createMpegtsStreamContext(): MpegtsStreamContext {\r\n  return {\r\n    pid: NOPTS_VALUE,\r\n    filter: null,\r\n    tsPacket: null,\r\n    pes: null,\r\n    pendingPES: null,\r\n    continuityCounter: 0,\r\n    pesSlices: {\r\n      total: 0,\r\n      buffers: []\r\n    },\r\n    latm: false\r\n  }\r\n}\r\n","/*\r\n * libmedia handle mpegts section slice\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { MpegtsContext } from '../type'\r\nimport { TSPacket, TSSliceQueue } from '../struct'\r\nimport clearTSSliceQueue from '../function/clearTSSliceQueue'\r\nimport parseSection from '../function/parseSection'\r\n\r\nexport default function handleSectionSlice(tsPacket: TSPacket, mpegtsContext: MpegtsContext) {\r\n  const tsSliceQueue = mpegtsContext.tsSliceQueueMap.get(tsPacket.pid)\r\n\r\n  if (tsPacket.payloadUnitStartIndicator) {\r\n    const pointerField = tsPacket.payload[0]\r\n    if (tsSliceQueue && tsSliceQueue.totalLength > 0) {\r\n      const remain = tsPacket.payload.slice(1, Math.min(1 + pointerField, tsPacket.payload.length))\r\n      tsSliceQueue.slices.push(remain)\r\n      tsSliceQueue.totalLength += remain.length\r\n\r\n      if (tsSliceQueue.totalLength === tsSliceQueue.expectedLength) {\r\n        parseSection(tsPacket.pid, tsSliceQueue, mpegtsContext)\r\n        clearTSSliceQueue(tsSliceQueue)\r\n      }\r\n      else {\r\n        clearTSSliceQueue(tsSliceQueue)\r\n        mpegtsContext.tsSliceQueueMap.delete(tsPacket.pid)\r\n      }\r\n    }\r\n\r\n    for (let i = 1 + pointerField; i < tsPacket.payload.length;) {\r\n      const tableId = tsPacket.payload[i]\r\n      if (tableId === 0xff) {\r\n        break\r\n      }\r\n      const sectionLength = ((tsPacket.payload[i + 1] & 0x0f) << 8) | tsPacket.payload[i + 2]\r\n\r\n      const tsSliceQueue = new TSSliceQueue()\r\n      tsSliceQueue.pid = tsPacket.pid\r\n      tsSliceQueue.expectedLength = sectionLength + 3\r\n      tsSliceQueue.randomAccessIndicator = tsPacket.adaptationFieldInfo?.randomAccessIndicator ?? 0\r\n\r\n      const remain = tsPacket.payload.slice(\r\n        i,\r\n        Math.min(i + tsSliceQueue.expectedLength - tsSliceQueue.totalLength, tsPacket.payload.length)\r\n      )\r\n\r\n      tsSliceQueue.slices.push(remain)\r\n      tsSliceQueue.totalLength += remain.length\r\n      mpegtsContext.tsSliceQueueMap.set(tsPacket.pid, tsSliceQueue)\r\n\r\n      if (tsSliceQueue.totalLength === tsSliceQueue.expectedLength) {\r\n        parseSection(tsPacket.pid, tsSliceQueue, mpegtsContext)\r\n        clearTSSliceQueue(tsSliceQueue)\r\n      }\r\n      else {\r\n        clearTSSliceQueue(tsSliceQueue)\r\n        mpegtsContext.tsSliceQueueMap.delete(tsPacket.pid)\r\n      }\r\n\r\n      i += remain.length\r\n    }\r\n  }\r\n  else if (tsSliceQueue && tsSliceQueue.totalLength !== 0) {\r\n    const remain = tsPacket.payload.slice(\r\n      0,\r\n      Math.min(tsSliceQueue.expectedLength - tsSliceQueue.totalLength, tsPacket.payload.length)\r\n    )\r\n    tsSliceQueue.slices.push(remain)\r\n    tsSliceQueue.totalLength += remain.length\r\n\r\n    if (tsSliceQueue.totalLength === tsSliceQueue.expectedLength) {\r\n      parseSection(tsPacket.pid, tsSliceQueue, mpegtsContext)\r\n      clearTSSliceQueue(tsSliceQueue)\r\n    }\r\n    else {\r\n      clearTSSliceQueue(tsSliceQueue)\r\n      mpegtsContext.tsSliceQueueMap.delete(tsPacket.pid)\r\n    }\r\n  }\r\n}\r\n","/*\r\n * libmedia init stream\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { MpegtsContext, MpegtsStreamContext, PID } from '../type'\r\nimport createMpegtsStreamContext from './createMpegtsStreamContext'\r\nimport * as mpegts from '../mpegts'\r\nimport { AVCodecID, AVMediaType } from 'avutil/codec'\r\nimport AVBSFilter from '../../../bsf/AVBSFilter'\r\nimport AACADTS2RawFilter from '../../../bsf/aac/ADTS2RawFilter'\r\nimport AACLATM2RawFilter from '../../../bsf/aac/LATM2RawFilter'\r\nimport OpusMpegts2RawFilter from '../../../bsf/opus/Mpegts2RawFilter'\r\nimport Stream from 'avutil/AVStream'\r\nimport * as opus from 'avutil/codecs/opus'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport { memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport { AVCodecParameterFlags } from 'avutil/struct/avcodecparameters'\r\n\r\nexport default function initStream(pid: PID, stream: Stream, mpegtsContext: MpegtsContext) {\r\n\r\n  stream.timeBase.den = 90000\r\n  stream.timeBase.num = 1\r\n\r\n  const streamContext = createMpegtsStreamContext()\r\n\r\n  streamContext.pid = pid\r\n  stream.privData = streamContext\r\n\r\n  const streamType = mpegtsContext.pmt.pid2StreamType.get(pid)\r\n\r\n  if (streamType === mpegts.TSStreamType.PRIVATE_DATA) {\r\n    const descriptorList = mpegtsContext.pmt.pid2ESDescriptor.get(pid)\r\n    stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_DATA\r\n\r\n    if (descriptorList) {\r\n      const regDescriptor = descriptorList.find((descriptor) => {\r\n        return descriptor.tag === 0x05\r\n      })\r\n\r\n      if (regDescriptor && regDescriptor.buffer?.length >= 4) {\r\n        if (String.fromCharCode(regDescriptor.buffer[0]) === 'O'\r\n          || String.fromCharCode(regDescriptor.buffer[1]) === 'p'\r\n          || String.fromCharCode(regDescriptor.buffer[2]) === 'u'\r\n          || String.fromCharCode(regDescriptor.buffer[3]) === 's'\r\n        ) {\r\n          stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_AUDIO\r\n          stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_OPUS\r\n          stream.codecpar.sampleRate = 48000\r\n\r\n          const extDescriptor = descriptorList.find((descriptor) => {\r\n            return descriptor.tag === 0x7f\r\n          })\r\n\r\n          if (extDescriptor) {\r\n            const extDescTag = extDescriptor.buffer[0]\r\n\r\n            if (extDescTag === 0x80) {\r\n              stream.codecpar.chLayout.nbChannels = ((extDescriptor.buffer[1] & 0x0F) === 0 )\r\n                ? 2\r\n                : (extDescriptor.buffer[1] & 0x0F)\r\n\r\n\r\n              const buffer = opus.avCodecParameters2Extradata(stream.codecpar)\r\n              if (buffer) {\r\n                stream.codecpar.extradata = avMalloc(buffer.length)\r\n                memcpyFromUint8Array(stream.codecpar.extradata, buffer.length, buffer)\r\n                stream.codecpar.extradataSize = buffer.length\r\n              }\r\n            }\r\n          }\r\n        }\r\n        else if (String.fromCharCode(regDescriptor.buffer[0]) === 'A'\r\n          || String.fromCharCode(regDescriptor.buffer[1]) === 'V'\r\n          || String.fromCharCode(regDescriptor.buffer[2]) === '0'\r\n          || String.fromCharCode(regDescriptor.buffer[3]) === '1'\r\n        ) {\r\n          stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_VIDEO\r\n          stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_AV1\r\n          const extDescriptor = descriptorList.find((descriptor) => {\r\n            return descriptor.tag === 0x80\r\n          })\r\n          if (extDescriptor) {\r\n            stream.codecpar.extradata = avMalloc(extDescriptor.buffer.length)\r\n            memcpyFromUint8Array(stream.codecpar.extradata, extDescriptor.buffer.length, extDescriptor.buffer)\r\n            stream.codecpar.extradataSize = extDescriptor.buffer.length\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  else {\r\n    const info = mpegts.StreamType2AVCodecId[streamType]\r\n    if (info) {\r\n      stream.codecpar.codecType = info[0]\r\n      stream.codecpar.codecId = info[1]\r\n    }\r\n    else {\r\n      stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_DATA\r\n    }\r\n  }\r\n\r\n  let filter: AVBSFilter\r\n\r\n  switch (streamType) {\r\n    case mpegts.TSStreamType.AUDIO_AAC:\r\n      filter = new AACADTS2RawFilter()\r\n      break\r\n    case mpegts.TSStreamType.AUDIO_AAC_LATM:\r\n      filter = new AACLATM2RawFilter()\r\n      break\r\n    case mpegts.TSStreamType.PRIVATE_DATA:\r\n      if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_OPUS) {\r\n        filter = new OpusMpegts2RawFilter()\r\n      }\r\n      break\r\n  }\r\n\r\n  if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n    || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n    || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n  ) {\r\n    stream.codecpar.flags |= AVCodecParameterFlags.AV_CODECPAR_FLAG_H26X_ANNEXB\r\n  }\r\n\r\n  if (filter) {\r\n    (stream.privData as MpegtsStreamContext).filter = filter\r\n    filter.init(addressof(stream.codecpar), addressof(stream.timeBase))\r\n  }\r\n\r\n  return stream\r\n}\r\n","/*\r\n * libmedia parse adaptation field\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { TSPacket } from '../struct'\r\n\r\nexport default function parseAdaptationField(buffer: Uint8Array, tsPacket: TSPacket) {\r\n  let i = 0\r\n  let byte = buffer[i++]\r\n  tsPacket.adaptationFieldInfo.discontinuityIndicator = (byte >> 7) & 0x01\r\n  tsPacket.adaptationFieldInfo.randomAccessIndicator = (byte >> 6) & 0x01\r\n  tsPacket.adaptationFieldInfo.elementaryStreamPriorityIndicator = (byte >> 5) & 0x01\r\n  tsPacket.adaptationFieldInfo.pcrFlag = (byte >> 4) & 0x01\r\n  tsPacket.adaptationFieldInfo.opcrFlag = (byte >> 3) & 0x01\r\n  tsPacket.adaptationFieldInfo.splicingPointFlag = (byte >> 2) & 0x01\r\n  tsPacket.adaptationFieldInfo.transportPrivateDataFlag = (byte >> 1) & 0x01\r\n  tsPacket.adaptationFieldInfo.adaptationFieldExtensionFlag = byte & 0x01\r\n\r\n  if (tsPacket.adaptationFieldInfo.pcrFlag) {\r\n    const pcrHigh = static_cast<int64>(buffer[i++] << 25\r\n      | buffer[i++] << 17\r\n      | buffer[i++] << 9\r\n      | buffer[i++] << 1\r\n      | buffer[i] >> 7)\r\n    const prcLow = static_cast<int64>((buffer[i++] & 0x01) << 8 | buffer[i++])\r\n    tsPacket.adaptationFieldInfo.pcr = pcrHigh * 300n + prcLow\r\n  }\r\n  if (tsPacket.adaptationFieldInfo.opcrFlag) {\r\n    const pcrHigh = static_cast<int64>(buffer[i++] << 25\r\n      | buffer[i++] << 17\r\n      | buffer[i++] << 9\r\n      | buffer[i++] << 1\r\n      | buffer[i] >> 7)\r\n    const prcLow = static_cast<int64>((buffer[i++] & 0x01) << 8 | buffer[i++])\r\n    tsPacket.adaptationFieldInfo.pcr = pcrHigh * 300n + prcLow\r\n  }\r\n  if (tsPacket.adaptationFieldInfo.splicingPointFlag) {\r\n    tsPacket.adaptationFieldInfo.spliceCountDown = buffer[i++]\r\n  }\r\n  if (tsPacket.adaptationFieldInfo.transportPrivateDataFlag) {\r\n    const len = buffer[i++]\r\n    tsPacket.adaptationFieldInfo.transportPrivateData = buffer.subarray(i, i + len)\r\n    i += len\r\n  }\r\n  if (tsPacket.adaptationFieldInfo.adaptationFieldExtensionFlag) {\r\n    const len = buffer[i++]\r\n    tsPacket.adaptationFieldInfo.extension = buffer.subarray(i, i + len)\r\n    i += len\r\n  }\r\n}\r\n","/*\r\n * libmedia parse PAT\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport { PAT, TSSliceQueue } from '../struct'\r\nimport { MpegtsContext } from '../type'\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\nimport * as logger from 'common/util/logger'\r\n\r\nexport default function parsePAT(queue: TSSliceQueue, mpegtsContext: MpegtsContext) {\r\n\r\n  let byte = 0\r\n\r\n  const bufferReader = new BufferReader(concatTypeArray(Uint8Array, queue.slices), true)\r\n\r\n  const tableId = bufferReader.readUint8()\r\n  if (tableId !== 0x00) {\r\n    logger.error(`parsePAT: table_id ${tableId} is not corresponded to PAT!`)\r\n  }\r\n\r\n  const sectionLength = bufferReader.readUint16() & 0x0fff\r\n\r\n  const transportStreamId = bufferReader.readUint16()\r\n\r\n  byte = bufferReader.readUint8()\r\n\r\n  const versionNumber = (byte >> 1) & 0x1f\r\n  const currentNextIndicator = byte & 0x01\r\n  const sectionNumber = bufferReader.readUint8()\r\n  const lastSectionNumber = bufferReader.readUint8()\r\n\r\n  let pat: PAT\r\n\r\n  if (currentNextIndicator === 1 && sectionNumber === 0) {\r\n    pat = new PAT()\r\n    pat.versionNumber = versionNumber\r\n  }\r\n  else {\r\n    pat = mpegtsContext.pat\r\n\r\n    if (!pat) {\r\n      logger.error('can not found PAT in mpegts context')\r\n      return\r\n    }\r\n  }\r\n\r\n  const programBytes = sectionLength - 5 - 4\r\n\r\n  const endPos = static_cast<int32>(bufferReader.getPos()) + programBytes\r\n\r\n  let firstProgramNumber = -1\r\n  let firstPmtPid = -1\r\n\r\n  // program_number + program_map_PID + crc\r\n  while (bufferReader.getPos() < endPos) {\r\n    const programNumber = bufferReader.readUint16()\r\n    const pid = bufferReader.readUint16() & 0x1fff\r\n\r\n    // network_PID\r\n    if (programNumber === 0) {\r\n      pat.networkPid = pid\r\n    }\r\n    // program_map_PID\r\n    else {\r\n      pat.program2PmtPid.set(programNumber, pid)\r\n\r\n      if (firstProgramNumber === -1) {\r\n        firstProgramNumber = programNumber\r\n      }\r\n      if (firstPmtPid === -1) {\r\n        firstPmtPid = pid\r\n      }\r\n    }\r\n  }\r\n\r\n  if (currentNextIndicator === 1 && sectionNumber === 0) {\r\n    if (!mpegtsContext.pat) {\r\n      logger.info('parsed first PAT')\r\n    }\r\n    mpegtsContext.pat = pat\r\n    mpegtsContext.currentProgram = firstProgramNumber\r\n    mpegtsContext.currentPmtPid = firstPmtPid\r\n\r\n    if (defined(ENABLE_LOG_TRACE)) {\r\n      logger.debug(`found PAT, current program: ${firstProgramNumber}, current PMT pid: ${firstPmtPid}`)\r\n    }\r\n\r\n    mpegtsContext.hasPAT = true\r\n  }\r\n}\r\n","/*\r\n * libmedia parse PES\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { PES } from '../struct'\r\nimport { NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport * as logger from 'common/util/logger'\r\nimport { TSStreamId, TSStreamType } from '../mpegts'\r\nimport * as errorType from 'avutil/error'\r\nimport { AVPacketFlags } from 'avutil/struct/avpacket'\r\n\r\nexport default function parsePES(pes: PES) {\r\n\r\n  const data = pes.data\r\n  const streamId = data[3]\r\n  const pesPacketLength = (data[4] << 8) | data[5]\r\n\r\n  let headerSize = 0\r\n  let offset = 0\r\n  let flags = 0\r\n\r\n  if (streamId !== TSStreamId.PROGRAM_STREAM_MAP\r\n    && streamId !== TSStreamId.PADDING_STREAM\r\n    && streamId !== TSStreamId.PRIVATE_STREAM_2\r\n    && streamId !== TSStreamId.ECM_STREAM\r\n    && streamId !== TSStreamId.EMM_STREAM\r\n    && streamId !== TSStreamId.PROGRAM_STREAM_DIRECTORY\r\n    && streamId !== TSStreamId.DSMCC_STREAM\r\n    && streamId !== TSStreamId.TYPE_E_STREAM\r\n  ) {\r\n\r\n    let pts: int64 = NOPTS_VALUE_BIGINT\r\n    let dts: int64 = NOPTS_VALUE_BIGINT\r\n\r\n    while (true) {\r\n      if (6 + offset >= data.length) {\r\n        return errorType.DATA_INVALID\r\n      }\r\n      flags = data[6 + offset]\r\n      if (flags !== 0xff) {\r\n        break\r\n      }\r\n      offset++\r\n    }\r\n\r\n    if ((flags & 0xc0) === 0x40) {\r\n      offset += 2\r\n      flags = data[6 + offset]\r\n    }\r\n    if ((flags & 0xe0) == 0x20) {\r\n\r\n      headerSize += 5\r\n\r\n      pts = pts = static_cast<int64>((data[6 + offset] & 0x0E) * 536870912\r\n        + (data[7 + offset] & 0xFF) * 4194304\r\n        + (data[8 + offset] & 0xFE) * 16384\r\n        + (data[9 + offset] & 0xFF) * 128\r\n        + (data[10 + offset] & 0xFE) / 2)\r\n\r\n      if (flags & 0x10) {\r\n        dts = static_cast<int64>((data[11 + offset] & 0x0E) * 536870912\r\n          + (data[12 + offset] & 0xFF) * 4194304\r\n          + (data[13 + offset] & 0xFE) * 16384\r\n          + (data[14 + offset] & 0xFF) * 128\r\n          + (data[15 + offset] & 0xFE) / 2)\r\n\r\n        headerSize += 5\r\n      }\r\n      else {\r\n        dts = pts\r\n      }\r\n    }\r\n    else if ((flags & 0xc0) == 0x80) {\r\n      // const pesScramblingControl = (data[6] & 0x30) >>> 4\r\n      const ptsDtsFlags = (data[7 + offset] & 0xC0) >>> 6\r\n      headerSize = 3 + data[8 + offset]\r\n\r\n      if (ptsDtsFlags === 0x02 || ptsDtsFlags === 0x03) {\r\n        pts = static_cast<int64>((data[9 + offset] & 0x0E) * 536870912\r\n          + (data[10 + offset] & 0xFF) * 4194304\r\n          + (data[11 + offset] & 0xFE) * 16384\r\n          + (data[12 + offset] & 0xFF) * 128\r\n          + (data[13 + offset] & 0xFE) / 2)\r\n\r\n        if (ptsDtsFlags === 0x03) {\r\n          dts = static_cast<int64>((data[14 + offset] & 0x0E) * 536870912\r\n            + (data[15 + offset] & 0xFF) * 4194304\r\n            + (data[16 + offset] & 0xFE) * 16384\r\n            + (data[17 + offset] & 0xFF) * 128\r\n            + (data[18 + offset] & 0xFE) / 2)\r\n        }\r\n        else {\r\n          dts = pts\r\n        }\r\n      }\r\n    }\r\n    else if (flags === 0xf) {\r\n      headerSize = 1\r\n    }\r\n    else {\r\n      logger.error('invalid data')\r\n      return errorType.DATA_INVALID\r\n    }\r\n\r\n    pes.dts = dts\r\n    pes.pts = pts\r\n\r\n    const payloadStartIndex = 6 + offset + headerSize\r\n    let payloadLength: number = 0\r\n\r\n    if (pesPacketLength !== 0) {\r\n      if (pesPacketLength < offset + headerSize) {\r\n        logger.error('Malformed PES: PES_packet_length < 3 + PES_header_data_length')\r\n        return errorType.DATA_INVALID\r\n      }\r\n      payloadLength = pesPacketLength - (offset + headerSize)\r\n      if (payloadStartIndex + (data.byteLength - payloadStartIndex) != pesPacketLength + 6) {\r\n        logger.warn('PES packet size mismatch')\r\n        pes.flags |= AVPacketFlags.AV_PKT_FLAG_CORRUPT\r\n      }\r\n    }\r\n    else {\r\n      // PES_packet_length === 0\r\n      payloadLength = data.byteLength - payloadStartIndex\r\n    }\r\n\r\n    pes.payload = data.subarray(payloadStartIndex, payloadStartIndex + payloadLength)\r\n  }\r\n  else if (streamId === TSStreamId.PROGRAM_STREAM_MAP\r\n    || streamId === TSStreamId.PRIVATE_STREAM_2\r\n    || streamId === TSStreamId.ECM_STREAM\r\n    || streamId === TSStreamId.EMM_STREAM\r\n    || streamId === TSStreamId.PROGRAM_STREAM_DIRECTORY\r\n    || streamId === TSStreamId.DSMCC_STREAM\r\n    || streamId === TSStreamId.TYPE_E_STREAM\r\n  ) {\r\n    if (pes.streamId === TSStreamType.PRIVATE_DATA) {\r\n      const payloadStartIndex = 6\r\n      let payloadLength: number = 0\r\n\r\n      if (pesPacketLength !== 0) {\r\n        payloadLength = pesPacketLength\r\n      }\r\n      else {\r\n        // PES_packet_length === 0\r\n        payloadLength = data.byteLength - payloadStartIndex\r\n      }\r\n      pes.payload = data.subarray(payloadStartIndex, payloadStartIndex + payloadLength)\r\n    }\r\n  }\r\n  return 0\r\n}\r\n","/*\r\n * libmedia parse PES slice\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { PES, TSSliceQueue } from '../struct'\r\n\r\n\r\nexport default function parsePESSlice(queue: TSSliceQueue): PES {\r\n  let data = new Uint8Array(queue.totalLength)\r\n  for (let i = 0, offset = 0; i < queue.slices.length; i++) {\r\n    let slice = queue.slices[i]\r\n    data.set(slice, offset)\r\n    offset += slice.byteLength\r\n  }\r\n\r\n  const streamId = data[3]\r\n\r\n  const pes = new PES()\r\n  pes.data = data\r\n  pes.pid = queue.pid\r\n  pes.streamId = streamId\r\n  pes.streamType = queue.streamType\r\n  pes.pos = queue.pos\r\n  pes.randomAccessIndicator = queue.randomAccessIndicator\r\n  pes.flags = 0\r\n\r\n  return pes\r\n}\r\n","/*\r\n * libmedia parse PMT\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport { ESDescriptor, PMT, TSSliceQueue } from '../struct'\r\nimport { MpegtsContext } from '../type'\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\nimport * as logger from 'common/util/logger'\r\n\r\nexport default function parsePMT(queue: TSSliceQueue, mpegtsContext: MpegtsContext) {\r\n\r\n  let byte = 0\r\n\r\n  const bufferReader = new BufferReader(concatTypeArray(Uint8Array, queue.slices), true)\r\n\r\n  const tableId = bufferReader.readUint8()\r\n  if (tableId !== 0x02) {\r\n    logger.error(`parse PMT: table_id ${tableId} is not corresponded to PAT!`)\r\n  }\r\n\r\n  const sectionLength = bufferReader.readUint16() & 0x0fff\r\n  const programNumber = bufferReader.readUint16()\r\n\r\n  byte = bufferReader.readUint8()\r\n\r\n  const versionNumber = (byte >> 1) & 0x1f\r\n  const currentNextIndicator = byte & 0x01\r\n\r\n  const sectionNumber = bufferReader.readUint8()\r\n  const lastSectionNumber = bufferReader.readUint8()\r\n\r\n  let pmt: PMT\r\n\r\n  if (currentNextIndicator === 1 && sectionNumber === 0) {\r\n    pmt = new PMT()\r\n    pmt.programNumber = programNumber\r\n    pmt.versionNumber = versionNumber\r\n\r\n    mpegtsContext.program2Pmt.set(programNumber, pmt)\r\n    mpegtsContext.hasPMT = true\r\n  }\r\n  else {\r\n    pmt = mpegtsContext.program2Pmt.get(programNumber)\r\n\r\n    if (!pmt) {\r\n      logger.error('can not found PMT in mpegts context')\r\n      return\r\n    }\r\n  }\r\n\r\n  pmt.pcrPid = bufferReader.readUint16() & 0x1fff\r\n  const programInfoLength = bufferReader.readUint16() & 0x0fff\r\n\r\n  bufferReader.skip(programInfoLength)\r\n\r\n  let endPos = static_cast<int32>(bufferReader.getPos()) + (sectionLength - 9 - programInfoLength - 4)\r\n\r\n  while (bufferReader.getPos() < endPos) {\r\n    const streamType = bufferReader.readUint8()\r\n    const elementaryPid = bufferReader.readUint16() & 0x1fff\r\n    const esInfoLength = bufferReader.readUint16() & 0x0fff\r\n\r\n    pmt.pid2StreamType.set(elementaryPid, streamType)\r\n\r\n    if (defined(ENABLE_LOG_TRACE)) {\r\n      logger.trace(`found stream, type: ${streamType}, pid: ${elementaryPid}`)\r\n    }\r\n\r\n    if (esInfoLength > 0) {\r\n\r\n      const esDescriptorList = []\r\n\r\n      const subEndPos = static_cast<int32>(bufferReader.getPos()) + esInfoLength\r\n      while (bufferReader.getPos() < subEndPos) {\r\n        const esDescriptor = new ESDescriptor()\r\n        esDescriptor.tag = bufferReader.readUint8()\r\n        const length = bufferReader.readUint8()\r\n        if (length > 0) {\r\n          esDescriptor.buffer = bufferReader.readBuffer(length)\r\n        }\r\n        esDescriptorList.push(esDescriptor)\r\n      }\r\n      pmt.pid2ESDescriptor.set(elementaryPid, esDescriptorList)\r\n    }\r\n  }\r\n\r\n  if (programNumber === mpegtsContext.currentProgram) {\r\n    if (!mpegtsContext.pmt) {\r\n      logger.info('parsed first PMT')\r\n    }\r\n    mpegtsContext.pmt = pmt\r\n  }\r\n}\r\n","/*\r\n * libmedia parse SCTE35\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { TSSliceQueue } from '../struct'\r\nimport { MpegtsContext } from '../type'\r\n\r\nexport default function parseSCTE35(queue: TSSliceQueue, mpegtsContext: MpegtsContext) {\r\n\r\n}\r\n","/*\r\n * libmedia parse section\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { TSSliceQueue } from '../struct'\r\nimport { MpegtsContext, PID } from '../type'\r\nimport parsePAT from './parsePAT'\r\nimport parsePMT from './parsePMT'\r\nimport * as mpegts from '../mpegts'\r\nimport parseSCTE35 from './parseSCTE35'\r\n\r\nexport default function parseSection(pid: PID, queue: TSSliceQueue, mpegtsContext: MpegtsContext) {\r\n  if (pid === 0x00) {\r\n    parsePAT(queue, mpegtsContext)\r\n  }\r\n  else if (pid === mpegtsContext.currentPmtPid) {\r\n    parsePMT(queue, mpegtsContext)\r\n  }\r\n  else if (mpegtsContext.pmt && mpegtsContext.pmt.pid2StreamType.get(pid) === mpegts.TSStreamType.kSCTE35) {\r\n    parseSCTE35(queue, mpegtsContext)\r\n  }\r\n}\r\n","/*\r\n * libmedia mpegts decode util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as mpegts from './mpegts'\r\nimport { IOError } from 'common/io/error'\r\nimport analyzeTSLength from './function/analyzeTSLength'\r\nimport { MpegtsContext } from './type'\r\nimport * as logger from 'common/util/logger'\r\nimport { TSPacket } from './struct'\r\nimport parseAdaptationField from './function/parseAdaptationField'\r\nimport IOReader from 'common/io/IOReader'\r\nimport median from 'common/math/median'\r\n\r\nexport async function getPacketSize(ioReader: IOReader): Promise<number> {\r\n  let buffer: Uint8Array\r\n  try {\r\n    buffer = await ioReader.peekBuffer(mpegts.PROBE_PACKET_MAX_BUF)\r\n  }\r\n  catch (error) {\r\n    if (ioReader.error !== IOError.END) {\r\n      buffer = await ioReader.peekBuffer(ioReader.remainingLength())\r\n    }\r\n  }\r\n\r\n  if (buffer && buffer.length >= mpegts.TS_PACKET_SIZE) {\r\n    const score = analyzeTSLength(buffer, mpegts.TS_PACKET_SIZE, false)\r\n    const dvhsScore = analyzeTSLength(buffer, mpegts.TS_DVHS_PACKET_SIZE, false)\r\n    const fecScore = analyzeTSLength(buffer, mpegts.TS_FEC_PACKET_SIZE, false)\r\n\r\n    let margin = median([score, fecScore, dvhsScore])\r\n\r\n    if (buffer.length < mpegts.PROBE_PACKET_MAX_BUF) {\r\n      margin += mpegts.PROBE_PACKET_MARGIN\r\n    }\r\n\r\n    let size = mpegts.TS_PACKET_SIZE\r\n\r\n    if (score > margin) {\r\n      size = mpegts.TS_PACKET_SIZE\r\n    }\r\n    else if (dvhsScore > margin) {\r\n      size = mpegts.TS_DVHS_PACKET_SIZE\r\n    }\r\n    else if (fecScore > margin) {\r\n      size = mpegts.TS_FEC_PACKET_SIZE\r\n    }\r\n\r\n    logger.debug(`got ts packet size: ${size}`)\r\n\r\n    return size\r\n  }\r\n  return 0\r\n}\r\n\r\nexport async function parseTSPacket(ioReader: IOReader, mpegtsContext: MpegtsContext): Promise<TSPacket> {\r\n\r\n  const pos = ioReader.getPos()\r\n  let byte = 0\r\n\r\n  if (mpegtsContext.tsPacketSize === mpegts.TS_DVHS_PACKET_SIZE) {\r\n    // skip ATS field (2-bits copy-control + 30-bits timestamp) for m2ts\r\n    await ioReader.skip(4)\r\n  }\r\n\r\n  const syncByte = await ioReader.readUint8()\r\n\r\n  if (syncByte !== 0x47) {\r\n    logger.fatal(`found syncByte not 0x47, value: ${syncByte.toString(16)}`)\r\n  }\r\n\r\n  const tsPacket = new TSPacket()\r\n  tsPacket.pos = pos\r\n\r\n  byte = await ioReader.readUint16()\r\n  tsPacket.payloadUnitStartIndicator = (byte >> 14) & 0x01\r\n  tsPacket.transportPriority = (byte >> 13) & 0x01\r\n  tsPacket.pid = byte & 0x1fff\r\n\r\n  byte = await ioReader.readUint8()\r\n  tsPacket.adaptationFieldControl = (byte >> 4) & 0x03\r\n  tsPacket.continuityCounter = byte & 0x0f\r\n\r\n  let payloadStartIndex = 4\r\n\r\n  if (tsPacket.adaptationFieldControl === 0x02 || tsPacket.adaptationFieldControl === 0x03) {\r\n    const adaptationFieldLength = await ioReader.readUint8()\r\n    if (5 + adaptationFieldLength === mpegts.TS_PACKET_SIZE) {\r\n      parseAdaptationField(await ioReader.readBuffer(adaptationFieldLength), tsPacket)\r\n      if (mpegtsContext.tsPacketSize === mpegts.TS_FEC_PACKET_SIZE) {\r\n        await ioReader.skip(16)\r\n      }\r\n      return tsPacket\r\n    }\r\n    else {\r\n      if (adaptationFieldLength > 0) {\r\n        parseAdaptationField(await ioReader.readBuffer(adaptationFieldLength), tsPacket)\r\n      }\r\n      payloadStartIndex = 4 + 1 + adaptationFieldLength\r\n    }\r\n  }\r\n  if (tsPacket.adaptationFieldControl === 0x01 || tsPacket.adaptationFieldControl === 0x03) {\r\n    tsPacket.payload = await ioReader.readBuffer(mpegts.TS_PACKET_SIZE - payloadStartIndex)\r\n  }\r\n\r\n  if (mpegtsContext.tsPacketSize === mpegts.TS_FEC_PACKET_SIZE) {\r\n    await ioReader.skip(16)\r\n  }\r\n\r\n  return tsPacket\r\n}\r\n","/*\r\n * libmedia mpegts identify defined\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVCodecID, AVMediaType } from 'avutil/codec'\r\n\r\nexport const TS_FEC_PACKET_SIZE = 204\r\n\r\nexport const TS_DVHS_PACKET_SIZE = 192\r\n\r\nexport const TS_PACKET_SIZE = 188\r\n\r\nexport const TS_MAX_PACKET_SIZE = 204\r\n\r\nexport const NB_PID_MAX = 8192\r\n\r\nexport const USUAL_SECTION_SIZE = 1024\r\n\r\nexport const MAX_SECTION_SIZE = 4096\r\n\r\nexport const PROBE_PACKET_MAX_BUF = 8192\r\n\r\nexport const PROBE_PACKET_MARGIN = 5\r\n\r\n/**\r\n * maximum size in which we look for synchronization if\r\n * synchronization is lost \r\n */\r\nexport const MAX_RESYNC_SIZE = 65536\r\n\r\nexport const MAX_PES_PAYLOAD = 200 * 1024\r\n\r\nexport const MAX_MP4_DESCR_COUNT = 16\r\n\r\nexport const REGISTRATION_DESCRIPTOR = 0x05\r\n\r\nexport const ISO_639_LANGUAGE_DESCRIPTOR = 0x0a\r\n\r\nexport const enum TSPid {\r\n  /**\r\n   * Program Association Table\r\n   */\r\n  PAT = 0x0000,\r\n  /**\r\n   * Conditional Access Table\r\n   */\r\n  CAT = 0x0001,\r\n  /**\r\n   * Transport Stream Description Table\r\n   */\r\n  TSDT = 0x0002,\r\n  IPMP = 0x0003,\r\n\r\n  /**\r\n   * PID from 0x0004 to 0x000F are reserved\r\n   */\r\n\r\n  /**\r\n   * Network Information Table\r\n   */\r\n  NIT = 0x0010,\r\n  /**\r\n   * Service Description Table\r\n   */\r\n  SDT = 0x0011,\r\n  /**\r\n   * Bouquet Association Table\r\n   */\r\n  BAT = 0x0011,\r\n  /**\r\n   * Event Information Table\r\n   */\r\n  EIT = 0x0012,\r\n  /**\r\n   * Running Status Table\r\n   */\r\n  RST = 0x0013,\r\n  /**\r\n   * Time and Date Table \r\n   */\r\n  TDT = 0x0014,\r\n  TOT = 0x0014,\r\n  NET_SYNC = 0x0015,\r\n  /**\r\n   * RAR Notification Table\r\n   */\r\n  RNT = 0x0016,\r\n\r\n  /**\r\n   * PID from 0x0017 to 0x001B are reserved for future use\r\n   * \r\n   */\r\n\r\n  /**\r\n   * PID value 0x001C allocated to link-local inband signalling shall not be\r\n   * used on any broadcast signals. It shall only be used between devices in a\r\n   * controlled environment. \r\n   */\r\n  LINK_LOCAL = 0x001C,\r\n  MEASUREMENT = 0x001D,\r\n  /**\r\n   * Discontinuity Information Table\r\n   */\r\n  DIT = 0x001E,\r\n  /**\r\n   * Selection Information Table\r\n   */\r\n  SIT = 0x001F,\r\n  /**\r\n   * PID from 0x0020 to 0x1FFA may be assigned as needed to PMT, elementary\r\n   * streams and other data tables\r\n   */\r\n  FIRST_OTHER = 0x0020,\r\n  LAST_OTHER = 0x1FFA,\r\n  /**\r\n   * PID 0x1FFB is used by DigiCipher 2/ATSC MGT metadata\r\n   * PID from 0x1FFC to 0x1FFE may be assigned as needed to PMT, elementary\r\n   * streams and other data tables\r\n   */\r\n\r\n  /**\r\n   * Null packet (used for fixed bandwidth padding)\r\n   */\r\n  NULL = 0x1FFF,\r\n  /**\r\n   * m2ts pids\r\n   */\r\n  M2TS_PMT = 0x0100,\r\n  M2TS_PCR = 0x1001,\r\n  M2TS_VIDEO = 0x1011,\r\n  M2TS_AUDIO_START = 0x1100,\r\n  M2TS_PGSSUB_START = 0x1200,\r\n  M2TS_TEXTSUB = 0x1800,\r\n  M2TS_SECONDARY_AUDIO_START = 0x1A00,\r\n  M2TS_SECONDARY_VIDEO_START = 0x1B00\r\n}\r\n\r\nexport const enum TSTid {\r\n  /**\r\n   * Program Association section\r\n   */\r\n  PAT = 0x00,\r\n  /**\r\n   * Conditional Access section \r\n   */\r\n  CAT = 0x01,\r\n  /**\r\n   * Program Map section\r\n   */\r\n  PMT = 0x02,\r\n  /**\r\n   * Transport Stream Description section \r\n   */\r\n  TSDT = 0x03,\r\n\r\n  /**\r\n   * TID from 0x04 to 0x3F are reserved\r\n   */\r\n\r\n  M4OD = 0x05,\r\n  /**\r\n   * Network Information section - actual network\r\n   */\r\n  NIT = 0x40,\r\n  /**\r\n   * Network Information section - actual network\r\n   */\r\n  ONIT = 0x41,\r\n  /**\r\n   * Service Description section - actual TS\r\n   */\r\n  SDT = 0x42,\r\n\r\n  /**\r\n   * TID from 0x43 to 0x45 are reserved for future use\r\n   */\r\n\r\n  /**\r\n   * Service Descrition section - other TS \r\n   */\r\n  OSDT = 0x46,\r\n\r\n  /**\r\n   * TID from 0x47 to 0x49 are reserved for future use\r\n   */\r\n\r\n  /**\r\n   * Bouquet Association section\r\n   */\r\n  BAT = 0x4A,\r\n  /**\r\n   * Update Notification Table section\r\n   */\r\n  UNT = 0x4B,\r\n  /**\r\n   * Downloadable Font Info section\r\n   */\r\n  DFI = 0x4C,\r\n\r\n  /**\r\n   * TID 0x4D is reserved for future use \r\n   */\r\n\r\n  /**\r\n   * Event Information section - actual TS\r\n   */\r\n  EIT = 0x4E,\r\n  /**\r\n   * Event Information section - other TS\r\n   */\r\n  OEIT = 0x4F,\r\n  /**\r\n   * Event Information section schedule - actual TS \r\n   */\r\n  EITS_START = 0x50,\r\n  /**\r\n   * Event Information section schedule - actual TS \r\n   */\r\n  EITS_END = 0x5F,\r\n  /**\r\n   *  Event Information section schedule - other TS\r\n   */\r\n  OEITS_START = 0x60,\r\n  /**\r\n   * Event Information section schedule - other TS\r\n   */\r\n  OEITS_END = 0x6F,\r\n  /**\r\n   * Time Date section\r\n   */\r\n  TDT = 0x70,\r\n  /**\r\n   * Running Status section\r\n   */\r\n  RST = 0x71,\r\n  /**\r\n   * Stuffing section\r\n   */\r\n  ST = 0x72,\r\n  /**\r\n   * Time Offset section\r\n   */\r\n  TOT = 0x73,\r\n  /**\r\n   * Application Inforamtion section\r\n   */\r\n  AIT = 0x74,\r\n  /**\r\n   * Container section\r\n   */\r\n  CT = 0x75,\r\n  /**\r\n   * Related Content section\r\n   */\r\n  RCT = 0x76,\r\n  /**\r\n   * Related Content section\r\n   */\r\n  CIT = 0x77,\r\n  /**\r\n   * MPE-FEC section\r\n   */\r\n  MPE_FEC = 0x78,\r\n  /**\r\n   * Resolution Provider Notification section\r\n   */\r\n  RPNT = 0x79,\r\n  /**\r\n   * MPE-IFEC section\r\n   */\r\n  MPE_IFEC = 0x7A,\r\n  /**\r\n   * Protection Message section\r\n   */\r\n  PROTMT = 0x7B,\r\n\r\n  /**\r\n   * TID from 0x7C to 0x7D are reserved for future use\r\n   */\r\n\r\n  /**\r\n   * Discontinuity Information section\r\n   */\r\n  DIT = 0x7E,\r\n  /**\r\n   * Selection Information section\r\n   */\r\n  SIT = 0x7F\r\n\r\n  /**\r\n   * TID from 0x80 to 0xFE are user defined\r\n   * TID 0xFF is reserved\r\n   */\r\n}\r\n\r\nexport const enum TSStreamType {\r\n  NONE = 0x00,\r\n  VIDEO_MPEG1 = 0x01,\r\n  VIDEO_MPEG2 = 0x02,\r\n  AUDIO_MPEG1 = 0x03,\r\n  AUDIO_MPEG2 = 0x04,\r\n  PRIVATE_SECTION = 0x05,\r\n  PRIVATE_DATA = 0x06,\r\n  AUDIO_AAC = 0x0f,\r\n  AUDIO_AAC_LATM = 0x11,\r\n  VIDEO_MPEG4 = 0x10,\r\n  METADATA = 0x15,\r\n  VIDEO_H264 = 0x1b,\r\n  VIDEO_HEVC = 0x24,\r\n  VIDEO_VVC = 0x33,\r\n  VIDEO_CAVS = 0x42,\r\n  VIDEO_VC1 = 0xea,\r\n  VIDEO_DIRAC = 0xd1,\r\n\r\n  AUDIO_AC3 = 0x81,\r\n  AUDIO_DTS = 0x82,\r\n  AUDIO_TRUEHD = 0x83,\r\n  kSCTE35 = 0x86,\r\n  AUDIO_EAC3 = 0x87\r\n}\r\n\r\n/**\r\n * ISO/IEC 13818-1 Table 2-22\r\n */\r\nexport const enum TSStreamId {\r\n  PROGRAM_STREAM_MAP = 0xbc,\r\n  PRIVATE_STREAM_1 = 0xbd,\r\n  PADDING_STREAM = 0xbe,\r\n  PRIVATE_STREAM_2 = 0xbf,\r\n  AUDIO_STREAM_0 = 0xc0,\r\n  VIDEO_STREAM_0 = 0xe0,\r\n  ECM_STREAM = 0xf0,\r\n  EMM_STREAM = 0xf1,\r\n  DSMCC_STREAM = 0xf2,\r\n  TYPE_E_STREAM = 0xf8,\r\n  METADATA_STREAM = 0xfc,\r\n  EXTENDED_STREAM_ID = 0xfd,\r\n  PROGRAM_STREAM_DIRECTORY = 0xff\r\n}\r\n\r\n/**\r\n * ISO/IEC 13818-1 Table 2-45\r\n */\r\nexport const enum TSDescriptor {\r\n  VIDEO_STREAM = 0x02,\r\n  REGISTRATION = 0x05,\r\n  ISO_639_LANGUAGE = 0x0a,\r\n  IOD = 0x1d,\r\n  SL = 0x1e,\r\n  FMC = 0x1f,\r\n  METADATA = 0x26,\r\n  METADATA_STD = 0x27\r\n}\r\n\r\nexport const StreamType2AVCodecId: Partial<Record<TSStreamType, [AVMediaType, AVCodecID]>> = {\r\n  [TSStreamType.AUDIO_AAC]: [AVMediaType.AVMEDIA_TYPE_AUDIO, AVCodecID.AV_CODEC_ID_AAC],\r\n  [TSStreamType.AUDIO_AAC_LATM]: [AVMediaType.AVMEDIA_TYPE_AUDIO, AVCodecID.AV_CODEC_ID_AAC],\r\n  [TSStreamType.AUDIO_MPEG1]: [AVMediaType.AVMEDIA_TYPE_AUDIO, AVCodecID.AV_CODEC_ID_MP3],\r\n  [TSStreamType.AUDIO_MPEG2]: [AVMediaType.AVMEDIA_TYPE_AUDIO, AVCodecID.AV_CODEC_ID_MP3],\r\n  [TSStreamType.VIDEO_MPEG1]: [AVMediaType.AVMEDIA_TYPE_VIDEO, AVCodecID.AV_CODEC_ID_MPEG2VIDEO],\r\n  [TSStreamType.VIDEO_MPEG2]: [AVMediaType.AVMEDIA_TYPE_VIDEO, AVCodecID.AV_CODEC_ID_MPEG2VIDEO],\r\n  [TSStreamType.VIDEO_H264]: [AVMediaType.AVMEDIA_TYPE_VIDEO, AVCodecID.AV_CODEC_ID_H264],\r\n  [TSStreamType.VIDEO_MPEG4]: [AVMediaType.AVMEDIA_TYPE_VIDEO, AVCodecID.AV_CODEC_ID_MPEG4],\r\n  [TSStreamType.VIDEO_HEVC]: [AVMediaType.AVMEDIA_TYPE_VIDEO, AVCodecID.AV_CODEC_ID_HEVC],\r\n  [TSStreamType.VIDEO_VVC]: [AVMediaType.AVMEDIA_TYPE_VIDEO, AVCodecID.AV_CODEC_ID_VVC],\r\n  [TSStreamType.AUDIO_AC3]: [AVMediaType.AVMEDIA_TYPE_AUDIO, AVCodecID.AV_CODEC_ID_AC3],\r\n  [TSStreamType.AUDIO_EAC3]: [AVMediaType.AVMEDIA_TYPE_AUDIO, AVCodecID.AV_CODEC_ID_EAC3],\r\n  [TSStreamType.AUDIO_DTS]: [AVMediaType.AVMEDIA_TYPE_AUDIO, AVCodecID.AV_CODEC_ID_DTS]\r\n}\r\n","/*\r\n * libmedia mpegts struct defined\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { NOPTS_VALUE, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport { TSStreamType } from './mpegts'\r\nimport { PID } from './type'\r\n\r\nexport class TSPacketAdaptationFieldInfo {\r\n  discontinuityIndicator: number = 0\r\n  randomAccessIndicator: number = 0\r\n  elementaryStreamPriorityIndicator: number = 0\r\n  pcrFlag: number = 0\r\n  opcrFlag: number = 0\r\n  splicingPointFlag: number = 0\r\n  transportPrivateDataFlag: number = 0\r\n  adaptationFieldExtensionFlag: number = 0\r\n  pcr: bigint = 0n\r\n  opcr: bigint = 0n\r\n  spliceCountDown: number = 0\r\n  transportPrivateData: Uint8Array = null\r\n  extension: Uint8Array = null\r\n}\r\n\r\nexport class TSPacket {\r\n  pos: bigint = NOPTS_VALUE_BIGINT\r\n  payloadUnitStartIndicator: number = 0\r\n  transportPriority: number = 0\r\n  pid: PID = NOPTS_VALUE\r\n  adaptationFieldControl: number = 0\r\n  continuityCounter: number = 0\r\n  transportScramblingControl: number = 0\r\n  adaptationFieldInfo: TSPacketAdaptationFieldInfo = new TSPacketAdaptationFieldInfo()\r\n  payload: Uint8Array = null\r\n}\r\n\r\nexport class TSSliceQueue {\r\n  slices: Uint8Array[] = []\r\n  totalLength: number = 0\r\n  expectedLength: number = NOPTS_VALUE\r\n  randomAccessIndicator: number = 0\r\n  pid: PID = NOPTS_VALUE\r\n  streamType: TSStreamType = TSStreamType.NONE\r\n  pos: bigint = NOPTS_VALUE_BIGINT\r\n}\r\n\r\nexport class PAT {\r\n  versionNumber: number = 0\r\n  networkPid: PID = NOPTS_VALUE\r\n  program2PmtPid: Map<number, PID> = new Map()\r\n}\r\n\r\nexport class SectionPacket extends TSPacket {\r\n}\r\n\r\nexport class ESDescriptor {\r\n  tag: number\r\n  buffer: Uint8Array\r\n}\r\n\r\nexport class PMT {\r\n  versionNumber: number = 0\r\n  programNumber: number = 0\r\n  pcrPid: PID = 0\r\n  pid2StreamType: Map<number, TSStreamType> = new Map()\r\n  pid2ESDescriptor: Map<number, ESDescriptor[]> = new Map()\r\n}\r\n\r\nexport class PES {\r\n  pid: PID = NOPTS_VALUE\r\n  streamType: TSStreamType = TSStreamType.NONE\r\n  streamId: number = NOPTS_VALUE\r\n  dts: bigint = NOPTS_VALUE_BIGINT\r\n  pts: bigint = NOPTS_VALUE_BIGINT\r\n  pos: bigint = NOPTS_VALUE_BIGINT\r\n  payload: Uint8Array = null\r\n  data: Uint8Array = null\r\n  randomAccessIndicator: number = 0\r\n  flags: 0\r\n}\r\n","/*\r\n * libmedia get bytes by duration\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport AVStream from 'avutil/AVStream'\r\nimport * as array from 'common/util/array'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport { AV_MILLI_TIME_BASE_Q } from 'avutil/constant'\r\n\r\nexport function getBytesByDuration(streams: AVStream[], duration: int64, timeBase: Rational) {\r\n  let bytes = 0n\r\n  array.each(streams, (st) => {\r\n    bytes += st.codecpar.bitrate * avRescaleQ(duration, timeBase, AV_MILLI_TIME_BASE_Q) / 8000n\r\n  })\r\n  return bytes\r\n}\r\n","/*\r\n * libmedia seek in bytes with timestamp\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVStream from 'avutil/AVStream'\r\nimport { AV_MILLI_TIME_BASE_Q, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport { avRescaleQ, avRescaleQ2 } from 'avutil/util/rational'\r\nimport { getBytesByDuration } from './getBytesByDuration'\r\nimport { createAVPacket, destroyAVPacket } from 'avutil/util/avpacket'\r\nimport * as errorType from 'avutil/error'\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport * as logger from 'common/util/logger'\r\nimport { IOFlags } from 'avutil/avformat'\r\n\r\nexport default async function seekInBytes(\r\n  context: AVIFormatContext,\r\n  stream: AVStream,\r\n  timestamp: int64,\r\n  firstPacketPos: int64,\r\n  readAVPacket: (context: AVIFormatContext, avpacket: pointer<AVPacket>) => Promise<int32>,\r\n  syncAVPacket: (context: AVIFormatContext) => Promise<void>\r\n) {\r\n\r\n  const now = context.ioReader.getPos()\r\n\r\n  const fileSize = await context.ioReader.fileSize()\r\n  let pos: int64 = NOPTS_VALUE_BIGINT\r\n  let duration = timestamp\r\n  if (stream.startTime !== NOPTS_VALUE_BIGINT) {\r\n    duration -= stream.startTime\r\n  }\r\n  else {\r\n    duration -= stream.firstDTS\r\n  }\r\n\r\n  const pointPts = avRescaleQ(timestamp, stream.timeBase, AV_MILLI_TIME_BASE_Q)\r\n\r\n  // 头十秒直接回到开始位置\r\n  if (pointPts < 10000n) {\r\n    logger.debug(`seek pts is earlier then 10s, seek to first packet pos(${firstPacketPos}) directly`)\r\n    await context.ioReader.seek(firstPacketPos)\r\n    return now\r\n  }\r\n\r\n  let bytes = getBytesByDuration(context.streams, duration, stream.timeBase)\r\n  // 最大到结尾往前 10 秒\r\n  const max = fileSize - getBytesByDuration(context.streams, 10000n, AV_MILLI_TIME_BASE_Q)\r\n  const length = getBytesByDuration(context.streams, 10000n, AV_MILLI_TIME_BASE_Q)\r\n  if (bytes > max) {\r\n    bytes = max\r\n  }\r\n  if (bytes < firstPacketPos) {\r\n    await context.ioReader.seek(firstPacketPos)\r\n    return now\r\n  }\r\n  const avpacket = createAVPacket()\r\n  let seekMax = fileSize\r\n  let seekMin = 0n\r\n\r\n  while (true) {\r\n    if (seekMax - seekMin < length) {\r\n      pos = seekMin\r\n      break\r\n    }\r\n    await context.ioReader.seek(bytes)\r\n    await syncAVPacket(context)\r\n    if (context.ioReader.flags & IOFlags.ABORT) {\r\n      break\r\n    }\r\n    const now = context.ioReader.getPos()\r\n\r\n    let ret = await readAVPacket(context, avpacket)\r\n\r\n    if (ret >= 0) {\r\n      const currentPts = avRescaleQ2(avpacket.pts, addressof(avpacket.timeBase), AV_MILLI_TIME_BASE_Q)\r\n      const diff = currentPts - pointPts\r\n\r\n      logger.debug(`try to seek to pos: ${bytes}, got packet pts: ${avpacket.pts}(${currentPts}ms), diff: ${diff}ms`)\r\n\r\n      // seek 时间戳的前面 10 秒内\r\n      if (diff <= 0n && -diff < 10000n) {\r\n        pos = now\r\n        break\r\n      }\r\n      // seek 后面\r\n      else if (diff > 0n) {\r\n        seekMax = bytes\r\n        bytes = (seekMin + seekMax) >> 1n\r\n      }\r\n      // seek 前面 10 秒外\r\n      else {\r\n        seekMin = bytes\r\n        bytes = (seekMin + seekMax) >> 1n\r\n      }\r\n    }\r\n    else {\r\n      // 失败了重新 seek 回原来的位置\r\n      pos = NOPTS_VALUE_BIGINT\r\n      break\r\n    }\r\n    if (context.ioReader.flags & IOFlags.ABORT) {\r\n      break\r\n    }\r\n  }\r\n\r\n  destroyAVPacket(avpacket)\r\n\r\n  if (pos !== NOPTS_VALUE_BIGINT) {\r\n    logger.debug(`finally seek to pos ${pos}`)\r\n\r\n    await context.ioReader.seek(pos)\r\n    await syncAVPacket(context)\r\n    return now\r\n  }\r\n  else {\r\n    await context.ioReader.seek(now)\r\n    if (context.ioReader.flags & IOFlags.ABORT) {\r\n      return static_cast<int64>(errorType.EOF)\r\n    }\r\n  }\r\n\r\n  return static_cast<int64>(errorType.FORMAT_NOT_SUPPORT)\r\n}\r\n","/*\r\n * libmedia aac util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVSampleFormat } from '../audiosamplefmt'\r\nimport Stream from '../AVStream'\r\nimport { AVPacketSideDataType } from '../codec'\r\nimport { NOPTS_VALUE } from '../constant'\r\nimport AVCodecParameters from '../struct/avcodecparameters'\r\nimport BitReader from 'common/io/BitReader'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport const enum MPEG4AudioObjectTypes {\r\n  NULL = 0,\r\n  /**\r\n   * Main-AAC\r\n   */\r\n  AAC_MAIN,\r\n  /**\r\n   * LC-AAC\r\n   */\r\n  AAC_LC,\r\n  AAC_SSR,\r\n  AAC_LTP,\r\n  /**\r\n   * HE-AAC\r\n   */\r\n  AAC_SBR,\r\n  AAC_SCALABLE,\r\n\r\n  AAC_LD = 23,\r\n\r\n  AAC_PS = 29,\r\n\r\n  LAYER1 = 32,\r\n  LAYER2,\r\n  /**\r\n   * MP3\r\n   */\r\n  LAYER3,\r\n\r\n  AAC_ELD = 39\r\n}\r\n\r\nexport const AACProfile2Name: Partial<Record<MPEG4AudioObjectTypes, string>> = {\r\n  [MPEG4AudioObjectTypes.AAC_MAIN]: 'Main',\r\n  [MPEG4AudioObjectTypes.AAC_LC]: 'LC',\r\n  [MPEG4AudioObjectTypes.AAC_SSR]: 'SSR',\r\n  [MPEG4AudioObjectTypes.AAC_LTP]: 'LTP',\r\n  [MPEG4AudioObjectTypes.AAC_SBR]: 'HE',\r\n  [MPEG4AudioObjectTypes.AAC_SCALABLE]: 'SCALABLE',\r\n  [MPEG4AudioObjectTypes.AAC_PS]: 'HEv2',\r\n  [MPEG4AudioObjectTypes.AAC_LD]: 'LD',\r\n  [MPEG4AudioObjectTypes.AAC_ELD]: 'ELD'\r\n}\r\n\r\nexport const MPEG4SamplingFrequencyIndex = {\r\n  96000: 0,\r\n  88200: 1,\r\n  64000: 2,\r\n  48000: 3,\r\n  44100: 4,\r\n  32000: 5,\r\n  24000: 6,\r\n  22050: 7,\r\n  16000: 8,\r\n  12000: 9,\r\n  11025: 10,\r\n  8000: 11,\r\n  7350: 12\r\n}\r\n\r\nexport const MPEG4SamplingFrequencies = [\r\n  96000,\r\n  88200,\r\n  64000,\r\n  48000,\r\n  44100,\r\n  32000,\r\n  24000,\r\n  22050,\r\n  16000,\r\n  12000,\r\n  11025,\r\n  8000,\r\n  7350,\r\n  NOPTS_VALUE,\r\n  NOPTS_VALUE,\r\n  NOPTS_VALUE\r\n]\r\n\r\nexport const MPEG4Channels = [\r\n  NOPTS_VALUE,\r\n  1,\r\n  2,\r\n  3,\r\n  4,\r\n  5,\r\n  6,\r\n  7\r\n]\r\n\r\n/**\r\n * 解析 AAC AudioSpecificConfig\r\n *    \r\n *             frequency\r\n *              44100Hz        fill bit\r\n *               4 bit          3 bit\r\n *              -------         -----\r\n *    0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 0\r\n *    ---------         -------\r\n *      5 bit            4 bit\r\n *     AAC LC           fl, fr\r\n *    profile           channel\r\n * \r\n * url: https://wiki.multimedia.cx/index.php/MPEG-4_Audio#Audio_Specific_Config\r\n * \r\n */\r\n\r\nexport function getAVCodecParameters(extradata: Uint8ArrayInterface) {\r\n  let profile = NOPTS_VALUE\r\n  let sampleRate = NOPTS_VALUE\r\n  let channels = NOPTS_VALUE\r\n  if (extradata.length >= 2) {\r\n    profile = (extradata[0] >> 3) & 0x1f\r\n    sampleRate = MPEG4SamplingFrequencies[((extradata[0] & 0x07) << 1)\r\n      | (extradata[1] >> 7)]\r\n\r\n    channels = MPEG4Channels[(extradata[1] >> 3) & 0x0f]\r\n  }\r\n\r\n  return {\r\n    profile,\r\n    sampleRate,\r\n    channels\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: Stream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata) {\r\n    const { profile, sampleRate, channels } = getAVCodecParameters(extradata)\r\n    stream.codecpar.profile = profile\r\n    stream.codecpar.sampleRate = sampleRate\r\n    stream.codecpar.chLayout.nbChannels = channels\r\n    stream.codecpar.frameSize = profile ===  MPEG4AudioObjectTypes.AAC_SBR ? 2048 : 1024\r\n    stream.codecpar.format = AVSampleFormat.AV_SAMPLE_FMT_FLTP\r\n  }\r\n}\r\n\r\nexport function avCodecParameters2Extradata(codecpar: AVCodecParameters) {\r\n  const samplingFreqIndex = MPEG4SamplingFrequencyIndex[codecpar.sampleRate]\r\n  const channelConfig = codecpar.chLayout.nbChannels\r\n  const profile = codecpar.profile === NOPTS_VALUE ? MPEG4AudioObjectTypes.AAC_LC : codecpar.profile\r\n\r\n  const extradata = new Uint8Array(2)\r\n  extradata[0] = ((profile & 0x1f) << 3) | ((samplingFreqIndex & 0x0e) >> 1)\r\n  extradata[1] = ((samplingFreqIndex & 0x01) << 7) | ((channelConfig & 0x0f) << 3)\r\n\r\n  return extradata\r\n}\r\n\r\nexport interface AACADTSHeader {\r\n  syncWord: number\r\n  profile: number\r\n  sampleRate: number\r\n  channels: number\r\n  aacFrameLength: number\r\n  numberOfRawDataBlocksInFrame: number\r\n  headerLength: number\r\n  framePayloadLength: number\r\n}\r\n\r\nexport interface AACLATMHeader {\r\n  syncWord: number\r\n  profile: number\r\n  sampleRate: number\r\n  channels: number\r\n  useSameStreamMux: boolean\r\n  headerLength: number\r\n  framePayloadLength: number\r\n  muxLengthBytes: number\r\n}\r\n\r\n/**\r\n * \r\n * adts 封装转 raw\r\n * \r\n * bits    \r\n * - 12  syncword\r\n * - 1   ID (MPEG 标识位，固定为 1)\r\n * - 2   Layer ( 固定为 0)\r\n * - 1   Protection Absent ( 指示是否有 CRC 校验，1 表示没有校验）\r\n * - 2   Profile\r\n * - 4   Sampling Frequency Index ( 采样率的索引）\r\n * - 1   Private Bit ( 保留位，一般设置为 0)\r\n * - 3   Channel Configuration ( 音频通道数）\r\n * - 1   Original Copy ( 原始拷贝标志位，一般设置为 0)\r\n * - 1   Home ( 保留位，一般设置为 0)\r\n * - 1   Copyright Identification Bit（置 0）\r\n * - 1   Copyright Identification Start（置 0）\r\n * - 13  Frame Length ( 帧长度，包括 ADTS 头和音频帧数据的长度）\r\n * - 11  Buffer Fullness ( 缓冲区满度，可用于音频流的同步）\r\n * - 2   Number of Raw Data Blocks in Frame ( 帧中原始数据块的数量）\r\n * - 16  CRC (Protection Absent 控制）\r\n * - N  raw aac data\r\n * \r\n */\r\nexport function parseADTSHeader(buffer: Uint8ArrayInterface): AACADTSHeader | number {\r\n\r\n  if (buffer.length < 7) {\r\n    return -1\r\n  }\r\n\r\n  const syncWord = (buffer[0] << 4) | (buffer[0 + 1] >> 4)\r\n\r\n  if (syncWord !== 0xFFF) {\r\n    return -1\r\n  }\r\n\r\n  /*\r\n    * const id = (buffer[1] & 0x08) >>> 3\r\n    * const layer = (buffer[1] & 0x06) >>> 1\r\n    */\r\n  const protectionAbsent = buffer[1] & 0x01\r\n  const profile = (buffer[2] & 0xC0) >>> 6\r\n  const samplingFrequencyIndex = (buffer[2] & 0x3C) >>> 2\r\n  const channelConfiguration = ((buffer[2] & 0x01) << 2) | ((buffer[3] & 0xC0) >>> 6)\r\n\r\n  // adts_variable_header()\r\n  const aacFrameLength = ((buffer[3] & 0x03) << 11)\r\n    | (buffer[4] << 3)\r\n    | ((buffer[5] & 0xE0) >>> 5)\r\n\r\n  const numberOfRawDataBlocksInFrame = buffer[6] & 0x03\r\n\r\n  let headerLength = protectionAbsent === 1 ? 7 : 9\r\n  let framePayloadLength = aacFrameLength - headerLength\r\n\r\n  return {\r\n    syncWord,\r\n    profile: profile + 1,\r\n    sampleRate: MPEG4SamplingFrequencies[samplingFrequencyIndex],\r\n    channels: MPEG4Channels[channelConfiguration],\r\n    aacFrameLength,\r\n    numberOfRawDataBlocksInFrame,\r\n    headerLength,\r\n    framePayloadLength\r\n  }\r\n}\r\n\r\nexport function parseLATMHeader(buffer: Uint8ArrayInterface, bitReader?: BitReader) {\r\n  if (!bitReader) {\r\n    bitReader = new BitReader()\r\n    bitReader.appendBuffer(buffer)\r\n  }\r\n\r\n  function getLATMValue() {\r\n    const bytesForValue = bitReader.readU(2)\r\n    let value = 0\r\n\r\n    for (let i = 0; i <= bytesForValue; i++) {\r\n      value = value << 8\r\n      value = value | bitReader.readU(8)\r\n    }\r\n    return value\r\n  }\r\n\r\n  const now = bitReader.getPointer()\r\n\r\n  const info: AACLATMHeader = {\r\n    syncWord: 0,\r\n    profile: 0,\r\n    sampleRate: 0,\r\n    channels: 0,\r\n    useSameStreamMux: false,\r\n    headerLength: 0,\r\n    framePayloadLength: 0,\r\n    muxLengthBytes: 0\r\n  }\r\n\r\n  const syncWord = bitReader.readU(11)\r\n\r\n  if (syncWord !== 0x2B7) {\r\n    return -1\r\n  }\r\n\r\n  info.syncWord = syncWord\r\n\r\n  info.muxLengthBytes = bitReader.readU(13)\r\n\r\n  const useSameStreamMux = bitReader.readU1() === 0x01\r\n\r\n  info.useSameStreamMux = useSameStreamMux\r\n\r\n  if (!useSameStreamMux) {\r\n    const audioMuxVersion = bitReader.readU1() === 0x01\r\n    const audioMuxVersionA = audioMuxVersion && bitReader.readU1() === 0x01\r\n    if (audioMuxVersionA) {\r\n      return -1\r\n    }\r\n    if (audioMuxVersion) {\r\n      getLATMValue()\r\n    }\r\n    const allStreamsSameTimeFraming = bitReader.readU1() === 0x01\r\n    if (!allStreamsSameTimeFraming) {\r\n      return -1\r\n    }\r\n    const numSubFrames = bitReader.readU(6)\r\n    if (numSubFrames !== 0) {\r\n      return -1\r\n    }\r\n\r\n    const numProgram = bitReader.readU(4)\r\n    if (numProgram !== 0) {\r\n      return -1\r\n    }\r\n\r\n    const numLayer = bitReader.readU(3)\r\n    if (numLayer !== 0) {\r\n      return -1\r\n    }\r\n\r\n    let fillBits = audioMuxVersion ? getLATMValue() : 0\r\n\r\n    const audioObjectType = bitReader.readU(5)\r\n    fillBits -= 5\r\n\r\n    const samplingFreqIndex = bitReader.readU(4)\r\n    fillBits -= 4\r\n\r\n    const channelConfig = bitReader.readU(4)\r\n    fillBits -= 4\r\n\r\n    bitReader.readU(3)\r\n    fillBits -= 3\r\n\r\n    if (fillBits > 0) {\r\n      bitReader.readU(fillBits)\r\n    }\r\n\r\n    const frameLengthType = bitReader.readU(3)\r\n    if (frameLengthType === 0) {\r\n      bitReader.readU(8)\r\n    }\r\n    else {\r\n      return -1\r\n    }\r\n\r\n    const otherDataPresent = bitReader.readU1() === 0x01\r\n    if (otherDataPresent) {\r\n      if (audioMuxVersion) {\r\n        getLATMValue()\r\n      }\r\n      else {\r\n        let otherDataLenBits = 0\r\n        while (true) {\r\n          otherDataLenBits = otherDataLenBits << 8\r\n          const otherDataLenEsc = bitReader.readU1() === 0x01\r\n          const otherDataLenTmp = bitReader.readU(8)\r\n          otherDataLenBits += otherDataLenTmp\r\n          if (!otherDataLenEsc) {\r\n            break\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const crcCheckPresent = bitReader.readU1() === 0x01\r\n    if (crcCheckPresent) {\r\n      bitReader.readU(8)\r\n    }\r\n\r\n    info.profile = audioObjectType + 1\r\n    info.sampleRate = MPEG4SamplingFrequencies[samplingFreqIndex]\r\n    info.channels = MPEG4Channels[channelConfig]\r\n  }\r\n\r\n  let length = 0\r\n  while (true) {\r\n    const tmp = bitReader.readU(8)\r\n    length += tmp\r\n    if (tmp !== 0xff) {\r\n      break\r\n    }\r\n  }\r\n\r\n  info.framePayloadLength = length\r\n  info.headerLength = bitReader.getPointer() - now + (bitReader.getBitLeft() === 8 ? 0 : 1)\r\n\r\n  return info\r\n}\r\n","/*\r\n * libmedia ac3 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVChannelLayout } from '../audiosamplefmt'\r\nimport BitReader from 'common/io/BitReader'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport const enum AC3DeltaStrategy {\r\n  DBA_REUSE = 0,\r\n  DBA_NEW,\r\n  DBA_NONE,\r\n  DBA_RESERVED\r\n}\r\n\r\nexport const enum AC3ChannelMode {\r\n  AC3_CHMODE_DUALMONO = 0,\r\n  AC3_CHMODE_MONO,\r\n  AC3_CHMODE_STEREO,\r\n  AC3_CHMODE_3F,\r\n  AC3_CHMODE_2F1R,\r\n  AC3_CHMODE_3F1R,\r\n  AC3_CHMODE_2F2R,\r\n  AC3_CHMODE_3F2R\r\n}\r\n\r\nexport const enum AC3DolbySurroundMode {\r\n  AC3_DSURMOD_NOTINDICATED = 0,\r\n  AC3_DSURMOD_OFF,\r\n  AC3_DSURMOD_ON,\r\n  AC3_DSURMOD_RESERVED\r\n}\r\n\r\nexport const enum AC3DolbySurroundEXMode {\r\n  AC3_DSUREXMOD_NOTINDICATED = 0,\r\n  AC3_DSUREXMOD_OFF,\r\n  AC3_DSUREXMOD_ON,\r\n  AC3_DSUREXMOD_PLIIZ\r\n}\r\n\r\nexport const enum AC3DolbyHeadphoneMode {\r\n  AC3_DHEADPHONMOD_NOTINDICATED = 0,\r\n  AC3_DHEADPHONMOD_OFF,\r\n  AC3_DHEADPHONMOD_ON,\r\n  AC3_DHEADPHONMOD_RESERVED\r\n}\r\n\r\nexport const enum AC3PreferredStereoDownmixMode {\r\n  AC3_DMIXMOD_NOTINDICATED = 0,\r\n  AC3_DMIXMOD_LTRT,\r\n  AC3_DMIXMOD_LORO,\r\n  // reserved value in A/52, but used by encoders to indicate DPL2\r\n  AC3_DMIXMOD_DPLII\r\n}\r\n\r\nexport const enum EAC3FrameType {\r\n  EAC3_FRAME_TYPE_INDEPENDENT = 0,\r\n  EAC3_FRAME_TYPE_DEPENDENT,\r\n  EAC3_FRAME_TYPE_AC3_CONVERT,\r\n  EAC3_FRAME_TYPE_RESERVED\r\n}\r\n\r\nexport const AC3ChannelLayout: uint32[] = [\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_STEREO,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_MONO,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_STEREO,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_SURROUND,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_2_1,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_4POINT0,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_2_2,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_5POINT0\r\n]\r\n\r\nexport interface AC3HeaderInfo {\r\n  syncWord: uint16\r\n  crc1: uint16\r\n  srCode: uint8\r\n  bitstreamId: uint8\r\n  bitstreamMode: uint8\r\n  channelMode: uint8\r\n  lfeOn: uint8\r\n  frameType: uint8\r\n  substreamId: int32\r\n  centerMixLevel: int32\r\n  surroundMixLevel: int32\r\n  channelMap: uint16\r\n  numBlocks: int32\r\n  dolbySurroundMode: int32\r\n  srShift: uint8\r\n  sampleRate: uint16\r\n  bitrate: uint32\r\n  channels: uint8\r\n  frameSize: uint16\r\n  channelLayout: uint64\r\n  ac3BitrateCode: int8\r\n}\r\n\r\nconst AC3FrameSizeTab = [\r\n  [ 64,   69,   96   ],\r\n  [ 64,   70,   96   ],\r\n  [ 80,   87,   120  ],\r\n  [ 80,   88,   120  ],\r\n  [ 96,   104,  144  ],\r\n  [ 96,   105,  144  ],\r\n  [ 112,  121,  168  ],\r\n  [ 112,  122,  168  ],\r\n  [ 128,  139,  192  ],\r\n  [ 128,  140,  192  ],\r\n  [ 160,  174,  240  ],\r\n  [ 160,  175,  240  ],\r\n  [ 192,  208,  288  ],\r\n  [ 192,  209,  288  ],\r\n  [ 224,  243,  336  ],\r\n  [ 224,  244,  336  ],\r\n  [ 256,  278,  384  ],\r\n  [ 256,  279,  384  ],\r\n  [ 320,  348,  480  ],\r\n  [ 320,  349,  480  ],\r\n  [ 384,  417,  576  ],\r\n  [ 384,  418,  576  ],\r\n  [ 448,  487,  672  ],\r\n  [ 448,  488,  672  ],\r\n  [ 512,  557,  768  ],\r\n  [ 512,  558,  768  ],\r\n  [ 640,  696,  960  ],\r\n  [ 640,  697,  960  ],\r\n  [ 768,  835,  1152 ],\r\n  [ 768,  836,  1152 ],\r\n  [ 896,  975,  1344 ],\r\n  [ 896,  976,  1344 ],\r\n  [ 1024, 1114, 1536 ],\r\n  [ 1024, 1115, 1536 ],\r\n  [ 1152, 1253, 1728 ],\r\n  [ 1152, 1254, 1728 ],\r\n  [ 1280, 1393, 1920 ],\r\n  [ 1280, 1394, 1920 ],\r\n]\r\n\r\nconst CenterLevelsTab = [4, 5, 6, 5]\r\nconst SurroundLevelsTab = [4, 6, 7, 6]\r\nconst AC3SampleRateTab = [48000, 44100, 32000, 0]\r\nconst AC3BitrateTab = [\r\n  32, 40, 48, 56, 64, 80, 96, 112, 128,\r\n  160, 192, 224, 256, 320, 384, 448, 512, 576, 640\r\n]\r\nconst AC3ChannelsTab = [\r\n  2, 1, 2, 3, 3, 4, 4, 5\r\n]\r\n\r\nconst EAC3Blocks = [\r\n  1, 2, 3, 6\r\n]\r\n\r\nconst AC3_HEADER_SIZE = 7\r\n\r\nexport function parseHeader(buf: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader(buf.length)\r\n  bitReader.appendBuffer(buf)\r\n\r\n  const info: AC3HeaderInfo = {\r\n    syncWord: 0,\r\n    crc1: 0,\r\n    srCode: 0,\r\n    bitstreamId: 0,\r\n    bitstreamMode: 0,\r\n    channelMode: 0,\r\n    lfeOn: 0,\r\n    frameType: 0,\r\n    substreamId: 0,\r\n    centerMixLevel: 0,\r\n    surroundMixLevel: 0,\r\n    channelMap: 0,\r\n    numBlocks: 0,\r\n    dolbySurroundMode: 0,\r\n    srShift: 0,\r\n    sampleRate: 0,\r\n    bitrate: 0,\r\n    channels: 0,\r\n    frameSize: 0,\r\n    channelLayout: 0n,\r\n    ac3BitrateCode: 0\r\n  }\r\n\r\n  info.syncWord = bitReader.readU(16)\r\n\r\n  if (info.syncWord !== 0x0B77) {\r\n    return -1\r\n  }\r\n\r\n  info.bitstreamId = bitReader.peekU(29) & 0x1f\r\n\r\n  if (info.bitstreamId > 16) {\r\n    return -2\r\n  }\r\n\r\n  info.numBlocks = 6\r\n  info.ac3BitrateCode = -1\r\n  info.centerMixLevel = 5\r\n  info.surroundMixLevel = 6\r\n\r\n  info.dolbySurroundMode = AC3DolbySurroundMode.AC3_DSURMOD_NOTINDICATED\r\n\r\n  if (info.bitstreamId <= 10) {\r\n    info.crc1 = bitReader.readU(16)\r\n    info.srCode = bitReader.readU(2)\r\n\r\n    if (info.srCode === 3) {\r\n      return -3\r\n    }\r\n\r\n    const frameSizeCode = bitReader.readU(6)\r\n    if (frameSizeCode > 37) {\r\n      return -4\r\n    }\r\n\r\n    info.ac3BitrateCode = (frameSizeCode >> 1)\r\n\r\n    bitReader.readU(5)\r\n\r\n    info.bitstreamMode = bitReader.readU(3)\r\n    info.channelMode = bitReader.readU(3)\r\n\r\n    if (info.channelMode == AC3ChannelMode.AC3_CHMODE_STEREO) {\r\n      info.dolbySurroundMode = bitReader.readU(2)\r\n    }\r\n    else {\r\n      if ((info.channelMode & 1) && info.channelMode != AC3ChannelMode.AC3_CHMODE_MONO) {\r\n        info.centerMixLevel = CenterLevelsTab[bitReader.readU(2)]\r\n      }\r\n      if (info.channelMode & 4) {\r\n        info.surroundMixLevel = SurroundLevelsTab[bitReader.readU(2)]\r\n      }\r\n    }\r\n    info.lfeOn = bitReader.readU(1)\r\n\r\n    info.srShift = Math.max(info.bitstreamId, 8) - 8\r\n    info.sampleRate = AC3SampleRateTab[info.srCode] >> info.srShift\r\n    info.bitrate = (AC3BitrateTab[info.ac3BitrateCode] * 1000) >> info.srShift\r\n    info.channels = AC3ChannelsTab[info.channelMode] + info.lfeOn\r\n    info.frameSize = AC3FrameSizeTab[frameSizeCode][info.srCode] * 2\r\n    info.frameType = EAC3FrameType.EAC3_FRAME_TYPE_AC3_CONVERT\r\n    info.substreamId = 0\r\n  }\r\n  else {\r\n    /* Enhanced AC-3 */\r\n    info.crc1 = 0\r\n    info.frameType = bitReader.readU(2)\r\n    if (info.frameType == EAC3FrameType.EAC3_FRAME_TYPE_RESERVED) {\r\n      return -5\r\n    }\r\n    info.substreamId = bitReader.readU(3)\r\n\r\n    info.frameSize = (bitReader.readU(11) + 1) << 1\r\n    if (info.frameSize < AC3_HEADER_SIZE) {\r\n      return -6\r\n    }\r\n\r\n    info.srCode = bitReader.readU(2)\r\n    if (info.srCode == 3) {\r\n      const srCode2 = bitReader.readU(2)\r\n      if (srCode2 == 3) {\r\n        return -7\r\n      }\r\n      info.sampleRate = AC3SampleRateTab[srCode2] / 2\r\n      info.srShift = 1\r\n    }\r\n    else {\r\n      info.numBlocks = EAC3Blocks[bitReader.readU(2)]\r\n      info.sampleRate = AC3SampleRateTab[info.srCode]\r\n      info.srShift = 0\r\n    }\r\n\r\n    info.channelMode = bitReader.readU(3)\r\n    info.lfeOn = bitReader.readU(1)\r\n\r\n    info.bitrate = 8 * info.frameSize * info.sampleRate / (info.numBlocks * 256)\r\n    info.channels = AC3ChannelsTab[info.channelMode] + info.lfeOn\r\n  }\r\n  info.channelLayout = static_cast<uint64>(AC3ChannelLayout[info.channelMode])\r\n  if (info.lfeOn) {\r\n    info.channelLayout |= static_cast<uint64>(AVChannelLayout.AV_CHANNEL_LAYOUT_LOW_FREQUENCY as uint32)\r\n  }\r\n\r\n  return info\r\n}\r\n","/*\r\n * libmedia dts util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport BitReader from 'common/io/BitReader'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport align from 'common/math/align'\r\n\r\nconst DTSChannelTab = [1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8]\r\n\r\nconst DTSSampleRateTab = [0, 8000, 16000, 32000, 0, 0, 11025, 22050, 44100, 0, 0, 12000, 24000, 48000, 96000, 192000]\r\n\r\nconst DTSBitrateTab = [32000, 56000, 64000, 96000, 112000, 128000, 192000, 224000, 256000, 320000, 384000, 448000,\r\n  512000, 576000, 640000, 768000, 960000, 1024000, 1152000, 1280000, 1344000, 1408000, 1411200, 1472000, 1536000,\r\n  1920000, 2048000, 3072000, 3840000, 0, 0, 0\r\n]\r\n\r\nexport const DTS_PCMBLOCK_SAMPLES = 32\r\n\r\nexport interface DTSHeaderInfo {\r\n  syncWord: uint32\r\n  frameType: int32\r\n  deficitSamples: int32\r\n  crcFlag: int32\r\n  sampleBlock: int32\r\n  frameSize: int32\r\n  channelIndex: int32\r\n  sampleRateIndex: int32\r\n  bitrateIndex: int32\r\n\r\n  channels: int32\r\n  sampleRate: int32\r\n  bitrate: int32\r\n}\r\n\r\nexport function parseHeader(buf: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader(buf.length)\r\n  bitReader.appendBuffer(buf)\r\n\r\n  const info: DTSHeaderInfo = {\r\n    syncWord: 0,\r\n    frameType: 0,\r\n    deficitSamples: 0,\r\n    crcFlag: 0,\r\n    sampleBlock: 0,\r\n    frameSize: 0,\r\n    channelIndex: 0,\r\n    sampleRateIndex: 0,\r\n    bitrateIndex: 0,\r\n\r\n    channels: 0,\r\n    sampleRate: 0,\r\n    bitrate: 0\r\n  }\r\n\r\n  info.syncWord = bitReader.readU(32)\r\n\r\n  if (info.syncWord !== 0x7ffe8001 && info.syncWord !== 0xfe7f0180) {\r\n    return -1\r\n  }\r\n\r\n  info.frameType = bitReader.readU1()\r\n  info.deficitSamples = bitReader.readU(5) + 1\r\n  info.crcFlag = bitReader.readU1()\r\n  info.sampleBlock = bitReader.readU(7) + 1\r\n  info.frameSize = align(bitReader.readU(14) + 1, 4)\r\n  info.channelIndex = bitReader.readU(6)\r\n  info.sampleRateIndex = bitReader.readU(4)\r\n  info.bitrateIndex = bitReader.readU(5)\r\n\r\n  info.channels = DTSChannelTab[info.channelIndex]\r\n  info.sampleRate = DTSSampleRateTab[info.sampleRateIndex]\r\n  info.bitrate = DTSBitrateTab[info.bitrateIndex]\r\n\r\n  return info\r\n}\r\n","/*\r\n * libmedia mp3 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport AVStream from '../AVStream'\r\nimport { NOPTS_VALUE } from '../constant'\r\n\r\nconst MpegAudioV10SampleRateTable = [44100, 48000, 32000, 0]\r\n\r\nconst MpegAudioV20SampleRateTable = [22050, 24000, 16000, 0]\r\n\r\nconst MpegAudioV25SampleRateTable = [11025, 12000, 8000, 0]\r\n\r\nconst MpegAudioV10FrameSizeTable = [0, 1152, 1152, 384]\r\n\r\nconst MpegAudioV20FrameSizeTable = [0, 576, 1152, 384]\r\n\r\nconst MpegAudioV25FrameSizeTable = [0, 576, 1152, 384]\r\n\r\nconst MpegAudioV1L1BitRateTable = [0, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, -1]\r\n\r\nconst MpegAudioV1L2BitRateTable = [0, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, -1]\r\n\r\nconst MpegAudioV1L3BitRateTable = [0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, -1]\r\n\r\nconst MpegAudioV2L1BitRateTable = [0, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256, -1]\r\n\r\nconst MpegAudioV2L2L3BitRateTable = [0, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160, -1]\r\n\r\nexport function getSampleRateByVersionIndex(version: number, samplingFreqIndex: number) {\r\n  switch (version) {\r\n    case 0:\r\n      // MPEG 2.5\r\n      return MpegAudioV25SampleRateTable[samplingFreqIndex]\r\n    case 2:\r\n      // MPEG 2\r\n      return MpegAudioV20SampleRateTable[samplingFreqIndex]\r\n    case 3:\r\n      // MPEG 1\r\n      return MpegAudioV10SampleRateTable[samplingFreqIndex]\r\n  }\r\n  return NOPTS_VALUE\r\n}\r\n\r\nexport function getFrameSizeByVersionLayer(version: number, layer: number) {\r\n  switch (version) {\r\n    case 0:\r\n      // MPEG 2.5\r\n      return MpegAudioV25FrameSizeTable[layer]\r\n    case 2:\r\n      // MPEG 2\r\n      return MpegAudioV20FrameSizeTable[layer]\r\n    case 3:\r\n      // MPEG 1\r\n      return MpegAudioV10FrameSizeTable[layer]\r\n  }\r\n  return NOPTS_VALUE\r\n}\r\n\r\nexport function getBitRateByVersionLayerIndex(version: number, layer: number, index: number) {\r\n\r\n  switch (layer) {\r\n    // layer3\r\n    case 1:\r\n      switch (version) {\r\n        case 0:\r\n        case 2:\r\n          return MpegAudioV2L2L3BitRateTable[index]\r\n        case 3:\r\n          return MpegAudioV1L3BitRateTable[index]\r\n      }\r\n      break\r\n    // layer2\r\n    case 2:\r\n      switch (version) {\r\n        case 0:\r\n        case 2:\r\n          return MpegAudioV2L2L3BitRateTable[index]\r\n        case 3:\r\n          return MpegAudioV1L2BitRateTable[index]\r\n      }\r\n    // layer1\r\n    case 3:\r\n      switch (version) {\r\n        case 0:\r\n        case 2:\r\n          return MpegAudioV2L1BitRateTable[index]\r\n        case 3:\r\n          return MpegAudioV1L1BitRateTable[index]\r\n      }\r\n  }\r\n  return NOPTS_VALUE\r\n}\r\n\r\nexport function getProfileByLayer(layer: number) {\r\n  switch (layer) {\r\n    case 1:\r\n      // Layer 3\r\n      return 34\r\n    case 2:\r\n      // Layer 2\r\n      return 33\r\n    case 3:\r\n      // Layer 1\r\n      return 32\r\n  }\r\n  return NOPTS_VALUE\r\n}\r\n\r\nexport const enum MP3Profile {\r\n  Layer1 = 32,\r\n  Layer2 = 33,\r\n  Layer3 = 34\r\n}\r\n\r\nexport const MP3Profile2Name: Record<MP3Profile, string> = {\r\n  [MP3Profile.Layer1]: 'Layer1',\r\n  [MP3Profile.Layer2]: 'Layer2',\r\n  [MP3Profile.Layer3]: 'Layer3'\r\n}\r\n\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, buffer: Uint8ArrayInterface) {\r\n  if (buffer && buffer.length >= 4) {\r\n    const ver = (buffer[1] >>> 3) & 0x03\r\n    const layer = (buffer[1] & 0x06) >> 1\r\n    // const bitrateIndex = (buffer[2] & 0xF0) >>> 4\r\n    const samplingFreqIndex = (buffer[2] & 0x0C) >>> 2\r\n\r\n    const channelMode = (buffer[3] >>> 6) & 0x03\r\n\r\n    const channelCount = channelMode !== 3 ? 2 : 1\r\n    const profile = getProfileByLayer(layer)\r\n    const sampleRate = getSampleRateByVersionIndex(ver, samplingFreqIndex)\r\n\r\n    stream.codecpar.profile = profile\r\n    stream.codecpar.sampleRate = sampleRate\r\n    stream.codecpar.chLayout.nbChannels = channelCount\r\n  }\r\n}\r\n","/*\r\n * libmedia opus util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVPacketSideDataType } from '../codec'\r\nimport AVStream from '../AVStream'\r\nimport AVCodecParameters from '../struct/avcodecparameters'\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport { avRescaleQ } from '../util/rational'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport const durations = [\r\n  /* Silk NB */\r\n  480, 960, 1920, 2880,\r\n  /* Silk MB */\r\n  480, 960, 1920, 2880,\r\n  /* Silk WB */\r\n  480, 960, 1920, 2880,\r\n  /* Hybrid SWB */\r\n  480, 960,\r\n  /* Hybrid FB */\r\n  480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960\r\n]\r\n\r\n\r\nexport function getBufferSamples(buffer: Uint8Array) {\r\n  let toc = 0, frameDuration = 0, nframes = 0\r\n\r\n  if (buffer.length < 1) {\r\n    return 0\r\n  }\r\n\r\n  toc = buffer[0]\r\n\r\n  frameDuration = durations[toc >> 3]\r\n\r\n  switch (toc & 3) {\r\n    case 0:\r\n      nframes = 1\r\n      break\r\n    case 1:\r\n      nframes = 2\r\n      break\r\n    case 2:\r\n      nframes = 2\r\n      break\r\n    case 3:\r\n      if (buffer.length < 2) {\r\n        return 0\r\n      }\r\n      nframes = buffer[1] & 63\r\n      break\r\n  }\r\n  return nframes * frameDuration\r\n}\r\n\r\n/**\r\n * opus extradata\r\n * \r\n * - 8 bytes Magic Signature: OpusHead\r\n * - 1 bytes unsigned, 对应值 0x01 version\r\n * - 1 bytes unsigned, channels 它可能和编码声道数不一致， 它可能被修改成 packet-by-packet, 对应值 0x01\r\n * - 2 bytes unsigned, preSkip 这是要从开始播放时的解码器输出， 从页面的颗粒位置减去以计算其 PCM 样本位置。\r\n * - 4 bytes unsigned, sampleRate 原始输入采样率\r\n * - 2 bytes signed, outputGain 这是解码时要应用的增益， 20 * log10 缩放解码器输出以实现所需的播放音量\r\n * - 1 bytes unsigned, channelMappingFamily 指示输出渠道的顺序和语音含义。该八位位组的每个当前指定的值表示一个映射系列，它定义了一组允许的通道数，以及每个允许的通道数的通道名称的有序集合\r\n * - channelMappingTable 可选， 当 Channel Mapping Family 为 0 时被省略。\r\n *  - 1 bytes, streamCount, unsigned ogg packet 里面编码了多少路 stream\r\n *  - 1 bytes, coupledStreamCount, unsigned 标识有多少路流是双声声道，必须小于 streamCount\r\n *  - C bytes, C 为总输出声道数 coupledStreamCount + streamCount\r\n * \r\n */\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 19) {\r\n    const reader = new BufferReader(extradata, false)\r\n    reader.skip(9)\r\n    stream.codecpar.chLayout.nbChannels = reader.readUint8()\r\n    stream.codecpar.initialPadding = reader.readUint16()\r\n    stream.codecpar.sampleRate = reader.readUint32()\r\n\r\n    stream.codecpar.seekPreroll = Number(avRescaleQ(\r\n      80n,\r\n      {\r\n        den: 1000,\r\n        num: 1\r\n      },\r\n      {\r\n        den: 48000,\r\n        num: 1\r\n      }\r\n    ))\r\n  }\r\n}\r\n\r\nexport function avCodecParameters2Extradata(codecpar: AVCodecParameters) {\r\n  const extradata = new Uint8Array(19)\r\n\r\n  const writer = new BufferWriter(extradata, false)\r\n\r\n  writer.writeString('OpusHead')\r\n  writer.writeUint8(0x01)\r\n  writer.writeUint8(codecpar.chLayout.nbChannels)\r\n  writer.writeUint16(codecpar.initialPadding)\r\n  writer.writeUint32(codecpar.sampleRate)\r\n\r\n  return extradata\r\n}\r\n","/**\r\n * 获取数组中中间的值\r\n * \r\n * @param arr \r\n * @returns \r\n */\r\nexport default function median(arr: number[]) {\r\n  if (arr.length === 0) {\r\n    return 0\r\n  }\r\n\r\n  const sortedArr = arr.slice().sort((a, b) => a - b)\r\n\r\n  const middleIndex = Math.floor(sortedArr.length / 2)\r\n\r\n  if (sortedArr.length % 2 === 1) {\r\n    return sortedArr[middleIndex]\r\n  }\r\n  else {\r\n    return (sortedArr[middleIndex - 1] + sortedArr[middleIndex]) / 2\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}