{"version":3,"file":"src_avformat_formats_IRtspFormat_ts.avtranscoder.js","mappings":"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","sources":["webpack://AVTranscoder/./src/avformat/bsf/AVBSFilter.ts","webpack://AVTranscoder/./src/avformat/bsf/ac3/Ac32RawFilter.ts","webpack://AVTranscoder/./src/avformat/bsf/mp3/Mp32RawFilter.ts","webpack://AVTranscoder/./src/avformat/formats/IFormat.ts","webpack://AVTranscoder/./src/avformat/formats/IRtspFormat.ts","webpack://AVTranscoder/./src/avformat/formats/mp3/frameHeader.ts","webpack://AVTranscoder/./src/avprotocol/rtcp/RTCPPacket.ts","webpack://AVTranscoder/./src/avprotocol/rtcp/isRtcp.ts","webpack://AVTranscoder/./src/avprotocol/rtcp/parser.ts","webpack://AVTranscoder/./src/avprotocol/rtp/RTPFrameQueue.ts","webpack://AVTranscoder/./src/avprotocol/rtp/RTPPacket.ts","webpack://AVTranscoder/./src/avprotocol/rtp/depacketizer.ts","webpack://AVTranscoder/./src/avprotocol/rtp/fmtp.ts","webpack://AVTranscoder/./src/avprotocol/rtp/isRtp.ts","webpack://AVTranscoder/./src/avprotocol/rtp/parser.ts","webpack://AVTranscoder/./src/avprotocol/rtp/rtp.ts","webpack://AVTranscoder/./src/avprotocol/rtsp/RtspSession.ts","webpack://AVTranscoder/./src/avprotocol/sdp/grammars.ts","webpack://AVTranscoder/./src/avprotocol/sdp/sdp.ts","webpack://AVTranscoder/./src/avutil/codecs/aac.ts","webpack://AVTranscoder/./src/avutil/codecs/ac3.ts","webpack://AVTranscoder/./src/avutil/codecs/mp3.ts","webpack://AVTranscoder/./src/avutil/util/ntp.ts","webpack://AVTranscoder/./src/common/network/textMessage/message.ts"],"sourcesContent":["/*\r\n * libmedia AVBSFilter\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport { avMallocz } from 'avutil/util/mem'\r\nimport { copyCodecParameters, freeCodecParameters } from 'avutil/util/codecparameters'\r\n\r\nexport default abstract class AVBSFilter {\r\n\r\n  inCodecpar: pointer<AVCodecParameters>\r\n  inTimeBase: Rational\r\n\r\n  outCodecpar: pointer<AVCodecParameters>\r\n\r\n  public init(codecpar: pointer<AVCodecParameters>, timeBase: pointer<Rational>): number {\r\n    this.inCodecpar = reinterpret_cast<pointer<AVCodecParameters>>(avMallocz(sizeof(AVCodecParameters)))\r\n    copyCodecParameters(this.inCodecpar, codecpar)\r\n\r\n    this.inTimeBase = {\r\n      den: timeBase.den,\r\n      num: timeBase.num\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  public destroy() {\r\n    if (this.inCodecpar) {\r\n      freeCodecParameters(this.inCodecpar)\r\n      this.inCodecpar = nullptr\r\n    }\r\n  }\r\n\r\n  public abstract sendAVPacket(avpacket: pointer<AVPacket>): number\r\n  public abstract receiveAVPacket(avpacket: pointer<AVPacket>): number\r\n  public abstract reset(): number\r\n}\r\n","/*\r\n * libmedia Ac32RawFilter\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport AVBSFilter from '../AVBSFilter'\r\nimport { mapUint8Array, memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport * as logger from 'common/util/logger'\r\nimport * as errorType from 'avutil/error'\r\nimport { AV_TIME_BASE, AV_TIME_BASE_Q, NOPTS_VALUE, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport { addAVPacketData, unrefAVPacket } from 'avutil/util/avpacket'\r\nimport * as ac3 from 'avutil/codecs/ac3'\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\nimport * as is from 'common/util/is'\r\n\r\nexport default class Ac32RawFilter extends AVBSFilter {\r\n\r\n  private caches: {\r\n    duration: number\r\n    dts: bigint\r\n    buffer: Uint8Array\r\n    pos: int64\r\n  }[]\r\n\r\n  private cache: Uint8Array\r\n  private lastDts: int64\r\n\r\n  public init(codecpar: pointer<AVCodecParameters>, timeBase: pointer<Rational>): number {\r\n    super.init(codecpar, timeBase)\r\n\r\n    this.caches = []\r\n\r\n    return 0\r\n  }\r\n\r\n  public sendAVPacket(avpacket: pointer<AVPacket>): number {\r\n    let i = 0\r\n\r\n    let lastDts = this.lastDts || (avpacket.dts !== NOPTS_VALUE_BIGINT ? avpacket.dts : avpacket.pts)\r\n    let buffer: Uint8Array<ArrayBufferLike> = mapUint8Array(avpacket.data, reinterpret_cast<size>(avpacket.size)).slice()\r\n    let firstGot = false\r\n    let hasCache = !!this.cache\r\n\r\n    if (hasCache) {\r\n      buffer = concatTypeArray(Uint8Array, [this.cache, buffer])\r\n      this.cache = null\r\n    }\r\n\r\n    while (i < buffer.length) {\r\n\r\n      if (i > buffer.length - 10) {\r\n        this.cache = buffer.subarray(i)\r\n        this.lastDts = lastDts\r\n        return 0\r\n      }\r\n\r\n      const info = ac3.parseHeader(buffer.subarray(i))\r\n\r\n      if (is.number(info)) {\r\n        let j = i + 1\r\n        for (; j < buffer.length - 1; j++) {\r\n          const syncWord = (buffer[j] << 8) | buffer[j + 1]\r\n          if (syncWord === 0x0B77) {\r\n            i = j\r\n            break\r\n          }\r\n        }\r\n        if (j < buffer.length - 1) {\r\n          continue\r\n        }\r\n\r\n        logger.error('parse ac3 header failed')\r\n        return errorType.DATA_INVALID\r\n      }\r\n\r\n      const item = {\r\n        dts: lastDts,\r\n        buffer: null,\r\n        duration: NOPTS_VALUE,\r\n        pos: avpacket.pos\r\n      }\r\n\r\n      let frameLength = info.frameSize\r\n\r\n      item.buffer = buffer.subarray(i, i + frameLength)\r\n\r\n      if (i + frameLength > buffer.length) {\r\n        this.cache = buffer.subarray(i)\r\n        this.lastDts = lastDts\r\n        return 0\r\n      }\r\n\r\n      const duration = avRescaleQ(\r\n        static_cast<int64>(1536 / info.sampleRate * AV_TIME_BASE),\r\n        AV_TIME_BASE_Q,\r\n        this.inTimeBase\r\n      )\r\n\r\n      item.duration = Number(duration)\r\n\r\n      this.caches.push(item)\r\n\r\n      i += frameLength\r\n      lastDts += duration\r\n\r\n      if (!firstGot && hasCache) {\r\n        firstGot = true\r\n        lastDts = avpacket.dts || avpacket.pts\r\n      }\r\n    }\r\n    this.lastDts = 0n\r\n\r\n    return 0\r\n  }\r\n\r\n  public receiveAVPacket(avpacket: pointer<AVPacket>): number {\r\n    if (this.caches.length) {\r\n\r\n      unrefAVPacket(avpacket)\r\n\r\n      const item = this.caches.shift()\r\n\r\n      const data: pointer<uint8> = avMalloc(item.buffer.length)\r\n      memcpyFromUint8Array(data, item.buffer.length, item.buffer)\r\n      addAVPacketData(avpacket, data, item.buffer.length)\r\n\r\n      avpacket.dts = avpacket.pts = item.dts\r\n      avpacket.pos = item.pos\r\n      avpacket.duration = static_cast<int64>(item.duration)\r\n      avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n      return 0\r\n    }\r\n    else {\r\n      return errorType.EOF\r\n    }\r\n  }\r\n\r\n  public reset(): number {\r\n    this.cache = null\r\n    this.lastDts = 0n\r\n    this.caches.length = 0\r\n    return 0\r\n  }\r\n}\r\n","/*\r\n * libmedia Mp32RawFilter\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport AVBSFilter from '../AVBSFilter'\r\nimport { mapUint8Array, memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport * as logger from 'common/util/logger'\r\nimport * as errorType from 'avutil/error'\r\nimport { AV_TIME_BASE, AV_TIME_BASE_Q, NOPTS_VALUE, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport { addAVPacketData, unrefAVPacket } from 'avutil/util/avpacket'\r\nimport * as frameHeader from '../../formats/mp3/frameHeader'\r\nimport * as mp3 from 'avutil/codecs/mp3'\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\n\r\nexport default class Mp32RawFilter extends AVBSFilter {\r\n\r\n  private frameHeader: frameHeader.FrameHeader\r\n\r\n  private caches: {\r\n    duration: number\r\n    dts: bigint\r\n    buffer: Uint8Array\r\n    extradata: Uint8Array\r\n    pos: int64\r\n  }[]\r\n\r\n  private cache: Uint8Array\r\n  private lastDts: int64\r\n\r\n  public init(codecpar: pointer<AVCodecParameters>, timeBase: pointer<Rational>): number {\r\n    super.init(codecpar, timeBase)\r\n\r\n    this.caches = []\r\n    this.frameHeader = new frameHeader.FrameHeader()\r\n\r\n    return 0\r\n  }\r\n\r\n  public sendAVPacket(avpacket: pointer<AVPacket>): number {\r\n    let i = 0\r\n\r\n    let lastDts = this.lastDts || (avpacket.dts !== NOPTS_VALUE_BIGINT ? avpacket.dts : avpacket.pts)\r\n    let buffer: Uint8Array<ArrayBufferLike> = mapUint8Array(avpacket.data, reinterpret_cast<size>(avpacket.size)).slice()\r\n    let firstGot = false\r\n    let hasCache = !!this.cache\r\n\r\n    if (hasCache) {\r\n      buffer = concatTypeArray(Uint8Array, [this.cache, buffer])\r\n      this.cache = null\r\n    }\r\n\r\n    while (i < buffer.length) {\r\n\r\n      const syncWord = (buffer[i] << 4) | ((buffer[i + 1] >> 4) & 0x0e)\r\n\r\n      if (syncWord !== 0xFFE) {\r\n        let j = i + 1\r\n        for (; j < buffer.length - 1; j++) {\r\n          const syncWord = (buffer[j] << 4) | ((buffer[j + 1] >> 4) & 0x0e)\r\n          if (syncWord === 0xFFE) {\r\n            i = j\r\n            break\r\n          }\r\n        }\r\n        if (j < buffer.length - 1) {\r\n          continue\r\n        }\r\n        logger.error(`found syncWord not 0xFFE, got: 0x${syncWord.toString(16)}`)\r\n        return errorType.DATA_INVALID\r\n      }\r\n\r\n      const ver = (buffer[1] >>> 3) & 0x03\r\n      // const bitrateIndex = (buffer[2] & 0xF0) >>> 4\r\n      const samplingFreqIndex = (buffer[2] & 0x0C) >>> 2\r\n\r\n      const item = {\r\n        dts: lastDts,\r\n        buffer: null,\r\n        extradata: null,\r\n        duration: NOPTS_VALUE,\r\n        pos: avpacket.pos\r\n      }\r\n\r\n      const sampleRate = mp3.getSampleRateByVersionIndex(ver, samplingFreqIndex)\r\n\r\n      frameHeader.parse(this.frameHeader, (buffer[i] << 24) | (buffer[i + 1] << 16) | (buffer[i + 2] << 8) | buffer[i + 3])\r\n\r\n      let frameLength = frameHeader.getFrameLength(this.frameHeader, sampleRate)\r\n\r\n      item.buffer = buffer.subarray(i, i + frameLength)\r\n\r\n      if (i + frameLength > buffer.length) {\r\n        this.cache = buffer.subarray(i)\r\n        this.lastDts = lastDts\r\n        break\r\n      }\r\n\r\n      const duration = avRescaleQ(\r\n        static_cast<int64>(frameLength / sampleRate * AV_TIME_BASE),\r\n        AV_TIME_BASE_Q,\r\n        this.inTimeBase\r\n      )\r\n\r\n      item.duration = Number(duration)\r\n\r\n      this.caches.push(item)\r\n\r\n      i += frameLength\r\n      lastDts += duration\r\n\r\n      if (!firstGot && hasCache) {\r\n        firstGot = true\r\n        lastDts = avpacket.dts || avpacket.pts\r\n      }\r\n    }\r\n    this.lastDts = 0n\r\n\r\n    return 0\r\n  }\r\n\r\n  public receiveAVPacket(avpacket: pointer<AVPacket>): number {\r\n    if (this.caches.length) {\r\n\r\n      unrefAVPacket(avpacket)\r\n\r\n      const item = this.caches.shift()\r\n\r\n      const data: pointer<uint8> = avMalloc(item.buffer.length)\r\n      memcpyFromUint8Array(data, item.buffer.length, item.buffer)\r\n      addAVPacketData(avpacket, data, item.buffer.length)\r\n\r\n      avpacket.dts = avpacket.pts = item.dts\r\n      avpacket.pos = item.pos\r\n      avpacket.duration = static_cast<int64>(item.duration)\r\n      avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n      return 0\r\n    }\r\n    else {\r\n      return errorType.EOF\r\n    }\r\n  }\r\n\r\n  public reset(): number {\r\n    this.cache = null\r\n    this.lastDts = 0n\r\n    this.caches.length = 0\r\n    return 0\r\n  }\r\n}\r\n","/*\r\n * libmedia abstract format decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport { AVFormat } from 'avutil/avformat'\r\n\r\nexport default abstract class IFormat {\r\n\r\n  public type: AVFormat = AVFormat.UNKNOWN\r\n\r\n  public onStreamAdd: (stream: Stream) => void\r\n\r\n  public abstract init(formatContext: AVIFormatContext): void\r\n\r\n  public async destroy(formatContext: AVIFormatContext): Promise<void> {}\r\n\r\n  public abstract getAnalyzeStreamsCount(): number\r\n  public abstract readHeader(formatContext: AVIFormatContext): Promise<number>\r\n  public abstract readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number>\r\n\r\n  /**\r\n   * seek\r\n   * \r\n   * @param context \r\n   * @param stream \r\n   * @param timestamp 毫秒时间戳\r\n   * @param flags \r\n   * \r\n   * @returns 返回 seek 之前的下一个 avpacket pos（若不知道返回 0n 方便之后可以再 seek 回来）返回负数表示 seek 失败\r\n   */\r\n  public abstract seek(\r\n    formatContext: AVIFormatContext,\r\n    stream: Stream,\r\n    timestamp: int64,\r\n    flags: int32\r\n  ): Promise<int64>\r\n}\r\n","/*\r\n * libmedia rtsp decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVPacket, { AVPacketFlags, AVProducerReferenceTime } from 'avutil/struct/avpacket'\r\nimport { AVCodecID, AVMediaType, AVPacketSideDataType } from 'avutil/codec'\r\nimport * as logger from 'common/util/logger'\r\nimport { IOError } from 'common/io/error'\r\nimport * as errorType from 'avutil/error'\r\nimport IFormat from './IFormat'\r\nimport { AVFormat } from 'avutil/avformat'\r\nimport { memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport { addAVPacketData, addAVPacketSideData, createAVPacket, destroyAVPacket } from 'avutil/util/avpacket'\r\nimport AVStream from 'avutil/AVStream'\r\nimport RtspSession from 'avprotocol/rtsp/RtspSession'\r\nimport * as sdp from 'avprotocol/sdp/sdp'\r\nimport * as ntpUtil from 'avutil/util/ntp'\r\nimport * as array from 'common/util/array'\r\nimport * as mpeg4 from 'avutil/codecs/mpeg4'\r\nimport * as mpegvideo from 'avutil/codecs/mpegvideo'\r\n\r\nimport * as mp3 from 'avutil/codecs/mp3'\r\nimport { RtspStreamingMode } from 'avprotocol/rtsp/rtsp'\r\nimport { HEVCPayloadContext, Mpeg4PayloadContext, RTPCodecName2AVCodeId, StaticRTPPayloadCodec } from 'avprotocol/rtp/rtp'\r\nimport { Data } from 'common/types/type'\r\nimport RTPFrameQueue from 'avprotocol/rtp/RTPFrameQueue'\r\nimport * as depacketizer from 'avprotocol/rtp/depacketizer'\r\nimport * as naluUtil from 'avutil/util/nalu'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport { AV_TIME_BASE_Q, NOPTS_VALUE, NOPTS_VALUE_BIGINT, NTP_OFFSET_US } from 'avutil/constant'\r\nimport isRtcp from 'avprotocol/rtcp/isRtcp'\r\nimport isRtp from 'avprotocol/rtp/isRtp'\r\nimport { parseRTPPacket } from 'avprotocol/rtp/parser'\r\nimport { RTCPPayloadType } from 'avprotocol/rtcp/rtcp'\r\nimport { parseRTCPSendReport } from 'avprotocol/rtcp/parser'\r\nimport AVBSFilter from '../bsf/AVBSFilter'\r\nimport Mp32RawFilter from '../bsf/mp3/Mp32RawFilter'\r\nimport { CodecIdFmtpHandler } from 'avprotocol/rtp/fmtp'\r\nimport Ac32RawFilter from '../bsf/ac3/Ac32RawFilter'\r\nimport { AVCodecParameterFlags } from 'avutil/struct/avcodecparameters'\r\n\r\nexport interface IRtspFormatOptions {\r\n  uri: string\r\n}\r\n\r\ninterface RtspFormatContext {\r\n  sessionId: string\r\n  canOutputPacket: boolean\r\n}\r\n\r\ninterface RtspStreamContext {\r\n  ssrc: uint32\r\n  trackId: uint32\r\n  interleaved: uint32\r\n  payloadType: uint8\r\n  payloadContext: Data\r\n  queue: RTPFrameQueue\r\n\r\n  rangeStartOffset: int64\r\n  lastRtcpNtpTime: int64\r\n  firstRtcpNtpTime: int64\r\n  lastRtcpTimestamp: uint32\r\n  rtcpTsOffset: int64\r\n  baseTimestamp: uint32\r\n  timestamp: uint32\r\n  unwrappedTimestamp: int64\r\n\r\n  filter: AVBSFilter\r\n}\r\n\r\nexport default class IRtspFormat extends IFormat {\r\n\r\n  public type: AVFormat = AVFormat.RTSP\r\n\r\n  private rtspSession: RtspSession\r\n\r\n  private options: IRtspFormatOptions\r\n\r\n  private context: RtspFormatContext\r\n\r\n  private cacheAVPacket: pointer<AVPacket>\r\n\r\n  constructor(options: IRtspFormatOptions) {\r\n    super()\r\n    this.options = options\r\n  }\r\n\r\n  public init(formatContext: AVIFormatContext): void {\r\n    if (formatContext.ioReader) {\r\n      formatContext.ioReader.setEndian(true)\r\n    }\r\n    this.rtspSession = new RtspSession(this.options.uri, formatContext.ioReader, formatContext.ioWriter)\r\n    this.context = {\r\n      sessionId: '',\r\n      canOutputPacket: true\r\n    }\r\n    this.cacheAVPacket = nullptr\r\n  }\r\n\r\n  public async readHeader(formatContext: AVIFormatContext): Promise<number> {\r\n    try {\r\n\r\n      let response = await this.rtspSession.options()\r\n\r\n      if (response.statusCode !== 200) {\r\n        return errorType.DATA_INVALID\r\n      }\r\n\r\n      response = await this.rtspSession.describe()\r\n\r\n      if (response.statusCode !== 200) {\r\n        logger.error(`describe failed, ${JSON.stringify(response)}`)\r\n        return errorType.DATA_INVALID\r\n      }\r\n\r\n      const sdpDes = sdp.parse(response.content)\r\n\r\n      let trackId = 1\r\n      let interleaved = 0\r\n\r\n      for (let i = 0; i < sdpDes.media.length; i++) {\r\n\r\n        if (!sdpDes.media[i].rtp.length) {\r\n          continue\r\n        }\r\n\r\n        const stream = formatContext.createStream()\r\n\r\n        const staticPayloadCodec = StaticRTPPayloadCodec.find((codec) => {\r\n          return codec.payload === sdpDes.media[i].rtp[0].payload\r\n        })\r\n\r\n        if (staticPayloadCodec) {\r\n          stream.codecpar.codecType = staticPayloadCodec.codecType\r\n          stream.codecpar.codecId = staticPayloadCodec.codecId\r\n          if (staticPayloadCodec.codecType === AVMediaType.AVMEDIA_TYPE_AUDIO) {\r\n            stream.codecpar.sampleRate = sdpDes.media[i].rtp[0].rate || staticPayloadCodec.rate\r\n            stream.codecpar.chLayout.nbChannels = sdpDes.media[i].rtp[0].encoding || staticPayloadCodec.encoding\r\n            stream.timeBase.num = 1\r\n            stream.timeBase.den = stream.codecpar.sampleRate\r\n          }\r\n          else {\r\n            stream.timeBase.num = 1\r\n            stream.timeBase.den = sdpDes.media[i].rtp[0].rate || staticPayloadCodec.rate\r\n          }\r\n        }\r\n        else {\r\n          if (sdpDes.media[i].type === 'audio') {\r\n            stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_AUDIO\r\n          }\r\n          else if (sdpDes.media[i].type === 'video') {\r\n            stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_VIDEO\r\n          }\r\n\r\n          const codecName = sdpDes.media[i].rtp[0].codec\r\n\r\n          let codecId = RTPCodecName2AVCodeId[codecName] || AVCodecID.AV_CODEC_ID_NONE\r\n\r\n          stream.codecpar.codecId = codecId\r\n\r\n          if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_AUDIO) {\r\n            stream.codecpar.sampleRate = sdpDes.media[i].rtp[0].rate\r\n            stream.codecpar.chLayout.nbChannels = sdpDes.media[i].rtp[0].encoding\r\n            stream.timeBase.num = 1\r\n            stream.timeBase.den = stream.codecpar.sampleRate\r\n          }\r\n          else if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_VIDEO) {\r\n            stream.timeBase.num = 1\r\n            stream.timeBase.den = sdpDes.media[i].rtp[0].rate\r\n          }\r\n        }\r\n\r\n        const context: RtspStreamContext = {\r\n          ssrc: 0,\r\n          trackId: trackId++,\r\n          interleaved: interleaved,\r\n          payloadContext: null,\r\n          queue: null,\r\n          payloadType: sdpDes.media[i].rtp[0].payload,\r\n\r\n          rangeStartOffset: 0n,\r\n          lastRtcpNtpTime: NOPTS_VALUE_BIGINT,\r\n          firstRtcpNtpTime: NOPTS_VALUE_BIGINT,\r\n          lastRtcpTimestamp: 0,\r\n          rtcpTsOffset: 0n,\r\n          baseTimestamp: 0,\r\n          timestamp: 0,\r\n          unwrappedTimestamp: 0n,\r\n\r\n          filter: null\r\n        }\r\n        if (sdpDes.media[i].control) {\r\n          let l1 = sdpDes.media[i].control.split(';')\r\n          let trackID = l1.find((l) => l.indexOf('trackID') > -1)\r\n          if (trackID) {\r\n            let l2 = trackID.split('=')\r\n            context.trackId = +l2[1].trim()\r\n          }\r\n        }\r\n\r\n        if (sdpDes.media[i].fmtp.length && CodecIdFmtpHandler[stream.codecpar.codecId]) {\r\n          context.payloadContext = CodecIdFmtpHandler[stream.codecpar.codecId](stream, sdpDes.media[i].fmtp[0].config)\r\n        }\r\n\r\n        context.queue = new RTPFrameQueue(addressof(stream.codecpar), context.payloadContext)\r\n\r\n        interleaved += 2\r\n        stream.privData = context\r\n\r\n        response = await this.rtspSession.setup({\r\n          trackId: context.trackId,\r\n          streamMode: RtspStreamingMode.TRANSPORT_TCP,\r\n          interleaved: context.interleaved,\r\n          multcast: false\r\n        }, this.context.sessionId)\r\n\r\n        if (response.statusCode !== 200) {\r\n          logger.error(`setup track ${context.trackId} failed, ${JSON.stringify(response)}`)\r\n          return errorType.DATA_INVALID\r\n        }\r\n\r\n        const ssrc = response.headers['Transport'].split(';').find((t) => t.indexOf('ssrc') > -1)\r\n        if (ssrc) {\r\n          context.ssrc = +('0x' + ssrc.split('=')[1].trim())\r\n        }\r\n        this.context.sessionId = response.headers['Session']\r\n        if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_VIDEO) {\r\n          this.context.canOutputPacket = false\r\n        }\r\n\r\n        if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MP3) {\r\n          context.filter = new Mp32RawFilter()\r\n        }\r\n        else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AC3) {\r\n          context.filter = new Ac32RawFilter()\r\n        }\r\n\r\n        if (context.filter) {\r\n          context.filter.init(addressof(stream.codecpar), addressof(stream.timeBase))\r\n        }\r\n      }\r\n\r\n      if (!formatContext.streams.length) {\r\n        logger.error('not found stream')\r\n        return errorType.DATA_INVALID\r\n      }\r\n\r\n      response = await this.rtspSession.play(this.context.sessionId)\r\n\r\n      if (response.statusCode !== 200) {\r\n        logger.error(`play failed, ${JSON.stringify(response)}`)\r\n        return errorType.DATA_INVALID\r\n      }\r\n\r\n      return 0\r\n    }\r\n    catch (error) {\r\n      logger.error(error.message)\r\n      return formatContext.ioReader.error\r\n    }\r\n  }\r\n\r\n  private addPrft(stream: AVStream, avpacket: pointer<AVPacket>, timestamp: uint32) {\r\n    const context = stream.privData as RtspStreamContext\r\n    if (context.lastRtcpNtpTime !== NOPTS_VALUE_BIGINT) {\r\n      const prft = reinterpret_cast<pointer<AVProducerReferenceTime>>(avMalloc(sizeof(AVProducerReferenceTime)))\r\n      const rtcpTime = ntpUtil.parse(reinterpret_cast<uint64>(context.lastRtcpNtpTime)) - NTP_OFFSET_US\r\n      const deltaTimestamp = static_cast<uint64>(timestamp) - context.lastRtcpNtpTime\r\n      const deltaTime = avRescaleQ(deltaTimestamp, stream.timeBase, AV_TIME_BASE_Q)\r\n\r\n      prft.wallclock = rtcpTime + deltaTime\r\n      prft.flags = 24\r\n      addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_PRFT, prft, sizeof(AVProducerReferenceTime))\r\n    }\r\n  }\r\n\r\n  private getPacketPts(formatContext: AVIFormatContext, stream: AVStream, timestamp: uint32) {\r\n    if (timestamp === -1) {\r\n      return -1n\r\n    }\r\n\r\n    const context = stream.privData as RtspStreamContext\r\n\r\n    if (context.lastRtcpNtpTime !== NOPTS_VALUE_BIGINT && formatContext.streams.length > 1) {\r\n      const deltaTimestamp = static_cast<int64>((timestamp - context.lastRtcpTimestamp) as int32)\r\n      const addend = (context.lastRtcpNtpTime - context.firstRtcpNtpTime) * static_cast<int64>(stream.timeBase.den)\r\n        / (static_cast<int64>(stream.timeBase.num) << 32n)\r\n\r\n      return context.rangeStartOffset + context.rtcpTsOffset + addend + deltaTimestamp\r\n    }\r\n\r\n    if (!context.baseTimestamp) {\r\n      context.baseTimestamp = timestamp\r\n    }\r\n    if (!context.timestamp) {\r\n      context.unwrappedTimestamp += static_cast<int64>(timestamp)\r\n    }\r\n    else {\r\n      context.unwrappedTimestamp += static_cast<int64>(timestamp - context.timestamp)\r\n    }\r\n\r\n    context.timestamp = timestamp\r\n\r\n    return context.unwrappedTimestamp + context.rangeStartOffset - static_cast<int64>(context.baseTimestamp)\r\n  }\r\n\r\n  private handleRtcpPacket(formatContext: AVIFormatContext, data: Uint8Array, interleaved: number = -1) {\r\n    const payloadType = data[1]\r\n    switch (payloadType) {\r\n      case RTCPPayloadType.SR:\r\n        const sr = parseRTCPSendReport(data)\r\n\r\n        let stream = formatContext.streams.find((stream) => {\r\n          const context = stream.privData as RtspStreamContext\r\n          return context.ssrc === sr.ssrc\r\n            || context.interleaved === interleaved\r\n        })\r\n\r\n        if (stream) {\r\n          const context = stream.privData as RtspStreamContext\r\n          context.lastRtcpNtpTime = reinterpret_cast<int64>(sr.ntp)\r\n          context.lastRtcpTimestamp = sr.timestamp\r\n          if (context.firstRtcpNtpTime === NOPTS_VALUE_BIGINT) {\r\n            context.firstRtcpNtpTime = reinterpret_cast<int64>(sr.ntp)\r\n            if (!context.baseTimestamp) {\r\n              context.baseTimestamp = sr.timestamp\r\n            }\r\n            context.rtcpTsOffset = static_cast<int64>(context.lastRtcpTimestamp - context.baseTimestamp)\r\n          }\r\n        }\r\n        break\r\n    }\r\n  }\r\n\r\n  public async readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number> {\r\n    try {\r\n      while (true) {\r\n        const { data, interleaved } = await this.rtspSession.readPacket()\r\n        // rtcp\r\n        if (isRtcp(data)) {\r\n          this.handleRtcpPacket(formatContext, data, interleaved)\r\n        }\r\n        // rtp\r\n        else if (isRtp(data)) {\r\n\r\n          const packet = parseRTPPacket(data)\r\n\r\n          const stream = formatContext.streams.find((stream) => {\r\n            const context = stream.privData as RtspStreamContext\r\n            return context.ssrc === packet.header.ssrc\r\n              || context.interleaved === interleaved\r\n              || context.payloadType === packet.header.payloadType\r\n          })\r\n          if (stream) {\r\n            const context = stream.privData as RtspStreamContext\r\n            context.queue.push(packet)\r\n            if (!context.ssrc) {\r\n              context.ssrc = packet.header.ssrc\r\n            }\r\n            let firstGot = false\r\n\r\n            const handleVideoFrame = (frame: Uint8Array, isKey: boolean, pts: int64) => {\r\n              let p = !firstGot ? avpacket : createAVPacket()\r\n\r\n              p.streamIndex = stream.index\r\n              p.timeBase = stream.timeBase\r\n\r\n              const data: pointer<uint8> = avMalloc(frame.length)\r\n              memcpyFromUint8Array(data, frame.length, frame)\r\n              addAVPacketData(p, data, frame.length)\r\n              p.dts = p.pts = pts\r\n\r\n              if (isKey) {\r\n                p.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n                this.context.canOutputPacket = true\r\n              }\r\n\r\n              if (firstGot) {\r\n                formatContext.interval.packetBuffer.push(p)\r\n                p = nullptr\r\n              }\r\n              else {\r\n                firstGot = true\r\n              }\r\n\r\n              return p\r\n            }\r\n\r\n            const handleMultiAudioFrames = (frames: Uint8Array[], pts: int64, delta: int64 = 0n) => {\r\n              if (!frames.length) {\r\n                return\r\n              }\r\n\r\n              let p = !firstGot ? avpacket : createAVPacket()\r\n              p.streamIndex = stream.index\r\n              p.timeBase = stream.timeBase\r\n\r\n              const data: pointer<uint8> = avMalloc(frames[0].length)\r\n              memcpyFromUint8Array(data, frames[0].length, frames[0])\r\n              addAVPacketData(p, data, frames[0].length)\r\n              p.dts = p.pts = pts\r\n              p.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n\r\n              if (firstGot) {\r\n                formatContext.interval.packetBuffer.push(p)\r\n                p = nullptr\r\n              }\r\n              else {\r\n                firstGot = true\r\n              }\r\n              for (let i = 1; i < frames.length; i++) {\r\n                const p = createAVPacket()\r\n                p.streamIndex = stream.index\r\n                p.timeBase = stream.timeBase\r\n                p.dts = p.pts = pts + BigInt(i) * delta\r\n                p.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n                const data: pointer<uint8> = avMalloc(frames[i].length)\r\n                memcpyFromUint8Array(data, frames[i].length, frames[i])\r\n                addAVPacketData(p, data, frames[i].length)\r\n                formatContext.interval.packetBuffer.push(p)\r\n              }\r\n            }\r\n\r\n            const handleSingleAudioFrameWithFilter = (frame: Uint8Array, pts: int64) => {\r\n              let p = !firstGot ? avpacket : createAVPacket()\r\n              p.streamIndex = stream.index\r\n              p.timeBase = stream.timeBase\r\n\r\n              const data: pointer<uint8> = avMalloc(frame.length)\r\n              memcpyFromUint8Array(data, frame.length, frame)\r\n              addAVPacketData(p, data, frame.length)\r\n              p.dts = p.pts = pts\r\n\r\n              let ret = context.filter.sendAVPacket(p)\r\n\r\n              if (ret < 0) {\r\n                logger.fatal('send avpacket to bsf failed')\r\n                return errorType.DATA_INVALID\r\n              }\r\n\r\n              ret = context.filter.receiveAVPacket(p)\r\n              if (ret === errorType.EOF) {\r\n                return\r\n              }\r\n\r\n              p.timeBase = stream.timeBase\r\n              p.streamIndex = stream.index\r\n              p.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n\r\n              if (firstGot) {\r\n                formatContext.interval.packetBuffer.push(p)\r\n                p = nullptr\r\n              }\r\n              else {\r\n                firstGot = true\r\n              }\r\n              while (true) {\r\n                const p = this.cacheAVPacket || createAVPacket()\r\n                ret = context.filter.receiveAVPacket(p)\r\n                if (ret === 0) {\r\n                  p.timeBase = stream.timeBase\r\n                  p.streamIndex = stream.index\r\n                  formatContext.interval.packetBuffer.push(p)\r\n                  this.cacheAVPacket = nullptr\r\n                }\r\n                else {\r\n                  this.cacheAVPacket = p\r\n                  break\r\n                }\r\n              }\r\n            }\r\n\r\n            while (context.queue.hasFrame()) {\r\n              const packets = context.queue.getFrame()\r\n\r\n              if (!packets.length) {\r\n                continue\r\n              }\r\n\r\n              const pts = this.getPacketPts(formatContext, stream, packets[0].header.timestamp)\r\n\r\n              if (stream.codecpar.codecType !== AVMediaType.AVMEDIA_TYPE_VIDEO\r\n                && !this.context.canOutputPacket\r\n              ) {\r\n                continue\r\n              }\r\n\r\n              if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n                || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n              ) {\r\n                const { nalus, isKey } = stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n                  ? depacketizer.h264(packets)\r\n                  : depacketizer.hevc(packets, context.payloadContext as HEVCPayloadContext)\r\n\r\n                if (!nalus.length) {\r\n                  continue\r\n                }\r\n\r\n                if (!isKey && !this.context.canOutputPacket) {\r\n                  continue\r\n                }\r\n\r\n                const frame = naluUtil.joinNaluByStartCode(nalus, 2)\r\n\r\n                const p = handleVideoFrame(frame, isKey, pts)\r\n                if (stream.codecpar.flags & AVCodecParameterFlags.AV_CODECPAR_FLAG_H26X_ANNEXB) {\r\n                  p.flags |= AVPacketFlags.AV_PKT_FLAG_H26X_ANNEXB\r\n                }\r\n                else {\r\n                  p.flags &= ~AVPacketFlags.AV_PKT_FLAG_H26X_ANNEXB\r\n                }\r\n                // 让 demuxer 去生成 dts\r\n                p.dts = NOPTS_VALUE_BIGINT\r\n              }\r\n              else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC) {\r\n                const frames = depacketizer.mpeg4(packets, (stream.privData as RtspStreamContext).payloadContext as Mpeg4PayloadContext)\r\n                handleMultiAudioFrames(frames, pts, 1024n)\r\n              }\r\n              else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MPEG4) {\r\n                const frame = depacketizer.concat(packets)\r\n                const byte = frame[4]\r\n                const isKey = (byte >>> 6) === mpeg4.Mpeg4PictureType.I\r\n                if (!isKey && !this.context.canOutputPacket) {\r\n                  continue\r\n                }\r\n                handleVideoFrame(frame, isKey, pts)\r\n              }\r\n              else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_ALAW\r\n                || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_MULAW\r\n                || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_ADPCM_G722\r\n                || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_S16BE\r\n                || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_OPUS\r\n                || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_SPEEX\r\n              ) {\r\n                const frame = depacketizer.concat(packets)\r\n                handleMultiAudioFrames([frame], pts)\r\n              }\r\n              else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MP3) {\r\n                const frame = depacketizer.mpeg12(packets, stream.codecpar.codecType)\r\n                if (stream.codecpar.profile === NOPTS_VALUE) {\r\n                  const layer = (frame[1] & 0x06) >> 1\r\n                  stream.codecpar.profile = mp3.getProfileByLayer(layer)\r\n                }\r\n                handleSingleAudioFrameWithFilter(frame, pts)\r\n              }\r\n              else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AC3) {\r\n                const frame = depacketizer.ac3(packets)\r\n                handleSingleAudioFrameWithFilter(frame, pts)\r\n              }\r\n              else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MPEG2VIDEO) {\r\n                const frame = depacketizer.mpeg12(packets, stream.codecpar.codecType)\r\n                const isKey = ((frame[5] >> 3) & 7) === mpegvideo.MpegVideoPictureType.I\r\n                if (!isKey && !this.context.canOutputPacket) {\r\n                  continue\r\n                }\r\n                handleVideoFrame(frame, isKey, pts)\r\n              }\r\n              else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VP8) {\r\n                const { payload, isKey } = depacketizer.vp8(packets)\r\n                if (!isKey && !this.context.canOutputPacket) {\r\n                  continue\r\n                }\r\n                handleVideoFrame(payload, isKey, pts)\r\n              }\r\n              else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VP9) {\r\n                const { payload, isKey } = depacketizer.vp9(packets)\r\n                if (!isKey && !this.context.canOutputPacket) {\r\n                  continue\r\n                }\r\n                handleVideoFrame(payload, isKey, pts)\r\n              }\r\n              else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AV1) {\r\n                const { payload, isKey } = depacketizer.av1(packets)\r\n                if (!isKey && !this.context.canOutputPacket) {\r\n                  continue\r\n                }\r\n                handleVideoFrame(payload, isKey, pts)\r\n              }\r\n            }\r\n            if (firstGot) {\r\n              return 0\r\n            }\r\n          }\r\n        }\r\n        else {\r\n          logger.warn('received invalid data')\r\n        }\r\n      }\r\n    }\r\n    catch (error) {\r\n      if (formatContext.ioReader.error !== IOError.END\r\n        && formatContext.ioReader.error !== IOError.ABORT\r\n      ) {\r\n        logger.error(`read packet error, ${error}`)\r\n        return errorType.DATA_INVALID\r\n      }\r\n      return formatContext.ioReader.error\r\n    }\r\n  }\r\n\r\n  public async seek(formatContext: AVIFormatContext, stream: AVStream, timestamp: int64, flags: int32): Promise<int64> {\r\n    return static_cast<int64>(errorType.FORMAT_NOT_SUPPORT)\r\n  }\r\n\r\n  public getAnalyzeStreamsCount(): number {\r\n    return 0\r\n  }\r\n\r\n  public async destroy(formatContext: AVIFormatContext) {\r\n    await this.rtspSession.teardown(this.context.sessionId)\r\n\r\n    if (this.cacheAVPacket) {\r\n      destroyAVPacket(this.cacheAVPacket)\r\n      this.cacheAVPacket = nullptr\r\n    }\r\n\r\n    array.each(formatContext.streams, (stream) => {\r\n      const streamContext = stream.privData as RtspStreamContext\r\n      if (streamContext.filter) {\r\n        streamContext.filter.destroy()\r\n        streamContext.filter = null\r\n      }\r\n    })\r\n  }\r\n}\r\n","/*\r\n * libmedia mp3 FrameHeader utils\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as mp3 from 'avutil/codecs/mp3'\r\n\r\nexport class FrameHeader {\r\n  version: uint32\r\n  layer: uint32\r\n  protection: uint32\r\n  bitrateIndex: uint32\r\n  samplingFrequency: uint32\r\n  padding: uint32\r\n  private: uint32\r\n  mode: uint32\r\n  modeExtension: uint32\r\n  copyright: uint32\r\n  original: uint32\r\n  emphasis: uint32\r\n}\r\n\r\nexport function parse(header: FrameHeader, value: uint32) {\r\n  header.version = (value >> 19) & 3\r\n  header.layer = (value >> 17) & 3\r\n  header.protection = (value >> 16) & 1\r\n  header.bitrateIndex = (value >> 12) & 0x0f\r\n  header.samplingFrequency = (value >> 10) & 3\r\n  header.padding = (value >> 9) & 1\r\n  header.mode = (value >> 6) & 3\r\n  header.modeExtension = (value >> 4) & 3\r\n  header.copyright = (value >> 3) & 1\r\n  header.original = (value >> 2) & 1\r\n  header.emphasis = value & 3\r\n}\r\n\r\nexport function getFrameLength(header: FrameHeader, sampleRate: int32) {\r\n\r\n  let frameSize = mp3.getBitRateByVersionLayerIndex(\r\n    header.version,\r\n    header.layer,\r\n    header.bitrateIndex\r\n  )\r\n\r\n  switch (header.layer) {\r\n    case 1:\r\n    default:\r\n      // Layer 3\r\n      frameSize = ((frameSize * 144000) / (sampleRate << ((header.version === 3) ? 0 : 1))) >>> 0\r\n      frameSize += header.padding\r\n      break\r\n    case 2:\r\n      // Layer 2\r\n      frameSize = ((frameSize * 144000) / sampleRate) >>> 0\r\n      frameSize += header.padding\r\n      break\r\n    case 3:\r\n      // Layer 1\r\n      frameSize = ((frameSize * 12000) / sampleRate) >>> 0\r\n      frameSize = (frameSize + header.padding) * 4\r\n      break\r\n  }\r\n\r\n  return frameSize\r\n}\r\n","/*\r\n * libmedia rtcp packet\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nexport class RTCPCommonHeader {\r\n  version: uint8\r\n  padding: uint8\r\n  count: uint8\r\n  payloadType: uint8\r\n  length: uint16\r\n}\r\n\r\nexport class Report {\r\n  ssrc: uint32\r\n  fractionLost: uint8\r\n  packetLost: uint32\r\n  highestSequence: uint32\r\n  interArrivalJitter: uint32\r\n  lsr: uint32\r\n  dlsr: uint32\r\n}\r\n\r\nexport class RTCPSendReport extends RTCPCommonHeader {\r\n  ssrc: uint32\r\n  ntp: uint64\r\n  timestamp: uint32\r\n  senderPacketCount: uint32\r\n  senderOctetCount: uint16\r\n  reports: Report[] = []\r\n}\r\n\r\nexport class RTCPReceiveReport extends RTCPCommonHeader {\r\n  ssrc: uint32\r\n  reports: Report[] = []\r\n}\r\n","/*\r\n * libmedia judge is rtcp packet\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport default function isRtcp(data: Uint8ArrayInterface) {\r\n  return data.length > 4\r\n    // DOC: https://tools.ietf.org/html/draft-ietf-avtcore-rfc5764-mux-fixes\r\n    && (data[0] > 127 && data[0] < 192)\r\n    // RTP Version must be 2.\r\n    && (data[0] >>> 6) === 2\r\n    // RTCP packet types defined by IANA:\r\n    // http://www.iana.org/assignments/rtp-parameters/rtp-parameters.xhtml#rtp-parameters-4\r\n    // RFC 5761 (RTCP-mux) states this range for secure RTCP/RTP detection.\r\n    && (data[1] >= 192 && data[1] <= 223)\r\n}\r\n","/*\r\n * libmedia rtcp parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport { RTCPCommonHeader, RTCPSendReport, Report } from './RTCPPacket'\r\n\r\nexport function parseHeader(packet: RTCPCommonHeader, reader: BufferReader) {\r\n  let byte = reader.readUint8()\r\n  packet.version = byte >>> 6\r\n  packet.padding = (byte >>> 5) & 0x01\r\n  packet.count = byte & 0x1f\r\n  packet.payloadType = reader.readUint8()\r\n  packet.length = reader.readUint16()\r\n}\r\n\r\nexport function parseRTCPSendReport(data: Uint8ArrayInterface) {\r\n  const reader = new BufferReader(data)\r\n\r\n  const sr = new RTCPSendReport()\r\n\r\n  parseHeader(sr, reader)\r\n\r\n  sr.ssrc = reader.readUint32()\r\n  sr.ntp = reader.readUint64()\r\n  sr.timestamp = reader.readUint32()\r\n\r\n  sr.senderPacketCount = reader.readUint32()\r\n  sr.senderOctetCount = reader.readUint32()\r\n\r\n  for (let i = 0; i < sr.count; i++) {\r\n    const report = new Report()\r\n    report.ssrc = reader.readUint32()\r\n    report.fractionLost = reader.readUint8()\r\n    report.packetLost = reader.readUint24()\r\n    report.highestSequence = reader.readUint32()\r\n    report.interArrivalJitter = reader.readUint32()\r\n    report.lsr = reader.readUint32()\r\n    report.dlsr = reader.readUint32()\r\n  }\r\n\r\n  return sr\r\n}\r\n","/*\r\n * libmedia rtp frame queue\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVCodecID, AVMediaType } from 'avutil/codec'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { UINT16_MAX } from 'avutil/constant'\r\nimport * as h264 from 'avutil/codecs/h264'\r\nimport * as hevc from 'avutil/codecs/hevc'\r\nimport { Data } from 'common/types/type'\r\nimport { RTPPacket } from './RTPPacket'\r\nimport { RTP_HEVC_DOND_FIELD_SIZE, RTP_HEVC_DONL_FIELD_SIZE, RTP_HEVC_PAYLOAD_HEADER_SIZE } from './rtp'\r\n\r\nconst UINT16_MID = UINT16_MAX >>> 1\r\n\r\n/**\r\n * TODO 支持 nack\r\n */\r\nexport default class RTPFrameQueue {\r\n\r\n  private queue: RTPPacket[]\r\n\r\n  private frameQueue: RTPPacket[][]\r\n\r\n  private codecpar: pointer<AVCodecParameters>\r\n\r\n  private currentSeqStart: number\r\n  private readyPos: number\r\n  private maskerQueue: number[]\r\n  private payloadContext: Data\r\n\r\n  constructor(codecpar: pointer<AVCodecParameters>, payloadContext: Data) {\r\n    this.codecpar = codecpar\r\n    this.queue = []\r\n    this.frameQueue = []\r\n    this.currentSeqStart = -1\r\n    this.readyPos = 0\r\n    this.maskerQueue = []\r\n    this.payloadContext = payloadContext\r\n  }\r\n\r\n  /**\r\n   * 判断 start 和 end 是否邻近\r\n   * \r\n   * @param start \r\n   * @param end \r\n   * @returns \r\n   */\r\n  private isSeqIncreaseOne(start: number, end: number) {\r\n    return start + 1 === end\r\n      || start === UINT16_MAX\r\n      && end === 0\r\n  }\r\n\r\n  /**\r\n   * 判断 seq a 大于 b\r\n   * 需要考虑回环\r\n   * \r\n   * @param a \r\n   * @param b \r\n   * @returns \r\n   */\r\n  private seqAMoreThenB(a: number, b: number) {\r\n    return (a > b && (a - b) < UINT16_MID) || (a < b && (b - a) > UINT16_MID)\r\n  }\r\n\r\n  private isFirstStart() {\r\n    if (this.currentSeqStart > -1) {\r\n      return this.isSeqIncreaseOne(this.currentSeqStart, this.queue[0].header.sequence)\r\n    }\r\n    else {\r\n      if (this.queue.length > 5) {\r\n        if (this.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_AUDIO) {\r\n          return true\r\n        }\r\n        else if (this.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264) {\r\n          const type = this.queue[0].payload[0] & 0x1f\r\n          switch (type) {\r\n            case 24:\r\n              for (let i = 1; i < this.queue[0].payload.length - 2;) {\r\n                const size = (this.queue[0].payload[i] << 8) | this.queue[0].payload[i + 1]\r\n                const type = this.queue[0].payload[i + 2] & 0x1f\r\n                if (type === h264.H264NaluType.kSliceSPS\r\n                  || type === h264.H264NaluType.kSlicePPS\r\n                  || type === h264.H264NaluType.kSliceIDR\r\n                  || type === h264.H264NaluType.kSliceAUD\r\n                ) {\r\n                  return true\r\n                }\r\n                i += 2 + size\r\n              }\r\n              break\r\n            case 28:\r\n              const fuHeader = this.queue[0].payload[1]\r\n              if ((fuHeader & 0x80)) {\r\n                return true\r\n              }\r\n              break\r\n            // case h264.H264NaluType.kSliceIDR:\r\n            case h264.H264NaluType.kSliceSPS:\r\n            // case h264.H264NaluType.kSlicePPS:\r\n            case h264.H264NaluType.kSliceAUD:\r\n              return true\r\n          }\r\n        }\r\n        else if (this.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC) {\r\n          const type = (this.queue[0].payload[0] >>> 1) & 0x3f\r\n          switch (type) {\r\n            case 48:\r\n              let i = RTP_HEVC_PAYLOAD_HEADER_SIZE + (this.payloadContext.usingDonlField ? RTP_HEVC_DONL_FIELD_SIZE : 0)\r\n              for (; i < this.queue[0].payload.length - RTP_HEVC_PAYLOAD_HEADER_SIZE;) {\r\n                const size = (this.queue[0].payload[i] << 8) | this.queue[0].payload[i + 1]\r\n                const type = (this.queue[0].payload[i + 2] >>> 1) & 0x3f\r\n                if (type === hevc.HEVCNaluType.kSlicePPS\r\n                  || type === hevc.HEVCNaluType.kSliceVPS\r\n                  || type === hevc.HEVCNaluType.kSliceSPS\r\n                  || type === hevc.HEVCNaluType.kSliceIDR_N_LP\r\n                  || type === hevc.HEVCNaluType.kSliceIDR_W_RADL\r\n                  || type === hevc.HEVCNaluType.kSliceAUD\r\n                ) {\r\n                  return true\r\n                }\r\n                i += 2 + size\r\n                if (this.payloadContext.usingDonlField) {\r\n                  i += RTP_HEVC_DOND_FIELD_SIZE\r\n                }\r\n              }\r\n              break\r\n            case 49:\r\n              const fuHeader = this.queue[0].payload[2]\r\n              if ((fuHeader & 0x80)) {\r\n                return true\r\n              }\r\n              break\r\n            // case hevc.HEVCNaluType.kSlicePPS:\r\n            // case hevc.HEVCNaluType.kSliceSPS:\r\n            case hevc.HEVCNaluType.kSliceVPS:\r\n            // case hevc.HEVCNaluType.kSliceIDR_N_LP:\r\n            // case hevc.HEVCNaluType.kSliceIDR_W_RADL:\r\n            case hevc.HEVCNaluType.kSliceAUD:\r\n              return true\r\n          }\r\n        }\r\n        else if (this.codecpar.codecId === AVCodecID.AV_CODEC_ID_VP8) {\r\n          if (this.queue[0].payload[0] & 0x10) {\r\n            return true\r\n          }\r\n        }\r\n        else if (this.codecpar.codecId === AVCodecID.AV_CODEC_ID_VP9) {\r\n          if (this.queue[0].payload[0] & 0x08) {\r\n            return true\r\n          }\r\n        }\r\n        else if (this.codecpar.codecId === AVCodecID.AV_CODEC_ID_AV1) {\r\n          if (this.queue[0].payload[0] & 0x01) {\r\n            return true\r\n          }\r\n        }\r\n        else if (this.codecpar.codecId === AVCodecID.AV_CODEC_ID_MPEG2VIDEO) {\r\n          if (((this.queue[0].payload[2] >>> 5) & 0x01) === 1) {\r\n            return true\r\n          }\r\n        }\r\n        // 超过 200 个包开始输出，不用再等前面的包了，因为可能没有了\r\n        if (this.readyPos > 200) {\r\n          return true\r\n        }\r\n        return false\r\n      }\r\n      else {\r\n        return false\r\n      }\r\n    }\r\n  }\r\n\r\n  private check() {\r\n    // 移动已就绪指针并且保存 masker 索引\r\n    for (; this.readyPos < this.queue.length - 1;) {\r\n      if (this.isSeqIncreaseOne(this.queue[this.readyPos].header.sequence, this.queue[this.readyPos + 1].header.sequence)) {\r\n        this.readyPos++\r\n        if (this.queue[this.readyPos].header.masker\r\n          || this.codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_ALAW\r\n          || this.codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_MULAW\r\n          || this.codecpar.codecId === AVCodecID.AV_CODEC_ID_MP3\r\n          || this.codecpar.codecId === AVCodecID.AV_CODEC_ID_ADPCM_G722\r\n          || this.codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_S16BE\r\n        ) {\r\n          this.maskerQueue.push(this.readyPos)\r\n        }\r\n      }\r\n      else {\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  public push(packet: RTPPacket) {\r\n\r\n    // 已经输出帧之前的包直接忽略\r\n    if (this.currentSeqStart > -1 && this.seqAMoreThenB(this.currentSeqStart, packet.header.sequence)) {\r\n      return\r\n    }\r\n\r\n    // 第一个直接 push 返回\r\n    if (!this.queue.length) {\r\n      this.queue.push(packet)\r\n      if (packet.header.masker) {\r\n        this.maskerQueue.push(0)\r\n      }\r\n      return\r\n    }\r\n\r\n    let added = false\r\n\r\n    // seq 比队列中的第一个包小，插入到队首并重新处理 readyPos 和 maskerQueue\r\n    if (this.seqAMoreThenB(this.queue[0].header.sequence, packet.header.sequence)) {\r\n      this.queue.unshift(packet)\r\n      this.readyPos = 0\r\n      this.maskerQueue.length = 0\r\n      added = true\r\n      this.check()\r\n    }\r\n    else {\r\n      // 从 readyPos 开始查找当前的包需要插入的位置\r\n      for (let i = this.readyPos; i < this.queue.length; i++) {\r\n        if (this.seqAMoreThenB(this.queue[i].header.sequence, packet.header.sequence) ) {\r\n          this.queue.splice(i, 0, packet)\r\n          added = true\r\n          // 插入在当前的 readyPos 后一个位置，检查是否可以移动 readyPos 指针\r\n          if (i === this.readyPos + 1) {\r\n            this.check()\r\n          }\r\n          break\r\n        }\r\n      }\r\n    }\r\n    // 没找到插入点，插入到最后\r\n    if (!added) {\r\n      this.queue.push(packet)\r\n      // 插入在当前的 readyPos 后一个位置，检查是否可以移动 readyPos 指针\r\n      if (this.readyPos + 2 === this.queue.length) {\r\n        this.check()\r\n      }\r\n    }\r\n    let offset = 0\r\n    // 将已经就绪的帧放进 frameQueue\r\n    while (this.isFirstStart() && this.maskerQueue.length) {\r\n      const makerPos = this.maskerQueue.shift() + 1\r\n      const packets = this.queue.slice(offset, makerPos)\r\n      this.frameQueue.push(packets)\r\n      offset = makerPos\r\n      this.currentSeqStart = packets[packets.length - 1].header.sequence\r\n    }\r\n    if (offset) {\r\n      this.queue = this.queue.slice(offset)\r\n      // 更新 readyPos 和 剩余 masker 指针\r\n      this.readyPos = Math.max(0, this.readyPos - offset)\r\n      for (let i = 0; i < this.maskerQueue.length; i++) {\r\n        this.maskerQueue[i] -= offset\r\n      }\r\n    }\r\n  }\r\n\r\n  public hasFrame() {\r\n    return this.frameQueue.length\r\n  }\r\n\r\n  public getFrame() {\r\n    return this.frameQueue.shift()\r\n  }\r\n}\r\n","/*\r\n * libmedia rtp packet\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nexport class RTPPacketHeader {\r\n  version: bit<uint8, 2>\r\n  padding: bit<uint8, 1>\r\n  extension: bit<uint8, 1>\r\n  csrc: bit<uint8, 4>\r\n  masker: bit<uint8, 1>\r\n  payloadType: bit<uint8, 7>\r\n  sequence: uint16\r\n  timestamp: uint32\r\n  ssrc: uint32\r\n  csrcList: uint32[] = []\r\n}\r\n\r\nexport class RTPHeaderExtension {\r\n  id: uint16\r\n  length: uint16\r\n  extension: Uint8Array\r\n\r\n  headers: Map<int8, Uint8Array> = new Map()\r\n\r\n  public hasOneByteExtensions() {\r\n    return this.id === 0xBEDE\r\n  }\r\n\r\n  public hasTwoBytesExtensions() {\r\n    return (this.id & 0b1111111111110000) == 0b0001000000000000\r\n  }\r\n\r\n  public parse() {\r\n    if (this.hasOneByteExtensions()) {\r\n      for (let i = 0; i < this.extension.length; i++) {\r\n        const id = (this.extension[i] & 0xf0) >>> 4\r\n        const len = (this.extension[i] & 0x0f) + 1\r\n        // id=15 in One-Byte extensions means \"stop parsing here\".\r\n        if (id === 15) {\r\n          break\r\n        }\r\n        if (id !== 0) {\r\n          this.headers.set(id, this.extension.subarray(i + 1, i + 1 + len))\r\n\r\n          i += 1 + len\r\n        }\r\n        else {\r\n          i++\r\n        }\r\n      }\r\n    }\r\n    else if (this.hasTwoBytesExtensions()) {\r\n      for (let i = 0; i < this.extension.length; i++) {\r\n        const id = this.extension[i]\r\n        const len = this.extension[i + 1]\r\n        if (id !== 0) {\r\n          this.headers.set(id, this.extension.subarray(i + 2, i + 2 + len))\r\n          i += 2 + len\r\n        }\r\n        else {\r\n          i++\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport class RTPPacket {\r\n  header: RTPPacketHeader\r\n  headerExtension: RTPHeaderExtension\r\n  payload: Uint8Array\r\n}\r\n","/*\r\n * libmedia rtp depacketizer\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as logger from 'common/util/logger'\r\nimport { HEVCPayloadContext, Mpeg4PayloadContext, RTP_HEVC_DOND_FIELD_SIZE,\r\n  RTP_HEVC_DONL_FIELD_SIZE, RTP_HEVC_PAYLOAD_HEADER_SIZE, RTP_MAX_PACKET_LENGTH } from './rtp'\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\nimport BitReader from 'common/io/BitReader'\r\nimport * as h264Util from 'avutil/codecs/h264'\r\nimport * as hevcUtil from 'avutil/codecs/hevc'\r\nimport * as av1Util from 'avutil/codecs/av1'\r\nimport * as vp9Util from 'avutil/codecs/vp9'\r\nimport { RTPPacket } from './RTPPacket'\r\nimport { AVMediaType } from 'avutil/codec'\r\n\r\nexport function h264(rtps: RTPPacket[]) {\r\n  const nalus: Uint8Array[] = []\r\n  let isKey = false\r\n\r\n  for (let i = 0; i < rtps.length; i++) {\r\n    const payload =  rtps[i].payload\r\n    const type = payload[0] & 0x1f\r\n\r\n    switch (type) {\r\n      // STAP-A (one packet, multiple nalus)\r\n      case 24:\r\n        for (let j = 1; j < payload.length - 2;) {\r\n          const len = (payload[j] << 8) | payload[j + 1]\r\n          if (j + 2 + len > payload.length) {\r\n            logger.error('pack h264 STAP-A failed')\r\n            return {\r\n              nalus: [],\r\n              isKey\r\n            }\r\n          }\r\n          nalus.push(payload.subarray(j + 2, j + 2 + len))\r\n\r\n          if ((payload[j + 2] & 0x1f) === h264Util.H264NaluType.kSliceIDR) {\r\n            isKey = true\r\n          }\r\n\r\n          j += 2 + len\r\n        }\r\n        break\r\n      // STAP-B\r\n      case 25:\r\n      // MTAP-16            \r\n      case 26:\r\n      // MTAP-24           \r\n      case 27:\r\n      // FU-B              \r\n      case 29:\r\n        logger.error('not support nalu pack')\r\n        return {\r\n          nalus: [],\r\n          isKey\r\n        }\r\n      // FU-A\r\n      case 28:\r\n        const fuHeader = payload[1]\r\n        if (((fuHeader >>> 7) & 0x01) !== 1) {\r\n          logger.error('not the first FU-A packet')\r\n          return {\r\n            nalus: [],\r\n            isKey\r\n          }\r\n        }\r\n        const nalType = fuHeader & 0x1f\r\n        const nal = (payload[0] & 0xe0) | nalType\r\n        if (nalType === h264Util.H264NaluType.kSliceIDR) {\r\n          isKey = true\r\n        }\r\n\r\n        const buffers: Uint8Array[] = [new Uint8Array([nal])]\r\n        buffers.push(payload.subarray(2))\r\n        i++\r\n        for (; i < rtps.length; i++) {\r\n          buffers.push(rtps[i].payload.subarray(2))\r\n          if ((rtps[i].payload[1] >>> 6) & 0x01) {\r\n            break\r\n          }\r\n        }\r\n        nalus.push(concatTypeArray(Uint8Array, buffers))\r\n        break\r\n      default:\r\n        if (type === h264Util.H264NaluType.kSliceIDR) {\r\n          isKey = true\r\n        }\r\n        nalus.push(payload)\r\n        break\r\n    }\r\n  }\r\n  return {\r\n    nalus,\r\n    isKey\r\n  }\r\n}\r\n\r\nexport function hevc(rtps: RTPPacket[], context: HEVCPayloadContext) {\r\n  const nalus: Uint8Array[] = []\r\n\r\n  let isKey = false\r\n\r\n  for (let i = 0; i < rtps.length; i++) {\r\n    const payload =  rtps[i].payload\r\n    const type = (payload[0] >>> 1) & 0x3f\r\n\r\n    if (type > 50) {\r\n      logger.error('not support nalu pack')\r\n    }\r\n\r\n    switch (type) {\r\n      // STAP-A (one packet, multiple nalus)\r\n      case 48:\r\n        for (let j = RTP_HEVC_PAYLOAD_HEADER_SIZE + (context.usingDonlField ? RTP_HEVC_DONL_FIELD_SIZE : 0); j < payload.length - 2;) {\r\n          const len = (payload[j] << 8) | payload[j + 1]\r\n          if (j + 2 + len > payload.length) {\r\n            logger.error('pack hevc STAP-A failed')\r\n            return {\r\n              nalus: [],\r\n              isKey\r\n            }\r\n          }\r\n          nalus.push(payload.subarray(j + 2, j + 2 + len))\r\n\r\n          const nalType = (payload[j + 2] >>> 1) & 0x3f\r\n          if (nalType === hevcUtil.HEVCNaluType.kSliceIDR_N_LP\r\n            || nalType === hevcUtil.HEVCNaluType.kSliceIDR_W_RADL\r\n          ) {\r\n            isKey = true\r\n          }\r\n\r\n          j += 2 + len\r\n\r\n          if (context.usingDonlField) {\r\n            j += RTP_HEVC_DOND_FIELD_SIZE\r\n          }\r\n        }\r\n        break\r\n      // FU-A\r\n      case 49:\r\n        const fuHeader = payload[2]\r\n        const nalType = fuHeader & 0x3f\r\n        if (nalType === hevcUtil.HEVCNaluType.kSliceIDR_N_LP\r\n          || nalType === hevcUtil.HEVCNaluType.kSliceIDR_W_RADL\r\n        ) {\r\n          isKey = true\r\n        }\r\n        const buffers: Uint8Array[] = [new Uint8Array([(payload[0] & 0x81 | (nalType << 1)), payload[1]])]\r\n        buffers.push(payload.subarray(3 + (context.usingDonlField ? RTP_HEVC_DONL_FIELD_SIZE : 0)))\r\n        i++\r\n        for (; i < rtps.length; i++) {\r\n          buffers.push(rtps[i].payload.subarray(3 + (context.usingDonlField ? RTP_HEVC_DONL_FIELD_SIZE : 0)))\r\n          if ((rtps[i].payload[2] >>> 6) & 0x01) {\r\n            break\r\n          }\r\n        }\r\n        nalus.push(concatTypeArray(Uint8Array, buffers))\r\n        break\r\n      // PACI\r\n      case 50:\r\n        logger.error('not support nalu pack')\r\n        return {\r\n          nalus: [],\r\n          isKey\r\n        }\r\n      default:\r\n        if (type === hevcUtil.HEVCNaluType.kSliceIDR_N_LP\r\n          || type === hevcUtil.HEVCNaluType.kSliceIDR_W_RADL\r\n        ) {\r\n          isKey = true\r\n        }\r\n        nalus.push(payload)\r\n        break\r\n    }\r\n  }\r\n  return {\r\n    nalus,\r\n    isKey\r\n  }\r\n}\r\n\r\nexport function mpeg4(rtps: RTPPacket[], context: Mpeg4PayloadContext) {\r\n  const frames: Uint8Array[] = []\r\n  const buffers: Uint8Array[] = []\r\n  const bitReader: BitReader = new BitReader(RTP_MAX_PACKET_LENGTH)\r\n  for (let i = 0; i < rtps.length; i++) {\r\n    const payload = rtps[i].payload\r\n    if (context.latm) {\r\n      let offset = 0\r\n      while (offset < payload.length) {\r\n        let length = 0\r\n        while (true) {\r\n          const tmp = payload[offset++]\r\n          length += tmp\r\n          if (tmp !== 0xff) {\r\n            break\r\n          }\r\n        }\r\n        frames.push(payload.subarray(offset, offset + length))\r\n        offset += length\r\n      }\r\n    }\r\n    else {\r\n      if (payload.length < 2) {\r\n        logger.error('invalid mpeg4 payload length')\r\n        return\r\n      }\r\n      const auHeadersLength = (payload[0] << 8) | payload[1]\r\n      if (auHeadersLength > RTP_MAX_PACKET_LENGTH) {\r\n        logger.error('invalid mpeg4 payload au header length')\r\n        return\r\n      }\r\n      const auHeadersLengthBytes = ((auHeadersLength + 7) / 8) >>> 0\r\n      if (payload.length - 2 < auHeadersLengthBytes) {\r\n        logger.error('invalid mpeg4 payload au length')\r\n        return\r\n      }\r\n      const auHeaderSize = context.sizeLength + context.indexLength\r\n\r\n      // Wrong if optional additional sections are present (cts, dts etc...)\r\n      if ((auHeadersLength % auHeaderSize) !== 0) {\r\n        logger.error('not support mpeg4 payload au format')\r\n        return\r\n      }\r\n\r\n      const nbAuHeaders = auHeadersLength / auHeaderSize\r\n      const sizes: number[] = []\r\n      const indexes: number[] = []\r\n      bitReader.reset()\r\n      bitReader.appendBuffer(payload.subarray(2))\r\n      for (let j = 0; j < nbAuHeaders; j++) {\r\n        sizes.push(bitReader.readU(context.sizeLength))\r\n        indexes.push(bitReader.readU(context.indexLength))\r\n      }\r\n      if (sizes.length === 1 && sizes[0] + auHeadersLengthBytes + 2 >= payload.length) {\r\n        // 一个 rtp 一个 au\r\n        if (sizes[0] + auHeadersLengthBytes + 2 === payload.length) {\r\n          frames.push(payload.subarray(2 + auHeadersLengthBytes))\r\n        }\r\n        else {\r\n          // push 下一帧的数据\r\n          buffers.push(payload.subarray(2 + auHeadersLengthBytes))\r\n        }\r\n      }\r\n      else if (sizes.length > 1) {\r\n        let offset = auHeadersLengthBytes + 2\r\n        for (let j = 0; j < sizes.length; j++) {\r\n          if (!indexes[j] && buffers.length) {\r\n            frames.push(buffers.length === 1 ? buffers[0] : concatTypeArray(Uint8Array, buffers))\r\n            buffers.length = 0\r\n          }\r\n          frames.push(payload.subarray(offset, offset + sizes[j]))\r\n          offset += sizes[j]\r\n        }\r\n      }\r\n    }\r\n  }\r\n  if (buffers.length) {\r\n    frames.push(buffers.length === 1 ? buffers[0] : concatTypeArray(Uint8Array, buffers))\r\n  }\r\n  return frames\r\n}\r\n\r\nexport function vp8(rtps: RTPPacket[]) {\r\n  const buffers: Uint8Array[] = []\r\n  let isKey = false\r\n\r\n  for (let i = 0; i < rtps.length; i++) {\r\n    const X = rtps[i].payload[0] >>> 7\r\n    const S = (rtps[i].payload[0] >>> 4) & 0x01\r\n    const PID = rtps[i].payload[0] & 0x07\r\n\r\n    let offset = 1\r\n\r\n    if (X) {\r\n      const I = rtps[i].payload[offset] >>> 7\r\n      const L = (rtps[i].payload[offset] >>> 6) & 0x01\r\n      const T = (rtps[i].payload[offset] >>> 5) & 0x01\r\n      const K = (rtps[i].payload[offset] >>> 4) & 0x01\r\n      offset++\r\n      // PictureID\r\n      if (I) {\r\n        // 7bit\r\n        const M = rtps[i].payload[offset++] >>> 7\r\n        // 15 bit\r\n        if (M) {\r\n          offset++\r\n        }\r\n      }\r\n      // TL0PICIDX\r\n      if (L) {\r\n        offset++\r\n      }\r\n\r\n      if (T || K) {\r\n        offset++\r\n      }\r\n      if (S && PID === 0 && !(rtps[i].payload[offset] & 0x01)) {\r\n        isKey = true\r\n      }\r\n      buffers.push(rtps[i].payload.subarray(offset))\r\n    }\r\n  }\r\n  if (buffers.length === 1) {\r\n    return {\r\n      payload: buffers[0],\r\n      isKey\r\n    }\r\n  }\r\n  return {\r\n    payload: concatTypeArray(Uint8Array, buffers),\r\n    isKey\r\n  }\r\n}\r\n\r\n// https://datatracker.ietf.org/doc/draft-uberti-payload-vp9/00/\r\nexport function vp9(rtps: RTPPacket[]) {\r\n  const buffers: Uint8Array[] = []\r\n\r\n  let isKey = false\r\n\r\n  for (let i = 0; i < rtps.length; i++) {\r\n    const I = rtps[i].payload[0] >>> 7\r\n    const L = (rtps[i].payload[0] >>> 5) & 0x01\r\n    const F = (rtps[i].payload[0] >>> 4) & 0x01\r\n    const B = (rtps[i].payload[0] >>> 3) & 0x01\r\n    const V = (rtps[i].payload[0] >>> 1) & 0x01\r\n\r\n    let offset = 1\r\n\r\n    // PictureID\r\n    if (I) {\r\n      // 7bit\r\n      const M = rtps[i].payload[offset++] >>> 7\r\n      // 15 bit\r\n      if (M) {\r\n        offset++\r\n      }\r\n    }\r\n\r\n    let R = 0\r\n\r\n    if (L) {\r\n      if (F) {\r\n        R = rtps[i].payload[offset] & 0x03\r\n      }\r\n      offset++\r\n    }\r\n\r\n    if (F) {\r\n      for (let i = 0; i < R; i++) {\r\n        if (rtps[i].payload[offset] & 0x10) {\r\n          offset += 2\r\n        }\r\n        else {\r\n          offset += 1\r\n        }\r\n      }\r\n    }\r\n\r\n    if (V) {\r\n      const ns = rtps[i].payload[offset] >> 5\r\n      const y = !!(rtps[i].payload[offset] & 0x10)\r\n      const g = !!(rtps[i].payload[offset] & 0x08)\r\n      offset++\r\n      if (ns > 0) {\r\n        logger.fatal('VP9 scalability structure with multiple layers')\r\n      }\r\n      if (y) {\r\n        for (i = 0; i < ns + 1; i++) {\r\n          offset += 4\r\n        }\r\n      }\r\n      if (g) {\r\n        const ng = rtps[i].payload[offset++]\r\n        for (i = 0; i < ng; i++) {\r\n          const r = (rtps[i].payload[offset] >> 2) & 0x03\r\n          offset++\r\n          for (let j = 0; j < r; j++) {\r\n            offset++\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (B) {\r\n      const first = rtps[i].payload[offset]\r\n      const version = (first >>> 5) & 0x01\r\n      const high = (first >>> 4) & 0x01\r\n      const profile = (high << 1) + version\r\n      const showExistingFrame = (first >>> (profile === vp9Util.VP9Profile.Profile3 ? 2 : 3)) & 0x01\r\n      if (showExistingFrame) {\r\n        isKey = false\r\n      }\r\n      else {\r\n        isKey = !((first >>> (profile === vp9Util.VP9Profile.Profile3 ? 1 : 2)) & 0x01)\r\n      }\r\n    }\r\n    buffers.push(rtps[i].payload.subarray(offset))\r\n  }\r\n  if (buffers.length === 1) {\r\n    return {\r\n      isKey,\r\n      payload: buffers[0]\r\n    }\r\n  }\r\n  return {\r\n    isKey,\r\n    payload: concatTypeArray(Uint8Array, buffers)\r\n  }\r\n}\r\n\r\nexport function av1(rtps: RTPPacket[]) {\r\n  const buffers: Uint8Array[] = []\r\n  let isKey = false\r\n\r\n  function leb128(buffer: Uint8Array, offset: number) {\r\n    let value = 0\r\n    for (let i = 0; i < 8; i++ ) {\r\n      let next = buffer[offset++]\r\n      value |= ((next & 0x7f) << (i * 7))\r\n      if (!(next & 0x80)) {\r\n        break\r\n      }\r\n    }\r\n    return {\r\n      value,\r\n      offset\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < rtps.length; i++) {\r\n    const W = (rtps[i].payload[0] >>> 4) & 0x03\r\n    let offset = 1\r\n    if (W) {\r\n      for (let i = 0; i < W - 1; i++) {\r\n        const result = leb128(rtps[i].payload, offset)\r\n        offset = result.offset\r\n        const type = (rtps[i].payload[offset] >>> 3) & 0x0f\r\n        if (type === av1Util.OBUType.SEQUENCE_HEADER) {\r\n          isKey = true\r\n        }\r\n        buffers.push(rtps[i].payload.subarray(offset, offset + result.value))\r\n        offset += result.value\r\n      }\r\n      const type = (rtps[i].payload[offset] >>> 3) & 0x0f\r\n      if (type === av1Util.OBUType.SEQUENCE_HEADER) {\r\n        isKey = true\r\n      }\r\n      buffers.push(rtps[i].payload.subarray(offset))\r\n    }\r\n    else {\r\n      while (offset < rtps[i].payload.length - 1) {\r\n        const result = leb128(rtps[i].payload, offset)\r\n        offset = result.offset\r\n        const type = (rtps[i].payload[offset] >>> 3) & 0x0f\r\n        if (type === av1Util.OBUType.SEQUENCE_HEADER) {\r\n          isKey = true\r\n        }\r\n        buffers.push(rtps[i].payload.subarray(offset, offset + result.value))\r\n        offset += result.value\r\n      }\r\n    }\r\n  }\r\n  if (buffers.length === 1) {\r\n    return {\r\n      payload: buffers[0],\r\n      isKey\r\n    }\r\n  }\r\n  return {\r\n    payload: concatTypeArray(Uint8Array, buffers),\r\n    isKey\r\n  }\r\n}\r\n\r\nexport function mpeg12(rtps: RTPPacket[], mediaType: AVMediaType) {\r\n  const buffers: Uint8Array[] = []\r\n\r\n  for (let i = 0; i < rtps.length; i++) {\r\n    let offset = 4\r\n    if (mediaType === AVMediaType.AVMEDIA_TYPE_VIDEO\r\n      && ((rtps[i].payload[0] >>> 2) & 0x01) === 1\r\n    ) {\r\n      offset = 8\r\n    }\r\n    buffers.push(rtps[i].payload.subarray(offset))\r\n  }\r\n  if (buffers.length === 1) {\r\n    return buffers[0]\r\n  }\r\n  return concatTypeArray(Uint8Array, buffers)\r\n}\r\n\r\nexport function ac3(rtps: RTPPacket[]) {\r\n  const frames: Uint8Array[] = []\r\n  const buffers: Uint8Array[] = []\r\n  for (let i = 0; i < rtps.length; i++) {\r\n    const payload = rtps[i].payload\r\n    const ft = payload[0] & 0x03\r\n    switch (ft) {\r\n      case 0:\r\n        frames.push(payload.subarray(2))\r\n        break\r\n      case 1:\r\n      case 2:\r\n        buffers.push(payload.subarray(2))\r\n        break\r\n      case 3:\r\n        buffers.push(payload.subarray(2))\r\n        frames.push(concatTypeArray(Uint8Array, buffers))\r\n        buffers.length = 0\r\n        break\r\n    }\r\n  }\r\n  if (frames.length === 1) {\r\n    return frames[0]\r\n  }\r\n  return concatTypeArray(Uint8Array, frames)\r\n}\r\n\r\nexport function concat(rtps: RTPPacket[]) {\r\n\r\n  if (rtps.length === 1) {\r\n    return rtps[0].payload\r\n  }\r\n\r\n  const buffers: Uint8Array[] = []\r\n\r\n  for (let i = 0; i < rtps.length; i++) {\r\n    buffers.push(rtps[i].payload)\r\n  }\r\n  return concatTypeArray(Uint8Array, buffers)\r\n}\r\n","/*\r\n * libmedia rtp codec\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVCodecID } from 'avutil/codec'\r\nimport { H264PayloadContext, HEVCPayloadContext, Mpeg4PayloadContext } from './rtp'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport { mapUint8Array, memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport * as base64 from 'common/util/base64'\r\nimport * as h264 from 'avutil/codecs/h264'\r\nimport * as hevc from 'avutil/codecs/hevc'\r\nimport * as aac from 'avutil/codecs/aac'\r\nimport * as naluUtil from 'avutil/util/nalu'\r\nimport { Data } from 'common/types/type'\r\nimport AVStream from 'avutil/AVStream'\r\nimport BitReader from 'common/io/BitReader'\r\nimport * as logger from 'common/util/logger'\r\nimport { AVCodecParameterFlags } from 'avutil/struct/avcodecparameters'\r\n\r\nfunction eachConfig(config: string, callback: (key: string, value: string) => void) {\r\n  const list = config.split(';')\r\n  for (let i = 0; i < list.length; i++) {\r\n    const item = list[i]\r\n    const l2 = item.split('=')\r\n    const key = l2[0].trim()\r\n    l2.shift()\r\n    const value = l2.join('=').trim()\r\n    callback(key, value)\r\n  }\r\n}\r\n\r\nexport function parseH264Fmtp(stream: AVStream, config: string) {\r\n  stream.codecpar.flags |= AVCodecParameterFlags.AV_CODECPAR_FLAG_H26X_ANNEXB\r\n  const context: Partial<H264PayloadContext> = {}\r\n  eachConfig(config, (key, value) => {\r\n    switch (key) {\r\n      case 'profile-level-id':\r\n        context.profile = +('0x' + value.substring(0, 2))\r\n        context.level = +('0x' + value.substring(4, 6))\r\n        break\r\n      case 'packetization-mode':\r\n        context.packetizationMode = +value\r\n        break\r\n      case 'sprop-parameter-sets':\r\n        const nalus: Uint8Array[] = value.split(',').map((context) => {\r\n          return base64.base64ToUint8Array(context)\r\n        })\r\n        const extradata = naluUtil.joinNaluByStartCode(nalus, 0)\r\n        stream.codecpar.extradata = avMalloc(extradata.length)\r\n        stream.codecpar.extradataSize = extradata.length\r\n        memcpyFromUint8Array(stream.codecpar.extradata, extradata.length, extradata)\r\n        h264.parseAVCodecParameters(stream, mapUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize)))\r\n        break\r\n    }\r\n  })\r\n  return context\r\n}\r\n\r\nexport function parseHevcFmtp(stream: AVStream, config: string) {\r\n  const context: Partial<HEVCPayloadContext> = {}\r\n\r\n  const nalus: Uint8Array[] = []\r\n  stream.codecpar.flags |= AVCodecParameterFlags.AV_CODECPAR_FLAG_H26X_ANNEXB\r\n\r\n  eachConfig(config, (key, value) => {\r\n    switch (key) {\r\n      case 'profile-id':\r\n        context.profile = +value\r\n        break\r\n      case 'sprop-vps':\r\n      case 'sprop-sps':\r\n      case 'sprop-pps':\r\n      case 'sprop-sei':\r\n        nalus.push(base64.base64ToUint8Array(value))\r\n        break\r\n    }\r\n  })\r\n\r\n  if (nalus.length) {\r\n    const extradata = naluUtil.joinNaluByStartCode(nalus, 0)\r\n    stream.codecpar.extradata = avMalloc(extradata.length)\r\n    stream.codecpar.extradataSize = extradata.length\r\n    memcpyFromUint8Array(stream.codecpar.extradata, extradata.length, extradata)\r\n    hevc.parseAVCodecParameters(stream, mapUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize)))\r\n  }\r\n  return context\r\n}\r\n\r\nexport function parseMpeg4Fmtp(stream: AVStream, config: string) {\r\n  const context: Partial<Mpeg4PayloadContext> = {}\r\n\r\n  eachConfig(config, (key, value) => {\r\n    switch (key) {\r\n      case 'streamtype':\r\n        context.streamType = +value\r\n        break\r\n      case 'profile-level-id':\r\n        context.profileLevelId = +value\r\n        break\r\n      case 'mode':\r\n        context.mode = value\r\n        break\r\n      case 'sizelength':\r\n        context.sizeLength = +value\r\n        break\r\n      case 'indexlength':\r\n        context.indexLength = +value\r\n        break\r\n      case 'indexdeltalength':\r\n        context.indexDeltaLength = +value\r\n        break\r\n      case 'config':\r\n        context.config = value\r\n        stream.codecpar.extradata = avMalloc(value.length / 2)\r\n        stream.codecpar.extradataSize = value.length / 2\r\n        const buffer = mapUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize))\r\n        let offset = 0\r\n        for (let i = 0; i < value.length; i += 2) {\r\n          buffer[offset++] = +('0x' + value.substring(i, i + 2))\r\n        }\r\n        if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC) {\r\n          aac.parseAVCodecParameters(stream, mapUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize)))\r\n        }\r\n        break\r\n    }\r\n  })\r\n\r\n  return context\r\n}\r\n\r\nexport function parseAacLatmFmtp(stream: AVStream, config: string) {\r\n  const context: Partial<Mpeg4PayloadContext> = {\r\n    latm: true\r\n  }\r\n\r\n  // change codec from AV_CODEC_ID_AAC_LATM to AV_CODEC_ID_AAC\r\n  stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_AAC\r\n\r\n  eachConfig(config, (key, value) => {\r\n    switch (key) {\r\n      case 'profile-level-id':\r\n        context.profileLevelId = +value\r\n        break\r\n      case 'cpresent':\r\n        context.cpresent = +value\r\n        break\r\n      case 'config':\r\n        context.config = value\r\n        const config = new Uint8Array(value.length / 2)\r\n        let offset = 0\r\n        for (let i = 0; i < value.length; i += 2) {\r\n          config[offset++] = +('0x' + value.substring(i, i + 2))\r\n        }\r\n        const bitReader = new BitReader(config.length)\r\n        bitReader.appendBuffer(config)\r\n        const audioMuxVersion = bitReader.readU1()\r\n        const sameTimeFraming = bitReader.readU1()\r\n        bitReader.skip(6)\r\n        const numPrograms = bitReader.readU(4)\r\n        const numLayers = bitReader.readU(3)\r\n        if (audioMuxVersion != 0\r\n          || sameTimeFraming != 1\r\n          || numPrograms != 0\r\n          || numLayers != 0\r\n        ) {\r\n          logger.fatal('LATM config not support')\r\n        }\r\n\r\n        stream.codecpar.extradata = avMalloc(2)\r\n        stream.codecpar.extradataSize = 2\r\n        const buffer = mapUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize))\r\n        buffer[0] = bitReader.readU(8)\r\n        buffer[1] = bitReader.readU(8)\r\n        aac.parseAVCodecParameters(stream, mapUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize)))\r\n        break\r\n    }\r\n  })\r\n\r\n  return context\r\n}\r\n\r\nexport const CodecIdFmtpHandler: Partial<Record<AVCodecID, (stream: AVStream, config: string) => Data>> = {\r\n  [AVCodecID.AV_CODEC_ID_H264]: parseH264Fmtp,\r\n  [AVCodecID.AV_CODEC_ID_HEVC]: parseHevcFmtp,\r\n  [AVCodecID.AV_CODEC_ID_AAC]: parseMpeg4Fmtp,\r\n  [AVCodecID.AV_CODEC_ID_AAC_LATM]: parseAacLatmFmtp,\r\n  [AVCodecID.AV_CODEC_ID_MPEG4]: parseMpeg4Fmtp\r\n}\r\n","/*\r\n * libmedia judge is rtc packet\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport default function isRtp(data: Uint8ArrayInterface) {\r\n  return data.length > 12\r\n    // DOC: https://tools.ietf.org/html/draft-ietf-avtcore-rfc5764-mux-fixes\r\n    && (data[0] > 127 && data[0] < 192)\r\n    // RTP Version must be 2.\r\n    && (data[0] >>> 6) === 2\r\n}\r\n","/*\r\n * libmedia rtp parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport { RTPHeaderExtension, RTPPacket, RTPPacketHeader } from './RTPPacket'\r\n\r\nexport function parseRTPPacket(data: Uint8ArrayInterface) {\r\n  const packet = new RTPPacket()\r\n  const header = packet.header = new RTPPacketHeader()\r\n  let offset = 0\r\n  header.version = data[offset] >> 6\r\n  header.padding = (data[offset] >> 5) & 0x01\r\n  header.extension = (data[offset] >> 4) & 0x01\r\n  header.csrc = data[offset] & 0x0f\r\n  offset++\r\n\r\n  header.masker = (data[offset] >> 7) & 0x01\r\n  header.payloadType = data[offset] & 0x7f\r\n  offset++\r\n\r\n  header.sequence = (data[offset] << 8) | data[offset + 1]\r\n  offset += 2\r\n\r\n  header.timestamp = ((data[offset] << 24) | (data[offset + 1] << 16) | (data[offset + 2] << 8) | data[offset + 3]) >>> 0\r\n  offset += 4\r\n\r\n  header.ssrc = ((data[offset] << 24) | (data[offset + 1] << 16) | (data[offset + 2] << 8) | data[offset + 3]) >>> 0\r\n  offset += 4\r\n\r\n  for (let i = 0; i < header.csrc; i++) {\r\n    header.csrcList.push(((data[offset] << 24) | (data[offset + 1] << 16) | (data[offset + 2] << 8) | data[offset + 3]) >>> 0)\r\n    offset += 4\r\n  }\r\n  if (header.extension) {\r\n    packet.headerExtension = packet.headerExtension = new RTPHeaderExtension()\r\n    packet.headerExtension.id = (data[offset] << 8) | data[offset + 1]\r\n    offset += 2\r\n\r\n    packet.headerExtension.length = (data[offset] << 8) | data[offset + 1]\r\n    offset += 2\r\n\r\n    packet.headerExtension.extension = data.subarray(offset, packet.headerExtension.length * 4)\r\n    offset += 4 * packet.headerExtension.length\r\n  }\r\n  packet.payload = data.subarray(offset, data.length - (header.padding ? data[data.length - 1] : 0))\r\n\r\n  return packet\r\n}\r\n","/*\r\n * libmedia rtp\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVCodecID, AVMediaType } from 'avutil/codec'\r\n\r\nexport const RTP_MAX_PACKET_LENGTH = 8192\r\nexport const RTP_HEVC_PAYLOAD_HEADER_SIZE = 2\r\nexport const RTP_HEVC_DOND_FIELD_SIZE = 1\r\nexport const RTP_HEVC_DONL_FIELD_SIZE = 2\r\n\r\nexport const RTP_PAYLOAD_PRIVATE = 96\r\n\r\nexport interface H264PayloadContext {\r\n  profile: number\r\n  level: number\r\n  packetizationMode: number\r\n}\r\n\r\nexport interface HEVCPayloadContext {\r\n  usingDonlField: number\r\n  profile: number\r\n}\r\n\r\nexport interface Mpeg4PayloadContext {\r\n  sizeLength: number\r\n  indexLength: number\r\n  indexDeltaLength: number\r\n  profileLevelId: number\r\n  streamType: number\r\n  objectType: number\r\n  config: string\r\n  mode: string\r\n  cpresent: number\r\n  latm: boolean\r\n}\r\n\r\nexport interface RTPPayloadCodec {\r\n  payload: uint8\r\n  name: string\r\n  codecType: AVMediaType\r\n  codecId: AVCodecID\r\n  rate: number\r\n  encoding: number\r\n}\r\n\r\nexport const RTPCodecName2AVCodeId = {\r\n  'PCMU': AVCodecID.AV_CODEC_ID_PCM_MULAW,\r\n  'PCMA': AVCodecID.AV_CODEC_ID_PCM_ALAW,\r\n  'G723': AVCodecID.AV_CODEC_ID_G723_1,\r\n  'G722': AVCodecID.AV_CODEC_ID_ADPCM_G722,\r\n  'L16': AVCodecID.AV_CODEC_ID_PCM_S16BE,\r\n  'MPA': AVCodecID.AV_CODEC_ID_MP3,\r\n  'MPV': AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  'MP2T': AVCodecID.AV_CODEC_ID_MPEG2TS,\r\n  'H264': AVCodecID.AV_CODEC_ID_H264,\r\n  'H265': AVCodecID.AV_CODEC_ID_HEVC,\r\n  'HEVC': AVCodecID.AV_CODEC_ID_HEVC,\r\n  'VP8': AVCodecID.AV_CODEC_ID_VP8,\r\n  'VP9': AVCodecID.AV_CODEC_ID_VP9,\r\n  'AV1': AVCodecID.AV_CODEC_ID_AV1,\r\n  'opus': AVCodecID.AV_CODEC_ID_OPUS,\r\n  'speex': AVCodecID.AV_CODEC_ID_SPEEX,\r\n  'vorbis': AVCodecID.AV_CODEC_ID_VORBIS,\r\n  'theora': AVCodecID.AV_CODEC_ID_THEORA,\r\n  'MP4A-LATM': AVCodecID.AV_CODEC_ID_AAC_LATM,\r\n  'MP4V-ES': AVCodecID.AV_CODEC_ID_MPEG4,\r\n  'mpeg4-generic': AVCodecID.AV_CODEC_ID_AAC,\r\n  'ac3': AVCodecID.AV_CODEC_ID_AC3\r\n}\r\n\r\nexport const StaticRTPPayloadCodec: RTPPayloadCodec[] = [\r\n  {\r\n    payload: 0,\r\n    name: 'PCMU',\r\n    codecType: AVMediaType.AVMEDIA_TYPE_AUDIO,\r\n    codecId: AVCodecID.AV_CODEC_ID_PCM_MULAW,\r\n    rate: 8000,\r\n    encoding: 1\r\n  },\r\n  {\r\n    payload: 4,\r\n    name: 'G723',\r\n    codecType: AVMediaType.AVMEDIA_TYPE_AUDIO,\r\n    codecId: AVCodecID.AV_CODEC_ID_G723_1,\r\n    rate: 8000,\r\n    encoding: 1\r\n  },\r\n  {\r\n    payload: 8,\r\n    name: 'PCMA',\r\n    codecType: AVMediaType.AVMEDIA_TYPE_AUDIO,\r\n    codecId: AVCodecID.AV_CODEC_ID_PCM_ALAW,\r\n    rate: 8000,\r\n    encoding: 1\r\n  },\r\n  {\r\n    payload: 9,\r\n    name: 'G722',\r\n    codecType: AVMediaType.AVMEDIA_TYPE_AUDIO,\r\n    codecId: AVCodecID.AV_CODEC_ID_ADPCM_G722,\r\n    rate: 8000,\r\n    encoding: 1\r\n  },\r\n  {\r\n    payload: 10,\r\n    name: 'L16',\r\n    codecType: AVMediaType.AVMEDIA_TYPE_AUDIO,\r\n    codecId: AVCodecID.AV_CODEC_ID_PCM_S16BE,\r\n    rate: 44100,\r\n    encoding: 2\r\n  },\r\n  {\r\n    payload: 11,\r\n    name: 'L16',\r\n    codecType: AVMediaType.AVMEDIA_TYPE_AUDIO,\r\n    codecId: AVCodecID.AV_CODEC_ID_PCM_S16BE,\r\n    rate: 44100,\r\n    encoding: 1\r\n  },\r\n  {\r\n    payload: 14,\r\n    name: 'MPA',\r\n    codecType: AVMediaType.AVMEDIA_TYPE_AUDIO,\r\n    codecId: AVCodecID.AV_CODEC_ID_MP3,\r\n    rate: -1,\r\n    encoding: -1\r\n  },\r\n  {\r\n    payload: 31,\r\n    name: 'H261',\r\n    codecType: AVMediaType.AVMEDIA_TYPE_VIDEO,\r\n    codecId: AVCodecID.AV_CODEC_ID_H261,\r\n    rate: 90000,\r\n    encoding: -1\r\n  },\r\n  {\r\n    payload: 32,\r\n    name: 'MPV',\r\n    codecType: AVMediaType.AVMEDIA_TYPE_VIDEO,\r\n    codecId: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n    rate: 90000,\r\n    encoding: -1\r\n  },\r\n  {\r\n    payload: 33,\r\n    name: 'MPV',\r\n    codecType: AVMediaType.AVMEDIA_TYPE_DATA,\r\n    codecId: AVCodecID.AV_CODEC_ID_MPEG2TS,\r\n    rate: 90000,\r\n    encoding: -1\r\n  },\r\n  {\r\n    payload: 34,\r\n    name: 'H263',\r\n    codecType: AVMediaType.AVMEDIA_TYPE_VIDEO,\r\n    codecId: AVCodecID.AV_CODEC_ID_H263,\r\n    rate: 90000,\r\n    encoding: -1\r\n  }\r\n]\r\n","/*\r\n * libmedia rtsp session\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport IOWriter from 'common/io/IOWriter'\r\nimport { TextMessageRequest, TextMessageSession } from 'common/network/textMessage/message'\r\nimport { RtspMethod, RtspStreamingMode } from './rtsp'\r\nimport { Range } from 'common/types/type'\r\n\r\nexport interface RtspTransport {\r\n  trackId: number\r\n  streamMode: RtspStreamingMode\r\n  clientPort?: number\r\n  serverPort?: number\r\n  destination?: string\r\n  interleaved?: number\r\n  multcast?: boolean\r\n}\r\n\r\nexport default class RtspSession extends TextMessageSession {\r\n\r\n  private seq: number\r\n\r\n  version: string = 'RTSP/1.0'\r\n  uri: string\r\n  authorization: string\r\n\r\n  constructor(uri: string, ioReader: IOReader, ioWriter: IOWriter) {\r\n    super(ioReader, ioWriter)\r\n    this.seq = 1\r\n    this.uri = uri\r\n  }\r\n\r\n  public async options() {\r\n    const req = new TextMessageRequest(RtspMethod.OPTIONS, this.uri, this.version, {\r\n      CSeq: '' + this.seq++\r\n    })\r\n    return super.request(req)\r\n  }\r\n\r\n  public async describe() {\r\n    const req = new TextMessageRequest(RtspMethod.DESCRIBE, this.uri, this.version, {\r\n      CSeq: '' + this.seq++,\r\n      Accept: 'application/sdp',\r\n      Authorization: this.authorization\r\n    })\r\n    return super.request(req)\r\n  }\r\n\r\n  public async setup(transport: RtspTransport, sessionId: string = '') {\r\n\r\n    let type = ''\r\n    if (transport.streamMode === RtspStreamingMode.TRANSPORT_TCP) {\r\n      type = '/TCP'\r\n    }\r\n    let interleaved = ''\r\n    let clientPort = ''\r\n    if (transport.streamMode === RtspStreamingMode.TRANSPORT_UDP) {\r\n      clientPort = `;${transport.clientPort}-${transport.clientPort + 1}`\r\n    }\r\n    else if (transport.streamMode === RtspStreamingMode.TRANSPORT_TCP) {\r\n      interleaved = `;${transport.interleaved}-${transport.interleaved + 1}`\r\n    }\r\n\r\n    const req = new TextMessageRequest(RtspMethod.SETUP, this.uri + `/trackID=${transport.trackId}`, this.version, {\r\n      CSeq: '' + this.seq++,\r\n      Session: sessionId,\r\n      Authorization: this.authorization,\r\n      Transport: `RTP/AVP${type};${transport.multcast ? 'multcast' : 'unicast'}${interleaved}${clientPort}`\r\n    })\r\n    return super.request(req)\r\n  }\r\n\r\n  public async play(sessionId: string, range: Range = { from: 0, to: -1 }) {\r\n    const req = new TextMessageRequest(RtspMethod.PLAY, this.uri, this.version, {\r\n      CSeq: '' + this.seq++,\r\n      Session: sessionId,\r\n      Authorization: this.authorization,\r\n      Range: `npt=${range.from >= 0 ? range.from : 0}-${range.to > 0 ? range.to : ''}`\r\n    })\r\n    return super.request(req)\r\n  }\r\n\r\n  public async pause(sessionId: string) {\r\n    const req = new TextMessageRequest(RtspMethod.PAUSE, this.uri, this.version, {\r\n      CSeq: '' + this.seq++,\r\n      Session: sessionId,\r\n      Authorization: this.authorization\r\n    })\r\n    return super.request(req)\r\n  }\r\n\r\n  public async teardown(sessionId: string) {\r\n    const req = new TextMessageRequest(RtspMethod.TEARDOWN, this.uri, this.version, {\r\n      CSeq: '' + this.seq++,\r\n      Session: sessionId,\r\n      Authorization: this.authorization\r\n    })\r\n    await super.notify(req)\r\n  }\r\n\r\n  public async readPacket() {\r\n    while (true) {\r\n      // $\r\n      if (await (this.ioReader.peekUint8()) !== 0x24) {\r\n        await this.readResponse()\r\n      }\r\n      await this.ioReader.skip(1)\r\n      const interleaved = await this.ioReader.readUint8()\r\n      const len = await this.ioReader.readUint16()\r\n      const data = await this.ioReader.readBuffer(len)\r\n      return {\r\n        interleaved,\r\n        data\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * from https://github.com/clux/sdp-transform\r\n */\r\n\r\nimport { Data } from 'common/types/type'\r\nimport * as is from 'common/util/is'\r\n\r\nexport type SdpGrammar = {\r\n  name?: string\r\n  push?: string\r\n  reg: RegExp\r\n  names?: string[]\r\n  format: string | ((data: Data) => string)\r\n}\r\n\r\nexport const defaultReg = /(.*)/\r\nexport const defaultFormat = '%s'\r\n\r\nexport const grammars: Record<string, SdpGrammar[]> = {\r\n  v: [\r\n    {\r\n      name: 'version',\r\n      reg: /^(\\d*)$/,\r\n      format: defaultFormat\r\n    }\r\n  ],\r\n  o: [\r\n    {\r\n      /*\r\n       * o=- 20518 0 IN IP4 203.0.113.1\r\n       * NB: sessionId will be a String in most cases because it is huge\r\n       */\r\n      name: 'origin',\r\n      reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\r\n      names: ['username', 'sessionId', 'sessionVersion', 'netType', 'ipVer', 'address'],\r\n      format: '%s %s %d %s IP%d %s'\r\n    }\r\n  ],\r\n  // default parsing of these only (though some of these feel outdated)\r\n  s: [\r\n    {\r\n      name: 'name',\r\n      reg: defaultReg,\r\n      format: defaultFormat\r\n    }\r\n  ],\r\n  i: [\r\n    {\r\n      name: 'description',\r\n      reg: defaultReg,\r\n      format: defaultFormat\r\n    }\r\n  ],\r\n  u: [\r\n    {\r\n      name: 'uri',\r\n      reg: defaultReg,\r\n      format: defaultFormat\r\n    }\r\n  ],\r\n  e: [\r\n    {\r\n      name: 'email',\r\n      reg: defaultReg,\r\n      format: defaultFormat\r\n    }\r\n  ],\r\n  p: [\r\n    {\r\n      name: 'phone',\r\n      reg: defaultReg,\r\n      format: defaultFormat\r\n    }\r\n  ],\r\n  z: [\r\n    // TODO: this one can actually be parsed properly...\r\n    {\r\n      name: 'timezones',\r\n      reg: defaultReg,\r\n      format: defaultFormat\r\n    }\r\n  ],\r\n  r: [\r\n    // TODO: this one can also be parsed properly\r\n    {\r\n      name: 'repeats',\r\n      reg: defaultReg,\r\n      format: defaultFormat\r\n    }\r\n  ],\r\n\r\n  // k: [{}], // outdated thing ignored\r\n  t: [\r\n    {\r\n      // t=0 0\r\n      name: 'timing',\r\n      reg: /^(\\d*) (\\d*)/,\r\n      names: ['start', 'stop'],\r\n      format: '%d %d'\r\n    }\r\n  ],\r\n  c: [\r\n    {\r\n      // c=IN IP4 10.47.197.26\r\n      name: 'connection',\r\n      reg: /^IN IP(\\d) (\\S*)/,\r\n      names: ['version', 'ip'],\r\n      format: 'IN IP%d %s'\r\n    }\r\n  ],\r\n  b: [\r\n    {\r\n      // b=AS:4000\r\n      push: 'bandwidth',\r\n      reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\r\n      names: ['type', 'limit'],\r\n      format: '%s:%s'\r\n    }\r\n  ],\r\n  m: [\r\n    {\r\n      /*\r\n       * m=video 51744 RTP/AVP 126 97 98 34 31\r\n       * NB: special - pushes to session\r\n       * TODO: rtp/fmtp should be filtered by the payloads found here?\r\n       */\r\n      reg: /^(\\w*) (\\d*) ([\\w/]*)(?: (.*))?/,\r\n      names: ['type', 'port', 'protocol', 'payloads'],\r\n      format: '%s %d %s %s'\r\n    }\r\n  ],\r\n  a: [\r\n    {\r\n      // a=rtpmap:110 opus/48000/2\r\n      push: 'rtp',\r\n      reg: /^rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\r\n      names: ['payload', 'codec', 'rate', 'encoding'],\r\n      format: function (o) {\r\n        return (o.encoding)\r\n          ? 'rtpmap:%d %s/%s/%s'\r\n          : o.rate\r\n            ? 'rtpmap:%d %s/%s'\r\n            : 'rtpmap:%d %s'\r\n      }\r\n    },\r\n    {\r\n      /*\r\n       * a=fmtp:108 profile-level-id=24;object=23;bitrate=64000\r\n       * a=fmtp:111 minptime=10; useinbandfec=1\r\n       */\r\n      push: 'fmtp',\r\n      reg: /^fmtp:(\\d*) ([\\S| ]*)/,\r\n      names: ['payload', 'config'],\r\n      format: 'fmtp:%d %s'\r\n    },\r\n    {\r\n      // a=control:streamid=0\r\n      name: 'control',\r\n      reg: /^control:(.*)/,\r\n      format: 'control:%s'\r\n    },\r\n    {\r\n      // a=rtcp:65179 IN IP4 193.84.77.194\r\n      name: 'rtcp',\r\n      reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\r\n      names: ['port', 'netType', 'ipVer', 'address'],\r\n      format: function (o) {\r\n        return (o.address != null)\r\n          ? 'rtcp:%d %s IP%d %s'\r\n          : 'rtcp:%d'\r\n      }\r\n    },\r\n    {\r\n      // a=rtcp-fb:98 trr-int 100\r\n      push: 'rtcpFbTrrInt',\r\n      reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\r\n      names: ['payload', 'value'],\r\n      format: 'rtcp-fb:%s trr-int %d'\r\n    },\r\n    {\r\n      // a=rtcp-fb:98 nack rpsi\r\n      push: 'rtcpFb',\r\n      reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\r\n      names: ['payload', 'type', 'subtype'],\r\n      format: function (o) {\r\n        return (o.subtype != null)\r\n          ? 'rtcp-fb:%s %s %s'\r\n          : 'rtcp-fb:%s %s'\r\n      }\r\n    },\r\n    {\r\n      /*\r\n       * a=extmap:2 urn:ietf:params:rtp-hdrext:toffset\r\n       * a=extmap:1/recvonly URI-gps-string\r\n       * a=extmap:3 urn:ietf:params:rtp-hdrext:encrypt urn:ietf:params:rtp-hdrext:smpte-tc 25@600/24\r\n       */\r\n      push: 'ext',\r\n      reg: /^extmap:(\\d+)(?:\\/(\\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\\S*)(?: (\\S*))?/,\r\n      names: ['value', 'direction', 'encrypt-uri', 'uri', 'config'],\r\n      format: function (o) {\r\n        return (\r\n          'extmap:%d'\r\n          + (o.direction ? '/%s' : '%v')\r\n          + (o['encrypt-uri'] ? ' %s' : '%v')\r\n          + ' %s'\r\n          + (o.config ? ' %s' : '')\r\n        )\r\n      }\r\n    },\r\n    {\r\n      // a=extmap-allow-mixed\r\n      name: 'extmapAllowMixed',\r\n      reg: /^(extmap-allow-mixed)/,\r\n      format: defaultFormat\r\n    },\r\n    {\r\n      // a=crypto:1 AES_CM_128_HMAC_SHA1_80 inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:32\r\n      push: 'crypto',\r\n      reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\r\n      names: ['id', 'suite', 'config', 'sessionConfig'],\r\n      format: function (o) {\r\n        return (o.sessionConfig != null)\r\n          ? 'crypto:%d %s %s %s'\r\n          : 'crypto:%d %s %s'\r\n      }\r\n    },\r\n    {\r\n      // a=setup:actpass\r\n      name: 'setup',\r\n      reg: /^setup:(\\w*)/,\r\n      format: 'setup:%s'\r\n    },\r\n    {\r\n      // a=connection:new\r\n      name: 'connectionType',\r\n      reg: /^connection:(new|existing)/,\r\n      format: 'connection:%s'\r\n    },\r\n    {\r\n      // a=mid:1\r\n      name: 'mid',\r\n      reg: /^mid:([^\\s]*)/,\r\n      format: 'mid:%s'\r\n    },\r\n    {\r\n      // a=msid:0c8b064d-d807-43b4-b434-f92a889d8587 98178685-d409-46e0-8e16-7ef0db0db64a\r\n      name: 'msid',\r\n      reg: /^msid:(.*)/,\r\n      format: 'msid:%s'\r\n    },\r\n    {\r\n      // a=ptime:20\r\n      name: 'ptime',\r\n      reg: /^ptime:(\\d*(?:\\.\\d*)*)/,\r\n      format: 'ptime:%d'\r\n    },\r\n    {\r\n      // a=maxptime:60\r\n      name: 'maxptime',\r\n      reg: /^maxptime:(\\d*(?:\\.\\d*)*)/,\r\n      format: 'maxptime:%d'\r\n    },\r\n    {\r\n      // a=sendrecv\r\n      name: 'direction',\r\n      reg: /^(sendrecv|recvonly|sendonly|inactive)/,\r\n      format: defaultFormat\r\n    },\r\n    {\r\n      // a=ice-lite\r\n      name: 'icelite',\r\n      reg: /^(ice-lite)/,\r\n      format: defaultFormat\r\n    },\r\n    {\r\n      // a=ice-ufrag:F7gI\r\n      name: 'iceUfrag',\r\n      reg: /^ice-ufrag:(\\S*)/,\r\n      format: 'ice-ufrag:%s'\r\n    },\r\n    {\r\n      // a=ice-pwd:x9cml/YzichV2+XlhiMu8g\r\n      name: 'icePwd',\r\n      reg: /^ice-pwd:(\\S*)/,\r\n      format: 'ice-pwd:%s'\r\n    },\r\n    {\r\n      // a=fingerprint:SHA-1 00:11:22:33:44:55:66:77:88:99:AA:BB:CC:DD:EE:FF:00:11:22:33\r\n      name: 'fingerprint',\r\n      reg: /^fingerprint:(\\S*) (\\S*)/,\r\n      names: ['type', 'hash'],\r\n      format: 'fingerprint:%s %s'\r\n    },\r\n    {\r\n      /*\r\n       * a=candidate:0 1 UDP 2113667327 203.0.113.1 54400 typ host\r\n       * a=candidate:1162875081 1 udp 2113937151 192.168.34.75 60017 typ host generation 0 network-id 3 network-cost 10\r\n       * a=candidate:3289912957 2 udp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 generation 0 network-id 3 network-cost 10\r\n       * a=candidate:229815620 1 tcp 1518280447 192.168.150.19 60017 typ host tcptype active generation 0 network-id 3 network-cost 10\r\n       * a=candidate:3289912957 2 tcp 1845501695 193.84.77.194 60017 typ srflx raddr 192.168.34.75 rport 60017 tcptype passive generation 0 network-id 3 network-cost 10\r\n       */\r\n      push: 'candidates',\r\n      reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\r\n      // eslint-disable-next-line max-len\r\n      names: ['foundation', 'component', 'transport', 'priority', 'ip', 'port', 'type', 'raddr', 'rport', 'tcptype', 'generation', 'network-id', 'network-cost'],\r\n      format: function (o) {\r\n        let str = 'candidate:%s %d %s %d %s %d typ %s'\r\n\r\n        str += (o.raddr != null) ? ' raddr %s rport %d' : '%v%v'\r\n\r\n        // NB: candidate has three optional chunks, so %void middles one if it's missing\r\n        str += (o.tcptype != null) ? ' tcptype %s' : '%v'\r\n\r\n        if (o.generation != null) {\r\n          str += ' generation %d'\r\n        }\r\n\r\n        str += (o['network-id'] != null) ? ' network-id %d' : '%v'\r\n        str += (o['network-cost'] != null) ? ' network-cost %d' : '%v'\r\n        return str\r\n      }\r\n    },\r\n    {\r\n      // a=end-of-candidates (keep after the candidates line for readability)\r\n      name: 'endOfCandidates',\r\n      reg: /^(end-of-candidates)/,\r\n      format: defaultFormat\r\n    },\r\n    {\r\n      // a=remote-candidates:1 203.0.113.1 54400 2 203.0.113.1 54401 ...\r\n      name: 'remoteCandidates',\r\n      reg: /^remote-candidates:(.*)/,\r\n      format: 'remote-candidates:%s'\r\n    },\r\n    {\r\n      // a=ice-options:google-ice\r\n      name: 'iceOptions',\r\n      reg: /^ice-options:(\\S*)/,\r\n      format: 'ice-options:%s'\r\n    },\r\n    {\r\n      // a=ssrc:2566107569 cname:t9YU8M1UxTF8Y1A1\r\n      push: 'ssrcs',\r\n      reg: /^ssrc:(\\d*) ([\\w_-]*)(?::(.*))?/,\r\n      names: ['id', 'attribute', 'value'],\r\n      format: function (o) {\r\n        let str = 'ssrc:%d'\r\n        if (o.attribute != null) {\r\n          str += ' %s'\r\n          if (o.value != null) {\r\n            str += ':%s'\r\n          }\r\n        }\r\n        return str\r\n      }\r\n    },\r\n    {\r\n      /*\r\n       * a=ssrc-group:FEC 1 2\r\n       * a=ssrc-group:FEC-FR 3004364195 1080772241\r\n       */\r\n      push: 'ssrcGroups',\r\n      // token-char = %x21 / %x23-27 / %x2A-2B / %x2D-2E / %x30-39 / %x41-5A / %x5E-7E\r\n      reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\r\n      names: ['semantics', 'ssrcs'],\r\n      format: 'ssrc-group:%s %s'\r\n    },\r\n    {\r\n      // a=msid-semantic: WMS Jvlam5X3SX1OP6pn20zWogvaKJz5Hjf9OnlV\r\n      name: 'msidSemantic',\r\n      reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\r\n      names: ['semantic', 'token'],\r\n      // space after ':' is not accidental\r\n      format: 'msid-semantic: %s %s'\r\n    },\r\n    {\r\n      // a=group:BUNDLE audio video\r\n      push: 'groups',\r\n      reg: /^group:(\\w*) (.*)/,\r\n      names: ['type', 'mids'],\r\n      format: 'group:%s %s'\r\n    },\r\n    {\r\n      // a=rtcp-mux\r\n      name: 'rtcpMux',\r\n      reg: /^(rtcp-mux)/,\r\n      format: defaultFormat\r\n    },\r\n    {\r\n      // a=rtcp-rsize\r\n      name: 'rtcpRsize',\r\n      reg: /^(rtcp-rsize)/,\r\n      format: defaultFormat\r\n    },\r\n    {\r\n      // a=sctpmap:5000 webrtc-datachannel 1024\r\n      name: 'sctpmap',\r\n      reg: /^sctpmap:([\\w_/]*) (\\S*)(?: (\\S*))?/,\r\n      names: ['sctpmapNumber', 'app', 'maxMessageSize'],\r\n      format: function (o) {\r\n        return (o.maxMessageSize != null)\r\n          ? 'sctpmap:%s %s %s'\r\n          : 'sctpmap:%s %s'\r\n      }\r\n    },\r\n    {\r\n      // a=x-google-flag:conference\r\n      name: 'xGoogleFlag',\r\n      reg: /^x-google-flag:([^\\s]*)/,\r\n      format: 'x-google-flag:%s'\r\n    },\r\n    {\r\n      // a=rid:1 send max-width=1280;max-height=720;max-fps=30;depend=0\r\n      push: 'rids',\r\n      reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\r\n      names: ['id', 'direction', 'params'],\r\n      format: function (o) {\r\n        return (o.params) ? 'rid:%s %s %s' : 'rid:%s %s'\r\n      }\r\n    },\r\n    {\r\n      /*\r\n       * a=imageattr:97 send [x=800, y=640, sar=1.1, q=0.6] [x=480, y=320] recv [x=330, y=250]\r\n       * a=imageattr:* send [x=800, y=640] recv *\r\n       * a=imageattr:100 recv [x=320, y=240]\r\n       */\r\n      push: 'imageattrs',\r\n      // eslint-disable-next-line function-paren-newline\r\n      reg: new RegExp(\r\n        // a=imageattr:97\r\n        '^imageattr:(\\\\d+|\\\\*)'\r\n        // send [x=800, y=640, sar=1.1, q=0.6] [x=480, y=320]\r\n        + '[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)'\r\n        // recv [x=330, y=250]\r\n        + '(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?'),\r\n      names: ['pt', 'dir1', 'attrs1', 'dir2', 'attrs2'],\r\n      format: function (o) {\r\n        return 'imageattr:%s %s %s' + (o.dir2 ? ' %s %s' : '')\r\n      }\r\n    },\r\n    {\r\n      /*\r\n       * a=simulcast:send 1,2,3;~4,~5 recv 6;~7,~8\r\n       * a=simulcast:recv 1;4,5 send 6;7\r\n       */\r\n      name: 'simulcast',\r\n      // eslint-disable-next-line function-paren-newline\r\n      reg: new RegExp(\r\n        // a=simulcast:\r\n        '^simulcast:'\r\n        // send 1,2,3;~4,~5\r\n        + '(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)'\r\n        // space + recv 6;~7,~8\r\n        + '(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?'\r\n        // end\r\n        + '$'),\r\n      names: ['dir1', 'list1', 'dir2', 'list2'],\r\n      format: function (o) {\r\n        return 'simulcast:%s %s' + (o.dir2 ? ' %s %s' : '')\r\n      }\r\n    },\r\n    {\r\n      /*\r\n       * old simulcast draft 03 (implemented by Firefox)\r\n       *   https://tools.ietf.org/html/draft-ietf-mmusic-sdp-simulcast-03\r\n       * a=simulcast: recv pt=97;98 send pt=97\r\n       * a=simulcast: send rid=5;6;7 paused=6,7\r\n       */\r\n      name: 'simulcast_03',\r\n      reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\r\n      names: ['value'],\r\n      format: 'simulcast: %s'\r\n    },\r\n    {\r\n      /*\r\n       * a=framerate:25\r\n       * a=framerate:29.97\r\n       */\r\n      name: 'framerate',\r\n      reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\r\n      format: 'framerate:%s'\r\n    },\r\n    {\r\n      /*\r\n       * RFC4570\r\n       * a=source-filter: incl IN IP4 239.5.2.31 10.1.15.5\r\n       */\r\n      name: 'sourceFilter',\r\n      reg: /^source-filter: *(excl|incl) (\\S*) (IP4|IP6|\\*) (\\S*) (.*)/,\r\n      names: ['filterMode', 'netType', 'addressTypes', 'destAddress', 'srcList'],\r\n      format: 'source-filter: %s %s %s %s %s'\r\n    },\r\n    {\r\n      // a=bundle-only\r\n      name: 'bundleOnly',\r\n      reg: /^(bundle-only)/,\r\n      format: defaultFormat\r\n    },\r\n    {\r\n      // a=label:1\r\n      name: 'label',\r\n      reg: /^label:(.+)/,\r\n      format: 'label:%s'\r\n    },\r\n    {\r\n      /*\r\n       * RFC version 26 for SCTP over DTLS\r\n       * https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-5\r\n       */\r\n      name: 'sctpPort',\r\n      reg: /^sctp-port:(\\d+)$/,\r\n      format: 'sctp-port:%s'\r\n    },\r\n    {\r\n      /*\r\n       * RFC version 26 for SCTP over DTLS\r\n       * https://tools.ietf.org/html/draft-ietf-mmusic-sctp-sdp-26#section-6\r\n       */\r\n      name: 'maxMessageSize',\r\n      reg: /^max-message-size:(\\d+)$/,\r\n      format: 'max-message-size:%s'\r\n    },\r\n    {\r\n      /*\r\n       * RFC7273\r\n       * a=ts-refclk:ptp=IEEE1588-2008:39-A7-94-FF-FE-07-CB-D0:37\r\n       */\r\n      push: 'tsRefClocks',\r\n      reg: /^ts-refclk:([^\\s=]*)(?:=(\\S*))?/,\r\n      names: ['clksrc', 'clksrcExt'],\r\n      format: function (o) {\r\n        return 'ts-refclk:%s' + (o.clksrcExt != null ? '=%s' : '')\r\n      }\r\n    },\r\n    {\r\n      /*\r\n       * RFC7273\r\n       * a=mediaclk:direct=963214424\r\n       */\r\n      name: 'mediaClk',\r\n      reg: /^mediaclk:(?:id=(\\S*))? *([^\\s=]*)(?:=(\\S*))?(?: *rate=(\\d+)\\/(\\d+))?/,\r\n      names: ['id', 'mediaClockName', 'mediaClockValue', 'rateNumerator', 'rateDenominator'],\r\n      format: function (o) {\r\n        let str = 'mediaclk:'\r\n        str += (o.id != null ? 'id=%s %s' : '%v%s')\r\n        str += (o.mediaClockValue != null ? '=%s' : '')\r\n        str += (o.rateNumerator != null ? ' rate=%s' : '')\r\n        str += (o.rateDenominator != null ? '/%s' : '')\r\n        return str\r\n      }\r\n    },\r\n    {\r\n      // a=keywds:keywords\r\n      name: 'keywords',\r\n      reg: /^keywds:(.+)$/,\r\n      format: 'keywds:%s'\r\n    },\r\n    {\r\n      // a=content:main\r\n      name: 'content',\r\n      reg: /^content:(.+)/,\r\n      format: 'content:%s'\r\n    },\r\n    // BFCP https://tools.ietf.org/html/rfc4583\r\n    {\r\n      // a=floorctrl:c-s\r\n      name: 'bfcpFloorCtrl',\r\n      reg: /^floorctrl:(c-only|s-only|c-s)/,\r\n      format: 'floorctrl:%s'\r\n    },\r\n    {\r\n      // a=confid:1\r\n      name: 'bfcpConfId',\r\n      reg: /^confid:(\\d+)/,\r\n      format: 'confid:%s'\r\n    },\r\n    {\r\n      // a=userid:1\r\n      name: 'bfcpUserId',\r\n      reg: /^userid:(\\d+)/,\r\n      format: 'userid:%s'\r\n    },\r\n    {\r\n      // a=floorid:1\r\n      name: 'bfcpFloorId',\r\n      reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,\r\n      names: ['id', 'mStream'],\r\n      format: 'floorid:%s mstrm:%s'\r\n    },\r\n    {\r\n      // any a= that we don't understand is kept verbatim on media.invalid\r\n      push: 'invalid',\r\n      reg: defaultReg,\r\n      names: ['value'],\r\n      format: defaultFormat\r\n    }\r\n  ]\r\n}\r\n\r\nexport function addGrammar(attar: string, grammar: SdpGrammar[]) {\r\n  if (is.array(grammars[attar])) {\r\n    if (attar === 'a') {\r\n      const last = grammars[attar].pop()\r\n      grammars[attar].push(...grammar)\r\n      grammars[attar].push(last)\r\n    }\r\n    else {\r\n      grammars[attar].push(...grammar)\r\n    }\r\n\r\n  }\r\n  else {\r\n    grammars[attar] = grammar\r\n  }\r\n}\r\n","/**\r\n * from https://github.com/clux/sdp-transform\r\n */\r\n\r\nimport { SessionDescription, Media } from './type'\r\nimport { grammars, SdpGrammar } from './grammars'\r\nimport { Data } from 'common/types/type'\r\nimport * as is from 'common/util/is'\r\n\r\n/*\r\n * RFC specified order\r\n * TODO: extend this with all the rest\r\n */\r\nconst defaultOuterOrder = [\r\n  'v', 'o', 's', 'i',\r\n  'u', 'e', 'p', 'c',\r\n  'b', 't', 'r', 'z', 'a'\r\n]\r\nconst defaultInnerOrder = ['i', 'c', 'b', 'a']\r\n\r\nconst validLine = (line: string) => {\r\n  return /^([a-z])=(.*)/.test(line)\r\n}\r\n\r\nfunction toIntIfInt(v: string | number) {\r\n  return String(Number(v)) === v ? Number(v) : v\r\n}\r\n\r\nfunction attachProperties(\r\n  match: RegExpMatchArray,\r\n  location: SessionDescription | Media,\r\n  names: string[],\r\n  rawName: string\r\n) {\r\n  if (rawName && !names) {\r\n    location[rawName] = toIntIfInt(match[1])\r\n  }\r\n  else {\r\n    for (let i = 0; i < names.length; i += 1) {\r\n      if (match[i + 1] != null) {\r\n        location[names[i]] = toIntIfInt(match[i + 1])\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction parseReg(grammar: SdpGrammar, location: SessionDescription | Media, content: string) {\r\n  const needsBlank = grammar.name && grammar.names\r\n  if (grammar.push && !location[grammar.push]) {\r\n    location[grammar.push] = []\r\n  }\r\n  else if (needsBlank && !location[grammar.name]) {\r\n    location[grammar.name] = {}\r\n  }\r\n  const keyLocation = grammar.push\r\n  // blank object that will be pushed\r\n    ? {}\r\n  // otherwise, named location or root\r\n    : needsBlank ? location[grammar.name] : location\r\n\r\n  attachProperties(content.match(grammar.reg), keyLocation, grammar.names, grammar.name)\r\n\r\n  if (grammar.push) {\r\n    location[grammar.push].push(keyLocation)\r\n  }\r\n}\r\n\r\n// customized util.format - discards excess arguments and can void middle ones\r\nconst formatRegExp = /%[sdv%]/g\r\n\r\nfunction format(formatStr: string) {\r\n  let i = 1\r\n  const args = arguments\r\n  const len = args.length\r\n  return formatStr.replace(formatRegExp, function (x) {\r\n    if (i >= len) {\r\n      // missing argument\r\n      return x\r\n    }\r\n    const arg = args[i]\r\n    i += 1\r\n    switch (x) {\r\n      case '%%':\r\n        return '%'\r\n      case '%s':\r\n        return String(arg)\r\n      case '%d':\r\n        return Number(arg) + ''\r\n      case '%v':\r\n        return ''\r\n    }\r\n  })\r\n}\r\n\r\nfunction makeLine(type: string, grammar: SdpGrammar, location: Data) {\r\n  const str = is.func(grammar.format)\r\n    ? (grammar.format(grammar.push ? location : location[grammar.name]))\r\n    : grammar.format\r\n\r\n  const args = [\r\n    type + '=' + str\r\n  ]\r\n  if (grammar.names) {\r\n    for (let i = 0; i < grammar.names.length; i += 1) {\r\n      const n = grammar.names[i]\r\n      if (grammar.name) {\r\n        args.push(location[grammar.name][n])\r\n      }\r\n      else {\r\n        // for mLine and push attributes\r\n        args.push(location[grammar.names[i]])\r\n      }\r\n    }\r\n  }\r\n  else {\r\n    args.push(location[grammar.name])\r\n  }\r\n  return format.apply(null, args)\r\n}\r\n\r\n/**\r\n * 解析 sdp\r\n * \r\n * @param sdp \r\n * @returns \r\n */\r\nexport function parse(sdp: string): SessionDescription {\r\n  const session: Partial<SessionDescription> = {}\r\n  const media: Partial<Media>[] = []\r\n  let target: Partial<Media> | Partial<SessionDescription> = session\r\n\r\n  // parse lines we understand\r\n  sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach((line) => {\r\n    const type = line[0]\r\n    // x=xx\r\n    const content = line.slice(2)\r\n\r\n    if (type === 'm') {\r\n      media.push({\r\n        rtp: [],\r\n        fmtp: []\r\n      })\r\n      // point at latest media line\r\n      target = media[media.length - 1]\r\n    }\r\n\r\n    for (let j = 0; j < (grammars[type] || []).length; j += 1) {\r\n      const grammar = grammars[type][j]\r\n      if (grammar.reg.test(content)) {\r\n        return parseReg(grammar, target as (Media | SessionDescription), content)\r\n      }\r\n    }\r\n  })\r\n\r\n  // link it up\r\n  session.media = media as Media[]\r\n  return session as SessionDescription\r\n}\r\n\r\n/**\r\n * 序列化 sdp\r\n * \r\n * @param session \r\n * @param options \r\n * @returns \r\n */\r\nexport function stringify(session: SessionDescription, options: {\r\n  outerOrder: string[],\r\n  innerOrder: string[]\r\n} = {\r\n  outerOrder: defaultOuterOrder,\r\n  innerOrder: defaultInnerOrder\r\n}): string {\r\n  // ensure certain properties exist\r\n  if (session.version == null) {\r\n    // 'v=0' must be there (only defined version atm)\r\n    session.version = 0\r\n  }\r\n  if (session.name == null) {\r\n    // 's= ' must be there if no meaningful name set\r\n    session.name = ' '\r\n  }\r\n  session.media.forEach(function (mLine) {\r\n    if (mLine.payloads == null) {\r\n      mLine.payloads = ''\r\n    }\r\n  })\r\n\r\n  const sdp = []\r\n\r\n  // loop through outerOrder for matching properties on session\r\n  options.outerOrder.forEach((type) => {\r\n    grammars[type].forEach((grammar) => {\r\n      if (grammar.name in session && session[grammar.name] != null) {\r\n        sdp.push(makeLine(type, grammar, session))\r\n      }\r\n      else if (grammar.push in session && session[grammar.push] != null) {\r\n        session[grammar.push].forEach((params: Data) => {\r\n          sdp.push(makeLine(type, grammar, params))\r\n        })\r\n      }\r\n    })\r\n  })\r\n\r\n  // then for each media line, follow the innerOrder\r\n  session.media.forEach((mLine) => {\r\n\r\n    sdp.push(makeLine('m', grammars.m[0], mLine))\r\n\r\n    options.innerOrder.forEach((type) => {\r\n      grammars[type].forEach((grammar) => {\r\n        if (grammar.name in mLine && mLine[grammar.name] != null) {\r\n          sdp.push(makeLine(type, grammar, mLine))\r\n        }\r\n        else if (grammar.push in mLine && mLine[grammar.push] != null) {\r\n          mLine[grammar.push].forEach(function (el: Data) {\r\n            sdp.push(makeLine(type, grammar, el))\r\n          })\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  return sdp.join('\\r\\n') + '\\r\\n'\r\n}\r\n\r\n","/*\r\n * libmedia aac util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVSampleFormat } from '../audiosamplefmt'\r\nimport Stream from '../AVStream'\r\nimport { AVPacketSideDataType } from '../codec'\r\nimport { NOPTS_VALUE } from '../constant'\r\nimport AVCodecParameters from '../struct/avcodecparameters'\r\nimport BitReader from 'common/io/BitReader'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport const enum MPEG4AudioObjectTypes {\r\n  NULL = 0,\r\n  /**\r\n   * Main-AAC\r\n   */\r\n  AAC_MAIN,\r\n  /**\r\n   * LC-AAC\r\n   */\r\n  AAC_LC,\r\n  AAC_SSR,\r\n  AAC_LTP,\r\n  /**\r\n   * HE-AAC\r\n   */\r\n  AAC_SBR,\r\n  AAC_SCALABLE,\r\n\r\n  AAC_LD = 23,\r\n\r\n  AAC_PS = 29,\r\n\r\n  LAYER1 = 32,\r\n  LAYER2,\r\n  /**\r\n   * MP3\r\n   */\r\n  LAYER3,\r\n\r\n  AAC_ELD = 39\r\n}\r\n\r\nexport const AACProfile2Name: Partial<Record<MPEG4AudioObjectTypes, string>> = {\r\n  [MPEG4AudioObjectTypes.AAC_MAIN]: 'Main',\r\n  [MPEG4AudioObjectTypes.AAC_LC]: 'LC',\r\n  [MPEG4AudioObjectTypes.AAC_SSR]: 'SSR',\r\n  [MPEG4AudioObjectTypes.AAC_LTP]: 'LTP',\r\n  [MPEG4AudioObjectTypes.AAC_SBR]: 'HE',\r\n  [MPEG4AudioObjectTypes.AAC_SCALABLE]: 'SCALABLE',\r\n  [MPEG4AudioObjectTypes.AAC_PS]: 'HEv2',\r\n  [MPEG4AudioObjectTypes.AAC_LD]: 'LD',\r\n  [MPEG4AudioObjectTypes.AAC_ELD]: 'ELD'\r\n}\r\n\r\nexport const MPEG4SamplingFrequencyIndex = {\r\n  96000: 0,\r\n  88200: 1,\r\n  64000: 2,\r\n  48000: 3,\r\n  44100: 4,\r\n  32000: 5,\r\n  24000: 6,\r\n  22050: 7,\r\n  16000: 8,\r\n  12000: 9,\r\n  11025: 10,\r\n  8000: 11,\r\n  7350: 12\r\n}\r\n\r\nexport const MPEG4SamplingFrequencies = [\r\n  96000,\r\n  88200,\r\n  64000,\r\n  48000,\r\n  44100,\r\n  32000,\r\n  24000,\r\n  22050,\r\n  16000,\r\n  12000,\r\n  11025,\r\n  8000,\r\n  7350,\r\n  NOPTS_VALUE,\r\n  NOPTS_VALUE,\r\n  NOPTS_VALUE\r\n]\r\n\r\nexport const MPEG4Channels = [\r\n  NOPTS_VALUE,\r\n  1,\r\n  2,\r\n  3,\r\n  4,\r\n  5,\r\n  6,\r\n  7\r\n]\r\n\r\n/**\r\n * 解析 AAC AudioSpecificConfig\r\n *    \r\n *             frequency\r\n *              44100Hz        fill bit\r\n *               4 bit          3 bit\r\n *              -------         -----\r\n *    0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 0\r\n *    ---------         -------\r\n *      5 bit            4 bit\r\n *     AAC LC           fl, fr\r\n *    profile           channel\r\n * \r\n * url: https://wiki.multimedia.cx/index.php/MPEG-4_Audio#Audio_Specific_Config\r\n * \r\n */\r\n\r\nexport function getAVCodecParameters(extradata: Uint8ArrayInterface) {\r\n  let profile = NOPTS_VALUE\r\n  let sampleRate = NOPTS_VALUE\r\n  let channels = NOPTS_VALUE\r\n  if (extradata.length >= 2) {\r\n    profile = (extradata[0] >> 3) & 0x1f\r\n    sampleRate = MPEG4SamplingFrequencies[((extradata[0] & 0x07) << 1)\r\n      | (extradata[1] >> 7)]\r\n\r\n    channels = MPEG4Channels[(extradata[1] >> 3) & 0x0f]\r\n  }\r\n\r\n  return {\r\n    profile,\r\n    sampleRate,\r\n    channels\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: Stream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata) {\r\n    const { profile, sampleRate, channels } = getAVCodecParameters(extradata)\r\n    stream.codecpar.profile = profile\r\n    stream.codecpar.sampleRate = sampleRate\r\n    stream.codecpar.chLayout.nbChannels = channels\r\n    stream.codecpar.frameSize = profile ===  MPEG4AudioObjectTypes.AAC_SBR ? 2048 : 1024\r\n    stream.codecpar.format = AVSampleFormat.AV_SAMPLE_FMT_FLTP\r\n  }\r\n}\r\n\r\nexport function avCodecParameters2Extradata(codecpar: AVCodecParameters) {\r\n  const samplingFreqIndex = MPEG4SamplingFrequencyIndex[codecpar.sampleRate]\r\n  const channelConfig = codecpar.chLayout.nbChannels\r\n  const profile = codecpar.profile === NOPTS_VALUE ? MPEG4AudioObjectTypes.AAC_LC : codecpar.profile\r\n\r\n  const extradata = new Uint8Array(2)\r\n  extradata[0] = ((profile & 0x1f) << 3) | ((samplingFreqIndex & 0x0e) >> 1)\r\n  extradata[1] = ((samplingFreqIndex & 0x01) << 7) | ((channelConfig & 0x0f) << 3)\r\n\r\n  return extradata\r\n}\r\n\r\nexport interface AACADTSHeader {\r\n  syncWord: number\r\n  profile: number\r\n  sampleRate: number\r\n  channels: number\r\n  aacFrameLength: number\r\n  numberOfRawDataBlocksInFrame: number\r\n  headerLength: number\r\n  framePayloadLength: number\r\n}\r\n\r\nexport interface AACLATMHeader {\r\n  syncWord: number\r\n  profile: number\r\n  sampleRate: number\r\n  channels: number\r\n  useSameStreamMux: boolean\r\n  headerLength: number\r\n  framePayloadLength: number\r\n  muxLengthBytes: number\r\n}\r\n\r\n/**\r\n * \r\n * adts 封装转 raw\r\n * \r\n * bits    \r\n * - 12  syncword\r\n * - 1   ID (MPEG 标识位，固定为 1)\r\n * - 2   Layer ( 固定为 0)\r\n * - 1   Protection Absent ( 指示是否有 CRC 校验，1 表示没有校验）\r\n * - 2   Profile\r\n * - 4   Sampling Frequency Index ( 采样率的索引）\r\n * - 1   Private Bit ( 保留位，一般设置为 0)\r\n * - 3   Channel Configuration ( 音频通道数）\r\n * - 1   Original Copy ( 原始拷贝标志位，一般设置为 0)\r\n * - 1   Home ( 保留位，一般设置为 0)\r\n * - 1   Copyright Identification Bit（置 0）\r\n * - 1   Copyright Identification Start（置 0）\r\n * - 13  Frame Length ( 帧长度，包括 ADTS 头和音频帧数据的长度）\r\n * - 11  Buffer Fullness ( 缓冲区满度，可用于音频流的同步）\r\n * - 2   Number of Raw Data Blocks in Frame ( 帧中原始数据块的数量）\r\n * - 16  CRC (Protection Absent 控制）\r\n * - N  raw aac data\r\n * \r\n */\r\nexport function parseADTSHeader(buffer: Uint8ArrayInterface): AACADTSHeader | number {\r\n\r\n  if (buffer.length < 7) {\r\n    return -1\r\n  }\r\n\r\n  const syncWord = (buffer[0] << 4) | (buffer[0 + 1] >> 4)\r\n\r\n  if (syncWord !== 0xFFF) {\r\n    return -1\r\n  }\r\n\r\n  /*\r\n    * const id = (buffer[1] & 0x08) >>> 3\r\n    * const layer = (buffer[1] & 0x06) >>> 1\r\n    */\r\n  const protectionAbsent = buffer[1] & 0x01\r\n  const profile = (buffer[2] & 0xC0) >>> 6\r\n  const samplingFrequencyIndex = (buffer[2] & 0x3C) >>> 2\r\n  const channelConfiguration = ((buffer[2] & 0x01) << 2) | ((buffer[3] & 0xC0) >>> 6)\r\n\r\n  // adts_variable_header()\r\n  const aacFrameLength = ((buffer[3] & 0x03) << 11)\r\n    | (buffer[4] << 3)\r\n    | ((buffer[5] & 0xE0) >>> 5)\r\n\r\n  const numberOfRawDataBlocksInFrame = buffer[6] & 0x03\r\n\r\n  let headerLength = protectionAbsent === 1 ? 7 : 9\r\n  let framePayloadLength = aacFrameLength - headerLength\r\n\r\n  return {\r\n    syncWord,\r\n    profile: profile + 1,\r\n    sampleRate: MPEG4SamplingFrequencies[samplingFrequencyIndex],\r\n    channels: MPEG4Channels[channelConfiguration],\r\n    aacFrameLength,\r\n    numberOfRawDataBlocksInFrame,\r\n    headerLength,\r\n    framePayloadLength\r\n  }\r\n}\r\n\r\nexport function parseLATMHeader(buffer: Uint8ArrayInterface, bitReader?: BitReader) {\r\n  if (!bitReader) {\r\n    bitReader = new BitReader()\r\n    bitReader.appendBuffer(buffer)\r\n  }\r\n\r\n  function getLATMValue() {\r\n    const bytesForValue = bitReader.readU(2)\r\n    let value = 0\r\n\r\n    for (let i = 0; i <= bytesForValue; i++) {\r\n      value = value << 8\r\n      value = value | bitReader.readU(8)\r\n    }\r\n    return value\r\n  }\r\n\r\n  const now = bitReader.getPointer()\r\n\r\n  const info: AACLATMHeader = {\r\n    syncWord: 0,\r\n    profile: 0,\r\n    sampleRate: 0,\r\n    channels: 0,\r\n    useSameStreamMux: false,\r\n    headerLength: 0,\r\n    framePayloadLength: 0,\r\n    muxLengthBytes: 0\r\n  }\r\n\r\n  const syncWord = bitReader.readU(11)\r\n\r\n  if (syncWord !== 0x2B7) {\r\n    return -1\r\n  }\r\n\r\n  info.syncWord = syncWord\r\n\r\n  info.muxLengthBytes = bitReader.readU(13)\r\n\r\n  const useSameStreamMux = bitReader.readU1() === 0x01\r\n\r\n  info.useSameStreamMux = useSameStreamMux\r\n\r\n  if (!useSameStreamMux) {\r\n    const audioMuxVersion = bitReader.readU1() === 0x01\r\n    const audioMuxVersionA = audioMuxVersion && bitReader.readU1() === 0x01\r\n    if (audioMuxVersionA) {\r\n      return -1\r\n    }\r\n    if (audioMuxVersion) {\r\n      getLATMValue()\r\n    }\r\n    const allStreamsSameTimeFraming = bitReader.readU1() === 0x01\r\n    if (!allStreamsSameTimeFraming) {\r\n      return -1\r\n    }\r\n    const numSubFrames = bitReader.readU(6)\r\n    if (numSubFrames !== 0) {\r\n      return -1\r\n    }\r\n\r\n    const numProgram = bitReader.readU(4)\r\n    if (numProgram !== 0) {\r\n      return -1\r\n    }\r\n\r\n    const numLayer = bitReader.readU(3)\r\n    if (numLayer !== 0) {\r\n      return -1\r\n    }\r\n\r\n    let fillBits = audioMuxVersion ? getLATMValue() : 0\r\n\r\n    const audioObjectType = bitReader.readU(5)\r\n    fillBits -= 5\r\n\r\n    const samplingFreqIndex = bitReader.readU(4)\r\n    fillBits -= 4\r\n\r\n    const channelConfig = bitReader.readU(4)\r\n    fillBits -= 4\r\n\r\n    bitReader.readU(3)\r\n    fillBits -= 3\r\n\r\n    if (fillBits > 0) {\r\n      bitReader.readU(fillBits)\r\n    }\r\n\r\n    const frameLengthType = bitReader.readU(3)\r\n    if (frameLengthType === 0) {\r\n      bitReader.readU(8)\r\n    }\r\n    else {\r\n      return -1\r\n    }\r\n\r\n    const otherDataPresent = bitReader.readU1() === 0x01\r\n    if (otherDataPresent) {\r\n      if (audioMuxVersion) {\r\n        getLATMValue()\r\n      }\r\n      else {\r\n        let otherDataLenBits = 0\r\n        while (true) {\r\n          otherDataLenBits = otherDataLenBits << 8\r\n          const otherDataLenEsc = bitReader.readU1() === 0x01\r\n          const otherDataLenTmp = bitReader.readU(8)\r\n          otherDataLenBits += otherDataLenTmp\r\n          if (!otherDataLenEsc) {\r\n            break\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const crcCheckPresent = bitReader.readU1() === 0x01\r\n    if (crcCheckPresent) {\r\n      bitReader.readU(8)\r\n    }\r\n\r\n    info.profile = audioObjectType + 1\r\n    info.sampleRate = MPEG4SamplingFrequencies[samplingFreqIndex]\r\n    info.channels = MPEG4Channels[channelConfig]\r\n  }\r\n\r\n  let length = 0\r\n  while (true) {\r\n    const tmp = bitReader.readU(8)\r\n    length += tmp\r\n    if (tmp !== 0xff) {\r\n      break\r\n    }\r\n  }\r\n\r\n  info.framePayloadLength = length\r\n  info.headerLength = bitReader.getPointer() - now + (bitReader.getBitLeft() === 8 ? 0 : 1)\r\n\r\n  return info\r\n}\r\n","/*\r\n * libmedia ac3 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVChannelLayout } from '../audiosamplefmt'\r\nimport BitReader from 'common/io/BitReader'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport const enum AC3DeltaStrategy {\r\n  DBA_REUSE = 0,\r\n  DBA_NEW,\r\n  DBA_NONE,\r\n  DBA_RESERVED\r\n}\r\n\r\nexport const enum AC3ChannelMode {\r\n  AC3_CHMODE_DUALMONO = 0,\r\n  AC3_CHMODE_MONO,\r\n  AC3_CHMODE_STEREO,\r\n  AC3_CHMODE_3F,\r\n  AC3_CHMODE_2F1R,\r\n  AC3_CHMODE_3F1R,\r\n  AC3_CHMODE_2F2R,\r\n  AC3_CHMODE_3F2R\r\n}\r\n\r\nexport const enum AC3DolbySurroundMode {\r\n  AC3_DSURMOD_NOTINDICATED = 0,\r\n  AC3_DSURMOD_OFF,\r\n  AC3_DSURMOD_ON,\r\n  AC3_DSURMOD_RESERVED\r\n}\r\n\r\nexport const enum AC3DolbySurroundEXMode {\r\n  AC3_DSUREXMOD_NOTINDICATED = 0,\r\n  AC3_DSUREXMOD_OFF,\r\n  AC3_DSUREXMOD_ON,\r\n  AC3_DSUREXMOD_PLIIZ\r\n}\r\n\r\nexport const enum AC3DolbyHeadphoneMode {\r\n  AC3_DHEADPHONMOD_NOTINDICATED = 0,\r\n  AC3_DHEADPHONMOD_OFF,\r\n  AC3_DHEADPHONMOD_ON,\r\n  AC3_DHEADPHONMOD_RESERVED\r\n}\r\n\r\nexport const enum AC3PreferredStereoDownmixMode {\r\n  AC3_DMIXMOD_NOTINDICATED = 0,\r\n  AC3_DMIXMOD_LTRT,\r\n  AC3_DMIXMOD_LORO,\r\n  // reserved value in A/52, but used by encoders to indicate DPL2\r\n  AC3_DMIXMOD_DPLII\r\n}\r\n\r\nexport const enum EAC3FrameType {\r\n  EAC3_FRAME_TYPE_INDEPENDENT = 0,\r\n  EAC3_FRAME_TYPE_DEPENDENT,\r\n  EAC3_FRAME_TYPE_AC3_CONVERT,\r\n  EAC3_FRAME_TYPE_RESERVED\r\n}\r\n\r\nexport const AC3ChannelLayout: uint32[] = [\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_STEREO,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_MONO,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_STEREO,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_SURROUND,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_2_1,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_4POINT0,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_2_2,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_5POINT0\r\n]\r\n\r\nexport interface AC3HeaderInfo {\r\n  syncWord: uint16\r\n  crc1: uint16\r\n  srCode: uint8\r\n  bitstreamId: uint8\r\n  bitstreamMode: uint8\r\n  channelMode: uint8\r\n  lfeOn: uint8\r\n  frameType: uint8\r\n  substreamId: int32\r\n  centerMixLevel: int32\r\n  surroundMixLevel: int32\r\n  channelMap: uint16\r\n  numBlocks: int32\r\n  dolbySurroundMode: int32\r\n  srShift: uint8\r\n  sampleRate: uint16\r\n  bitrate: uint32\r\n  channels: uint8\r\n  frameSize: uint16\r\n  channelLayout: uint64\r\n  ac3BitrateCode: int8\r\n}\r\n\r\nconst AC3FrameSizeTab = [\r\n  [ 64,   69,   96   ],\r\n  [ 64,   70,   96   ],\r\n  [ 80,   87,   120  ],\r\n  [ 80,   88,   120  ],\r\n  [ 96,   104,  144  ],\r\n  [ 96,   105,  144  ],\r\n  [ 112,  121,  168  ],\r\n  [ 112,  122,  168  ],\r\n  [ 128,  139,  192  ],\r\n  [ 128,  140,  192  ],\r\n  [ 160,  174,  240  ],\r\n  [ 160,  175,  240  ],\r\n  [ 192,  208,  288  ],\r\n  [ 192,  209,  288  ],\r\n  [ 224,  243,  336  ],\r\n  [ 224,  244,  336  ],\r\n  [ 256,  278,  384  ],\r\n  [ 256,  279,  384  ],\r\n  [ 320,  348,  480  ],\r\n  [ 320,  349,  480  ],\r\n  [ 384,  417,  576  ],\r\n  [ 384,  418,  576  ],\r\n  [ 448,  487,  672  ],\r\n  [ 448,  488,  672  ],\r\n  [ 512,  557,  768  ],\r\n  [ 512,  558,  768  ],\r\n  [ 640,  696,  960  ],\r\n  [ 640,  697,  960  ],\r\n  [ 768,  835,  1152 ],\r\n  [ 768,  836,  1152 ],\r\n  [ 896,  975,  1344 ],\r\n  [ 896,  976,  1344 ],\r\n  [ 1024, 1114, 1536 ],\r\n  [ 1024, 1115, 1536 ],\r\n  [ 1152, 1253, 1728 ],\r\n  [ 1152, 1254, 1728 ],\r\n  [ 1280, 1393, 1920 ],\r\n  [ 1280, 1394, 1920 ],\r\n]\r\n\r\nconst CenterLevelsTab = [4, 5, 6, 5]\r\nconst SurroundLevelsTab = [4, 6, 7, 6]\r\nconst AC3SampleRateTab = [48000, 44100, 32000, 0]\r\nconst AC3BitrateTab = [\r\n  32, 40, 48, 56, 64, 80, 96, 112, 128,\r\n  160, 192, 224, 256, 320, 384, 448, 512, 576, 640\r\n]\r\nconst AC3ChannelsTab = [\r\n  2, 1, 2, 3, 3, 4, 4, 5\r\n]\r\n\r\nconst EAC3Blocks = [\r\n  1, 2, 3, 6\r\n]\r\n\r\nconst AC3_HEADER_SIZE = 7\r\n\r\nexport function parseHeader(buf: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader(buf.length)\r\n  bitReader.appendBuffer(buf)\r\n\r\n  const info: AC3HeaderInfo = {\r\n    syncWord: 0,\r\n    crc1: 0,\r\n    srCode: 0,\r\n    bitstreamId: 0,\r\n    bitstreamMode: 0,\r\n    channelMode: 0,\r\n    lfeOn: 0,\r\n    frameType: 0,\r\n    substreamId: 0,\r\n    centerMixLevel: 0,\r\n    surroundMixLevel: 0,\r\n    channelMap: 0,\r\n    numBlocks: 0,\r\n    dolbySurroundMode: 0,\r\n    srShift: 0,\r\n    sampleRate: 0,\r\n    bitrate: 0,\r\n    channels: 0,\r\n    frameSize: 0,\r\n    channelLayout: 0n,\r\n    ac3BitrateCode: 0\r\n  }\r\n\r\n  info.syncWord = bitReader.readU(16)\r\n\r\n  if (info.syncWord !== 0x0B77) {\r\n    return -1\r\n  }\r\n\r\n  info.bitstreamId = bitReader.peekU(29) & 0x1f\r\n\r\n  if (info.bitstreamId > 16) {\r\n    return -2\r\n  }\r\n\r\n  info.numBlocks = 6\r\n  info.ac3BitrateCode = -1\r\n  info.centerMixLevel = 5\r\n  info.surroundMixLevel = 6\r\n\r\n  info.dolbySurroundMode = AC3DolbySurroundMode.AC3_DSURMOD_NOTINDICATED\r\n\r\n  if (info.bitstreamId <= 10) {\r\n    info.crc1 = bitReader.readU(16)\r\n    info.srCode = bitReader.readU(2)\r\n\r\n    if (info.srCode === 3) {\r\n      return -3\r\n    }\r\n\r\n    const frameSizeCode = bitReader.readU(6)\r\n    if (frameSizeCode > 37) {\r\n      return -4\r\n    }\r\n\r\n    info.ac3BitrateCode = (frameSizeCode >> 1)\r\n\r\n    bitReader.readU(5)\r\n\r\n    info.bitstreamMode = bitReader.readU(3)\r\n    info.channelMode = bitReader.readU(3)\r\n\r\n    if (info.channelMode == AC3ChannelMode.AC3_CHMODE_STEREO) {\r\n      info.dolbySurroundMode = bitReader.readU(2)\r\n    }\r\n    else {\r\n      if ((info.channelMode & 1) && info.channelMode != AC3ChannelMode.AC3_CHMODE_MONO) {\r\n        info.centerMixLevel = CenterLevelsTab[bitReader.readU(2)]\r\n      }\r\n      if (info.channelMode & 4) {\r\n        info.surroundMixLevel = SurroundLevelsTab[bitReader.readU(2)]\r\n      }\r\n    }\r\n    info.lfeOn = bitReader.readU(1)\r\n\r\n    info.srShift = Math.max(info.bitstreamId, 8) - 8\r\n    info.sampleRate = AC3SampleRateTab[info.srCode] >> info.srShift\r\n    info.bitrate = (AC3BitrateTab[info.ac3BitrateCode] * 1000) >> info.srShift\r\n    info.channels = AC3ChannelsTab[info.channelMode] + info.lfeOn\r\n    info.frameSize = AC3FrameSizeTab[frameSizeCode][info.srCode] * 2\r\n    info.frameType = EAC3FrameType.EAC3_FRAME_TYPE_AC3_CONVERT\r\n    info.substreamId = 0\r\n  }\r\n  else {\r\n    /* Enhanced AC-3 */\r\n    info.crc1 = 0\r\n    info.frameType = bitReader.readU(2)\r\n    if (info.frameType == EAC3FrameType.EAC3_FRAME_TYPE_RESERVED) {\r\n      return -5\r\n    }\r\n    info.substreamId = bitReader.readU(3)\r\n\r\n    info.frameSize = (bitReader.readU(11) + 1) << 1\r\n    if (info.frameSize < AC3_HEADER_SIZE) {\r\n      return -6\r\n    }\r\n\r\n    info.srCode = bitReader.readU(2)\r\n    if (info.srCode == 3) {\r\n      const srCode2 = bitReader.readU(2)\r\n      if (srCode2 == 3) {\r\n        return -7\r\n      }\r\n      info.sampleRate = AC3SampleRateTab[srCode2] / 2\r\n      info.srShift = 1\r\n    }\r\n    else {\r\n      info.numBlocks = EAC3Blocks[bitReader.readU(2)]\r\n      info.sampleRate = AC3SampleRateTab[info.srCode]\r\n      info.srShift = 0\r\n    }\r\n\r\n    info.channelMode = bitReader.readU(3)\r\n    info.lfeOn = bitReader.readU(1)\r\n\r\n    info.bitrate = 8 * info.frameSize * info.sampleRate / (info.numBlocks * 256)\r\n    info.channels = AC3ChannelsTab[info.channelMode] + info.lfeOn\r\n  }\r\n  info.channelLayout = static_cast<uint64>(AC3ChannelLayout[info.channelMode])\r\n  if (info.lfeOn) {\r\n    info.channelLayout |= static_cast<uint64>(AVChannelLayout.AV_CHANNEL_LAYOUT_LOW_FREQUENCY as uint32)\r\n  }\r\n\r\n  return info\r\n}\r\n","/*\r\n * libmedia mp3 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport AVStream from '../AVStream'\r\nimport { NOPTS_VALUE } from '../constant'\r\n\r\nconst MpegAudioV10SampleRateTable = [44100, 48000, 32000, 0]\r\n\r\nconst MpegAudioV20SampleRateTable = [22050, 24000, 16000, 0]\r\n\r\nconst MpegAudioV25SampleRateTable = [11025, 12000, 8000, 0]\r\n\r\nconst MpegAudioV10FrameSizeTable = [0, 1152, 1152, 384]\r\n\r\nconst MpegAudioV20FrameSizeTable = [0, 576, 1152, 384]\r\n\r\nconst MpegAudioV25FrameSizeTable = [0, 576, 1152, 384]\r\n\r\nconst MpegAudioV1L1BitRateTable = [0, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, -1]\r\n\r\nconst MpegAudioV1L2BitRateTable = [0, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, -1]\r\n\r\nconst MpegAudioV1L3BitRateTable = [0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, -1]\r\n\r\nconst MpegAudioV2L1BitRateTable = [0, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256, -1]\r\n\r\nconst MpegAudioV2L2L3BitRateTable = [0, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160, -1]\r\n\r\nexport function getSampleRateByVersionIndex(version: number, samplingFreqIndex: number) {\r\n  switch (version) {\r\n    case 0:\r\n      // MPEG 2.5\r\n      return MpegAudioV25SampleRateTable[samplingFreqIndex]\r\n    case 2:\r\n      // MPEG 2\r\n      return MpegAudioV20SampleRateTable[samplingFreqIndex]\r\n    case 3:\r\n      // MPEG 1\r\n      return MpegAudioV10SampleRateTable[samplingFreqIndex]\r\n  }\r\n  return NOPTS_VALUE\r\n}\r\n\r\nexport function getFrameSizeByVersionLayer(version: number, layer: number) {\r\n  switch (version) {\r\n    case 0:\r\n      // MPEG 2.5\r\n      return MpegAudioV25FrameSizeTable[layer]\r\n    case 2:\r\n      // MPEG 2\r\n      return MpegAudioV20FrameSizeTable[layer]\r\n    case 3:\r\n      // MPEG 1\r\n      return MpegAudioV10FrameSizeTable[layer]\r\n  }\r\n  return NOPTS_VALUE\r\n}\r\n\r\nexport function getBitRateByVersionLayerIndex(version: number, layer: number, index: number) {\r\n\r\n  switch (layer) {\r\n    // layer3\r\n    case 1:\r\n      switch (version) {\r\n        case 0:\r\n        case 2:\r\n          return MpegAudioV2L2L3BitRateTable[index]\r\n        case 3:\r\n          return MpegAudioV1L3BitRateTable[index]\r\n      }\r\n      break\r\n    // layer2\r\n    case 2:\r\n      switch (version) {\r\n        case 0:\r\n        case 2:\r\n          return MpegAudioV2L2L3BitRateTable[index]\r\n        case 3:\r\n          return MpegAudioV1L2BitRateTable[index]\r\n      }\r\n    // layer1\r\n    case 3:\r\n      switch (version) {\r\n        case 0:\r\n        case 2:\r\n          return MpegAudioV2L1BitRateTable[index]\r\n        case 3:\r\n          return MpegAudioV1L1BitRateTable[index]\r\n      }\r\n  }\r\n  return NOPTS_VALUE\r\n}\r\n\r\nexport function getProfileByLayer(layer: number) {\r\n  switch (layer) {\r\n    case 1:\r\n      // Layer 3\r\n      return 34\r\n    case 2:\r\n      // Layer 2\r\n      return 33\r\n    case 3:\r\n      // Layer 1\r\n      return 32\r\n  }\r\n  return NOPTS_VALUE\r\n}\r\n\r\nexport const enum MP3Profile {\r\n  Layer1 = 32,\r\n  Layer2 = 33,\r\n  Layer3 = 34\r\n}\r\n\r\nexport const MP3Profile2Name: Record<MP3Profile, string> = {\r\n  [MP3Profile.Layer1]: 'Layer1',\r\n  [MP3Profile.Layer2]: 'Layer2',\r\n  [MP3Profile.Layer3]: 'Layer3'\r\n}\r\n\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, buffer: Uint8ArrayInterface) {\r\n  if (buffer && buffer.length >= 4) {\r\n    const ver = (buffer[1] >>> 3) & 0x03\r\n    const layer = (buffer[1] & 0x06) >> 1\r\n    // const bitrateIndex = (buffer[2] & 0xF0) >>> 4\r\n    const samplingFreqIndex = (buffer[2] & 0x0C) >>> 2\r\n\r\n    const channelMode = (buffer[3] >>> 6) & 0x03\r\n\r\n    const channelCount = channelMode !== 3 ? 2 : 1\r\n    const profile = getProfileByLayer(layer)\r\n    const sampleRate = getSampleRateByVersionIndex(ver, samplingFreqIndex)\r\n\r\n    stream.codecpar.profile = profile\r\n    stream.codecpar.sampleRate = sampleRate\r\n    stream.codecpar.chLayout.nbChannels = channelCount\r\n  }\r\n}\r\n","/*\r\n * libmedia ntp util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\n\r\nexport function parse(ntp: uint64) {\r\n  const sec = ntp >> 32n\r\n  const fracPart = ntp & 0xFFFFFFFFn\r\n  const usec = (fracPart * 1000000n) / 0xFFFFFFFFn\r\n  return (sec * 1000000n) + usec\r\n}\r\n","import IOReader from '../../io/IOReader'\r\nimport IOWriter from '../../io/IOWriter'\r\nimport * as object from '../../util/object'\r\n\r\nexport class TextMessageRequest {\r\n  method: string\r\n  uri: string\r\n  protocol: string\r\n  headers: Record<string, string>\r\n  content: string\r\n\r\n  constructor(method: string, uri: string, protocol: string, headers: Record<string, string> = {}, content: string = '') {\r\n    this.method = method\r\n    this.uri = uri\r\n    this.protocol = protocol\r\n    this.headers = headers\r\n    this.content = content\r\n  }\r\n\r\n  public setHeader(key: string, value: string) {\r\n    this.headers[key] = value\r\n  }\r\n\r\n  public encode() {\r\n    let text = `${this.method} ${this.uri} ${this.protocol}\\r\\n`\r\n    this.headers['Content-Length'] = this.content.length + ''\r\n    object.each(this.headers, (value, key) => {\r\n      if (value) {\r\n        text += `${key}: ${value}\\r\\n`\r\n      }\r\n    })\r\n    text += '\\r\\n'\r\n\r\n    if (this.content) {\r\n      text += this.content\r\n    }\r\n    return text\r\n  }\r\n}\r\n\r\nexport class TextMessageResponse {\r\n  protocol: string\r\n  statusCode: number\r\n  statusText: string\r\n  headers: Record<string, string>\r\n  content: string\r\n\r\n  constructor(protocol: string, statusCode: number, statusText: string, headers: Record<string, string>, content: string) {\r\n    this.protocol = protocol\r\n    this.statusCode = statusCode\r\n    this.statusText = statusText\r\n    this.headers = headers\r\n    this.content = content\r\n  }\r\n}\r\n\r\nexport abstract class TextMessageSession {\r\n  protected ioReader: IOReader\r\n\r\n  protected ioWriter: IOWriter\r\n\r\n  constructor(ioReader: IOReader, ioWriter: IOWriter) {\r\n    this.ioReader = ioReader\r\n    this.ioWriter = ioWriter\r\n  }\r\n\r\n  protected async readResponse() {\r\n    let head = (await this.ioReader.readLine()).trim().split(' ')\r\n    let context = ''\r\n    let headers: Record<string, string> = {}\r\n    while (true) {\r\n      const line = (await this.ioReader.readLine()).trim()\r\n      // 响应头结束\r\n      if (!line) {\r\n        break\r\n      }\r\n      const item = line.split(':')\r\n      headers[item[0].trim()] = item[1].trim()\r\n    }\r\n    if (headers['Content-Length']) {\r\n      context = await this.ioReader.readString(+headers['Content-Length'])\r\n    }\r\n    return new TextMessageResponse(head[0].trim(), +head[1].trim(), head[2].trim(), headers, context)\r\n  }\r\n\r\n  public async request(request: TextMessageRequest): Promise<TextMessageResponse> {\r\n    this.ioWriter.reset()\r\n    this.ioWriter.writeString(request.encode())\r\n    this.ioWriter.flush()\r\n    return this.readResponse()\r\n  }\r\n\r\n  public async notify(request: TextMessageRequest) {\r\n    this.ioWriter.reset()\r\n    this.ioWriter.writeString(request.encode())\r\n    await this.ioWriter.flush()\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}