{"version":3,"file":"src_avformat_formats_IHevcFormat_ts.avtranscoder.js","mappings":"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","sources":["webpack://AVTranscoder/./src/avformat/formats/IFormat.ts","webpack://AVTranscoder/./src/avformat/formats/IHevcFormat.ts","webpack://AVTranscoder/./src/avformat/formats/nalu/NaluReader.ts"],"sourcesContent":["/*\r\n * libmedia abstract format decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport { AVFormat } from 'avutil/avformat'\r\n\r\nexport default abstract class IFormat {\r\n\r\n  public type: AVFormat = AVFormat.UNKNOWN\r\n\r\n  public onStreamAdd: (stream: Stream) => void\r\n\r\n  public abstract init(formatContext: AVIFormatContext): void\r\n\r\n  public async destroy(formatContext: AVIFormatContext): Promise<void> {}\r\n\r\n  public abstract getAnalyzeStreamsCount(): number\r\n  public abstract readHeader(formatContext: AVIFormatContext): Promise<number>\r\n  public abstract readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number>\r\n\r\n  /**\r\n   * seek\r\n   * \r\n   * @param context \r\n   * @param stream \r\n   * @param timestamp 毫秒时间戳\r\n   * @param flags \r\n   * \r\n   * @returns 返回 seek 之前的下一个 avpacket pos（若不知道返回 0n 方便之后可以再 seek 回来）返回负数表示 seek 失败\r\n   */\r\n  public abstract seek(\r\n    formatContext: AVIFormatContext,\r\n    stream: Stream,\r\n    timestamp: int64,\r\n    flags: int32\r\n  ): Promise<int64>\r\n}\r\n","/*\r\n * libmedia hevc decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport { AVCodecID, AVMediaType } from 'avutil/codec'\r\nimport { IOError } from 'common/io/error'\r\nimport * as errorType from 'avutil/error'\r\nimport IFormat from './IFormat'\r\nimport { AVFormat, AVSeekFlags } from 'avutil/avformat'\r\nimport { memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport { addAVPacketData, createAVPacket, destroyAVPacket, refAVPacket } from 'avutil/util/avpacket'\r\nimport AVStream from 'avutil/AVStream'\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport * as object from 'common/util/object'\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\nimport * as hevc from 'avutil/codecs/hevc'\r\nimport { AV_TIME_BASE } from 'avutil/constant'\r\nimport BitReader from 'common/io/BitReader'\r\nimport * as expgolomb from 'avutil/util/expgolomb'\r\nimport NaluReader from './nalu/NaluReader'\r\nimport { AVCodecParameterFlags } from 'avutil/struct/avcodecparameters'\r\n\r\nexport interface IHevcFormatOptions {\r\n  framerate?: Rational\r\n}\r\n\r\nconst DefaultIHevcFormatOptions: IHevcFormatOptions = {\r\n  framerate: {\r\n    num: 30,\r\n    den: 1\r\n  }\r\n}\r\n\r\nexport default class IHevcFormat extends IFormat {\r\n\r\n  public type: AVFormat = AVFormat.HEVC\r\n\r\n  private options: IHevcFormatOptions\r\n\r\n  private currentDts: int64\r\n  private currentPts: int64\r\n  private step: int64\r\n\r\n  private slices: Uint8Array[]\r\n  private naluPos: int64\r\n\r\n  private queue: { avpacket: pointer<AVPacket>, poc: int32 }[]\r\n  private bitReader: BitReader\r\n\r\n  private sliceType: hevc.HEVCSliceType\r\n  private poc: int32\r\n\r\n  private pocTid0: int32\r\n\r\n  private sps: hevc.HevcSPS\r\n  private pps: hevc.HevcPPS\r\n\r\n  private naluReader: NaluReader\r\n\r\n  constructor(options: IHevcFormatOptions = {}) {\r\n    super()\r\n    this.options = object.extend({}, DefaultIHevcFormatOptions, options)\r\n  }\r\n\r\n  public init(formatContext: AVIFormatContext): void {\r\n\r\n    if (formatContext.ioReader) {\r\n      formatContext.ioReader.setEndian(false)\r\n    }\r\n\r\n    this.slices = []\r\n\r\n    this.queue = []\r\n    this.bitReader = new BitReader(50)\r\n    this.naluReader = new NaluReader()\r\n  }\r\n\r\n  public async destroy(formatContext: AVIFormatContext) {\r\n    if (this.queue.length) {\r\n      for (let i = 0; i < this.queue.length; i++) {\r\n        destroyAVPacket(this.queue[i].avpacket)\r\n      }\r\n      this.queue.length = 0\r\n    }\r\n  }\r\n\r\n  private isFrameNalu(data: Uint8Array) {\r\n    const type = (data[(data[2] === 1 ? 3 : 4)] >>> 1) & 0x3f\r\n    return type < hevc.HEVCNaluType.kSliceVPS\r\n  }\r\n\r\n  private async readNaluFrame(formatContext: AVIFormatContext) {\r\n\r\n    let hasFrame = false\r\n\r\n    const nalus: Uint8Array[] = this.slices\r\n    this.slices = []\r\n\r\n    if (nalus.length) {\r\n      hasFrame = this.isFrameNalu(nalus[0])\r\n    }\r\n\r\n    while (true) {\r\n      const next = await this.naluReader.read(formatContext.ioReader)\r\n      if (!next) {\r\n        return nalus\r\n      }\r\n\r\n      const type = (next[(next[2] === 1 ? 3 : 4)] >>> 1) & 0x3f\r\n\r\n      if (this.isFrameNalu(next)) {\r\n        if (hasFrame) {\r\n          const firstSliceInPicFlag = next[next[2] === 1 ? 5 : 6] >>> 7\r\n          if (firstSliceInPicFlag) {\r\n            this.slices.push(next)\r\n            return nalus\r\n          }\r\n          else {\r\n            nalus.push(next)\r\n          }\r\n        }\r\n        else {\r\n          nalus.push(next)\r\n          hasFrame = true\r\n        }\r\n      }\r\n      else if (hasFrame\r\n        && (type === hevc.HEVCNaluType.kSliceAUD\r\n          || type === hevc.HEVCNaluType.kSliceSPS\r\n          || type === hevc.HEVCNaluType.kSlicePPS\r\n          || type === hevc.HEVCNaluType.kSliceVPS\r\n        )\r\n      ) {\r\n        this.slices.push(next)\r\n        return nalus\r\n      }\r\n      else {\r\n        nalus.push(next)\r\n      }\r\n    }\r\n  }\r\n\r\n  public async readHeader(formatContext: AVIFormatContext): Promise<number> {\r\n    const stream = formatContext.createStream()\r\n    stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_VIDEO\r\n    stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_HEVC\r\n    stream.timeBase.den = AV_TIME_BASE\r\n    stream.timeBase.num = 1\r\n    stream.codecpar.flags |= AVCodecParameterFlags.AV_CODECPAR_FLAG_H26X_ANNEXB\r\n    this.currentDts = 0n\r\n    this.currentPts = 0n\r\n    this.naluPos = 0n\r\n    this.poc = 0\r\n    this.pocTid0 = 0\r\n    this.step = static_cast<int64>((AV_TIME_BASE / this.options.framerate.num * this.options.framerate.den) as double)\r\n\r\n    while (true) {\r\n      const slices = await this.readNaluFrame(formatContext)\r\n\r\n      if (!slices.length) {\r\n        return IOError.END\r\n      }\r\n\r\n      const data = concatTypeArray(Uint8Array, slices)\r\n\r\n      const extradata = hevc.generateAnnexbExtradata(data)\r\n\r\n      if (extradata) {\r\n        stream.codecpar.extradata = avMalloc(extradata.length)\r\n        memcpyFromUint8Array(stream.codecpar.extradata, extradata.length, extradata)\r\n        stream.codecpar.extradataSize = extradata.length\r\n\r\n        hevc.parseAVCodecParameters(stream, extradata)\r\n\r\n        const sps = slices.find((n) => {\r\n          const type = (n[(n[2] === 1 ? 3 : 4)] >>> 1) & 0x3f\r\n          return type === hevc.HEVCNaluType.kSliceSPS\r\n        })\r\n        const pps = slices.find((n) => {\r\n          const type = (n[(n[2] === 1 ? 3 : 4)] >>> 1) & 0x3f\r\n          return type === hevc.HEVCNaluType.kSlicePPS\r\n        })\r\n\r\n        this.sps = hevc.parseSPS(sps)\r\n        this.pps = hevc.parsePPS(pps)\r\n\r\n        const avpacket = createAVPacket()\r\n\r\n        const dataP: pointer<uint8> = avMalloc(data.length)\r\n        memcpyFromUint8Array(dataP, data.length, data)\r\n        addAVPacketData(avpacket, dataP, data.length)\r\n\r\n        avpacket.pos = this.naluPos\r\n        this.naluPos += static_cast<int64>(data.length)\r\n\r\n        avpacket.dts = this.currentDts\r\n        this.currentDts += this.step\r\n        avpacket.pts = this.currentPts\r\n        this.currentPts += this.step\r\n\r\n        avpacket.streamIndex = stream.index\r\n        avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n        avpacket.timeBase.num = stream.timeBase.num\r\n        avpacket.timeBase.den = stream.timeBase.den\r\n        avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_H26X_ANNEXB\r\n\r\n        formatContext.interval.packetBuffer.push(avpacket)\r\n\r\n        break\r\n      }\r\n\r\n      this.naluPos += static_cast<int64>(data.length)\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  private async readAVPacket_(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number> {\r\n\r\n    const stream = formatContext.getStreamByMediaType(AVMediaType.AVMEDIA_TYPE_VIDEO)\r\n\r\n    const nalus = await this.readNaluFrame(formatContext)\r\n\r\n    if (!nalus.length) {\r\n      return IOError.END\r\n    }\r\n\r\n    this.sliceType = hevc.HEVCSliceType.kSliceNone\r\n    let isKey = false\r\n    let isFirst = true\r\n\r\n    nalus.forEach((n) => {\r\n      const header = n[2] === 1 ? n[3] : n[4]\r\n      const type = (header >>> 1) & 0x3f\r\n      const temporalId = (n[2] === 1 ? n[4] : n[5]) & 0x07\r\n\r\n      if (type === hevc.HEVCNaluType.kSliceSPS) {\r\n        this.sps = hevc.parseSPS(n)\r\n      }\r\n      if (type === hevc.HEVCNaluType.kSlicePPS) {\r\n        this.pps = hevc.parsePPS(n)\r\n      }\r\n\r\n      if (type === hevc.HEVCNaluType.kSliceIDR_W_RADL\r\n        || type === hevc.HEVCNaluType.kSliceIDR_N_LP\r\n      ) {\r\n        isKey = true\r\n      }\r\n\r\n      if (type < hevc.HEVCNaluType.kSliceVPS && isFirst) {\r\n        isFirst = false\r\n        this.bitReader.reset()\r\n        this.bitReader.appendBuffer(n.subarray(n[2] === 1 ? 5 : 6, 50))\r\n\r\n        const firstSliceInPicFlag = this.bitReader.readU1()\r\n        if (type >= 16 && type <= 23) {\r\n          isKey = true\r\n          // no_output_of_prior_pics_flag\r\n          this.bitReader.readU1()\r\n        }\r\n        // pps_id\r\n        expgolomb.readUE(this.bitReader)\r\n\r\n        if (!firstSliceInPicFlag) {\r\n          if (this.pps.dependent_slice_segment_flag) {\r\n            // dependent_slice_segment_flag\r\n            this.bitReader.readU1()\r\n          }\r\n          const sliceAddressLength = Math.ceil(Math.log2(this.sps.ctb_width * this.sps.ctb_height))\r\n          this.bitReader.readU(sliceAddressLength)\r\n        }\r\n\r\n        for (let i = 0; i < this.pps.num_extra_slice_header_bits; i++) {\r\n          // slice_reserved_undetermined_flag\r\n          this.bitReader.readU1()\r\n        }\r\n\r\n        this.sliceType = expgolomb.readUE(this.bitReader)\r\n\r\n        if (this.pps.output_flag_present_flag) {\r\n          // pic_output_flag\r\n          this.bitReader.readU1()\r\n        }\r\n        if (this.sps.separate_colour_plane_flag) {\r\n          // colour_plane_id\r\n          this.bitReader.readU(2)\r\n        }\r\n\r\n        if (type === hevc.HEVCNaluType.kSliceIDR_W_RADL\r\n          || type === hevc.HEVCNaluType.kSliceIDR_N_LP\r\n        ) {\r\n          this.poc = 0\r\n        }\r\n        else {\r\n          const picOrderCntLsb = this.bitReader.readU(this.sps.log2_max_poc_lsb)\r\n          let maxPocLsb  = 1 << this.sps.log2_max_poc_lsb\r\n          let prevPocLsb = this.pocTid0 % maxPocLsb\r\n          let prevPocMsb = this.pocTid0 - prevPocLsb\r\n          let pocMsb = 0\r\n          if (picOrderCntLsb < prevPocLsb && prevPocLsb - picOrderCntLsb >= maxPocLsb / 2) {\r\n            pocMsb = prevPocMsb + maxPocLsb\r\n          }\r\n          else if (picOrderCntLsb > prevPocLsb && picOrderCntLsb - prevPocLsb > maxPocLsb / 2) {\r\n            pocMsb = prevPocMsb - maxPocLsb\r\n          }\r\n          else {\r\n            pocMsb = prevPocMsb\r\n          }\r\n          // For BLA picture types, POCmsb is set to 0.\r\n          if (type == hevc.HEVCNaluType.kSliceBLA_W_LP\r\n            || type == hevc.HEVCNaluType.kSliceBLA_W_RADL\r\n            || type == hevc.HEVCNaluType.kSliceBLA_N_LP\r\n          ) {\r\n            pocMsb = 0\r\n          }\r\n          this.poc = pocMsb + picOrderCntLsb\r\n        }\r\n\r\n        if (temporalId == 0\r\n          && type != hevc.HEVCNaluType.kSliceTRAIL_N\r\n          && type != hevc.HEVCNaluType.kSliceTSA_N\r\n          && type != hevc.HEVCNaluType.kSliceSTSA_N\r\n          && type != hevc.HEVCNaluType.kSliceRADL_N\r\n          && type != hevc.HEVCNaluType.kSliceRASL_N\r\n          && type != hevc.HEVCNaluType.kSliceRADL_R\r\n          && type != hevc.HEVCNaluType.kSliceRASL_R\r\n        ) {\r\n          this.pocTid0 = this.poc\r\n        }\r\n      }\r\n    })\r\n\r\n    const data = concatTypeArray(Uint8Array, nalus)\r\n\r\n    const dataP: pointer<uint8> = avMalloc(data.length)\r\n    memcpyFromUint8Array(dataP, data.length, data)\r\n    addAVPacketData(avpacket, dataP, data.length)\r\n\r\n    avpacket.pos = this.naluPos\r\n    this.naluPos += static_cast<int64>(data.length)\r\n    avpacket.dts = this.currentDts\r\n    this.currentDts += this.step\r\n    avpacket.streamIndex = stream.index\r\n    avpacket.timeBase.num = stream.timeBase.num\r\n    avpacket.timeBase.den = stream.timeBase.den\r\n    avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_H26X_ANNEXB\r\n\r\n    if (isKey) {\r\n      avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  public async readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number> {\r\n\r\n    let ipFrameCount = this.queue.length\r\n\r\n    const output = () => {\r\n\r\n      if (this.queue.length > 1) {\r\n        this.queue.sort((a, b) => {\r\n          return a.poc - b.poc > 0 ? 1 : -1\r\n        })\r\n      }\r\n\r\n      for (let i = 0; i < this.queue.length; i++) {\r\n        this.queue[i].avpacket.pts = this.currentPts\r\n        this.currentPts += this.step\r\n      }\r\n      if (this.queue.length > 1) {\r\n        this.queue.sort((a, b) => {\r\n          return a.avpacket.dts - b.avpacket.dts > 0n ? 1 : -1\r\n        })\r\n      }\r\n      if (this.queue.length) {\r\n        refAVPacket(avpacket, this.queue[0].avpacket)\r\n        destroyAVPacket(this.queue[0].avpacket)\r\n      }\r\n      for (let i = 1; i < this.queue.length; i++) {\r\n        formatContext.interval.packetBuffer.push(this.queue[i].avpacket)\r\n      }\r\n      this.queue.length = 0\r\n    }\r\n\r\n    while (true) {\r\n      const next = createAVPacket()\r\n      let ret = await this.readAVPacket_(formatContext, next)\r\n      if (ret < 0) {\r\n        destroyAVPacket(next)\r\n        if (this.queue.length) {\r\n          output()\r\n          return 0\r\n        }\r\n        else {\r\n          return ret\r\n        }\r\n      }\r\n      if ((next.flags & AVPacketFlags.AV_PKT_FLAG_KEY)\r\n        || (this.sliceType === hevc.HEVCSliceType.kSliceP\r\n          || this.sliceType === hevc.HEVCSliceType.kSliceI\r\n        )\r\n      ) {\r\n        if (ipFrameCount === 1\r\n          || ((next.flags & AVPacketFlags.AV_PKT_FLAG_KEY)\r\n            && this.queue.length\r\n          )\r\n        ) {\r\n          output()\r\n          this.queue.push({\r\n            avpacket: next,\r\n            poc: this.poc\r\n          })\r\n          return 0\r\n        }\r\n        else {\r\n          this.queue.push({\r\n            avpacket: next,\r\n            poc: this.poc\r\n          })\r\n          ipFrameCount++\r\n        }\r\n      }\r\n      else {\r\n        this.queue.push({\r\n          avpacket: next,\r\n          poc: this.poc\r\n        })\r\n      }\r\n    }\r\n  }\r\n\r\n  public async seek(formatContext: AVIFormatContext, stream: AVStream, timestamp: int64, flags: int32): Promise<int64> {\r\n    const now = formatContext.ioReader.getPos()\r\n\r\n    if (flags & AVSeekFlags.BYTE) {\r\n      await formatContext.ioReader.seek(timestamp)\r\n      return now\r\n    }\r\n    return static_cast<int64>(errorType.FORMAT_NOT_SUPPORT)\r\n  }\r\n\r\n  public getAnalyzeStreamsCount(): number {\r\n    return 1\r\n  }\r\n\r\n}\r\n","/*\r\n * libmedia NaluReader\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport * as nalu from 'avutil/util/nalu'\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\n\r\nexport default class NaluReader {\r\n\r\n  private buffer: Uint8Array\r\n  private pos: int32\r\n  private end: int32\r\n  private ended: boolean\r\n\r\n  constructor() {\r\n    this.buffer = new Uint8Array(100 * 1024)\r\n    this.pos = 0\r\n    this.end = 0\r\n    this.ended = false\r\n  }\r\n\r\n  public async read(ioReader: IOReader) {\r\n    if (this.ended && this.pos >= this.end) {\r\n      return\r\n    }\r\n\r\n    const slices: Uint8Array[] = []\r\n\r\n    if (this.pos < this.end - 4) {\r\n      let next = nalu.getNextNaluStart(this.buffer.subarray(this.pos, this.end - 4), 3)\r\n      if (next.offset > -1) {\r\n        const nalu = this.buffer.slice(this.pos, this.pos + next.offset)\r\n        this.pos += next.offset\r\n        return nalu\r\n      }\r\n      else {\r\n        slices.push(this.buffer.slice(this.pos, this.end - 4))\r\n        this.buffer.copyWithin(0, this.end - 4, this.end)\r\n        this.pos = 0\r\n        this.end = 4\r\n      }\r\n    }\r\n\r\n    while (true) {\r\n      if (!this.ended && this.end < this.buffer.length) {\r\n        try {\r\n          const len = await ioReader.readToBuffer(this.buffer.length - this.end, this.buffer.subarray(this.end))\r\n          this.end += len\r\n        }\r\n        catch (error) {\r\n          this.ended = true\r\n          if (this.pos >= this.end) {\r\n            return slices.length ? concatTypeArray(Uint8Array, slices) : null\r\n          }\r\n        }\r\n      }\r\n\r\n      let next = nalu.getNextNaluStart(this.buffer.subarray(this.pos, this.end - 4), slices.length ? 0 : 3)\r\n\r\n      if (next.offset > -1) {\r\n        slices.push(this.buffer.slice(this.pos, this.pos + next.offset))\r\n        this.pos += next.offset\r\n        return concatTypeArray(Uint8Array, slices)\r\n      }\r\n      else {\r\n        if (this.ended) {\r\n          slices.push(this.buffer.slice(this.pos, this.end))\r\n          this.pos = this.end = 0\r\n          return concatTypeArray(Uint8Array, slices)\r\n        }\r\n        else {\r\n          slices.push(this.buffer.slice(this.pos, this.end - 4))\r\n          this.buffer.copyWithin(0, this.end - 4, this.end)\r\n          this.pos = 0\r\n          this.end = 4\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public reset() {\r\n    this.pos = 0\r\n    this.end = 0\r\n    this.ended = false\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}