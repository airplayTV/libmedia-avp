{"version":3,"file":"src_avformat_formats_mp3_id3v2_ts.avtranscoder.js","mappings":"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","sources":["webpack://AVTranscoder/./src/avformat/formats/mp3/id3v2.ts"],"sourcesContent":["/*\r\n * libmedia mp3 id3v2 utils\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport { ID3V2, Mp3MetaData } from './type'\r\nimport * as logger from 'common/util/logger'\r\nimport * as text from 'common/util/text'\r\nimport IOWriterSync from 'common/io/IOWriterSync'\r\n\r\nconst enum ID3v2Encoding {\r\n  ISO8859,\r\n  UTF16BOM,\r\n  UTF16BE,\r\n  UTF8\r\n}\r\n\r\nasync function getSize(ioReader: IOReader, len: number) {\r\n  let v = 0\r\n  while (len--) {\r\n    v = (v << 7) + ((await ioReader.readUint8()) & 0x7F)\r\n  }\r\n  return v\r\n}\r\n\r\nfunction putSize(ioWriter: IOWriterSync, size: number) {\r\n  ioWriter.writeUint8(size >> 21 & 0x7f)\r\n  ioWriter.writeUint8(size >> 14 & 0x7f)\r\n  ioWriter.writeUint8(size >> 7 & 0x7f)\r\n  ioWriter.writeUint8(size & 0x7f)\r\n}\r\n\r\nfunction decodeString(encoding: ID3v2Encoding, buffer: Uint8Array) {\r\n  let label: string = 'utf-8'\r\n\r\n  if (encoding === ID3v2Encoding.ISO8859) {\r\n    label = 'iso-8859-1'\r\n  }\r\n  else if (encoding === ID3v2Encoding.UTF16BOM) {\r\n    label = 'utf-16'\r\n  }\r\n  else if (encoding === ID3v2Encoding.UTF16BE) {\r\n    label = 'utf-16be'\r\n  }\r\n\r\n  const decoder = new TextDecoder(label)\r\n  return decoder.decode(buffer)\r\n}\r\n\r\nexport async function parse(ioReader: IOReader, len: int32, id3v2: ID3V2, metadata: Mp3MetaData) {\r\n  const isV34 = id3v2.version !== 2\r\n  const tagHeaderLen = isV34 ? 10 : 6\r\n\r\n  let end = ioReader.getPos() + static_cast<int64>(len)\r\n\r\n  async function error() {\r\n    await ioReader.seek(end)\r\n  }\r\n\r\n  if (isV34 && (id3v2.flags & 0x40)) {\r\n    let extLen = await getSize(ioReader, 4)\r\n    if (id3v2.version === 4) {\r\n      // in v2.4 the length includes the length field we just read.\r\n      extLen -= 4\r\n    }\r\n    if (extLen < 0) {\r\n      logger.error('invalid extended header length')\r\n      return await error()\r\n    }\r\n    await ioReader.skip(extLen)\r\n    len -= extLen + 4\r\n    if (len < 0) {\r\n      logger.error('extended header too long')\r\n      await ioReader.seek(end)\r\n      return await error()\r\n    }\r\n  }\r\n\r\n  while (len > tagHeaderLen) {\r\n    let type: string\r\n    let size: number\r\n    if (isV34) {\r\n      type = await ioReader.readString(4)\r\n      size = await ioReader.readUint32()\r\n\r\n      if (!size) {\r\n        logger.error('invalid frame size')\r\n        break\r\n      }\r\n\r\n      // flags\r\n      await ioReader.readUint16()\r\n    }\r\n    else {\r\n      type = await ioReader.readString(3)\r\n      size = await ioReader.readUint24()\r\n    }\r\n\r\n    if (type === 'APIC') {\r\n      metadata.poster = await ioReader.readBuffer(size)\r\n    }\r\n    else if (type === 'USLT') {\r\n      const encoding = await ioReader.readUint8()\r\n      const language = await ioReader.readString(3)\r\n      const buffer = await ioReader.readBuffer(size - 4)\r\n      metadata.lyrics = `${language} ${decodeString(encoding, buffer)}`\r\n    }\r\n    else if (type === 'COMM' || type === 'COM') {\r\n      const encoding = await ioReader.readUint8()\r\n      const language = await ioReader.readString(3)\r\n      const buffer = await ioReader.readBuffer(size - 4)\r\n      metadata.comment = `${language} ${decodeString(encoding, buffer)}`\r\n    }\r\n    else if (type === 'PRIV') {\r\n      const pos = ioReader.getPos()\r\n      const items = []\r\n      while (true) {\r\n        const c = await ioReader.readUint8()\r\n        if (c === 0) {\r\n          break\r\n        }\r\n        items.push(c)\r\n      }\r\n      const identifier = text.decode(new Uint8Array(items))\r\n      let value: any\r\n      if (identifier === 'com.apple.streaming.transportStreamTimestamp') {\r\n        value = await ioReader.readUint64()\r\n      }\r\n      else {\r\n        value = await ioReader.readBuffer(size - Number(ioReader.getPos() - pos))\r\n      }\r\n      metadata[identifier] = value\r\n    }\r\n    else {\r\n      let content: string\r\n      if (type[0] === 'T') {\r\n        const encoding = await ioReader.readUint8()\r\n        const buffer = await ioReader.readBuffer(size - 1)\r\n        content = decodeString(encoding, buffer)\r\n      }\r\n      else {\r\n        // @ts-ignore\r\n        content = await ioReader.readBuffer(size)\r\n      }\r\n\r\n      switch (type) {\r\n        case 'TIT2':\r\n        case 'TT2':\r\n          metadata.title = content\r\n          break\r\n        case 'TPE1':\r\n        case 'TP1':\r\n          metadata.artist = content\r\n          break\r\n        case 'TPE2':\r\n        case 'TP2':\r\n          metadata.albumArtist = content\r\n          break\r\n        case 'TPOS':\r\n          metadata.disc = content\r\n          break\r\n        case 'TCOP':\r\n          metadata.copyright = content\r\n          break\r\n        case 'TALB':\r\n        case 'TAL':\r\n          metadata.album = content\r\n          break\r\n        case 'TRCK':\r\n        case 'TRK':\r\n          metadata.track = content\r\n          break\r\n        case 'TYER':\r\n        case 'TDRL':\r\n        case 'TDRC':\r\n          metadata.date = content\r\n          break\r\n        case 'COMM':\r\n        case 'COM':\r\n          metadata.comment = content\r\n          break\r\n        case 'TCON':\r\n        case 'TCO':\r\n          metadata.genre = content\r\n          break\r\n        case 'TSSE':\r\n        case 'TEN':\r\n          metadata.encoder = content\r\n          break\r\n        case 'TCOM':\r\n          metadata.composer = content\r\n          break\r\n        case 'TENC':\r\n          metadata.vendor = content\r\n          break\r\n        case 'TLAN':\r\n          metadata.language = content\r\n          break\r\n        case 'TPE3':\r\n        case 'TP3':\r\n          metadata.performer = content\r\n          break\r\n        case 'TPUB':\r\n          metadata.publisher = content\r\n          break\r\n        case 'TCMP':\r\n        case 'TCP':\r\n          metadata.compilation = content\r\n          break\r\n        case 'TDEN':\r\n          metadata.creationTime = content\r\n          break\r\n        case 'TSOA':\r\n          metadata.albumSort = content\r\n          break\r\n        case 'TSOP':\r\n          metadata.artistSort = content\r\n          break\r\n        case 'TSOT':\r\n          metadata.titleSort = content\r\n          break\r\n        case 'TIT1':\r\n          metadata.grouping = content\r\n          break\r\n        default:\r\n          metadata[type] = content\r\n          break\r\n      }\r\n    }\r\n\r\n    len -= size + tagHeaderLen\r\n  }\r\n\r\n  // footer preset, always 10 bytes, skip over it\r\n  if (id3v2.version == 4 && id3v2.flags & 0x10) {\r\n    end += 10n\r\n  }\r\n\r\n  await ioReader.seek(end)\r\n\r\n}\r\n\r\nexport function write(ioWriter: IOWriterSync, version: number, padding: int32, metadata: Mp3MetaData) {\r\n  let now = ioWriter.getPos()\r\n  ioWriter.writeString('ID3')\r\n  ioWriter.writeUint8(version)\r\n  ioWriter.writeUint16(0)\r\n  const sizePos = ioWriter.getPos()\r\n  ioWriter.writeUint32(0)\r\n\r\n  const enc = ID3v2Encoding.UTF8\r\n\r\n  function writeText(key: string, str: string) {\r\n    const buffer = text.encode(str)\r\n\r\n    ioWriter.writeString(key)\r\n    ioWriter.writeUint32(buffer.length + 1)\r\n    // flags\r\n    ioWriter.writeUint16(0)\r\n\r\n    ioWriter.writeUint8(enc)\r\n    ioWriter.writeBuffer(buffer)\r\n  }\r\n\r\n  function writeBuffer(key: string, buffer: Uint8Array) {\r\n    ioWriter.writeString(key)\r\n    ioWriter.writeUint32(buffer.length)\r\n    // flags\r\n    ioWriter.writeUint16(0)\r\n\r\n    ioWriter.writeBuffer(buffer)\r\n  }\r\n\r\n  if (metadata.poster) {\r\n    writeBuffer('APIC', metadata.poster)\r\n  }\r\n\r\n  if (metadata.title) {\r\n    writeText('TIT2', metadata.title)\r\n  }\r\n\r\n  if (metadata.artist) {\r\n    writeText('TPE1', metadata.artist)\r\n  }\r\n\r\n  if (metadata.albumArtist) {\r\n    writeText('TPE2', metadata.albumArtist)\r\n  }\r\n\r\n  if (metadata.disc) {\r\n    writeText('TPOS', metadata.disc)\r\n  }\r\n  if (metadata.copyright) {\r\n    writeText('TCOP', metadata.copyright)\r\n  }\r\n\r\n  if (metadata.album) {\r\n    writeText('TALB', metadata.album)\r\n  }\r\n\r\n  if (metadata.track) {\r\n    writeText('TRCK', metadata.track)\r\n  }\r\n\r\n  if (metadata.date) {\r\n    writeText('TDRC', metadata.date)\r\n  }\r\n\r\n  if (metadata.comment) {\r\n    let comment = metadata.comment\r\n    if (comment[3] === ' ') {\r\n      comment = comment.slice(0, 3) + comment.slice(4)\r\n    }\r\n    writeText('COMM', comment)\r\n  }\r\n\r\n  if (metadata.lyrics) {\r\n    let lyrics = metadata.lyrics\r\n    if (lyrics[3] === ' ') {\r\n      lyrics = lyrics.slice(0, 3) + lyrics.slice(4)\r\n    }\r\n    writeText('USLT', lyrics)\r\n  }\r\n\r\n  if (metadata.genre) {\r\n    writeText('TCON', metadata.genre + '')\r\n  }\r\n\r\n  if (metadata.encoder) {\r\n    writeText('TSSE', metadata.encoder)\r\n  }\r\n\r\n  if (metadata.composer) {\r\n    writeText('TCOM', metadata.composer)\r\n  }\r\n\r\n  if (metadata.vendor) {\r\n    writeText('TENC', metadata.vendor)\r\n  }\r\n\r\n  if (metadata.language) {\r\n    writeText('TLAN', metadata.language)\r\n  }\r\n\r\n  if (metadata.performer) {\r\n    writeText('TPE3', metadata.performer)\r\n  }\r\n\r\n  if (metadata.publisher) {\r\n    writeText('TPUB', metadata.publisher)\r\n  }\r\n\r\n  if (metadata.compilation) {\r\n    writeText('TCMP', metadata.compilation)\r\n  }\r\n\r\n  if (metadata.creationTime) {\r\n    writeText('TDEN', metadata.creationTime)\r\n  }\r\n\r\n  if (metadata.albumSort) {\r\n    writeText('TSOA', metadata.albumSort)\r\n  }\r\n\r\n  if (metadata.artistSort) {\r\n    writeText('TSOP', metadata.artistSort)\r\n  }\r\n\r\n  if (metadata.titleSort) {\r\n    writeText('TSOT', metadata.titleSort)\r\n  }\r\n\r\n  if (metadata.grouping) {\r\n    writeText('TIT1', metadata.grouping)\r\n  }\r\n\r\n  if (padding < 10) {\r\n    padding = 10\r\n  }\r\n\r\n  const len = static_cast<int32>(ioWriter.getPos() - now)\r\n\r\n  if (padding > 268435455 - len) {\r\n    padding = 268435455 - len\r\n  }\r\n\r\n  ioWriter.writeBuffer(new Uint8Array(padding).fill(0))\r\n\r\n  now = ioWriter.getPos()\r\n\r\n  ioWriter.seek(sizePos)\r\n  putSize(ioWriter, len)\r\n  ioWriter.seek(now)\r\n}\r\n"],"names":[],"sourceRoot":""}