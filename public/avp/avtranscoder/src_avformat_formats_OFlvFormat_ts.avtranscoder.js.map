{"version":3,"file":"src_avformat_formats_OFlvFormat_ts.avtranscoder.js","mappings":"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","sources":["webpack://AVTranscoder/./src/avformat/bsf/AVBSFilter.ts","webpack://AVTranscoder/./src/avformat/bsf/h2645/Annexb2AvccFilter.ts","webpack://AVTranscoder/./src/avformat/formats/OFlvFormat.ts","webpack://AVTranscoder/./src/avformat/formats/flv/FlvHeader.ts","webpack://AVTranscoder/./src/avformat/formats/flv/FlvScriptTag.ts","webpack://AVTranscoder/./src/avformat/formats/flv/flv.ts","webpack://AVTranscoder/./src/avformat/formats/flv/oflv.ts","webpack://AVTranscoder/./src/avformat/function/mktag.ts","webpack://AVTranscoder/./src/avutil/codecs/vvc.ts","webpack://AVTranscoder/./src/avutil/util/amf.ts"],"sourcesContent":["/*\r\n * libmedia AVBSFilter\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport { avMallocz } from 'avutil/util/mem'\r\nimport { copyCodecParameters, freeCodecParameters } from 'avutil/util/codecparameters'\r\n\r\nexport default abstract class AVBSFilter {\r\n\r\n  inCodecpar: pointer<AVCodecParameters>\r\n  inTimeBase: Rational\r\n\r\n  outCodecpar: pointer<AVCodecParameters>\r\n\r\n  public init(codecpar: pointer<AVCodecParameters>, timeBase: pointer<Rational>): number {\r\n    this.inCodecpar = reinterpret_cast<pointer<AVCodecParameters>>(avMallocz(sizeof(AVCodecParameters)))\r\n    copyCodecParameters(this.inCodecpar, codecpar)\r\n\r\n    this.inTimeBase = {\r\n      den: timeBase.den,\r\n      num: timeBase.num\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  public destroy() {\r\n    if (this.inCodecpar) {\r\n      freeCodecParameters(this.inCodecpar)\r\n      this.inCodecpar = nullptr\r\n    }\r\n  }\r\n\r\n  public abstract sendAVPacket(avpacket: pointer<AVPacket>): number\r\n  public abstract receiveAVPacket(avpacket: pointer<AVPacket>): number\r\n  public abstract reset(): number\r\n}\r\n","/*\r\n * libmedia Annexb2AvccFilter\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport AVBSFilter from '../AVBSFilter'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport { addAVPacketData, addAVPacketSideData, copyAVPacketProps, createAVPacket,\r\n  destroyAVPacket, refAVPacket, unrefAVPacket\r\n} from 'avutil/util/avpacket'\r\n\r\nimport * as h264 from 'avutil/codecs/h264'\r\nimport * as hevc from 'avutil/codecs/hevc'\r\nimport * as vvc from 'avutil/codecs/vvc'\r\nimport { mapSafeUint8Array, memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport { AVCodecID, AVPacketSideDataType } from 'avutil/codec'\r\nimport * as errorType from 'avutil/error'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport * as logger from 'common/util/logger'\r\n\r\nexport default class Annexb2AvccFilter extends AVBSFilter {\r\n\r\n  private cache: pointer<AVPacket>\r\n  private cached: boolean\r\n  private reverseSps: boolean\r\n\r\n  constructor(reverseSps: boolean = false) {\r\n    super()\r\n    this.reverseSps = reverseSps\r\n  }\r\n\r\n  public init(codecpar: pointer<AVCodecParameters>, timeBase: pointer<Rational>): number {\r\n    super.init(codecpar, timeBase)\r\n    this.cache = createAVPacket()\r\n    this.cached = false\r\n\r\n    return 0\r\n  }\r\n\r\n  public destroy(): void {\r\n    super.destroy()\r\n    destroyAVPacket(this.cache)\r\n    this.cache = nullptr\r\n  }\r\n\r\n  public sendAVPacket(avpacket: pointer<AVPacket>): number {\r\n\r\n    const buffer = mapSafeUint8Array(avpacket.data, reinterpret_cast<size>(avpacket.size))\r\n\r\n    if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_H26X_ANNEXB)) {\r\n      refAVPacket(this.cache, avpacket)\r\n    }\r\n    else {\r\n\r\n      copyAVPacketProps(this.cache, avpacket)\r\n\r\n      let convert: {\r\n        bufferPointer: pointer<uint8>,\r\n        length: number,\r\n        extradata: Uint8Array,\r\n        key: boolean\r\n      }\r\n\r\n      if (this.inCodecpar.codecId === AVCodecID.AV_CODEC_ID_H264) {\r\n        convert = h264.annexb2Avcc(buffer, this.reverseSps)\r\n      }\r\n      else if (this.inCodecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC) {\r\n        convert = hevc.annexb2Avcc(buffer, this.reverseSps)\r\n      }\r\n      else if (this.inCodecpar.codecId === AVCodecID.AV_CODEC_ID_VVC) {\r\n        convert = vvc.annexb2Avcc(buffer, this.reverseSps)\r\n      }\r\n      else {\r\n        logger.fatal(`not support for codecId: ${this.inCodecpar.codecId}`)\r\n      }\r\n\r\n      this.cache.flags &= ~AVPacketFlags.AV_PKT_FLAG_H26X_ANNEXB\r\n\r\n      addAVPacketData(this.cache, convert.bufferPointer, convert.length)\r\n\r\n      if (convert.key) {\r\n        this.cache.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n      }\r\n\r\n      if (convert.extradata) {\r\n        const extradata = avMalloc(convert.extradata.length)\r\n        memcpyFromUint8Array(extradata, convert.extradata.length, convert.extradata)\r\n        addAVPacketSideData(this.cache, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, extradata, convert.extradata.length)\r\n      }\r\n    }\r\n    this.cached = true\r\n    return 0\r\n  }\r\n\r\n  public receiveAVPacket(avpacket: pointer<AVPacket>): number {\r\n    if (this.cached) {\r\n      unrefAVPacket(avpacket)\r\n      refAVPacket(avpacket, this.cache)\r\n      this.cached = false\r\n      return 0\r\n    }\r\n    else {\r\n      return errorType.DATA_INVALID\r\n    }\r\n  }\r\n\r\n  public reset(): number {\r\n    return 0\r\n  }\r\n}\r\n","/*\r\n * libmedia flv encoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport OFormat from './OFormat'\r\nimport FlvHeader from './flv/FlvHeader'\r\nimport FlvScriptTag from './flv/FlvScriptTag'\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport { AVOFormatContext } from '../AVFormatContext'\r\nimport * as array from 'common/util/array'\r\nimport { AVPacketSideDataType, AVCodecID, AVMediaType } from 'avutil/codec'\r\nimport { AACPacketType, AVCPacketType, AVCodecID2FlvCodecTag, AVCodecID2FlvCodecType, AudioChannelOrder, AudioPacketType, FlvTag, VideoPacketType } from './flv/flv'\r\nimport { FlvColorInfo, FlvContext, FlvStreamContext } from './flv/type'\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\nimport { AVFormat } from 'avutil/avformat'\r\nimport { mapUint8Array } from 'cheap/std/memory'\r\nimport * as logger from 'common/util/logger'\r\nimport { createAVPacket, destroyAVPacket, getAVPacketSideData, getSideData } from 'avutil/util/avpacket'\r\nimport { avQ2D, avRescaleQ2 } from 'avutil/util/rational'\r\nimport Annexb2AvccFilter from '../bsf/h2645/Annexb2AvccFilter'\r\nimport { AV_MILLI_TIME_BASE_Q, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport AVStream, { AVDisposition, AVStreamMetadataKey } from 'avutil/AVStream'\r\nimport mktag from '../function/mktag'\r\nimport { AVColorPrimaries, AVColorSpace, AVColorTransferCharacteristic } from 'avutil/pixfmt'\r\nimport { AVContentLightMetadata, AVMasteringDisplayMetadata } from 'avutil/struct/avframe'\r\nimport * as amf from 'avutil/util/amf'\r\nimport { AVChannelOrder, AVChannel } from 'avutil/audiosamplefmt'\r\nimport * as oflv from './flv/oflv'\r\nimport * as h264 from 'avutil/codecs/h264'\r\nimport * as hevc from 'avutil/codecs/hevc'\r\nimport * as vvc from 'avutil/codecs/vvc'\r\nimport * as naluUtil from 'avutil/util/nalu'\r\nimport IOWriterSync from 'common/io/IOWriterSync'\r\nexport interface OFlvFormatOptions {\r\n  addKeyframePositions?: boolean\r\n  live?: boolean\r\n  enableNanoTimestamp?: boolean\r\n  useLegacyHevc?: boolean\r\n}\r\n\r\nexport default class OFlvFormat extends OFormat {\r\n\r\n  public type: AVFormat = AVFormat.FLV\r\n\r\n  private context: FlvContext\r\n\r\n  public header: FlvHeader\r\n\r\n  public script: FlvScriptTag\r\n\r\n  public options: OFlvFormatOptions\r\n\r\n  private annexb2AvccFilter: Annexb2AvccFilter\r\n\r\n  private avpacket: pointer<AVPacket>\r\n\r\n  private headerWriter: IOWriterSync\r\n  private headerBuffers: Uint8Array[]\r\n\r\n  constructor(options: OFlvFormatOptions = {}) {\r\n    super()\r\n\r\n    this.header = new FlvHeader()\r\n    this.script = new FlvScriptTag()\r\n    this.headerWriter = new IOWriterSync(100 * 1000)\r\n    this.headerBuffers = []\r\n    this.headerWriter.onFlush = ((buffer) => {\r\n      this.headerBuffers.push(buffer.slice())\r\n      return 0\r\n    })\r\n\r\n    this.options = options\r\n\r\n    this.context = {\r\n      keyframeFilePositions: [],\r\n      keyFrameTimes: [],\r\n      lastkeyframelocation: 0,\r\n      lastkeyframetimestamp: 0n,\r\n      lasttimestamp: 0n,\r\n      framerate: 0,\r\n      filesize: 0,\r\n      audioSize: 0,\r\n      videosize: 0,\r\n      datasize: 0,\r\n      duration: 0,\r\n      scriptWrote: false,\r\n      frameCount: 0,\r\n      firstKeyframePositionWrote: false,\r\n      videoMetadataWrote: false,\r\n      enableNanoTimestamp: options.enableNanoTimestamp,\r\n      multiAudioTracks: false,\r\n      multiVideoTracks: false,\r\n      useLegacyHevc: options.useLegacyHevc\r\n    }\r\n  }\r\n\r\n  private getDefaultStream(formatContext: AVOFormatContext, mediaType: AVMediaType) {\r\n    let streams = formatContext.streams.filter((stream) => {\r\n      return stream.codecpar.codecType === mediaType\r\n    })\r\n    if (streams.length < 2) {\r\n      return streams[0]\r\n    }\r\n    const legacy = streams.filter((stream) => {\r\n      return !this.isEnhancedStream(stream)\r\n    })\r\n    return legacy.find((stream) => !!(stream.disposition & AVDisposition.DEFAULT)) || legacy[0] || streams[0]\r\n  }\r\n\r\n  private isEnhancedStream(stream: AVStream) {\r\n    if (this.context.enableNanoTimestamp) {\r\n      return true\r\n    }\r\n    const streamContext = stream.privData as FlvStreamContext\r\n    if (this.context.useLegacyHevc\r\n      && stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n      && !streamContext.trackId\r\n      && !this.context.multiVideoTracks\r\n    ) {\r\n      return false\r\n    }\r\n    return oflv.isEnhancedCodecId(stream.codecpar.codecId) || streamContext?.trackId > 0\r\n  }\r\n\r\n  public init(formatContext: AVOFormatContext): number {\r\n    if (formatContext.ioWriter) {\r\n      formatContext.ioWriter.setEndian(true)\r\n    }\r\n\r\n    const audioDefaultStream = this.getDefaultStream(formatContext, AVMediaType.AVMEDIA_TYPE_AUDIO)\r\n    const videoDefaultStream = this.getDefaultStream(formatContext, AVMediaType.AVMEDIA_TYPE_VIDEO)\r\n\r\n    let audioNextTrack = 1\r\n    let videoNextTrack = 1\r\n\r\n    formatContext.streams.forEach((stream) => {\r\n      if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_AUDIO) {\r\n        this.header.hasAudio = true\r\n        this.script.onMetaData.hasAudio = true\r\n        if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_SPEEX) {\r\n          if (stream.codecpar.sampleRate !== 16000) {\r\n            logger.fatal('flv speex only support 16000 sample rate')\r\n          }\r\n          if (stream.codecpar.chLayout.nbChannels !== 1) {\r\n            logger.fatal('flv speex only support 1 channel')\r\n          }\r\n        }\r\n        let trackId = 0\r\n        if (stream === audioDefaultStream) {\r\n          this.script.onMetaData.audiocodecid = AVCodecID2FlvCodecType[stream.codecpar.codecId] ?? mktag(AVCodecID2FlvCodecTag[stream.codecpar.codecId])\r\n          this.script.onMetaData.stereo = stream.codecpar.chLayout.nbChannels > 1 ? true : false\r\n          this.script.onMetaData.audiosamplerate = stream.codecpar.sampleRate || 0\r\n          this.script.onMetaData.audiosamplesize = stream.codecpar.frameSize || 0\r\n        }\r\n        else {\r\n          trackId = audioNextTrack++\r\n          if (!this.script.onMetaData.audioTrackIdInfoMap) {\r\n            this.script.onMetaData.audioTrackIdInfoMap = {}\r\n          }\r\n          this.script.onMetaData.audioTrackIdInfoMap[trackId] = {\r\n            audiocodecid: AVCodecID2FlvCodecTag[stream.codecpar.codecId] ? mktag(AVCodecID2FlvCodecTag[stream.codecpar.codecId]) : AVCodecID2FlvCodecType[stream.codecpar.codecId],\r\n            stereo: stream.codecpar.chLayout.nbChannels > 1 ? true : false,\r\n            audiosamplerate: stream.codecpar.sampleRate || 0,\r\n            audiosamplesize: stream.codecpar.frameSize || 0\r\n          }\r\n          if (stream.metadata[AVStreamMetadataKey.TITLE]) {\r\n            this.script.onMetaData.audioTrackIdInfoMap[trackId].title = stream.metadata[AVStreamMetadataKey.TITLE]\r\n          }\r\n          if (stream.metadata[AVStreamMetadataKey.LANGUAGE]) {\r\n            this.script.onMetaData.audioTrackIdInfoMap[trackId].lang = stream.metadata[AVStreamMetadataKey.LANGUAGE]\r\n          }\r\n        }\r\n        stream.privData = {\r\n          trackId\r\n        }\r\n      }\r\n      else if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_VIDEO) {\r\n        this.header.hasVideo = true\r\n        this.script.onMetaData.hasVideo = true\r\n        if ((videoDefaultStream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n          || videoDefaultStream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n          || videoDefaultStream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC)\r\n          && !this.annexb2AvccFilter\r\n        ) {\r\n          this.annexb2AvccFilter = new Annexb2AvccFilter()\r\n          this.annexb2AvccFilter.init(addressof(videoDefaultStream.codecpar), addressof(videoDefaultStream.timeBase))\r\n        }\r\n        let trackId = 0\r\n        if (stream === videoDefaultStream) {\r\n          this.script.onMetaData.videocodecid = AVCodecID2FlvCodecType[stream.codecpar.codecId] ?? mktag(AVCodecID2FlvCodecTag[stream.codecpar.codecId])\r\n          this.script.onMetaData.width = stream.codecpar.width || 0\r\n          this.script.onMetaData.height = stream.codecpar.height || 0\r\n          this.script.onMetaData.framerate = avQ2D(stream.codecpar.framerate)\r\n        }\r\n        else {\r\n          trackId = videoNextTrack++\r\n          if (!this.script.onMetaData.videoTrackIdInfoMap) {\r\n            this.script.onMetaData.videoTrackIdInfoMap = {}\r\n          }\r\n          this.script.onMetaData.videoTrackIdInfoMap[trackId] = {\r\n            videocodecid: AVCodecID2FlvCodecTag[stream.codecpar.codecId] ? mktag(AVCodecID2FlvCodecTag[stream.codecpar.codecId]) : AVCodecID2FlvCodecType[stream.codecpar.codecId],\r\n            width: stream.codecpar.width || 0,\r\n            height: stream.codecpar.height || 0,\r\n            framerate: avQ2D(stream.codecpar.framerate)\r\n          }\r\n          if (stream.metadata[AVStreamMetadataKey.TITLE]) {\r\n            this.script.onMetaData.videoTrackIdInfoMap[trackId].title = stream.metadata[AVStreamMetadataKey.TITLE]\r\n          }\r\n          if (stream.metadata[AVStreamMetadataKey.LANGUAGE]) {\r\n            this.script.onMetaData.videoTrackIdInfoMap[trackId].lang = stream.metadata[AVStreamMetadataKey.LANGUAGE]\r\n          }\r\n        }\r\n        stream.privData = {\r\n          trackId\r\n        }\r\n      }\r\n    })\r\n\r\n    if (audioNextTrack > 1) {\r\n      this.context.multiAudioTracks = true\r\n    }\r\n    if (videoNextTrack > 1) {\r\n      this.context.multiVideoTracks = true\r\n    }\r\n\r\n    this.avpacket = createAVPacket()\r\n\r\n    return 0\r\n  }\r\n\r\n  public async destroy(formatContext: AVOFormatContext) {\r\n    if (this.annexb2AvccFilter) {\r\n      this.annexb2AvccFilter.destroy()\r\n      this.annexb2AvccFilter = null\r\n    }\r\n    if (this.avpacket) {\r\n      destroyAVPacket(this.avpacket)\r\n      this.avpacket = nullptr\r\n    }\r\n  }\r\n\r\n  private writeMetadata(formatContext: AVOFormatContext, stream: AVStream) {\r\n    if ((stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n        || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VP9\r\n        || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AV1\r\n    )\r\n      && this.isEnhancedStream(stream)\r\n    ) {\r\n      const lightLevel = getSideData(addressof(stream.codecpar.codedSideData), addressof(stream.codecpar.nbCodedSideData), AVPacketSideDataType.AV_PKT_DATA_CONTENT_LIGHT_LEVEL)\r\n      const display = getSideData(addressof(stream.codecpar.codedSideData), addressof(stream.codecpar.nbCodedSideData), AVPacketSideDataType.AV_PKT_DATA_MASTERING_DISPLAY_METADATA)\r\n      const colorInfo: FlvColorInfo = {\r\n        colorConfig: {}\r\n      }\r\n      if (stream.codecpar.colorTrc !== AVColorTransferCharacteristic.AVCOL_TRC_UNSPECIFIED) {\r\n        colorInfo.colorConfig.transferCharacteristics = stream.codecpar.colorTrc\r\n      }\r\n      if (stream.codecpar.colorSpace !== AVColorSpace.AVCOL_SPC_UNSPECIFIED) {\r\n        colorInfo.colorConfig.matrixCoefficients = stream.codecpar.colorSpace\r\n      }\r\n      if (stream.codecpar.colorPrimaries !== AVColorPrimaries.AVCOL_PRI_UNSPECIFIED) {\r\n        colorInfo.colorConfig.colorPrimaries = stream.codecpar.colorPrimaries\r\n      }\r\n      if (lightLevel) {\r\n        const lightLevelData = reinterpret_cast<pointer<AVContentLightMetadata>>(lightLevel.data)\r\n        colorInfo.hdrCll = {\r\n          maxCLL: lightLevelData.maxCLL,\r\n          maxFall: lightLevelData.maxFALL\r\n        }\r\n      }\r\n      if (display) {\r\n        const displayData = reinterpret_cast<pointer<AVMasteringDisplayMetadata>>(display.data)\r\n        colorInfo.hdrMdcv = {}\r\n        if (displayData.hasPrimaries) {\r\n          colorInfo.hdrMdcv.redX = avQ2D(displayData.displayPrimaries[0][0])\r\n          colorInfo.hdrMdcv.redY = avQ2D(displayData.displayPrimaries[0][1])\r\n          colorInfo.hdrMdcv.greenX = avQ2D(displayData.displayPrimaries[1][0])\r\n          colorInfo.hdrMdcv.greenY = avQ2D(displayData.displayPrimaries[1][1])\r\n          colorInfo.hdrMdcv.blueX = avQ2D(displayData.displayPrimaries[2][0])\r\n          colorInfo.hdrMdcv.blueY = avQ2D(displayData.displayPrimaries[2][1])\r\n          colorInfo.hdrMdcv.whitePointX = avQ2D(displayData.whitePoint[0])\r\n          colorInfo.hdrMdcv.whitePointY = avQ2D(displayData.whitePoint[1])\r\n        }\r\n        if (displayData.hasLuminance) {\r\n          colorInfo.hdrMdcv.maxLuminance = avQ2D(displayData.maxLuminance)\r\n          colorInfo.hdrMdcv.minLuminance = avQ2D(displayData.minLuminance)\r\n        }\r\n      }\r\n\r\n      oflv.writeTag(\r\n        formatContext.ioWriter,\r\n        FlvTag.VIDEO,\r\n        0n,\r\n        (ioWriter) => {\r\n          oflv.writeVideoHeader(\r\n            ioWriter,\r\n            stream,\r\n            this.context,\r\n            true,\r\n            VideoPacketType.Metadata,\r\n            AVPacketFlags.AV_PKT_FLAG_KEY,\r\n            0n,\r\n            nullptr\r\n          )\r\n        },\r\n        (ioWriter) => {\r\n          amf.writeValue(ioWriter, 'colorInfo'),\r\n          amf.writeValue(ioWriter, colorInfo)\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  private writeMultichannelConfig(formatContext: AVOFormatContext, stream: AVStream) {\r\n    if (this.isEnhancedStream(stream) && stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_AUDIO) {\r\n      oflv.writeTag(\r\n        formatContext.ioWriter,\r\n        FlvTag.AUDIO,\r\n        0n,\r\n        (ioWriter) => {\r\n          oflv.writeAudioHeader(\r\n            ioWriter,\r\n            stream,\r\n            this.context,\r\n            true,\r\n            AudioPacketType.MultichannelConfig,\r\n            0n,\r\n            nullptr\r\n          )\r\n        },\r\n        (ioWriter) => {\r\n          switch (stream.codecpar.chLayout.order) {\r\n            case AVChannelOrder.AV_CHANNEL_ORDER_NATIVE:\r\n              ioWriter.writeUint8(AudioChannelOrder.Native)\r\n              break\r\n            case AVChannelOrder.AV_CHANNEL_ORDER_CUSTOM:\r\n              ioWriter.writeUint8(AudioChannelOrder.Custom)\r\n              break\r\n            default:\r\n              ioWriter.writeUint8(AudioChannelOrder.Unspecified)\r\n              break\r\n          }\r\n          ioWriter.writeUint8(stream.codecpar.chLayout.nbChannels)\r\n          if (stream.codecpar.chLayout.order === AVChannelOrder.AV_CHANNEL_ORDER_NATIVE) {\r\n            let mask = stream.codecpar.chLayout.u.mask & 0x03FFFFn\r\n            mask |= (stream.codecpar.chLayout.u.mask >> (BigInt(AVChannel.AV_CHANNEL_LOW_FREQUENCY_2) - 18n)) & 0xFC0000n\r\n            ioWriter.writeUint32(static_cast<uint32>(mask as uint64))\r\n          }\r\n          else if (stream.codecpar.chLayout.order === AVChannelOrder.AV_CHANNEL_ORDER_CUSTOM) {\r\n            for (let i = 0; i < stream.codecpar.chLayout.nbChannels; i++) {\r\n              const id = stream.codecpar.chLayout.u.map[i].id\r\n              if (id >= AVChannel.AV_CHANNEL_FRONT_LEFT && id <= AVChannel.AV_CHANNEL_TOP_BACK_RIGHT) {\r\n                ioWriter.writeUint8(id - AVChannel.AV_CHANNEL_FRONT_LEFT)\r\n              }\r\n              else if (id >= AVChannel.AV_CHANNEL_LOW_FREQUENCY_2 && id <= AVChannel.AV_CHANNEL_BOTTOM_FRONT_RIGHT) {\r\n                ioWriter.writeUint8(id - AVChannel.AV_CHANNEL_LOW_FREQUENCY_2 + 18)\r\n              }\r\n              else if (id === AVChannel.AV_CHANNEL_UNUSED) {\r\n                ioWriter.writeUint8(0xfe)\r\n              }\r\n              else {\r\n                ioWriter.writeUint8(0xff)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      )\r\n    }\r\n  }\r\n\r\n  public writeHeader(formatContext: AVOFormatContext): number {\r\n    this.header.write(formatContext.ioWriter)\r\n    // previousTagSize0 总是 0\r\n    formatContext.ioWriter.writeUint32(0)\r\n\r\n    if (this.options.live) {\r\n      this.script.write(formatContext.ioWriter)\r\n      this.context.scriptWrote = true\r\n    }\r\n\r\n    formatContext.streams.forEach((stream) => {\r\n      const streamContext = stream.privData as FlvStreamContext\r\n      if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_AUDIO) {\r\n        if (stream.codecpar.extradata && (this.isEnhancedStream(stream) || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC)) {\r\n          oflv.writeTag(\r\n            formatContext.ioWriter,\r\n            FlvTag.AUDIO,\r\n            0n,\r\n            (ioWriter) => {\r\n              oflv.writeAudioHeader(\r\n                ioWriter,\r\n                stream,\r\n                this.context,\r\n                this.isEnhancedStream(stream),\r\n                this.isEnhancedStream(stream) ? AudioPacketType.SequenceStart : AACPacketType.AAC_SEQUENCE_HEADER,\r\n                0n,\r\n                nullptr\r\n              )\r\n            },\r\n            mapUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize)),\r\n            (previousTagSize) => {\r\n              this.context.filesize += previousTagSize + 4\r\n              if (!streamContext.trackId) {\r\n                this.context.audioSize += stream.codecpar.extradataSize\r\n                this.script.onMetaData.hasMetadata = true\r\n              }\r\n              this.context.datasize += stream.codecpar.extradataSize\r\n            }\r\n          )\r\n        }\r\n        this.writeMultichannelConfig(formatContext, stream)\r\n      }\r\n      else if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_VIDEO) {\r\n        if (stream.codecpar.extradata\r\n          && (this.isEnhancedStream(stream)\r\n            || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n            || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n            || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MPEG4\r\n          )\r\n        ) {\r\n          let extradata = mapUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize))\r\n          if ((stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n              || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n              || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n          )\r\n            && naluUtil.isAnnexb(extradata)\r\n          ) {\r\n            if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264) {\r\n              extradata = h264.annexbExtradata2AvccExtradata(extradata)\r\n            }\r\n            else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC) {\r\n              extradata = hevc.annexbExtradata2AvccExtradata(extradata)\r\n            }\r\n            else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC) {\r\n              extradata = vvc.annexbExtradata2AvccExtradata(extradata)\r\n            }\r\n          }\r\n          const now = formatContext.ioWriter.getPos()\r\n          oflv.writeTag(\r\n            formatContext.ioWriter,\r\n            FlvTag.VIDEO,\r\n            0n,\r\n            (ioWriter) => {\r\n              oflv.writeVideoHeader(\r\n                ioWriter,\r\n                stream,\r\n                this.context,\r\n                this.isEnhancedStream(stream),\r\n                this.isEnhancedStream(stream) ? VideoPacketType.SequenceStart : AVCPacketType.AVC_SEQUENCE_HEADER,\r\n                AVPacketFlags.AV_PKT_FLAG_KEY,\r\n                0n,\r\n                nullptr\r\n              )\r\n            },\r\n            extradata,\r\n            (previousTagSize) => {\r\n              this.context.filesize += previousTagSize + 4\r\n              if (!streamContext.trackId) {\r\n                this.context.videosize += stream.codecpar.extradataSize\r\n                this.script.onMetaData.hasMetadata = true\r\n              }\r\n              this.context.datasize += stream.codecpar.extradataSize\r\n              this.context.keyFrameTimes.push(0)\r\n              this.context.keyframeFilePositions.push(Number(now))\r\n              this.context.videoMetadataWrote = true\r\n            }\r\n          )\r\n        }\r\n      }\r\n      this.writeMetadata(formatContext, stream)\r\n    })\r\n    return 0\r\n  }\r\n\r\n  private isNewExtradata(extradata: Uint8Array, stream: AVStream) {\r\n    if (extradata.length === stream.codecpar.extradataSize) {\r\n      const old = mapUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize))\r\n      for (let i = 0; i < extradata.length; i++) {\r\n        if (extradata[i] !== old[i]) {\r\n          return true\r\n        }\r\n      }\r\n    }\r\n    return false\r\n  }\r\n\r\n  public writeAVPacket(formatContext: AVOFormatContext, avpacket: pointer<AVPacket>): number {\r\n\r\n    const stream = formatContext.getStreamByIndex(avpacket.streamIndex)\r\n\r\n    if (!stream) {\r\n      logger.warn(`can not found the stream width the packet\\'s streamIndex: ${avpacket.streamIndex}, ignore it`)\r\n      return\r\n    }\r\n\r\n    const streamContext = stream.privData as FlvStreamContext\r\n\r\n    if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_AUDIO) {\r\n      // 如果有 extradata，先写 extradata 为一个 tag\r\n      const element = getAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA)\r\n      if (element && (this.isEnhancedStream(stream) || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC)) {\r\n        const extradata = mapUint8Array(element.data, element.size)\r\n        if (this.isNewExtradata(extradata, stream)) {\r\n          oflv.writeTag(\r\n            formatContext.ioWriter,\r\n            FlvTag.AUDIO,\r\n            avRescaleQ2(avpacket.dts, addressof(avpacket.timeBase), AV_MILLI_TIME_BASE_Q),\r\n            (ioWriter) => {\r\n              oflv.writeAudioHeader(\r\n                ioWriter,\r\n                stream,\r\n                this.context,\r\n                this.isEnhancedStream(stream),\r\n                this.isEnhancedStream(stream) ? AudioPacketType.SequenceStart : AACPacketType.AAC_SEQUENCE_HEADER,\r\n                avpacket.dts,\r\n                addressof(avpacket.timeBase)\r\n              )\r\n            },\r\n            extradata,\r\n            (previousTagSize) => {\r\n              this.context.filesize += previousTagSize + 4\r\n            }\r\n          )\r\n          if (!streamContext.trackId) {\r\n            this.context.audioSize += extradata.length\r\n          }\r\n          this.context.datasize += extradata.length\r\n        }\r\n      }\r\n\r\n      if (avpacket.size) {\r\n        // 不使用 oflv.writeTag，这个方法太慢，引擎无法内联优化，只适合一两次调用那种\r\n        // 这里直接写\r\n        this.headerWriter.reset()\r\n        this.headerBuffers.length = 0\r\n        oflv.writeAudioHeader(\r\n          this.headerWriter,\r\n          stream,\r\n          this.context,\r\n          this.isEnhancedStream(stream),\r\n          this.isEnhancedStream(stream) ? AudioPacketType.CodedFrames : AACPacketType.AAC_RAW,\r\n          avpacket.dts,\r\n          addressof(avpacket.timeBase)\r\n        )\r\n        this.headerWriter.flush()\r\n        const header = concatTypeArray(Uint8Array, this.headerBuffers)\r\n        const now = formatContext.ioWriter.getPos()\r\n        // tagType\r\n        formatContext.ioWriter.writeUint8(FlvTag.AUDIO)\r\n        // size\r\n        formatContext.ioWriter.writeUint24(avpacket.size + header.length)\r\n        // timestamp\r\n        const timestamp = avRescaleQ2(avpacket.dts, addressof(avpacket.timeBase), AV_MILLI_TIME_BASE_Q)\r\n        formatContext.ioWriter.writeUint24(Number(timestamp & 0xffffffn))\r\n        formatContext.ioWriter.writeUint8(Number((timestamp >> 24n) & 0xffn))\r\n        // streamId always 0\r\n        formatContext.ioWriter.writeUint24(0)\r\n        formatContext.ioWriter.writeBuffer(header)\r\n        formatContext.ioWriter.writeBuffer(mapUint8Array(avpacket.data, reinterpret_cast<size>(avpacket.size)))\r\n        const previousTagSize = Number(formatContext.ioWriter.getPos() - now)\r\n        formatContext.ioWriter.writeUint32(previousTagSize)\r\n        this.context.filesize += previousTagSize + 4\r\n      }\r\n      if (!streamContext.trackId) {\r\n        this.context.audioSize += avpacket.size\r\n        this.context.lasttimestamp = avRescaleQ2(avpacket.pts, addressof(avpacket.timeBase), AV_MILLI_TIME_BASE_Q)\r\n      }\r\n      this.context.datasize += avpacket.size\r\n    }\r\n    else if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_VIDEO) {\r\n\r\n      if ((stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n        || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n        || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n      ) && (avpacket.flags & AVPacketFlags.AV_PKT_FLAG_H26X_ANNEXB)\r\n      ) {\r\n        this.annexb2AvccFilter.sendAVPacket(avpacket)\r\n        this.annexb2AvccFilter.receiveAVPacket(this.avpacket)\r\n        avpacket = this.avpacket\r\n      }\r\n\r\n      const keyframePos = formatContext.ioWriter.getPos()\r\n\r\n      // 如果有 extradata，先写 extradata 为一个 tag\r\n      const element = getAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA)\r\n      if (element) {\r\n        const extradata = mapUint8Array(element.data, element.size)\r\n        if (this.isNewExtradata(extradata, stream)\r\n          && (this.isEnhancedStream(stream)\r\n            || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n            || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n            || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MPEG4\r\n          )\r\n        ) {\r\n          oflv.writeTag(\r\n            formatContext.ioWriter,\r\n            FlvTag.VIDEO,\r\n            avRescaleQ2(avpacket.dts, addressof(avpacket.timeBase), AV_MILLI_TIME_BASE_Q),\r\n            (ioWriter) => {\r\n              oflv.writeVideoHeader(\r\n                ioWriter,\r\n                stream,\r\n                this.context,\r\n                this.isEnhancedStream(stream),\r\n                this.isEnhancedStream(stream) ? VideoPacketType.SequenceStart : AVCPacketType.AVC_SEQUENCE_HEADER,\r\n                avpacket.flags,\r\n                avpacket.dts,\r\n                addressof(avpacket.timeBase)\r\n              )\r\n            },\r\n            extradata,\r\n            (previousTagSize) => {\r\n              this.context.filesize += previousTagSize + 4\r\n            }\r\n          )\r\n          if (!streamContext.trackId) {\r\n            this.context.videosize += extradata.length\r\n          }\r\n          this.context.datasize += extradata.length\r\n        }\r\n      }\r\n\r\n      if (avpacket.size) {\r\n        let ct = 0\r\n        if (avpacket.pts !== NOPTS_VALUE_BIGINT) {\r\n          ct = static_cast<int32>(avRescaleQ2(avpacket.pts - avpacket.dts, addressof(avpacket.timeBase), AV_MILLI_TIME_BASE_Q))\r\n        }\r\n\r\n        const packetType = avpacket.dts !== avpacket.pts\r\n          && (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n            || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n            || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n          )\r\n          ? VideoPacketType.CodedFrames\r\n          : VideoPacketType.CodedFramesX\r\n\r\n        // 不使用 oflv.writeTag，这个方法太慢，引擎无法内联优化，只适合一两次调用那种\r\n        // 这里直接写\r\n        this.headerWriter.reset()\r\n        this.headerBuffers.length = 0\r\n        oflv.writeVideoHeader(\r\n          this.headerWriter,\r\n          stream,\r\n          this.context,\r\n          this.isEnhancedStream(stream),\r\n          this.isEnhancedStream(stream) ? packetType : AVCPacketType.AVC_NALU,\r\n          avpacket.flags,\r\n          avpacket.dts,\r\n          addressof(avpacket.timeBase),\r\n          ct\r\n        )\r\n        this.headerWriter.flush()\r\n        const header = concatTypeArray(Uint8Array, this.headerBuffers)\r\n        const now = formatContext.ioWriter.getPos()\r\n        // tagType\r\n        formatContext.ioWriter.writeUint8(FlvTag.VIDEO)\r\n        // size\r\n        formatContext.ioWriter.writeUint24(avpacket.size + header.length)\r\n        // timestamp\r\n        const timestamp = avRescaleQ2(avpacket.dts, addressof(avpacket.timeBase), AV_MILLI_TIME_BASE_Q)\r\n        formatContext.ioWriter.writeUint24(Number(timestamp & 0xffffffn))\r\n        formatContext.ioWriter.writeUint8(Number((timestamp >> 24n) & 0xffn))\r\n        // streamId always 0\r\n        formatContext.ioWriter.writeUint24(0)\r\n        formatContext.ioWriter.writeBuffer(header)\r\n        formatContext.ioWriter.writeBuffer(mapUint8Array(avpacket.data, reinterpret_cast<size>(avpacket.size)))\r\n        const previousTagSize = Number(formatContext.ioWriter.getPos() - now)\r\n        formatContext.ioWriter.writeUint32(previousTagSize)\r\n        this.context.filesize += previousTagSize + 4\r\n\r\n        if (!streamContext.trackId) {\r\n          this.context.frameCount++\r\n          this.context.videosize += avpacket.size\r\n          this.context.lasttimestamp = avRescaleQ2(avpacket.pts, addressof(avpacket.timeBase), AV_MILLI_TIME_BASE_Q)\r\n        }\r\n        this.context.datasize += avpacket.size\r\n        if (avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY) {\r\n          if (this.context.firstKeyframePositionWrote || !this.context.videoMetadataWrote) {\r\n            this.context.lastkeyframetimestamp = avRescaleQ2(avpacket.pts, addressof(avpacket.timeBase), AV_MILLI_TIME_BASE_Q)\r\n            this.context.lastkeyframelocation = Number(keyframePos)\r\n            this.context.keyFrameTimes.push(Number((Number(this.context.lastkeyframetimestamp) * avQ2D(AV_MILLI_TIME_BASE_Q)).toFixed(2)))\r\n            this.context.keyframeFilePositions.push(this.context.lastkeyframelocation)\r\n          }\r\n          else {\r\n            this.context.firstKeyframePositionWrote = true\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return 0\r\n  }\r\n\r\n  public writeTrailer(formatContext: AVOFormatContext): number {\r\n\r\n    formatContext.streams.forEach((stream) => {\r\n      const streamContext = stream.privData as FlvStreamContext\r\n      if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n        || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n        || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MPEG4\r\n        || this.isEnhancedStream(stream)\r\n      ) {\r\n        oflv.writeTag(\r\n          formatContext.ioWriter,\r\n          FlvTag.VIDEO,\r\n          this.context.lasttimestamp,\r\n          (ioWriter) => {\r\n            oflv.writeVideoHeader(\r\n              ioWriter,\r\n              stream,\r\n              this.context,\r\n              this.isEnhancedStream(stream),\r\n              this.isEnhancedStream(stream)\r\n                ? (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_AUDIO\r\n                  ? AudioPacketType.SequenceEnd\r\n                  : VideoPacketType.SequenceEnd\r\n                )\r\n                : AVCPacketType.AVC_END_OF_ENQUENCE,\r\n              AVPacketFlags.AV_PKT_FLAG_END,\r\n              this.context.lasttimestamp,\r\n              nullptr\r\n            )\r\n          },\r\n          undefined,\r\n          (previousTagSize) => {\r\n            this.context.filesize += previousTagSize + 4\r\n          }\r\n        )\r\n        if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_VIDEO && !streamContext.trackId) {\r\n          this.script.onMetaData.canSeekToEnd = true\r\n        }\r\n      }\r\n    })\r\n\r\n    if (!this.context.scriptWrote) {\r\n      formatContext.ioWriter.flush()\r\n\r\n      this.script.onMetaData.filesize = this.context.filesize\r\n      this.script.onMetaData.audiosize = this.context.audioSize\r\n      this.script.onMetaData.videosize = this.context.videosize\r\n      this.script.onMetaData.datasize = this.context.datasize\r\n      this.script.onMetaData.lasttimestamp = this.context.lasttimestamp\r\n\r\n      if (this.options.addKeyframePositions) {\r\n        this.script.onMetaData.lastkeyframetimestamp = this.context.lastkeyframetimestamp\r\n        this.script.onMetaData.lastkeyframelocation = this.context.lastkeyframelocation\r\n        if (this.context.keyFrameTimes.length > 1) {\r\n          this.script.onMetaData.hasKeyframes = true\r\n          this.script.onMetaData.keyframes = {\r\n            filepositions: this.context.keyframeFilePositions,\r\n            times: this.context.keyFrameTimes\r\n          }\r\n        }\r\n        else {\r\n          this.script.onMetaData.hasKeyframes = false\r\n        }\r\n      }\r\n      else {\r\n        this.script.onMetaData.hasKeyframes = false\r\n      }\r\n\r\n      this.script.onMetaData.duration = Number(this.context.lasttimestamp) / 1000\r\n      this.script.onMetaData.audiodatarate = this.context.audioSize / this.script.onMetaData.duration / 1000 * 8\r\n      this.script.onMetaData.videodatarate = this.context.videosize / this.script.onMetaData.duration / 1000 * 8\r\n      this.script.onMetaData.framerate = this.context.frameCount / this.script.onMetaData.duration\r\n\r\n      const size = this.script.computeSize()\r\n\r\n      array.each(this.context.keyframeFilePositions, (item, index) => {\r\n        this.context.keyframeFilePositions[index] = item + 11 + size + 4\r\n      })\r\n\r\n      if (this.script.onMetaData.keyframes) {\r\n        this.script.onMetaData.keyframes.filepositions = this.context.keyframeFilePositions\r\n      }\r\n\r\n      this.context.filesize += 11 + size + 4\r\n      this.script.onMetaData.filesize = this.context.filesize\r\n\r\n      const buffers = []\r\n      const oldFlush = formatContext.ioWriter.onFlush\r\n\r\n      formatContext.ioWriter.onFlush = (buffer) => {\r\n        buffers.push(buffer.slice())\r\n        return 0\r\n      }\r\n\r\n      this.script.write(formatContext.ioWriter)\r\n\r\n      formatContext.ioWriter.flush()\r\n      formatContext.ioWriter.onFlush = oldFlush\r\n      const data = concatTypeArray(Uint8Array, buffers)\r\n      if (oldFlush) {\r\n        oldFlush(data, 13n)\r\n      }\r\n    }\r\n    else {\r\n      formatContext.ioWriter.flush()\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  public flush(context: AVOFormatContext): number {\r\n    context.ioWriter.flush()\r\n    return 0\r\n  }\r\n\r\n}\r\n","/*\r\n * libmedia flv header format\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\n\r\nexport default class FlvHeader {\r\n  /**\r\n   * 3 bytes 签名\r\n   */\r\n  public signature: string\r\n\r\n  /**\r\n   * 1 bytes 版本，比如 0x01 表示 FLV 版本 1\r\n   */\r\n  public version: number\r\n\r\n  /**\r\n   * 1 bytes 第一位标记是否有视频，第 4 位标记是否有音频，其余位保留\r\n   */\r\n  public flags: number\r\n\r\n  /**\r\n   * 4 bytes FLV header 的大小，单位是字节，目前是 9\r\n   */\r\n  public dataOffset: number\r\n\r\n  /**\r\n   * 是否有视频\r\n   */\r\n  public hasVideo: boolean\r\n\r\n  /**\r\n   * 是否有音频\r\n   */\r\n  public hasAudio: boolean\r\n\r\n  constructor() {\r\n\r\n    this.signature = 'FLV'\r\n    this.version = 1\r\n    this.flags = 0\r\n    this.dataOffset = 9\r\n\r\n    this.hasAudio = false\r\n    this.hasVideo = false\r\n  }\r\n\r\n  public async read(ioReader: IOReader) {\r\n    this.signature = await ioReader.readString(3)\r\n    this.version = await ioReader.readUint8()\r\n    this.flags = await ioReader.readUint8()\r\n    this.dataOffset = await ioReader.readUint32()\r\n\r\n    this.hasAudio = !!(this.flags & 0x04)\r\n    this.hasVideo = !!(this.flags & 0x01)\r\n  }\r\n\r\n  public write(ioWriter: IOWriter) {\r\n    this.flags = 0\r\n    if (this.hasAudio) {\r\n      this.flags |= 0x04\r\n    }\r\n    if (this.hasVideo) {\r\n      this.flags |= 0x01\r\n    }\r\n\r\n    ioWriter.writeString(this.signature)\r\n    ioWriter.writeUint8(this.version)\r\n    ioWriter.writeUint8(this.flags)\r\n    ioWriter.writeUint32(this.dataOffset)\r\n  }\r\n}\r\n","/*\r\n * libmedia flv script tag format\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport IOWriterSync from 'common/io/IOWriterSync'\r\n\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\nimport * as logger from 'common/util/logger'\r\nimport { FlvMetaData } from './type'\r\nimport { FlvTag } from './flv'\r\n\r\nimport * as flv from './oflv'\r\nimport * as errorType from 'avutil/error'\r\nimport { parseValue, writeValue } from 'avutil/util/amf'\r\n\r\nexport default class FlvScriptTag {\r\n\r\n  public onMetaData: Partial<FlvMetaData>\r\n\r\n  constructor() {\r\n    this.onMetaData = {\r\n      canSeekToEnd: false\r\n    }\r\n  }\r\n\r\n  public async read(ioReader: IOReader, size: number) {\r\n    const now = ioReader.getPos()\r\n    const endPos = now + static_cast<int64>(size)\r\n    const key = await parseValue(ioReader, endPos)\r\n    const value = await parseValue(ioReader, endPos)\r\n    this[key] = value\r\n\r\n    if (endPos > ioReader.getPos()) {\r\n      await ioReader.skip(static_cast<int32>(endPos - ioReader.getPos()))\r\n    }\r\n\r\n    const tagSize = Number(ioReader.getPos() - now)\r\n    const prev = await ioReader.readUint32()\r\n\r\n    if (tagSize + 11 !== prev) {\r\n      logger.warn(`script size not match, size: ${tagSize + 11}, previousTagSize: ${prev}`)\r\n\r\n      return errorType.DATA_INVALID\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  public computeSize() {\r\n    const cache = []\r\n    const cacheWriter = new IOWriterSync()\r\n    cacheWriter.onFlush = (data) => {\r\n      cache.push(data.slice())\r\n      return 0\r\n    }\r\n    writeValue(cacheWriter, 'onMetaData')\r\n    writeValue(cacheWriter, this.onMetaData)\r\n\r\n    cacheWriter.flush()\r\n\r\n    const buffer = concatTypeArray(Uint8Array, cache)\r\n\r\n    return buffer.length\r\n  }\r\n\r\n  public write(ioWriter: IOWriterSync) {\r\n    if (this.onMetaData) {\r\n      const cache = []\r\n      const cacheWriter = new IOWriterSync()\r\n      cacheWriter.onFlush = (data) => {\r\n        cache.push(data.slice())\r\n        return 0\r\n      }\r\n\r\n      writeValue(cacheWriter, 'onMetaData')\r\n      writeValue(cacheWriter, this.onMetaData)\r\n\r\n      cacheWriter.flush()\r\n\r\n      const buffer = concatTypeArray(Uint8Array, cache)\r\n      flv.writeTag(ioWriter, FlvTag.SCRIPT, 0n, undefined, buffer)\r\n    }\r\n  }\r\n\r\n  public dts2Position(dts: number) {\r\n    if (this.canSeek()) {\r\n      let index = -1\r\n      const times = this.onMetaData.keyframes.times\r\n      const position = this.onMetaData.keyframes.filepositions\r\n\r\n      let i: number\r\n      for (i = 0; i < times.length; i++) {\r\n        if (times[i] === dts) {\r\n          index = i\r\n          break\r\n        }\r\n        else if (times[i] > dts) {\r\n          index = Math.max(i - 1, 0)\r\n          break\r\n        }\r\n      }\r\n      if (i && i === times.length) {\r\n        index = times.length - 1\r\n      }\r\n      return {\r\n        pos: position[index],\r\n        dts: times[index]\r\n      }\r\n    }\r\n\r\n    return {\r\n      pos: -1,\r\n      dts: -1\r\n    }\r\n  }\r\n\r\n  public position2DTS(pos: number) {\r\n    if (this.canSeek()) {\r\n      let index = -1\r\n      const times = this.onMetaData.keyframes.times\r\n      const position = this.onMetaData.keyframes.filepositions\r\n      let i = 0\r\n      for (i = 0; i < position.length; i++) {\r\n        if (position[i] > pos) {\r\n          index = i\r\n          break\r\n        }\r\n      }\r\n      if (i === position.length) {\r\n        return this.onMetaData.duration ?? times[times.length - 1]\r\n      }\r\n      return times[index]\r\n    }\r\n    return -1\r\n  }\r\n\r\n  public canSeek(): boolean {\r\n    return !!(this.onMetaData.keyframes\r\n      && this.onMetaData.keyframes.filepositions\r\n      && this.onMetaData.keyframes.filepositions.length)\r\n  }\r\n}\r\n","/*\r\n * libmedia flv defined\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVCodecID } from 'avutil/codec'\r\n\r\nexport const enum FlvTag {\r\n  AUDIO = 8,\r\n  VIDEO = 9,\r\n  SCRIPT = 18,\r\n  SCRIPT_AMF3 = 15\r\n}\r\n\r\nexport const enum VideoFrameType {\r\n  // a seekable frame\r\n  KeyFrame = 1,\r\n  // a non - seekable frame\r\n  InterFrame = 2,\r\n  // H.263 only\r\n  DisposableInterFrame = 3,\r\n  // reserved for server use only\r\n  GeneratedKeyFrame = 4,\r\n  // If videoFrameType is not ignored and is set to VideoFrameType.Command,\r\n  // the payload will not contain video data. Instead, (Ex)VideoTagHeader\r\n  // will be followed by a UI8, representing the following meanings:\r\n  //\r\n  // 0 = Start of client-side seeking video frame sequence\r\n  // 1 = End of client-side seeking video frame sequence\r\n  //\r\n  // frameType is ignored if videoPacketType is VideoPacketType.MetaData\r\n  Command = 5\r\n}\r\n\r\nexport const enum VideoCommand {\r\n  StartSeek = 0,\r\n  EndSeek = 1\r\n}\r\n\r\nexport const enum VideoPacketType {\r\n  SequenceStart = 0,\r\n  CodedFrames = 1,\r\n  SequenceEnd = 2,\r\n  // CompositionTime Offset is implicitly set to zero. This optimization\r\n  // avoids transmitting an SI24 composition time value of zero over the wire.\r\n  // See the ExVideoTagBody section below for corresponding pseudocode.\r\n  CodedFramesX = 3,\r\n  // ExVideoTagBody does not contain video data. Instead, it contains\r\n  // an AMF-encoded metadata. Refer to the Metadata Frame section for\r\n  // an illustration of its usage. For example, the metadata might include\r\n  // HDR information. This also enables future possibilities for expressing\r\n  // additional metadata meant for subsequent video sequences.\r\n  //\r\n  // If VideoPacketType.Metadata is present, the FrameType flags\r\n  // at the top of this table should be ignored.\r\n  Metadata = 4,\r\n  // Carriage of bitstream in MPEG-2 TS format\r\n  //\r\n  // PacketTypeSequenceStart and PacketTypeMPEG2TSSequenceStart\r\n  // are mutually exclusive\r\n  MPEG2TSSequenceStart = 5,\r\n  // Turns on video multiTrack mode\r\n  MultiTrack = 6,\r\n  // ModEx is a special signal within the VideoPacketType enum that\r\n  // serves to both modify and extend the behavior of the current packet.\r\n  // When this signal is encountered, it indicates the presence of\r\n  // additional modifiers or extensions, requiring further processing to\r\n  // adjust or augment the packet's functionality. ModEx can be used to\r\n  // introduce new capabilities or modify existing ones, such as\r\n  // enabling support for high-precision timestamps or other advanced\r\n  // features that enhance the base packet structure.\r\n  ModEx = 7\r\n}\r\n\r\nexport const enum AudioPacketType {\r\n  SequenceStart = 0,\r\n  CodedFrames = 1,\r\n  SequenceEnd = 2,\r\n  MultichannelConfig = 4,\r\n  MultiTrack = 5,\r\n  ModEx = 7\r\n}\r\n\r\nexport const enum VideoPacketModExType {\r\n  TimestampOffsetNano = 0\r\n}\r\n\r\nexport const enum AudioPacketModExType {\r\n  TimestampOffsetNano = 0\r\n}\r\n\r\nexport const enum AVMultiTrackType {\r\n  OneTrack = 0,\r\n  ManyTracks,\r\n  ManyTracksManyCodecs\r\n}\r\n\r\nexport const enum AVCPacketType {\r\n  AVC_SEQUENCE_HEADER,\r\n  AVC_NALU,\r\n  AVC_END_OF_ENQUENCE\r\n}\r\n\r\nexport const enum AACPacketType {\r\n  AAC_SEQUENCE_HEADER,\r\n  AAC_RAW\r\n}\r\n\r\nexport const enum AudioChannelOrder {\r\n  Unspecified = 0,\r\n  Native = 1,\r\n  Custom = 2\r\n}\r\n\r\nexport const AVCodecID2FlvCodecType = {\r\n  [AVCodecID.AV_CODEC_ID_PCM_U8]: 0,\r\n  [AVCodecID.AV_CODEC_ID_PCM_S16LE]: 3,\r\n  [AVCodecID.AV_CODEC_ID_AAC]: 10,\r\n  [AVCodecID.AV_CODEC_ID_MP3]: 2,\r\n  [AVCodecID.AV_CODEC_ID_SPEEX]: 11,\r\n  [AVCodecID.AV_CODEC_ID_ADPCM_SWF]: 1,\r\n  [AVCodecID.AV_CODEC_ID_NELLYMOSER]: 6,\r\n  [AVCodecID.AV_CODEC_ID_PCM_ALAW]: 7,\r\n  [AVCodecID.AV_CODEC_ID_PCM_MULAW]: 8,\r\n\r\n  [AVCodecID.AV_CODEC_ID_H264]: 7,\r\n  [AVCodecID.AV_CODEC_ID_HEVC]: 12,\r\n  // [AVCodecID.AV_CODEC_ID_VVC]: 13,\r\n  [AVCodecID.AV_CODEC_ID_MPEG4]: 9,\r\n  [AVCodecID.AV_CODEC_ID_H263]: 2,\r\n  [AVCodecID.AV_CODEC_ID_FLASHSV]: 3,\r\n  [AVCodecID.AV_CODEC_ID_VP6F]: 4,\r\n  [AVCodecID.AV_CODEC_ID_VP6A]: 5,\r\n  [AVCodecID.AV_CODEC_ID_FLASHSV2]: 6\r\n}\r\n\r\nexport const FlvAudioCodecType2AVCodecID = {\r\n  10: AVCodecID.AV_CODEC_ID_AAC,\r\n  2: AVCodecID.AV_CODEC_ID_MP3,\r\n  11: AVCodecID.AV_CODEC_ID_SPEEX,\r\n\r\n  1: AVCodecID.AV_CODEC_ID_ADPCM_SWF,\r\n  4: AVCodecID.AV_CODEC_ID_NELLYMOSER,\r\n  5: AVCodecID.AV_CODEC_ID_NELLYMOSER,\r\n  6: AVCodecID.AV_CODEC_ID_NELLYMOSER,\r\n  7: AVCodecID.AV_CODEC_ID_PCM_ALAW,\r\n  8: AVCodecID.AV_CODEC_ID_PCM_MULAW\r\n}\r\n\r\nexport const FlvVideoCodecType2AVCodecID = {\r\n  7: AVCodecID.AV_CODEC_ID_H264,\r\n  12: AVCodecID.AV_CODEC_ID_HEVC,\r\n  // 13: AVCodecID.AV_CODEC_ID_VVC,\r\n  9: AVCodecID.AV_CODEC_ID_MPEG4,\r\n\r\n  2: AVCodecID.AV_CODEC_ID_H263,\r\n  3: AVCodecID.AV_CODEC_ID_FLASHSV,\r\n  4: AVCodecID.AV_CODEC_ID_VP6F,\r\n  5: AVCodecID.AV_CODEC_ID_VP6A,\r\n  6: AVCodecID.AV_CODEC_ID_FLASHSV2\r\n}\r\n\r\nexport const AVCodecID2FlvCodecTag = {\r\n  [AVCodecID.AV_CODEC_ID_H264]: 'avc1',\r\n  [AVCodecID.AV_CODEC_ID_HEVC]: 'hvc1',\r\n  [AVCodecID.AV_CODEC_ID_VVC]: 'vvc1',\r\n  [AVCodecID.AV_CODEC_ID_VP8]: 'vp08',\r\n  [AVCodecID.AV_CODEC_ID_VP9]: 'vp09',\r\n  [AVCodecID.AV_CODEC_ID_AV1]: 'av01',\r\n\r\n  [AVCodecID.AV_CODEC_ID_AC3]: 'ac-3',\r\n  [AVCodecID.AV_CODEC_ID_EAC3]: 'ec-3',\r\n  [AVCodecID.AV_CODEC_ID_OPUS]: 'Opus',\r\n  [AVCodecID.AV_CODEC_ID_FLAC]: 'fLaC',\r\n  [AVCodecID.AV_CODEC_ID_MP3]: '.mp3',\r\n  [AVCodecID.AV_CODEC_ID_AAC]: 'mp4a'\r\n}\r\n","/*\r\n * libmedia flv encode\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVCodecID } from 'avutil/codec'\r\nimport { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport IOWriterSync from 'common/io/IOWriterSync'\r\nimport { AudioPacketModExType, AudioPacketType, AVCodecID2FlvCodecTag, AVCodecID2FlvCodecType, AVMultiTrackType, FlvTag, VideoFrameType, VideoPacketModExType, VideoPacketType } from './flv'\r\nimport { FlvContext, FlvStreamContext } from './type'\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport { avRescaleQ2 } from 'avutil/util/rational'\r\nimport { AV_MILLI_TIME_BASE_Q, AV_NANO_TIME_BASE_Q } from 'avutil/constant'\r\nimport mktag from '../../function/mktag'\r\nimport * as is from 'common/util/is'\r\nimport AVStream from 'avutil/AVStream'\r\n\r\nexport function updateSize(ioWriter: IOWriterSync, pos: int64, size: int32) {\r\n  const now = ioWriter.getPos()\r\n  const pointer = ioWriter.getPointer()\r\n  const minPos = now - static_cast<int64>(pointer)\r\n  if (pos < now && pos >= minPos) {\r\n    ioWriter.seekInline(pointer + Number(pos - now))\r\n    ioWriter.writeUint24(size)\r\n    ioWriter.seekInline(pointer)\r\n  }\r\n  else {\r\n    ioWriter.seek(pos)\r\n    ioWriter.writeUint24(size)\r\n    ioWriter.seek(now)\r\n  }\r\n}\r\n\r\nexport function writeTag(\r\n  ioWriter: IOWriterSync,\r\n  type: FlvTag,\r\n  timestamp: int64,\r\n  dataHeader?: (ioWriter: IOWriterSync) => void,\r\n  data?: Uint8Array | ((ioWriter: IOWriterSync) => void),\r\n  previousTagSizeCallback?: (previousTagSize: int32) => void\r\n) {\r\n  ioWriter.flush()\r\n  // tagType\r\n  ioWriter.writeUint8(type)\r\n  const sizePos = ioWriter.getPos()\r\n  // size\r\n  ioWriter.writeUint24(0)\r\n  // timestamp\r\n  ioWriter.writeUint24(Number(timestamp & 0xffffffn))\r\n  // timestampExtended\r\n  ioWriter.writeUint8(Number((timestamp >> 24n) & 0xffn))\r\n  // streamId always 0\r\n  ioWriter.writeUint24(0)\r\n\r\n  const dataPos = ioWriter.getPos()\r\n  if (dataHeader) {\r\n    dataHeader(ioWriter)\r\n  }\r\n  if (is.func(data)) {\r\n    data(ioWriter)\r\n    updateSize(ioWriter, sizePos, Number(ioWriter.getPos() - dataPos))\r\n  }\r\n  else if (data) {\r\n    updateSize(ioWriter, sizePos, data.length + Number(ioWriter.getPos() - dataPos))\r\n    ioWriter.writeBuffer(data)\r\n  }\r\n  const previousTagSize = Number(ioWriter.getPos() - sizePos) + 1\r\n  if (previousTagSizeCallback) {\r\n    previousTagSizeCallback(previousTagSize)\r\n  }\r\n  ioWriter.writeUint32(previousTagSize)\r\n}\r\n\r\nexport function isEnhancedCodecId(codecId: AVCodecID) {\r\n  if (codecId === AVCodecID.AV_CODEC_ID_AAC\r\n    || codecId === AVCodecID.AV_CODEC_ID_H264\r\n    || codecId === AVCodecID.AV_CODEC_ID_MP3\r\n    || codecId === AVCodecID.AV_CODEC_ID_MPEG4\r\n  ) {\r\n    return false\r\n  }\r\n  return !!AVCodecID2FlvCodecTag[codecId]\r\n}\r\n\r\nexport function writeVideoHeader(\r\n  ioWriter: IOWriterSync,\r\n  stream: AVStream,\r\n  context: FlvContext,\r\n  enhanced: boolean,\r\n  type: uint8,\r\n  flags: AVPacketFlags,\r\n  timestamp: int64,\r\n  timeBase: pointer<Rational>,\r\n  ct: int32 = 0\r\n) {\r\n\r\n  const streamContext = stream.privData as FlvStreamContext\r\n\r\n  let header = enhanced ? 0x80 : 0\r\n  header |= ((flags & AVPacketFlags.AV_PKT_FLAG_KEY) ? VideoFrameType.KeyFrame : VideoFrameType.InterFrame) << 4\r\n\r\n  if (enhanced) {\r\n    if (context.enableNanoTimestamp && timeBase) {\r\n      const nano = avRescaleQ2(timestamp, timeBase, AV_NANO_TIME_BASE_Q)\r\n      const mill = avRescaleQ2(timestamp, timeBase, AV_MILLI_TIME_BASE_Q)\r\n      const offset = nano - mill * 1000000n\r\n      if (offset) {\r\n        header |= VideoPacketType.ModEx\r\n        ioWriter.writeUint8(header)\r\n        // modExSize - 1\r\n        ioWriter.writeUint8(2)\r\n        ioWriter.writeUint24(static_cast<int32>(offset))\r\n        header = VideoPacketModExType.TimestampOffsetNano << 4\r\n      }\r\n    }\r\n    if (context.multiVideoTracks) {\r\n      header |= VideoPacketType.MultiTrack\r\n      ioWriter.writeUint8(header)\r\n      header = AVMultiTrackType.OneTrack << 4\r\n    }\r\n    header |= type\r\n    ioWriter.writeUint8(header)\r\n    ioWriter.writeUint32(mktag(AVCodecID2FlvCodecTag[stream.codecpar.codecId]))\r\n    if (context.multiVideoTracks) {\r\n      ioWriter.writeUint8(streamContext.trackId)\r\n    }\r\n    if (type === VideoPacketType.CodedFrames) {\r\n      ioWriter.writeInt24(ct)\r\n    }\r\n  }\r\n  else {\r\n    header |= AVCodecID2FlvCodecType[stream.codecpar.codecId] & 0x0f\r\n    ioWriter.writeUint8(header)\r\n    if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n      || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n      || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n      || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MPEG4\r\n    ) {\r\n      ioWriter.writeUint8(type)\r\n      ioWriter.writeInt24(ct)\r\n    }\r\n  }\r\n}\r\n\r\nexport function writeAudioHeader(\r\n  ioWriter: IOWriterSync,\r\n  stream: AVStream,\r\n  context: FlvContext,\r\n  enhanced: boolean,\r\n  type: uint8,\r\n  timestamp: int64,\r\n  timeBase: pointer<Rational>\r\n) {\r\n  const streamContext = stream.privData as FlvStreamContext\r\n\r\n  let header = (enhanced ? 9 : (AVCodecID2FlvCodecType[stream.codecpar.codecId] & 0x0f)) << 4\r\n\r\n  if (enhanced) {\r\n    if (context.enableNanoTimestamp) {\r\n      const nano = avRescaleQ2(timestamp, timeBase, AV_NANO_TIME_BASE_Q)\r\n      const mill = avRescaleQ2(timestamp, timeBase, AV_MILLI_TIME_BASE_Q)\r\n      const offset = nano - mill * 1000000n\r\n      if (offset) {\r\n        header |= AudioPacketType.ModEx\r\n        ioWriter.writeUint8(header)\r\n        // modExSize - 1\r\n        ioWriter.writeUint8(2)\r\n        ioWriter.writeUint24(static_cast<int32>(offset))\r\n        header = AudioPacketModExType.TimestampOffsetNano << 4\r\n      }\r\n    }\r\n    if (context.multiVideoTracks) {\r\n      header |= AudioPacketType.MultiTrack\r\n      ioWriter.writeUint8(header)\r\n      header = AVMultiTrackType.OneTrack << 4\r\n    }\r\n    header |= type\r\n    ioWriter.writeUint8(header)\r\n    ioWriter.writeUint32(mktag(AVCodecID2FlvCodecTag[stream.codecpar.codecId]))\r\n    if (context.multiVideoTracks) {\r\n      ioWriter.writeUint8(streamContext.trackId)\r\n    }\r\n  }\r\n  else {\r\n    /**\r\n     * SoundType 声道类型，对 Nellymoser 来说，永远是单声道；对 AAC 来说，永远是双声道\r\n     * - 0 sndMono 单声道\r\n     * - 1 sndStereo 双声道\r\n     */\r\n    if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC || stream.codecpar.chLayout.nbChannels > 1) {\r\n      header |= 0x01\r\n    }\r\n    /**\r\n     * SoundSize 采样精度，对于压缩过的音频，永远是 16 位\r\n     * - 0 snd8Bit\r\n     * - 1 snd16Bit\r\n     */\r\n    if (stream.codecpar.codecId !== AVCodecID.AV_CODEC_ID_PCM_U8) {\r\n      header |= 0x02\r\n    }\r\n    /**\r\n     * SoundRate 采样率，对 AAC 来说，永远等于 3\r\n     * - 0 5.5-kHz\r\n     * - 1 1-kHz\r\n     * - 2 22-kHz\r\n     * - 3 44-kHz\r\n     */\r\n    if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC || stream.codecpar.sampleRate >= 44000) {\r\n      header |= 0x0c\r\n    }\r\n    else if (stream.codecpar.sampleRate >= 22000) {\r\n      header |= 0x08\r\n    }\r\n    else if (stream.codecpar.sampleRate >= 11000) {\r\n      header |= 0x04\r\n    }\r\n    ioWriter.writeUint8(header)\r\n    if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC) {\r\n      ioWriter.writeUint8(type)\r\n    }\r\n  }\r\n}\r\n","/*\r\n * libmedia string tag to uint32 in big end\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as logger from 'common/util/logger'\r\n\r\nexport default function mktag(tag: string): number {\r\n  if (tag.length !== 4) {\r\n    logger.warn(`tag length is not 4, tag: ${tag}`)\r\n  }\r\n\r\n  let value = 0\r\n  for (let i = 0; i < 4; i++) {\r\n    value = (value << 8) | tag.charCodeAt(i)\r\n  }\r\n\r\n  return value\r\n}\r\n","/*\r\n * libmedia vvc util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as array from 'common/util/array'\r\nimport AVPacket, { AVPacketFlags } from '../struct/avpacket'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport { AVPacketSideDataType } from '../codec'\r\nimport BitReader from 'common/io/BitReader'\r\nimport AVStream from '../AVStream'\r\nimport { mapUint8Array } from 'cheap/std/memory'\r\nimport * as naluUtil from '../util/nalu'\r\nimport { avMalloc } from '../util/mem'\r\nimport * as expgolomb from '../util/expgolomb'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport BitWriter from 'common/io/BitWriter'\r\nimport { Data } from 'common/types/type'\r\nimport * as intread from '../util/intread'\r\nimport * as intwrite from '../util/intwrite'\r\nimport { AVPixelFormat } from '../pixfmt'\r\n\r\nconst NALULengthSizeMinusOne = 3\r\n\r\nexport const enum VVCNaluType {\r\n  kTRAIL_NUT      = 0,\r\n  kSTSA_NUT       = 1,\r\n  kRADL_NUT       = 2,\r\n  kRASL_NUT       = 3,\r\n  kRSV_VCL_4      = 4,\r\n  kRSV_VCL_5      = 5,\r\n  kRSV_VCL_6      = 6,\r\n  kIDR_W_RADL     = 7,\r\n  kIDR_N_LP       = 8,\r\n  kCRA_NUT        = 9,\r\n  kGDR_NUT        = 10,\r\n  kRSV_IRAP_11    = 11,\r\n  kOPI_NUT        = 12,\r\n  kDCI_NUT        = 13,\r\n  kVPS_NUT        = 14,\r\n  kSPS_NUT        = 15,\r\n  kPPS_NUT        = 16,\r\n  kPREFIX_APS_NUT = 17,\r\n  kSUFFIX_APS_NUT = 18,\r\n  kPH_NUT         = 19,\r\n  kAUD_NUT        = 20,\r\n  kEOS_NUT        = 21,\r\n  kEOB_NUT        = 22,\r\n  kPREFIX_SEI_NUT = 23,\r\n  kSUFFIX_SEI_NUT = 24,\r\n  kFD_NUT         = 25,\r\n  kRSV_NVCL_26    = 26,\r\n  kRSV_NVCL_27    = 27,\r\n  kUNSPEC_28      = 28,\r\n  kUNSPEC_29      = 29,\r\n  kUNSPEC_30      = 30,\r\n  kUNSPEC_31      = 31,\r\n}\r\n\r\nexport const enum VVCSliceType {\r\n  kSliceNone = -1,\r\n  kSliceB = 0,\r\n  kSliceP = 1,\r\n  kSliceI = 2\r\n}\r\n\r\nexport const enum VVCAPSType {\r\n  kALF     = 0,\r\n  kLMCS    = 1,\r\n  kSCALING = 2\r\n}\r\n\r\n/* eslint-disable camelcase */\r\nfunction parsePTL(bitReader: BitReader) {\r\n  const olsIdx = bitReader.readU(9)\r\n  const numSublayers = bitReader.readU(3)\r\n  const constantFrameRate = bitReader.readU(2)\r\n  const chromaFormatIdc = bitReader.readU(2)\r\n  const bitDepthMinus8 = bitReader.readU(3)\r\n  bitReader.readU(5)\r\n\r\n  // VvcPTLRecord\r\n  bitReader.readU(2)\r\n  const num_bytes_constraint_info = bitReader.readU(6)\r\n  const generalProfileIdc = bitReader.readU(7)\r\n  const generalTierFlag = bitReader.readU(1)\r\n  const generalLevelIdc = bitReader.readU(8)\r\n  const ptlFrameOnlyConstraintFlag = bitReader.readU(1)\r\n  const ptlMultilayerEnabledFlag = bitReader.readU(1)\r\n  const generalConstraintInfo = []\r\n  const sublayerLevelIdc = []\r\n\r\n  if (num_bytes_constraint_info) {\r\n    for (let i = 0; i < num_bytes_constraint_info - 1; i++) {\r\n      generalConstraintInfo[i] = bitReader.readU(8)\r\n    }\r\n    generalConstraintInfo[num_bytes_constraint_info - 1] = bitReader.readU(6)\r\n  }\r\n  else {\r\n    bitReader.readU(6)\r\n  }\r\n  if (numSublayers > 1) {\r\n    let ptl_sublayer_present_mask = 0\r\n    for (let j = numSublayers - 2; j >= 0; --j) {\r\n      const val = bitReader.readU(1)\r\n      ptl_sublayer_present_mask |= val << j\r\n    }\r\n    for (let j = numSublayers; j <= 8 && numSublayers > 1; ++j) {\r\n      bitReader.readU(1)\r\n    }\r\n\r\n    for (let j = numSublayers - 2; j >= 0; --j) {\r\n      if (ptl_sublayer_present_mask & (1 << j)) {\r\n        sublayerLevelIdc[j] = bitReader.readU(8)\r\n      }\r\n    }\r\n  }\r\n  const ptl_num_sub_profiles = bitReader.readU(8)\r\n  const generalSubProfileIdc = []\r\n  if (ptl_num_sub_profiles) {\r\n    for (let i = 0; i < ptl_num_sub_profiles; i++) {\r\n      generalSubProfileIdc.push(bitReader.readU(8))\r\n    }\r\n  }\r\n\r\n  const maxPictureWidth = bitReader.readU(16)\r\n  const maxPictureHeight = bitReader.readU(16)\r\n  const avgFramerate = bitReader.readU(16)\r\n\r\n  return {\r\n    olsIdx,\r\n    numSublayers,\r\n    bitDepthMinus8,\r\n    chromaFormatIdc,\r\n    constantFrameRate,\r\n    generalProfileIdc,\r\n    generalTierFlag,\r\n    generalLevelIdc,\r\n    ptlFrameOnlyConstraintFlag,\r\n    ptlMultilayerEnabledFlag,\r\n    generalConstraintInfo,\r\n    sublayerLevelIdc,\r\n    generalSubProfileIdc,\r\n    maxPictureWidth,\r\n    maxPictureHeight,\r\n    avgFramerate\r\n  }\r\n}\r\n/* eslint-enable camelcase */\r\n\r\n/**\r\n * \r\n * vvcc 格式的 extradata 转 annexb vps sps pps\r\n * \r\n * bits    \r\n * - 5   reserved (11111)\r\n * - 2   lengthSizeMinusOne\r\n * - 1   ptl_present_flag\r\n * if ptl_present_flag\r\n *   - 9   ols_idx\r\n *   - 3  num_sublayers\r\n *   - 2  constant_frame_rate\r\n *   - 2  chroma_format_idc\r\n *   - 3  bit_depth_minus8\r\n *   - 5  reserved (11111)\r\n *   VvcPTLRecord\r\n *   - 2 reserved (11)\r\n *   - 6 num_bytes_constraint_info\r\n *   - 7 general_profile_idc\r\n *   - 1 general_tier_flag\r\n *   - 8 general_level_idc\r\n *   - 1 general_level_idc\r\n *   - 1 ptl_multilayer_enabled_flag\r\n *   if num_bytes_constraint_info > 0\r\n *      for (i = 0; i < num_bytes_constraint_info - 1; i++)\r\n *        - 8 general_constraint_info[i]\r\n *      - 6 general_constraint_info[num_bytes_constraint_info - 1]\r\n *   else\r\n *      - 6 reserved\r\n *   if num_sublayers > 1\r\n *      - num_sublayers - 2 ptl_sublayer_level_present_flag\r\n *      - 8 - num_sublayers + 1 ptl_reserved_zero_bit\r\n *      for (i = num_sublayers -2; i >= 0; i--)\r\n *        if ptl_sublayer_present_mask & (1 << i)\r\n *          - 8 sublayer_level_idc[i]\r\n *    - 8 ptl_num_sub_profiles\r\n *    if ptl_num_sub_profiles\r\n *      for (i = 0; i < ptl_num_sub_profiles; i++)\r\n *        - 32 general_sub_profile_idc[i]\r\n *    - 16 max_picture_width\r\n *    - 16 max_picture_height\r\n *    - 16 avg_frame_rate\r\n * - 8   numOfArrays\r\n * - repeated of array (vps/sps/pps)\r\n * - 1   array_completeness\r\n * - 2   reserved (0)\r\n * - 5   NAL_unit_type\r\n * if nalu_type != VVC_NALU_DEC_PARAM && nalu_type != VVC_NALU_OPI\r\n *    - 16  numNalus\r\n * else\r\n *   numNalus = 1\r\n * - repeated once per NAL\r\n * - 16  nalUnitLength\r\n * - N   NALU data\r\n * \r\n */\r\nexport function extradata2VpsSpsPps(extradata: Uint8ArrayInterface) {\r\n\r\n  const bufferReader = new BufferReader(extradata, true)\r\n\r\n  const ptlPresentFlag = bufferReader.readUint8() & 0x01\r\n\r\n  if (ptlPresentFlag) {\r\n    const bitReader = new BitReader()\r\n    bitReader.appendBuffer(extradata.subarray(1))\r\n    parsePTL(bitReader)\r\n    bufferReader.skip(bitReader.getPointer())\r\n  }\r\n\r\n  let vpss: Uint8ArrayInterface[] = []\r\n  let spss: Uint8ArrayInterface[] = []\r\n  let ppss: Uint8ArrayInterface[] = []\r\n\r\n  const arrayLen = bufferReader.readUint8()\r\n\r\n  for (let i = 0; i < arrayLen; i++) {\r\n    const naluType = bufferReader.readUint8() & 0x1f\r\n    let count = 1\r\n\r\n    if (naluType !== VVCNaluType.kDCI_NUT && naluType !== VVCNaluType.kOPI_NUT) {\r\n      count = bufferReader.readUint16()\r\n    }\r\n    const list = []\r\n\r\n    for (let j = 0; j < count; j++) {\r\n      const len = bufferReader.readUint16()\r\n      list.push(bufferReader.readBuffer(len))\r\n    }\r\n\r\n    if (naluType === VVCNaluType.kVPS_NUT) {\r\n      vpss = list\r\n    }\r\n    else if (naluType === VVCNaluType.kSPS_NUT) {\r\n      spss = list\r\n    }\r\n    else if (naluType === VVCNaluType.kPPS_NUT) {\r\n      ppss = list\r\n    }\r\n  }\r\n\r\n  return {\r\n    vpss,\r\n    spss,\r\n    ppss\r\n  }\r\n}\r\n\r\n/**\r\n * annexb vps sps pps 转 avcc 格式的 extradata\r\n * \r\n * @param vpss \r\n * @param spss \r\n * @param ppss \r\n * @returns \r\n */\r\nexport function vpsSpsPps2Extradata(vpss: Uint8ArrayInterface[], spss: Uint8ArrayInterface[], ppss: Uint8ArrayInterface[]) {\r\n\r\n  const sps = spss[0]\r\n  let ptl: Uint8Array\r\n  if (sps) {\r\n    const spsParams = parseSPS(sps)\r\n    let generalConstraintInfo = spsParams.generalConstraintInfo\r\n    if (!generalConstraintInfo.length) {\r\n      generalConstraintInfo = new Array(12).fill(0)\r\n    }\r\n    const biWriter = new BitWriter()\r\n    biWriter.writeU(9, 0)\r\n    biWriter.writeU(3, spsParams.spsMaxSublayersMinus1 + 1)\r\n    biWriter.writeU(2, 1)\r\n    biWriter.writeU(2, spsParams.chromaFormatIdc)\r\n    biWriter.writeU(3, spsParams.bitDepthMinus8)\r\n    biWriter.writeU(5, 0b11111)\r\n    biWriter.writeU(2, 0)\r\n    biWriter.writeU(6, generalConstraintInfo.length)\r\n    biWriter.writeU(7, spsParams.profile)\r\n    biWriter.writeU1(spsParams.tierFlag)\r\n    biWriter.writeU(8, spsParams.level)\r\n    biWriter.writeU1(spsParams.ptlFrameOnlyConstraintFlag)\r\n    biWriter.writeU1(spsParams.ptlMultilayerEnabledFlag)\r\n\r\n    if (generalConstraintInfo.length) {\r\n      for (let i = 0; i < generalConstraintInfo.length - 1; i++) {\r\n        biWriter.writeU(8, generalConstraintInfo[i])\r\n      }\r\n      biWriter.writeU(6, generalConstraintInfo[generalConstraintInfo.length - 1])\r\n    }\r\n    else {\r\n      biWriter.writeU(6, 0b111111)\r\n    }\r\n\r\n    if (spsParams.spsMaxSublayersMinus1 + 1 > 1) {\r\n      let ptlSubLayerLevelPresentFlags = 0\r\n      for (let i = spsParams.spsMaxSublayersMinus1 - 1; i >= 0; i--) {\r\n        ptlSubLayerLevelPresentFlags = (ptlSubLayerLevelPresentFlags << 1 | spsParams.ptlSublayerLevelPresentFlag[i])\r\n      }\r\n      biWriter.writeU(spsParams.spsMaxSublayersMinus1, ptlSubLayerLevelPresentFlags)\r\n\r\n      for (let j = spsParams.spsMaxSublayersMinus1 + 1; j <= 8 && spsParams.spsMaxSublayersMinus1 > 0; ++j) {\r\n        biWriter.writeU1(0)\r\n      }\r\n      for (let i = spsParams.spsMaxSublayersMinus1 - 1; i >= 0; i--) {\r\n        if (spsParams.ptlSublayerLevelPresentFlag[i]) {\r\n          biWriter.writeU(8, spsParams.sublayerLevelIdc[i])\r\n        }\r\n      }\r\n    }\r\n    biWriter.writeU(8, spsParams.generalSubProfileIdc.length)\r\n    for (let i = 0; i < spsParams.generalSubProfileIdc.length; i++) {\r\n      biWriter.writeU(8, spsParams.sublayerLevelIdc[i])\r\n    }\r\n    biWriter.writeU(16, spsParams.width)\r\n    biWriter.writeU(16, spsParams.height)\r\n    biWriter.writeU(16, 0)\r\n    biWriter.padding()\r\n    ptl = biWriter.getBuffer().subarray(0, biWriter.getPointer())\r\n  }\r\n\r\n  let length = 2 + (ptl ? ptl.length : 0)\r\n\r\n  if (vpss.length) {\r\n    // type + count\r\n    length += 3\r\n    length = vpss.reduce((prev, value) => {\r\n      // length + data\r\n      return prev + 2 + value.length\r\n    }, length)\r\n  }\r\n\r\n  if (spss.length) {\r\n    // type + count\r\n    length += 3\r\n    length = spss.reduce((prev, value) => {\r\n      // length + data\r\n      return prev + 2 + value.length\r\n    }, length)\r\n  }\r\n\r\n  if (ppss.length) {\r\n    // type + count\r\n    length += 3\r\n    length = ppss.reduce((prev, value) => {\r\n      // length + data\r\n      return prev + 2 + value.length\r\n    }, length)\r\n  }\r\n\r\n  const buffer = new Uint8Array(length)\r\n  const bufferWriter = new BufferWriter(buffer, true)\r\n\r\n  bufferWriter.writeUint8(NALULengthSizeMinusOne << 1 | (ptl ? 1 : 0) | 0xf8)\r\n\r\n  if (ptl) {\r\n    bufferWriter.writeBuffer(ptl)\r\n  }\r\n\r\n  // numOfArrays\r\n  let numOfArrays = 0\r\n  if (vpss.length) {\r\n    numOfArrays++\r\n  }\r\n  if (spss.length) {\r\n    numOfArrays++\r\n  }\r\n  if (ppss.length) {\r\n    numOfArrays++\r\n  }\r\n  bufferWriter.writeUint8(numOfArrays)\r\n\r\n  // vps\r\n  if (vpss.length) {\r\n    bufferWriter.writeUint8((1 << 7) | VVCNaluType.kVPS_NUT)\r\n    bufferWriter.writeUint16(vpss.length)\r\n    array.each(vpss, (vps) => {\r\n      bufferWriter.writeUint16(vps.length)\r\n      bufferWriter.writeBuffer(vps)\r\n    })\r\n  }\r\n\r\n  // sps\r\n  if (spss.length) {\r\n    bufferWriter.writeUint8((1 << 7) | VVCNaluType.kSPS_NUT)\r\n    bufferWriter.writeUint16(spss.length)\r\n    array.each(spss, (sps) => {\r\n      bufferWriter.writeUint16(sps.length)\r\n      bufferWriter.writeBuffer(sps)\r\n    })\r\n  }\r\n\r\n  // pps\r\n  if (ppss.length) {\r\n    bufferWriter.writeUint8((1 << 7) | VVCNaluType.kPPS_NUT)\r\n    bufferWriter.writeUint16(ppss.length)\r\n    array.each(ppss, (pps) => {\r\n      bufferWriter.writeUint16(pps.length)\r\n      bufferWriter.writeBuffer(pps)\r\n    })\r\n  }\r\n\r\n  return buffer\r\n}\r\n\r\n/**\r\n * annexb extradata 转 avcc extradata\r\n * \r\n * @param data \r\n * @returns \r\n */\r\nexport function annexbExtradata2AvccExtradata(data: Uint8ArrayInterface) {\r\n  let nalus = naluUtil.splitNaluByStartCode(data)\r\n\r\n  if (nalus.length >= 2) {\r\n    const vpss: Uint8ArrayInterface[] = []\r\n    const spss: Uint8ArrayInterface[] = []\r\n    const ppss: Uint8ArrayInterface[] = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kVPS_NUT) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kSPS_NUT) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kPPS_NUT) {\r\n        ppss.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (spss.length && ppss.length) {\r\n      return vpsSpsPps2Extradata(vpss, spss, ppss)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 从 annexb 码流里面生成 annexb extradata\r\n * \r\n * 提取出 vps、 sps 和 pps\r\n * \r\n * @param data \r\n * @returns \r\n */\r\nexport function generateAnnexbExtradata(data: Uint8ArrayInterface) {\r\n  let nalus = naluUtil.splitNaluByStartCode(data)\r\n\r\n  if (nalus.length >= 2) {\r\n    const vpss: Uint8ArrayInterface[] = []\r\n    const spss: Uint8ArrayInterface[] = []\r\n    const ppss: Uint8ArrayInterface[] = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kVPS_NUT) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kSPS_NUT) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kPPS_NUT) {\r\n        ppss.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (spss.length && ppss.length) {\r\n      const nalus = [spss[0], ppss[0]]\r\n      if (vpss.length) {\r\n        nalus.unshift(vpss[0])\r\n      }\r\n      return naluUtil.joinNaluByStartCode(nalus, 0)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * annexb 格式的 NALU 转 avcc NALU \r\n * \r\n * 需要保证 data 是 safe 的\r\n * \r\n */\r\nexport function annexb2Avcc(data: Uint8ArrayInterface, reverseSps: boolean = false) {\r\n  let extradata: Uint8Array\r\n  let key: boolean = false\r\n\r\n  let nalus = naluUtil.splitNaluByStartCode(data)\r\n\r\n  if (nalus.length) {\r\n    const vpss: Uint8ArrayInterface[] = []\r\n    const spss: Uint8ArrayInterface[] = []\r\n    const ppss: Uint8ArrayInterface[] = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kVPS_NUT) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kSPS_NUT) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kPPS_NUT) {\r\n        ppss.push(nalu)\r\n      }\r\n      if (type === VVCNaluType.kIDR_N_LP\r\n        || type === VVCNaluType.kIDR_W_RADL\r\n        || type === VVCNaluType.kCRA_NUT\r\n        || type === VVCNaluType.kGDR_NUT\r\n      ) {\r\n        key = true\r\n      }\r\n    })\r\n\r\n    if (spss.length && ppss.length) {\r\n      extradata = vpsSpsPps2Extradata(vpss, spss, ppss)\r\n      nalus = nalus.filter((nalu) => {\r\n        const type = (nalu[1] >>> 3) & 0x1f\r\n        return reverseSps\r\n          ? type !== VVCNaluType.kAUD_NUT\r\n          : (type !== VVCNaluType.kVPS_NUT\r\n            && type !== VVCNaluType.kSPS_NUT\r\n            && type !== VVCNaluType.kPPS_NUT\r\n            && type !== VVCNaluType.kAUD_NUT)\r\n      })\r\n    }\r\n    else {\r\n      nalus = nalus.filter((nalu) => {\r\n        const type = (nalu[1] >>> 3) & 0x1f\r\n        return type !== VVCNaluType.kAUD_NUT\r\n      })\r\n    }\r\n  }\r\n\r\n  const length = nalus.reduce((prev, nalu) => {\r\n    return prev + NALULengthSizeMinusOne + 1 + nalu.length\r\n  }, 0)\r\n\r\n  const bufferPointer: pointer<uint8> = avMalloc(length)\r\n  const buffer = mapUint8Array(bufferPointer, length)\r\n\r\n  naluUtil.joinNaluByLength(nalus, NALULengthSizeMinusOne, buffer)\r\n\r\n  return {\r\n    bufferPointer,\r\n    length,\r\n    extradata,\r\n    key\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * 需要保证 data 是 safe 的\r\n * \r\n * @param vpss \r\n * @param spss \r\n * @param ppss \r\n * @param nalus \r\n * @returns \r\n */\r\nexport function nalus2Annexb(\r\n  vpss: Uint8ArrayInterface[],\r\n  spss: Uint8ArrayInterface[],\r\n  ppss: Uint8ArrayInterface[],\r\n  nalus: Uint8ArrayInterface[],\r\n  key: boolean\r\n) {\r\n  const lengths = [\r\n    naluUtil.joinNaluByStartCodeLength(vpss, 0),\r\n    naluUtil.joinNaluByStartCodeLength(spss, 0),\r\n    naluUtil.joinNaluByStartCodeLength(ppss, 0),\r\n    naluUtil.joinNaluByStartCodeLength(nalus, 2)\r\n  ]\r\n\r\n  let length = lengths.reduce((prev, length) => {\r\n    return prev + length\r\n  }, 0)\r\n\r\n  const bufferPointer: pointer<uint8> = avMalloc(length + 7)\r\n\r\n  let offset = bufferPointer\r\n\r\n  // AUD\r\n  intwrite.w8(offset++, 0)\r\n  intwrite.w8(offset++, 0)\r\n  intwrite.w8(offset++, 0)\r\n  intwrite.w8(offset++, 1)\r\n  intwrite.w8(offset++, 0)\r\n  intwrite.w8(offset++, (VVCNaluType.kAUD_NUT << 3) | 1)\r\n  intwrite.w8(offset++, (key ? 1 : 0) << 7 | 0x28)\r\n\r\n  if (vpss.length) {\r\n    naluUtil.joinNaluByStartCode(vpss, 0, mapUint8Array(offset, lengths[0]))\r\n    offset = reinterpret_cast<pointer<uint8>>(offset + lengths[0])\r\n  }\r\n  if (spss.length) {\r\n    naluUtil.joinNaluByStartCode(spss, 0, mapUint8Array(offset, lengths[1]))\r\n    offset = reinterpret_cast<pointer<uint8>>(offset + lengths[1])\r\n  }\r\n  if (ppss.length) {\r\n    naluUtil.joinNaluByStartCode(ppss, 0, mapUint8Array(offset, lengths[2]))\r\n    offset = reinterpret_cast<pointer<uint8>>(offset + lengths[2])\r\n  }\r\n  if (nalus.length) {\r\n    naluUtil.joinNaluByStartCode(nalus, 2, mapUint8Array(offset, lengths[3]))\r\n  }\r\n\r\n  return {\r\n    bufferPointer,\r\n    length: length + 7\r\n  }\r\n}\r\n\r\n/**\r\n * annexb 添加 sps pps\r\n * \r\n * @param data \r\n * @param extradata \r\n */\r\nexport function annexbAddExtradata(data: Uint8ArrayInterface, extradata: Uint8ArrayInterface) {\r\n  let nalus = naluUtil.splitNaluByStartCode(data).concat(naluUtil.splitNaluByStartCode(extradata))\r\n  if (nalus.length) {\r\n    let vpss: Uint8ArrayInterface[] = []\r\n    let spss: Uint8ArrayInterface[] = []\r\n    let ppss: Uint8ArrayInterface[] = []\r\n    let others: Uint8ArrayInterface[] = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kVPS_NUT) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kSPS_NUT) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kPPS_NUT) {\r\n        ppss.push(nalu)\r\n      }\r\n      else if (type !== VVCNaluType.kAUD_NUT) {\r\n        others.push(nalu)\r\n      }\r\n    })\r\n    return nalus2Annexb(vpss, spss, ppss, others, true)\r\n  }\r\n}\r\n\r\n/**\r\n * avcc 格式的 NALU 转 annexb NALU \r\n * \r\n * 需要保证 data 是 safe 的\r\n * \r\n */\r\nexport function avcc2Annexb(data: Uint8ArrayInterface, extradata?: Uint8ArrayInterface) {\r\n  const naluLengthSizeMinusOne = extradata ? ((extradata[0] >>> 1) & 0x03) : NALULengthSizeMinusOne\r\n\r\n  let vpss: Uint8ArrayInterface[] = []\r\n  let spss: Uint8ArrayInterface[] = []\r\n  let ppss: Uint8ArrayInterface[] = []\r\n  let key = false\r\n\r\n  if (extradata) {\r\n    const result = extradata2VpsSpsPps(extradata)\r\n    vpss = result.vpss\r\n    spss = result.spss\r\n    ppss = result.ppss\r\n    key = true\r\n  }\r\n\r\n  const nalus = naluUtil.splitNaluByLength(data, naluLengthSizeMinusOne).filter((nalu) => {\r\n    const type = (nalu[1] >>> 3) & 0x1f\r\n    return type !== VVCNaluType.kAUD_NUT\r\n  })\r\n\r\n  return {\r\n    ...nalus2Annexb(vpss, spss, ppss, nalus, key),\r\n    key\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParametersBySps(stream: AVStream, sps: Uint8ArrayInterface) {\r\n  const { profile, level, width, height, videoDelay, chromaFormatIdc, bitDepthMinus8 } = parseSPS(sps)\r\n  stream.codecpar.profile = profile\r\n  stream.codecpar.level = level\r\n  stream.codecpar.width = width\r\n  stream.codecpar.height = height\r\n  stream.codecpar.videoDelay = videoDelay\r\n\r\n  switch (bitDepthMinus8) {\r\n    case 0:\r\n      if (chromaFormatIdc === 3) {\r\n        stream.codecpar.format = AVPixelFormat.AV_PIX_FMT_YUV444P\r\n      }\r\n      else if (chromaFormatIdc === 2) {\r\n        stream.codecpar.format = AVPixelFormat.AV_PIX_FMT_YUV422P\r\n      }\r\n      else {\r\n        stream.codecpar.format = AVPixelFormat.AV_PIX_FMT_YUV420P\r\n      }\r\n      break\r\n    case 2:\r\n      if (chromaFormatIdc === 3) {\r\n        stream.codecpar.format = AVPixelFormat.AV_PIX_FMT_YUV444P10LE\r\n      }\r\n      else if (chromaFormatIdc === 2) {\r\n        stream.codecpar.format = AVPixelFormat.AV_PIX_FMT_YUV422P10LE\r\n      }\r\n      else {\r\n        stream.codecpar.format = AVPixelFormat.AV_PIX_FMT_YUV420P10LE\r\n      }\r\n      break\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  let sps: Uint8ArrayInterface\r\n  if (extradata && naluUtil.isAnnexb(extradata)) {\r\n    array.each(naluUtil.splitNaluByStartCode(extradata), (nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kSPS_NUT) {\r\n        sps = nalu\r\n        return false\r\n      }\r\n    })\r\n  }\r\n  else if (extradata && extradata.length >= 6) {\r\n\r\n    stream.metadata.naluLengthSizeMinusOne = (extradata[0] >>> 1) & 0x03\r\n\r\n    const { spss } = extradata2VpsSpsPps(extradata)\r\n\r\n    if (spss.length) {\r\n      sps = spss[0]\r\n    }\r\n  }\r\n  if (sps) {\r\n    parseAVCodecParametersBySps(stream, sps)\r\n  }\r\n}\r\n\r\nexport function isIDR(avpacket: pointer<AVPacket>, naluLengthSize: int32 = 4) {\r\n  if (avpacket.flags & AVPacketFlags.AV_PKT_FLAG_H26X_ANNEXB) {\r\n    let nalus = naluUtil.splitNaluByStartCode(mapUint8Array(avpacket.data, reinterpret_cast<size>(avpacket.size)))\r\n    return nalus.some((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      return type === VVCNaluType.kIDR_N_LP || type === VVCNaluType.kIDR_W_RADL\r\n    })\r\n  }\r\n  else {\r\n    const size = avpacket.size\r\n    let i = 0\r\n    while (i < (size - naluLengthSize)) {\r\n      const type = (intread.r8(avpacket.data + (i + naluLengthSize + 1)) >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kIDR_N_LP || type === VVCNaluType.kIDR_W_RADL) {\r\n        return true\r\n      }\r\n      if (naluLengthSize === 4) {\r\n        i += intread.rb32(avpacket.data + i)\r\n      }\r\n      else if (naluLengthSize === 3) {\r\n        i += intread.rb24(avpacket.data + i)\r\n      }\r\n      else if (naluLengthSize === 2) {\r\n        i += intread.rb16(avpacket.data + i)\r\n      }\r\n      else {\r\n        i += intread.r8(avpacket.data + i)\r\n      }\r\n      i += naluLengthSize\r\n    }\r\n    return false\r\n  }\r\n}\r\n\r\n/* eslint-disable camelcase */\r\nexport interface VvcSPS {\r\n  profile: number\r\n  level: number\r\n  width: number\r\n  height: number\r\n  videoDelay: number\r\n  chromaFormatIdc: number\r\n  bitDepthMinus8: number\r\n  generalProfileSpace: number\r\n  tierFlag: number\r\n  generalConstraintInfo: number[]\r\n  generalSubProfileIdc: number[]\r\n  ptlFrameOnlyConstraintFlag: number\r\n  ptlMultilayerEnabledFlag: number\r\n  spsMaxSublayersMinus1: number\r\n  ptlSublayerLevelPresentFlag: number[]\r\n  sublayerLevelIdc: number[]\r\n  sps_log2_max_pic_order_cnt_lsb_minus4: number\r\n  sps_poc_msb_cycle_flag: number\r\n  sps_poc_msb_cycle_len_minus1: number\r\n  sps_num_extra_ph_bytes: number\r\n  sps_extra_ph_bit_present_flag: number[]\r\n}\r\n\r\nexport function parseSPS(sps: Uint8ArrayInterface): VvcSPS {\r\n  if (!sps || sps.length < 3) {\r\n    return\r\n  }\r\n\r\n  let offset = 0\r\n  if (sps[0] === 0x00\r\n    && sps[1] === 0x00\r\n    && sps[2] === 0x00\r\n    && sps[3] === 0x01\r\n  ) {\r\n    offset = 4\r\n  }\r\n\r\n  let profile = 0\r\n  let level = 0\r\n  let width = 0\r\n  let height = 0\r\n  let bitDepthMinus8 = 0\r\n  let chromaFormatIdc = 1\r\n  let generalProfileSpace = 0\r\n  let tierFlag = 0\r\n  let ptlFrameOnlyConstraintFlag = 0\r\n  let ptlMultilayerEnabledFlag = 0\r\n\r\n  const generalConstraintInfo = []\r\n  const ptlSublayerLevelPresentFlag = []\r\n  const sublayerLevelIdc = []\r\n  const generalSubProfileIdc = []\r\n\r\n  const buffer = naluUtil.naluUnescape(sps.subarray(offset))\r\n  const bitReader = new BitReader(buffer.length)\r\n  bitReader.appendBuffer(buffer)\r\n\r\n  // forbidden_zero_bit\r\n  bitReader.readU1()\r\n  // nuh_reserved_zero_bit\r\n  bitReader.readU1()\r\n  // layerId\r\n  bitReader.readU(6)\r\n  // nalu type\r\n  bitReader.readU(5)\r\n  // tid\r\n  bitReader.readU(3)\r\n\r\n  // sps_seq_parameter_set_id && sps_video_parameter_set_id\r\n  bitReader.readU(8)\r\n\r\n  const spsMaxSublayersMinus1 = bitReader.readU(3)\r\n  chromaFormatIdc = bitReader.readU(2)\r\n  const sps_log2_ctu_size_minus5 = bitReader.readU(2)\r\n  const sps_ptl_dpb_hrd_params_present_flag = bitReader.readU(1)\r\n  if (sps_ptl_dpb_hrd_params_present_flag) {\r\n    profile = bitReader.readU(7)\r\n    tierFlag = bitReader.readU(1)\r\n    level = bitReader.readU(8)\r\n    ptlFrameOnlyConstraintFlag = bitReader.readU(1)\r\n    ptlMultilayerEnabledFlag = bitReader.readU(1)\r\n    const gci_present_flag = bitReader.readU(1)\r\n    if (gci_present_flag) {\r\n      for (let j = 0; j < 8; j++) {\r\n        generalConstraintInfo[j] = bitReader.readU(8)\r\n      }\r\n      generalConstraintInfo[8] = bitReader.readU(7)\r\n      const gci_num_reserved_bits = bitReader.readU(8)\r\n      bitReader.readU(gci_num_reserved_bits)\r\n    }\r\n    bitReader.skipPadding()\r\n    for (let i = spsMaxSublayersMinus1 - 1; i >= 0; i--) {\r\n      ptlSublayerLevelPresentFlag[i] = bitReader.readU(1)\r\n    }\r\n    bitReader.skipPadding()\r\n    for (let i = spsMaxSublayersMinus1 - 1; i >= 0; i--) {\r\n      if (ptlSublayerLevelPresentFlag[i]) {\r\n        sublayerLevelIdc[i] = bitReader.readU(8)\r\n      }\r\n    }\r\n\r\n    const ptl_num_sub_profiles = bitReader.readU(8)\r\n    if (ptl_num_sub_profiles) {\r\n      for (let i = 0; i < ptl_num_sub_profiles; i++) {\r\n        generalSubProfileIdc[i] = bitReader.readU(32)\r\n      }\r\n    }\r\n  }\r\n\r\n  // sps_gdr_enabled_flag\r\n  bitReader.readU1()\r\n  const sps_ref_pic_resampling_enabled_flag = bitReader.readU1()\r\n  if (sps_ref_pic_resampling_enabled_flag) {\r\n    // sps_res_change_in_clvs_allowed_flag\r\n    bitReader.readU1()\r\n  }\r\n\r\n  const sps_pic_width_max_in_luma_samples = width = expgolomb.readUE(bitReader)\r\n  const sps_pic_height_max_in_luma_samples = height = expgolomb.readUE(bitReader)\r\n\r\n  if (bitReader.readU1()) {\r\n    // sps_conf_win_left_offset\r\n    expgolomb.readUE(bitReader)\r\n    // sps_conf_win_right_offset\r\n    expgolomb.readUE(bitReader)\r\n    // sps_conf_win_top_offset\r\n    expgolomb.readUE(bitReader)\r\n    // sps_conf_win_bottom_offset\r\n    expgolomb.readUE(bitReader)\r\n  }\r\n\r\n  if (bitReader.readU1()) {\r\n    const sps_num_subpics_minus1 = expgolomb.readUE(bitReader)\r\n    const ctb_log2_size_y = sps_log2_ctu_size_minus5 + 5\r\n    const ctb_size_y      = 1 << ctb_log2_size_y\r\n    const tmp_width_val   = sps_pic_width_max_in_luma_samples / (1 << ctb_log2_size_y)\r\n    const tmp_height_val  = sps_pic_height_max_in_luma_samples / (1 << ctb_log2_size_y)\r\n    const wlen            = Math.ceil(Math.log2(tmp_width_val))\r\n    const hlen            = Math.ceil(Math.log2(tmp_height_val))\r\n\r\n    let sps_subpic_id_len = 0\r\n    let sps_subpic_same_size_flag = 0\r\n    let sps_independent_subpics_flag = 0\r\n    // sps_num_subpics_minus1\r\n    if (sps_num_subpics_minus1 > 0) {\r\n      sps_independent_subpics_flag = bitReader.readU1()\r\n      sps_subpic_same_size_flag = bitReader.readU1()\r\n    }\r\n    for (let i = 0; sps_num_subpics_minus1 > 0 && i <= sps_num_subpics_minus1; i++) {\r\n      if (!sps_subpic_same_size_flag || i == 0) {\r\n        if (i > 0 && sps_pic_width_max_in_luma_samples > ctb_size_y) {\r\n          bitReader.readU(wlen)\r\n        }\r\n        if (i > 0 && sps_pic_height_max_in_luma_samples > ctb_size_y) {\r\n          bitReader.readU(hlen)\r\n        }\r\n        if (i < sps_num_subpics_minus1 && sps_pic_width_max_in_luma_samples > ctb_size_y) {\r\n          bitReader.readU(wlen)\r\n        }\r\n        if (i < sps_num_subpics_minus1 && sps_pic_height_max_in_luma_samples > ctb_size_y) {\r\n          bitReader.readU(hlen)\r\n        }\r\n      }\r\n      if (!sps_independent_subpics_flag) {\r\n        // sps_subpic_treated_as_pic_flag && sps_loop_filter_across_subpic_enabled_flag\r\n        bitReader.readU(2)\r\n      }\r\n    }\r\n    sps_subpic_id_len = expgolomb.readUE(bitReader) + 1\r\n    // sps_subpic_id_mapping_explicitly_signalled_flag\r\n    if (bitReader.readU(1)) {\r\n      // sps_subpic_id_mapping_present_flag\r\n      if (bitReader.readU(1)) {\r\n        for (let i = 0; i <= sps_num_subpics_minus1; i++) {\r\n          // sps_subpic_id[i]\r\n          bitReader.readU(sps_subpic_id_len)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  bitDepthMinus8 = expgolomb.readUE(bitReader)\r\n\r\n  // sps_entropy_coding_sync_enabled_flag\r\n  bitReader.readU(1)\r\n  // sps_entry_point_offsets_present_flag\r\n  bitReader.readU(1)\r\n\r\n  const sps_log2_max_pic_order_cnt_lsb_minus4 = bitReader.readU(4)\r\n  const sps_poc_msb_cycle_flag = bitReader.readU(1)\r\n  let sps_poc_msb_cycle_len_minus1 = 0\r\n  if (sps_poc_msb_cycle_flag) {\r\n    sps_poc_msb_cycle_len_minus1 = expgolomb.readUE(bitReader)\r\n  }\r\n  const sps_extra_ph_bit_present_flag: number[] = []\r\n  const sps_num_extra_ph_bytes = bitReader.readU(2)\r\n  for (let i = 0; i < (sps_num_extra_ph_bytes * 8); i++) {\r\n    sps_extra_ph_bit_present_flag[i] = bitReader.readU(1)\r\n  }\r\n\r\n  const videoDelay = (spsMaxSublayersMinus1 + 1)  > 2 ? 2 : spsMaxSublayersMinus1\r\n\r\n  return {\r\n    profile,\r\n    level,\r\n    width,\r\n    height,\r\n    videoDelay,\r\n    chromaFormatIdc,\r\n    bitDepthMinus8,\r\n    generalProfileSpace,\r\n    tierFlag,\r\n    generalConstraintInfo,\r\n    generalSubProfileIdc,\r\n    ptlFrameOnlyConstraintFlag,\r\n    ptlMultilayerEnabledFlag,\r\n    spsMaxSublayersMinus1,\r\n    ptlSublayerLevelPresentFlag,\r\n    sublayerLevelIdc,\r\n    sps_log2_max_pic_order_cnt_lsb_minus4,\r\n    sps_poc_msb_cycle_flag,\r\n    sps_poc_msb_cycle_len_minus1,\r\n    sps_num_extra_ph_bytes,\r\n    sps_extra_ph_bit_present_flag\r\n  }\r\n}\r\n\r\nexport function parseExtraData(extradata: Uint8ArrayInterface) {\r\n\r\n  if (naluUtil.isAnnexb(extradata)) {\r\n    extradata = annexbExtradata2AvccExtradata(extradata)\r\n  }\r\n\r\n  const bitReader = new BitReader()\r\n  bitReader.appendBuffer(extradata)\r\n  const ptlPresentFlag = bitReader.readU(8) & 0x01\r\n  if (ptlPresentFlag) {\r\n    return parsePTL(bitReader)\r\n  }\r\n  return {} as Data\r\n}\r\n","/*\r\n * libmedia flv amf\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport IOReader from 'common/io/IOReader'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport IOWriterSync from 'common/io/IOWriterSync'\r\nimport * as is from 'common/util/is'\r\nimport * as array from 'common/util/array'\r\nimport * as object from 'common/util/object'\r\n\r\nexport async function parseObject(ioReader: IOReader | BufferReader, endPos: bigint) {\r\n  const key = await ioReader.readString(await ioReader.readUint16())\r\n  const value = await parseValue(ioReader, endPos)\r\n  return {\r\n    key,\r\n    value\r\n  }\r\n}\r\n\r\nexport async function parseValue(ioReader: IOReader | BufferReader, endPos: bigint) {\r\n  const type = await ioReader.readUint8()\r\n  let value: any\r\n\r\n  switch (type) {\r\n    // double\r\n    case 0:\r\n      value = await ioReader.readDouble()\r\n      break\r\n      // boolean\r\n    case 1:\r\n      value = await ioReader.readUint8() ? true : false\r\n      break\r\n      // string\r\n    case 2:\r\n      value = await ioReader.readString(await ioReader.readUint16())\r\n      break\r\n      // object\r\n    case 3:\r\n      value = {}\r\n      while (ioReader.getPos() < endPos) {\r\n        const { key, value: val } = await parseObject(ioReader, endPos)\r\n        value[key] = val\r\n        if (((await ioReader.peekUint24()) & 0x00FFFFFF) === 9) {\r\n          await ioReader.skip(3)\r\n          break\r\n        }\r\n      }\r\n      break\r\n      // ECMA array type (Mixed array)\r\n    case 8:\r\n      value = {}\r\n      // skip ECMAArrayLength(UI32)\r\n      await ioReader.skip(4)\r\n      while (ioReader.getPos() < endPos) {\r\n        const { key, value: val } = await parseObject(ioReader, endPos)\r\n        value[key] = val\r\n        if (((await ioReader.peekUint24()) & 0x00FFFFFF) === 9) {\r\n          await ioReader.skip(3)\r\n          break\r\n        }\r\n      }\r\n      break\r\n      // ScriptDataObjectEnd\r\n    case 9:\r\n    case 5:\r\n      value = null\r\n      break\r\n    // Strict array type\r\n    case 10:\r\n      value = []\r\n      const length = await ioReader.readUint32()\r\n      for (let i = 0; i < length; i++) {\r\n        value.push(await parseValue(ioReader, endPos))\r\n      }\r\n      break\r\n    // Date\r\n    case 11:\r\n      const timestamp = await ioReader.readDouble()\r\n      const localTimeOffset = await ioReader.readInt16()\r\n      value = new Date(timestamp + localTimeOffset * 60 * 1000)\r\n      break\r\n    // Long string type\r\n    case 12:\r\n      value = await ioReader.readString(await ioReader.readUint32())\r\n      break\r\n    default:\r\n\r\n  }\r\n\r\n  return value\r\n}\r\n\r\nexport function writeValue(ioWriter: IOWriterSync | BufferWriter, value: any) {\r\n  // double\r\n  if (is.number(value)) {\r\n    ioWriter.writeUint8(0)\r\n    ioWriter.writeDouble(value)\r\n  }\r\n  else if (is.bigint(value)) {\r\n    ioWriter.writeUint8(0)\r\n    ioWriter.writeDouble(Number(value))\r\n  }\r\n  // boolean\r\n  else if (is.boolean(value)) {\r\n    ioWriter.writeUint8(1)\r\n    ioWriter.writeUint8(value ? 1 : 0)\r\n  }\r\n  // string\r\n  else if (is.string(value)) {\r\n    // long string\r\n    if (value.length >= 65536) {\r\n      ioWriter.writeUint8(12)\r\n      ioWriter.writeUint32(value.length)\r\n      ioWriter.writeString(value)\r\n    }\r\n    // string\r\n    else {\r\n      ioWriter.writeUint8(2)\r\n      ioWriter.writeUint16(value.length)\r\n      ioWriter.writeString(value)\r\n    }\r\n  }\r\n  // array type\r\n  else if (is.array(value)) {\r\n    ioWriter.writeUint8(10)\r\n    ioWriter.writeUint32(value.length)\r\n    array.each(value, (value) => {\r\n      writeValue(ioWriter, value)\r\n    })\r\n  }\r\n  // object\r\n  else if (is.object(value)) {\r\n    ioWriter.writeUint8(3)\r\n    object.each(value, (item, key) => {\r\n      ioWriter.writeUint16(key.length)\r\n      ioWriter.writeString(key)\r\n      writeValue(ioWriter, item)\r\n    })\r\n    // object end flag\r\n    ioWriter.writeUint24(9)\r\n  }\r\n  else if (value instanceof Date) {\r\n    ioWriter.writeUint8(11)\r\n    ioWriter.writeDouble(value.getTime())\r\n    ioWriter.writeInt16(0)\r\n  }\r\n  else if (value == null) {\r\n    ioWriter.writeUint8(5)\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}