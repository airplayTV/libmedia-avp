{"version":3,"file":"src_avformat_formats_OMpegtsFormat_ts.avtranscoder.js","mappings":"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","sources":["webpack://AVTranscoder/./src/avformat/bsf/AVBSFilter.ts","webpack://AVTranscoder/./src/avformat/bsf/aac/Raw2ADTSFilter.ts","webpack://AVTranscoder/./src/avformat/bsf/aac/Raw2LATMFilter.ts","webpack://AVTranscoder/./src/avformat/bsf/h2645/Avcc2AnnexbFilter.ts","webpack://AVTranscoder/./src/avformat/bsf/opus/Raw2MpegtsFilter.ts","webpack://AVTranscoder/./src/avformat/formats/OMpegtsFormat.ts","webpack://AVTranscoder/./src/avformat/formats/mpegts/function/crc32.ts","webpack://AVTranscoder/./src/avformat/formats/mpegts/function/createMpegtsContext.ts","webpack://AVTranscoder/./src/avformat/formats/mpegts/function/createMpegtsStreamContext.ts","webpack://AVTranscoder/./src/avformat/formats/mpegts/mpegts.ts","webpack://AVTranscoder/./src/avformat/formats/mpegts/ompegts.ts","webpack://AVTranscoder/./src/avformat/formats/mpegts/struct.ts","webpack://AVTranscoder/./src/avformat/function/mktag.ts","webpack://AVTranscoder/./src/avutil/codecs/opus.ts","webpack://AVTranscoder/./src/avutil/codecs/vvc.ts"],"sourcesContent":["/*\r\n * libmedia AVBSFilter\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport { avMallocz } from 'avutil/util/mem'\r\nimport { copyCodecParameters, freeCodecParameters } from 'avutil/util/codecparameters'\r\n\r\nexport default abstract class AVBSFilter {\r\n\r\n  inCodecpar: pointer<AVCodecParameters>\r\n  inTimeBase: Rational\r\n\r\n  outCodecpar: pointer<AVCodecParameters>\r\n\r\n  public init(codecpar: pointer<AVCodecParameters>, timeBase: pointer<Rational>): number {\r\n    this.inCodecpar = reinterpret_cast<pointer<AVCodecParameters>>(avMallocz(sizeof(AVCodecParameters)))\r\n    copyCodecParameters(this.inCodecpar, codecpar)\r\n\r\n    this.inTimeBase = {\r\n      den: timeBase.den,\r\n      num: timeBase.num\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  public destroy() {\r\n    if (this.inCodecpar) {\r\n      freeCodecParameters(this.inCodecpar)\r\n      this.inCodecpar = nullptr\r\n    }\r\n  }\r\n\r\n  public abstract sendAVPacket(avpacket: pointer<AVPacket>): number\r\n  public abstract receiveAVPacket(avpacket: pointer<AVPacket>): number\r\n  public abstract reset(): number\r\n}\r\n","/*\r\n * libmedia Raw2ADTSFilter\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport AVBSFilter from '../AVBSFilter'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport { MPEG4SamplingFrequencyIndex } from 'avutil/codecs/aac'\r\nimport { mapUint8Array } from 'cheap/std/memory'\r\nimport { addAVPacketData, copyAVPacketProps, createAVPacket,\r\n  destroyAVPacket, refAVPacket, unrefAVPacket\r\n} from 'avutil/util/avpacket'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport * as errorType from 'avutil/error'\r\n\r\nexport default class Raw2ADTSFilter extends AVBSFilter {\r\n\r\n  private cache: pointer<AVPacket>\r\n  private cached: boolean\r\n\r\n  public init(codecpar: pointer<AVCodecParameters>, timeBase: pointer<Rational>): number {\r\n    super.init(codecpar, timeBase)\r\n    this.cache = createAVPacket()\r\n\r\n    return 0\r\n  }\r\n\r\n  public destroy(): void {\r\n    super.destroy()\r\n    destroyAVPacket(this.cache)\r\n    this.cache = nullptr\r\n    this.cached = false\r\n  }\r\n\r\n  public sendAVPacket(avpacket: pointer<AVPacket>): number {\r\n    if (!avpacket.data || !avpacket.size) {\r\n      return 0\r\n    }\r\n\r\n    const size = 7 + avpacket.size\r\n    const bufferPointer: pointer<uint8> = avMalloc(size)\r\n    const buffer = mapUint8Array(bufferPointer, size)\r\n\r\n    // syncword 0xfff\r\n    buffer[0] = 0xff\r\n    buffer[1] = 0xf0\r\n\r\n    // ID\r\n    buffer[1] |= 1 << 3\r\n\r\n    // Protection Absent\r\n    buffer[1] |= 1\r\n\r\n    // profile\r\n    buffer[2] = ((this.inCodecpar.profile - 1) & 0x03) << 6\r\n\r\n    // Sampling Frequency Index\r\n    buffer[2] |= (MPEG4SamplingFrequencyIndex[this.inCodecpar.sampleRate] & 0x0f) << 2\r\n\r\n    // Channel Configuration 第三位\r\n    buffer[2] |= (this.inCodecpar.chLayout.nbChannels & 0x04) >> 2\r\n\r\n    // Channel Configuration 后两位\r\n    buffer[3] = (this.inCodecpar.chLayout.nbChannels & 0x03) << 6\r\n\r\n    // Frame Length 高 2 位\r\n    buffer[3] |= (buffer.length >> 11) & 0x03\r\n\r\n    // Frame Length 中 8 位\r\n    buffer[4] = (buffer.length >> 3) & 0xff\r\n\r\n    // Frame Length 低 3 位\r\n    buffer[5] = (buffer.length & 0x07) << 5\r\n\r\n    // Buffer Fullness 全 1\r\n    buffer[5] |= 0x1f\r\n    buffer[6] = 0xfc\r\n\r\n    buffer.set(mapUint8Array(avpacket.data, reinterpret_cast<size>(avpacket.size)), 7)\r\n\r\n    copyAVPacketProps(this.cache, avpacket)\r\n    addAVPacketData(this.cache, bufferPointer, size)\r\n    this.cached = true\r\n\r\n    return 0\r\n  }\r\n\r\n  public receiveAVPacket(avpacket: pointer<AVPacket>): number {\r\n    if (this.cached) {\r\n      unrefAVPacket(avpacket)\r\n      refAVPacket(avpacket, this.cache)\r\n      this.cached = false\r\n      return 0\r\n    }\r\n    else {\r\n      return errorType.EOF\r\n    }\r\n  }\r\n\r\n  public reset(): number {\r\n    return 0\r\n  }\r\n}\r\n","/*\r\n * libmedia Raw2LATMFilter\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport AVBSFilter from '../AVBSFilter'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport { MPEG4SamplingFrequencyIndex, getAVCodecParameters } from 'avutil/codecs/aac'\r\nimport { mapUint8Array } from 'cheap/std/memory'\r\nimport { addAVPacketData, copyAVPacketProps, createAVPacket,\r\n  destroyAVPacket, getAVPacketSideData, refAVPacket, unrefAVPacket\r\n} from 'avutil/util/avpacket'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport * as errorType from 'avutil/error'\r\nimport * as object from 'common/util/object'\r\nimport BitWriter from 'common/io/BitWriter'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\n\r\nexport interface AACRaw2LATMFilterOptions {\r\n  mod?: number\r\n}\r\n\r\nconst defaultAACRaw2LATMFilterOptions = {\r\n  mod: 20\r\n}\r\n\r\nconst LATM_HEADER = new Uint8Array([0x56, 0xe0, 0x00])\r\n\r\nexport default class Raw2LATMFilter extends AVBSFilter {\r\n  private cache: pointer<AVPacket>\r\n  private cached: boolean\r\n  private bitWriter: BitWriter\r\n  private counter: number\r\n\r\n  private options: AACRaw2LATMFilterOptions\r\n\r\n  constructor(options: AACRaw2LATMFilterOptions = {}) {\r\n    super()\r\n    this.options = object.extend({}, defaultAACRaw2LATMFilterOptions, options)\r\n  }\r\n\r\n  public init(codecpar: pointer<AVCodecParameters>, timeBase: pointer<Rational>): number {\r\n    super.init(codecpar, timeBase)\r\n    this.cache = createAVPacket()\r\n    this.cached = false\r\n\r\n    this.counter = 0\r\n    this.bitWriter = new BitWriter()\r\n\r\n    return 0\r\n  }\r\n\r\n  public destroy(): void {\r\n    super.destroy()\r\n    destroyAVPacket(this.cache)\r\n    this.cache = nullptr\r\n  }\r\n\r\n  private writeHeader() {\r\n    this.bitWriter.writeU1(this.counter === 0 ? 0 : 1)\r\n\r\n    // StreamMuxConfig\r\n    if (this.counter === 0) {\r\n      // audioMuxVersion\r\n      this.bitWriter.writeU1(0)\r\n      // allStreamsSameTimeFraming\r\n      this.bitWriter.writeU1(1)\r\n      // numSubFrames\r\n      this.bitWriter.writeU(6, 0)\r\n      // numProgram\r\n      this.bitWriter.writeU(4, 0)\r\n      // numLayer\r\n      this.bitWriter.writeU(3, 0)\r\n\r\n      // profile\r\n      this.bitWriter.writeU(5, (this.inCodecpar.profile - 1) & 0x1f)\r\n      // samplingFreqIndex\r\n      this.bitWriter.writeU(4, MPEG4SamplingFrequencyIndex[this.inCodecpar.sampleRate] & 0x0f)\r\n      // channelConfig\r\n      this.bitWriter.writeU(4, this.inCodecpar.chLayout.nbChannels & 0x0f)\r\n      // padding\r\n      this.bitWriter.writeU(3, 0)\r\n\r\n      // frameLengthType\r\n      this.bitWriter.writeU(3, 0)\r\n\r\n      // latmBufferFullness\r\n      this.bitWriter.writeU(8, 0xff)\r\n\r\n      // otherDataPresent\r\n      this.bitWriter.writeU1(0)\r\n\r\n      // crcCheckPresent\r\n      this.bitWriter.writeU1(0)\r\n\r\n    }\r\n\r\n    this.counter++\r\n    this.counter %= this.options.mod\r\n  }\r\n\r\n  private copyBytes(data: Uint8Array) {\r\n    for (let i = 0; i < data.length; i++) {\r\n      this.bitWriter.writeU(8, data[i])\r\n    }\r\n  }\r\n\r\n  public sendAVPacket(avpacket: pointer<AVPacket>): number {\r\n    if (!avpacket.data || !avpacket.size) {\r\n      return 0\r\n    }\r\n\r\n    this.bitWriter.reset()\r\n\r\n    const element = getAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA)\r\n    if (element) {\r\n      const { profile, sampleRate, channels } = getAVCodecParameters(mapUint8Array(element.data, element.size))\r\n      this.inCodecpar.profile = profile\r\n      this.inCodecpar.sampleRate = sampleRate\r\n      this.inCodecpar.chLayout.nbChannels = channels\r\n      this.counter = 0\r\n    }\r\n\r\n    this.writeHeader()\r\n\r\n    let i = 0\r\n    for (; i <= avpacket.size - 255; i += 255) {\r\n      this.bitWriter.writeU(8, 255)\r\n    }\r\n    this.bitWriter.writeU(8, avpacket.size - i)\r\n\r\n    const packetBuffer = mapUint8Array(avpacket.data, reinterpret_cast<size>(avpacket.size))\r\n\r\n    if ((packetBuffer[0] & 0xe1) === 0x81) {\r\n      /*\r\n       * Convert byte-aligned DSE to non-aligned.\r\n       * Due to the input format encoding we know that\r\n       * it is naturally byte-aligned in the input stream,\r\n       * so there are no padding bits to account for.\r\n       * To avoid having to add padding bits and rearrange\r\n       * the whole stream we just remove the byte-align flag.\r\n       * This allows us to remux our FATE AAC samples into latm\r\n       * files that are still playable with minimal effort.\r\n       */\r\n\r\n      this.bitWriter.writeU(8, packetBuffer[0] & 0xfe)\r\n      this.copyBytes(packetBuffer.subarray(1))\r\n    }\r\n    else {\r\n      this.copyBytes(packetBuffer)\r\n    }\r\n\r\n    this.bitWriter.padding()\r\n\r\n    const len = this.bitWriter.getPointer()\r\n\r\n    const size = 3 + len\r\n    const bufferPointer: pointer<uint8> = avMalloc(size)\r\n    const buffer = mapUint8Array(bufferPointer, size)\r\n    buffer.set(LATM_HEADER, 0)\r\n\r\n    buffer[1] |= (len >> 8) & 0x1f\r\n    buffer[2] |= len & 0xff\r\n\r\n    buffer.set(this.bitWriter.getBuffer().subarray(0, len), 3)\r\n\r\n    copyAVPacketProps(this.cache, avpacket)\r\n    addAVPacketData(this.cache, bufferPointer, size)\r\n    this.cached = true\r\n\r\n    return 0\r\n  }\r\n\r\n  public receiveAVPacket(avpacket: pointer<AVPacket>): number {\r\n    if (this.cached) {\r\n      unrefAVPacket(avpacket)\r\n      refAVPacket(avpacket, this.cache)\r\n      this.cached = false\r\n      return 0\r\n    }\r\n    else {\r\n      return errorType.EOF\r\n    }\r\n  }\r\n\r\n  public reset(): number {\r\n    return 0\r\n  }\r\n}\r\n","/*\r\n * libmedia Avcc2AnnexbFilter\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport AVBSFilter from '../AVBSFilter'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport { addAVPacketData, copyAVPacketProps, createAVPacket, destroyAVPacket,\r\n  getAVPacketSideData,\r\n  refAVPacket, unrefAVPacket\r\n} from 'avutil/util/avpacket'\r\n\r\nimport * as h264 from 'avutil/codecs/h264'\r\nimport * as hevc from 'avutil/codecs/hevc'\r\nimport * as vvc from 'avutil/codecs/vvc'\r\nimport { AVCodecID, AVPacketSideDataType } from 'avutil/codec'\r\nimport * as errorType from 'avutil/error'\r\nimport { isAnnexb } from 'avutil/util/nalu'\r\nimport * as logger from 'common/util/logger'\r\nimport { mapSafeUint8Array } from 'cheap/std/memory'\r\n\r\nexport default class Avcc2AnnexbFilter extends AVBSFilter {\r\n  private cache: pointer<AVPacket>\r\n  private cached: boolean\r\n\r\n  public init(codecpar: pointer<AVCodecParameters>, timeBase: pointer<Rational>): number {\r\n    super.init(codecpar, timeBase)\r\n    this.cache = createAVPacket()\r\n    this.cached = false\r\n    return 0\r\n  }\r\n\r\n  public destroy(): void {\r\n    super.destroy()\r\n    destroyAVPacket(this.cache)\r\n    this.cache = nullptr\r\n  }\r\n\r\n  public sendAVPacket(avpacket: pointer<AVPacket>): number {\r\n    const buffer = mapSafeUint8Array(avpacket.data, reinterpret_cast<size>(avpacket.size))\r\n\r\n    if (avpacket.flags & AVPacketFlags.AV_PKT_FLAG_H26X_ANNEXB) {\r\n      refAVPacket(this.cache, avpacket)\r\n    }\r\n    else {\r\n      copyAVPacketProps(this.cache, avpacket)\r\n\r\n      let convert: {\r\n        bufferPointer: pointer<uint8>,\r\n        length: number,\r\n        key: boolean\r\n      }\r\n\r\n      const element = getAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA)\r\n      let extradata = null\r\n      if (element) {\r\n        extradata = mapSafeUint8Array(element.data, element.size)\r\n      }\r\n\r\n      if (this.inCodecpar.codecId === AVCodecID.AV_CODEC_ID_H264) {\r\n        convert = h264.avcc2Annexb(buffer, extradata)\r\n      }\r\n      else if (this.inCodecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC) {\r\n        convert = hevc.avcc2Annexb(buffer, extradata)\r\n      }\r\n      else if (this.inCodecpar.codecId === AVCodecID.AV_CODEC_ID_VVC) {\r\n        convert = vvc.avcc2Annexb(buffer, extradata)\r\n      }\r\n      else {\r\n        logger.fatal(`not support for codecId: ${this.inCodecpar.codecId}`)\r\n      }\r\n\r\n      this.cache.flags |= AVPacketFlags.AV_PKT_FLAG_H26X_ANNEXB\r\n\r\n      addAVPacketData(this.cache, convert.bufferPointer, convert.length)\r\n\r\n      if (convert.key) {\r\n        this.cache.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n      }\r\n    }\r\n    this.cached = true\r\n    return 0\r\n  }\r\n\r\n  public receiveAVPacket(avpacket: pointer<AVPacket>): number {\r\n    if (this.cached) {\r\n      unrefAVPacket(avpacket)\r\n      refAVPacket(avpacket, this.cache)\r\n      this.cached = false\r\n      return 0\r\n    }\r\n    else {\r\n      return errorType.DATA_INVALID\r\n    }\r\n  }\r\n\r\n  public reset(): number {\r\n    return 0\r\n  }\r\n}\r\n","/*\r\n * libmedia Raw2MpegtsFilter\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport AVBSFilter from '../AVBSFilter'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport { mapUint8Array } from 'cheap/std/memory'\r\nimport { addAVPacketData, copyAVPacketProps, createAVPacket,\r\n  destroyAVPacket, getAVPacketSideData, refAVPacket, unrefAVPacket\r\n} from 'avutil/util/avpacket'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport * as errorType from 'avutil/error'\r\nimport * as opus from 'avutil/codecs/opus'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\n\r\nexport default class Raw2MpegtsFilter extends AVBSFilter {\r\n\r\n  private cache: pointer<AVPacket>\r\n\r\n  private cached: boolean\r\n\r\n  private opusPendingTrimStart: number\r\n\r\n  public init(codecpar: pointer<AVCodecParameters>, timeBase: pointer<Rational>): number {\r\n\r\n    super.init(codecpar, timeBase)\r\n    this.cache = createAVPacket()\r\n    this.cached = false\r\n\r\n    this.opusPendingTrimStart = (this.inCodecpar.initialPadding > 0 ? this.inCodecpar.initialPadding : 0)\r\n    * 48000 / this.inCodecpar.sampleRate\r\n\r\n    return 0\r\n  }\r\n\r\n  public destroy(): void {\r\n    super.destroy()\r\n    destroyAVPacket(this.cache)\r\n    this.cache = nullptr\r\n  }\r\n\r\n  public sendAVPacket(avpacket: pointer<AVPacket>): number {\r\n    if (!avpacket.data || !avpacket.size) {\r\n      return\r\n    }\r\n\r\n    const packetBuffer = mapUint8Array(avpacket.data, reinterpret_cast<size>(avpacket.size))\r\n\r\n    const opusSamples = opus.getBufferSamples(packetBuffer)\r\n    let sideData = null\r\n    const element = getAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_SKIP_SAMPLES)\r\n    if (element) {\r\n      sideData = mapUint8Array(element.data, element.size)\r\n    }\r\n    let trimEnd = 0\r\n\r\n    if (sideData && sideData.length >= 10) {\r\n      const value = (sideData[4] << 24) | (sideData[5] << 16) | (sideData[6] << 8) | sideData[9]\r\n      trimEnd = value * 48000 / this.inCodecpar.sampleRate\r\n    }\r\n\r\n    let ctrlHeaderSize = packetBuffer.length + 2 + packetBuffer.length / 255 + 1\r\n    if (this.opusPendingTrimStart) {\r\n      ctrlHeaderSize += 2\r\n    }\r\n    if (trimEnd) {\r\n      ctrlHeaderSize += 2\r\n    }\r\n\r\n    const bufferPointer: pointer<uint8> = avMalloc(ctrlHeaderSize)\r\n    const buffer = mapUint8Array(bufferPointer, ctrlHeaderSize)\r\n\r\n    buffer[0] = 0x7f\r\n    buffer[1] = 0xe0\r\n    if (this.opusPendingTrimStart) {\r\n      buffer[1] |= 0x10\r\n    }\r\n\r\n    if (trimEnd) {\r\n      buffer[1] |= 0x08\r\n    }\r\n\r\n    let n = packetBuffer.length\r\n    let i = 2\r\n    do {\r\n      buffer[i] = Math.min(n, 255)\r\n      n -= 255\r\n      i++\r\n    }\r\n    while (n >= 0)\r\n\r\n    let trimStart = 0\r\n    if (this.opusPendingTrimStart) {\r\n      trimStart = Math.min(this.opusPendingTrimStart, opusSamples)\r\n      buffer[i] = (trimStart & 0xff00) >> 8\r\n      buffer[i + 1] = trimStart & 0xff\r\n      i += 2\r\n      this.opusPendingTrimStart -= trimStart\r\n    }\r\n    if (trimEnd) {\r\n      trimEnd = Math.min(trimEnd, opusSamples - trimStart)\r\n      buffer[i] = (trimEnd & 0xff00) >> 8\r\n      buffer[i + 1] = trimEnd & 0xff\r\n      i += 2\r\n    }\r\n\r\n    buffer.set(packetBuffer, i)\r\n\r\n    copyAVPacketProps(this.cache, avpacket)\r\n    addAVPacketData(this.cache, bufferPointer, ctrlHeaderSize)\r\n    this.cached = true\r\n    return 0\r\n  }\r\n\r\n  public receiveAVPacket(avpacket: pointer<AVPacket>): number {\r\n    if (this.cached) {\r\n      unrefAVPacket(avpacket)\r\n      refAVPacket(avpacket, this.cache)\r\n      this.cached = false\r\n      return 0\r\n    }\r\n    else {\r\n      return errorType.DATA_INVALID\r\n    }\r\n  }\r\n\r\n  public reset(): number {\r\n    return 0\r\n  }\r\n}\r\n","/*\r\n * libmedia mpegts encoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVOFormatContext } from '../AVFormatContext'\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport createMpegtsContext from './mpegts/function/createMpegtsContext'\r\nimport { PAT, PES, PMT, SectionPacket, TSPacket } from './mpegts/struct'\r\nimport { MpegtsContext, MpegtsStreamContext } from './mpegts/type'\r\nimport OFormat from './OFormat'\r\nimport * as mpegts from './mpegts/mpegts'\r\nimport * as ompegts from './mpegts/ompegts'\r\nimport * as array from 'common/util/array'\r\nimport * as object from 'common/util/object'\r\nimport { AVCodecID, AVMediaType, AVPacketSideDataType } from 'avutil/codec'\r\nimport createMpegtsStreamContext from './mpegts/function/createMpegtsStreamContext'\r\nimport AVBSFilter from '../bsf/AVBSFilter'\r\nimport AACRaw2ADTSFilter from '../bsf/aac/Raw2ADTSFilter'\r\nimport AACRaw2LATMFilter from '../bsf/aac/Raw2LATMFilter'\r\nimport OpusRaw2MpegtsFilter from '../bsf/opus/Raw2MpegtsFilter'\r\nimport Avcc2AnnexbFilter from '../bsf/h2645/Avcc2AnnexbFilter'\r\nimport { AV_TIME_BASE, AV_TIME_BASE_Q, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport { AVFormat } from 'avutil/avformat'\r\nimport { mapUint8Array, memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport { avRescaleQ2 } from 'avutil/util/rational'\r\nimport { addAVPacketData, addAVPacketSideData, createAVPacket, destroyAVPacket, getAVPacketData, hasAVPacketSideData } from 'avutil/util/avpacket'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport * as logger from 'common/util/logger'\r\nimport * as naluUtil from 'avutil/util/nalu'\r\nimport * as h264 from 'avutil/codecs/h264'\r\nimport * as hevc from 'avutil/codecs/hevc'\r\nimport * as vvc from 'avutil/codecs/vvc'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport interface OMpegtsFormatOptions {\r\n  pesMaxSize?: number\r\n  delay?: number\r\n  latm?: boolean\r\n  patPeriod?: number\r\n}\r\n\r\nconst defaultOMpegtsFormatOptions = {\r\n  pesMaxSize: (16 - 1) * 184 + 170,\r\n  delay: 1.4,\r\n  latm: false,\r\n  patPeriod: 0.1\r\n}\r\n\r\nexport default class OMpegtsFormat extends OFormat {\r\n\r\n  public type: AVFormat = AVFormat.MPEGTS\r\n\r\n  private context: MpegtsContext\r\n\r\n  private sdtPacket: SectionPacket\r\n\r\n  private patPacket: SectionPacket\r\n\r\n  private pmtPacket: SectionPacket\r\n\r\n  private options: OMpegtsFormatOptions\r\n\r\n  private firstDtsCheck: boolean\r\n\r\n  private firstVideoCheck: boolean\r\n\r\n  private lastPatDst: bigint\r\n\r\n  private patPeriod: bigint\r\n\r\n  private avpacket: pointer<AVPacket>\r\n\r\n  constructor(options: OMpegtsFormatOptions = {}) {\r\n    super()\r\n    this.context = createMpegtsContext()\r\n    this.options = object.extend({}, defaultOMpegtsFormatOptions, options)\r\n\r\n    this.options.pesMaxSize = this.options.pesMaxSize ? (this.options.pesMaxSize + 14 + 183) / 184 * 184 - 14 : 0\r\n    this.firstDtsCheck = false\r\n    this.firstVideoCheck = false\r\n\r\n    this.patPeriod = static_cast<int64>(this.options.patPeriod * AV_TIME_BASE)\r\n  }\r\n\r\n  public init(context: AVOFormatContext): number {\r\n    context.ioWriter.setEndian(true)\r\n    this.avpacket = createAVPacket()\r\n    return 0\r\n  }\r\n\r\n  public async destroy(context: AVOFormatContext) {\r\n    super.destroy(context)\r\n    array.each(context.streams, (stream) => {\r\n      const streamContext = stream.privData as MpegtsStreamContext\r\n      if (streamContext.filter) {\r\n        streamContext.filter.destroy()\r\n        streamContext.filter = null\r\n      }\r\n    })\r\n    if (this.avpacket) {\r\n      destroyAVPacket(this.avpacket)\r\n      this.avpacket = nullptr\r\n    }\r\n  }\r\n\r\n  public writeHeader(context: AVOFormatContext): number {\r\n\r\n    this.context.pat = new PAT()\r\n    this.context.pat.program2PmtPid.set(1, 4096)\r\n\r\n    this.context.pmt = new PMT()\r\n    this.context.pmt.programNumber = 1\r\n\r\n    array.each(context.streams, (stream) => {\r\n\r\n      stream.timeBase.den = 90000\r\n      stream.timeBase.num = 1\r\n\r\n      const pid = this.context.startPid++\r\n\r\n      if (this.context.pmt.pcrPid <= 0) {\r\n        this.context.pmt.pcrPid = pid\r\n      }\r\n\r\n      let streamType = ompegts.getStreamType(stream)\r\n\r\n      const streamContext = createMpegtsStreamContext()\r\n\r\n      stream.privData = streamContext\r\n\r\n      const tsPacket = new TSPacket()\r\n      tsPacket.pid = pid\r\n      tsPacket.adaptationFieldControl = 0x01\r\n\r\n      streamContext.tsPacket = tsPacket\r\n      streamContext.pid = pid\r\n\r\n      let filter: AVBSFilter = null\r\n\r\n      switch (streamType) {\r\n        case mpegts.TSStreamType.AUDIO_AAC:\r\n          if (this.options.latm) {\r\n            streamContext.latm = true\r\n            streamType = mpegts.TSStreamType.AUDIO_AAC_LATM\r\n            filter = new AACRaw2LATMFilter()\r\n          }\r\n          else {\r\n            filter = new AACRaw2ADTSFilter()\r\n          }\r\n\r\n          break\r\n        case mpegts.TSStreamType.VIDEO_H264:\r\n        case mpegts.TSStreamType.VIDEO_HEVC:\r\n        case mpegts.TSStreamType.VIDEO_VVC:\r\n          filter = new Avcc2AnnexbFilter()\r\n          break\r\n        case mpegts.TSStreamType.PRIVATE_DATA:\r\n          if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_OPUS) {\r\n            filter = new OpusRaw2MpegtsFilter()\r\n          }\r\n          break\r\n      }\r\n\r\n      if (filter) {\r\n        filter.init(addressof(stream.codecpar), addressof(stream.timeBase))\r\n      }\r\n\r\n      streamContext.filter = filter\r\n      this.context.pmt.pid2StreamType.set(pid, streamType)\r\n\r\n      const pes = new PES()\r\n      pes.pid = pid\r\n      pes.streamType = streamType\r\n      pes.streamId = ompegts.getStreamId(stream)\r\n      streamContext.pes = pes\r\n    })\r\n\r\n    this.patPacket = new SectionPacket()\r\n    this.pmtPacket = new SectionPacket()\r\n    this.sdtPacket = new SectionPacket()\r\n\r\n    this.sdtPacket.pid = mpegts.TSPid.SDT\r\n    this.sdtPacket.adaptationFieldControl = 0x01\r\n    this.patPacket.pid = mpegts.TSPid.PAT\r\n    this.patPacket.adaptationFieldControl = 0x01\r\n    this.pmtPacket.pid = 4096\r\n    this.pmtPacket.adaptationFieldControl = 0x01\r\n\r\n    this.sdtPacket.payload = ompegts.getSDTPayload()\r\n    this.patPacket.payload = ompegts.getPATPayload(this.context.pat)\r\n    this.pmtPacket.payload = ompegts.getPMTPayload(this.context.pmt, context.streams)\r\n\r\n    ompegts.writeSection(context.ioWriter, this.sdtPacket, this.context)\r\n    ompegts.writeSection(context.ioWriter, this.patPacket, this.context)\r\n    ompegts.writeSection(context.ioWriter, this.pmtPacket, this.context)\r\n\r\n    return 0\r\n  }\r\n\r\n  public writeAVPacket(formatContext: AVOFormatContext, avpacket: pointer<AVPacket>): number {\r\n\r\n    if (!avpacket.size) {\r\n      logger.warn(`packet\\'s size is 0: ${avpacket.streamIndex}, ignore it`)\r\n      return\r\n    }\r\n\r\n    const stream = formatContext.getStreamByIndex(avpacket.streamIndex)\r\n\r\n    if (!stream) {\r\n      logger.warn(`can not found the stream width the packet\\'s streamIndex: ${avpacket.streamIndex}, ignore it`)\r\n      return\r\n    }\r\n\r\n    if (!this.firstDtsCheck) {\r\n      if (avRescaleQ2(avpacket.dts, addressof(avpacket.timeBase), stream.timeBase)\r\n        < static_cast<int64>(this.options.delay * 90000)\r\n      ) {\r\n        this.context.delay = static_cast<int64>(this.options.delay * 90000)\r\n        - avRescaleQ2(avpacket.dts, addressof(avpacket.timeBase), stream.timeBase)\r\n      }\r\n      this.firstDtsCheck = true\r\n      this.lastPatDst = avRescaleQ2(avpacket.dts, addressof(avpacket.timeBase), AV_TIME_BASE_Q)\r\n    }\r\n\r\n    if (this.patPeriod > 0n\r\n      && avRescaleQ2(avpacket.dts, addressof(avpacket.timeBase), AV_TIME_BASE_Q) - this.lastPatDst > this.patPeriod\r\n    ) {\r\n      ompegts.writeSection(formatContext.ioWriter, this.sdtPacket, this.context)\r\n      ompegts.writeSection(formatContext.ioWriter, this.patPacket, this.context)\r\n      ompegts.writeSection(formatContext.ioWriter, this.pmtPacket, this.context)\r\n      this.lastPatDst = avRescaleQ2(avpacket.dts, addressof(avpacket.timeBase), AV_TIME_BASE_Q)\r\n    }\r\n\r\n    const streamContext = stream.privData as MpegtsStreamContext\r\n\r\n    let buffer = getAVPacketData(avpacket)\r\n\r\n    if (streamContext.filter) {\r\n      if (!this.firstVideoCheck\r\n        && (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n          || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n          || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n        )\r\n        && avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY\r\n      ) {\r\n        let hasNewSps = hasAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA)\r\n        if (!hasNewSps && (avpacket.flags & AVPacketFlags.AV_PKT_FLAG_H26X_ANNEXB)) {\r\n          if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264) {\r\n            hasNewSps = !!h264.generateAnnexbExtradata(getAVPacketData(avpacket))\r\n          }\r\n          else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC) {\r\n            hasNewSps = !!hevc.generateAnnexbExtradata(getAVPacketData(avpacket))\r\n          }\r\n          else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC) {\r\n            hasNewSps = !!vvc.generateAnnexbExtradata(getAVPacketData(avpacket))\r\n          }\r\n        }\r\n        this.firstVideoCheck = true\r\n        if (!hasNewSps && stream.codecpar.extradata) {\r\n          if (avpacket.flags & AVPacketFlags.AV_PKT_FLAG_H26X_ANNEXB) {\r\n            let extradata = mapUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize)).slice()\r\n\r\n            if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n              && !h264.generateAnnexbExtradata(getAVPacketData(avpacket))\r\n            ) {\r\n              let spss: Uint8ArrayInterface[] = []\r\n              let ppss: Uint8ArrayInterface[] = []\r\n              let spsExts: Uint8ArrayInterface[] = []\r\n              const seis: Uint8ArrayInterface[] = []\r\n              const others: Uint8ArrayInterface[] = []\r\n              if (naluUtil.isAnnexb(extradata)) {\r\n                naluUtil.splitNaluByStartCode(extradata).forEach((nalu) => {\r\n                  const naluType = nalu[0] & 0x1f\r\n                  if (naluType === h264.H264NaluType.kSliceSPS) {\r\n                    spss.push(nalu)\r\n                  }\r\n                  else if (naluType === h264.H264NaluType.kSlicePPS) {\r\n                    ppss.push(nalu)\r\n                  }\r\n                  else if (naluType === h264.H264NaluType.kSPSExt) {\r\n                    spsExts.push(nalu)\r\n                  }\r\n                })\r\n              }\r\n              else {\r\n                const result = h264.extradata2SpsPps(extradata)\r\n                spss = result.spss\r\n                ppss = result.ppss\r\n                spsExts = result.spsExts\r\n              }\r\n              naluUtil.splitNaluByStartCode(getAVPacketData(avpacket, true)).forEach((nalu) => {\r\n                const naluType = nalu[0] & 0x1f\r\n                if (naluType === h264.H264NaluType.kSliceSEI) {\r\n                  seis.push(nalu)\r\n                }\r\n                else if (naluType !== h264.H264NaluType.kSliceAUD) {\r\n                  others.push(nalu)\r\n                }\r\n              })\r\n              const result = h264.nalus2Annexb(spss, ppss, spsExts, seis, others)\r\n              addAVPacketData(avpacket, result.bufferPointer, result.length)\r\n            }\r\n            else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n              && !hevc.generateAnnexbExtradata(getAVPacketData(avpacket))\r\n            ) {\r\n              let spss: Uint8ArrayInterface[] = []\r\n              let ppss: Uint8ArrayInterface[] = []\r\n              let vpss: Uint8ArrayInterface[] = []\r\n              const nalus: Uint8ArrayInterface[] = []\r\n              if (naluUtil.isAnnexb(extradata)) {\r\n                naluUtil.splitNaluByStartCode(extradata).forEach((nalu) => {\r\n                  const type = (nalu[0] >>> 1) & 0x3f\r\n                  if (type === hevc.HEVCNaluType.kSliceVPS) {\r\n                    vpss.push(nalu)\r\n                  }\r\n                  else if (type === hevc.HEVCNaluType.kSliceSPS) {\r\n                    spss.push(nalu)\r\n                  }\r\n                  else if (type === hevc.HEVCNaluType.kSlicePPS) {\r\n                    ppss.push(nalu)\r\n                  }\r\n                })\r\n              }\r\n              else {\r\n                const result = hevc.extradata2VpsSpsPps(extradata)\r\n                spss = result.spss\r\n                ppss = result.ppss\r\n                vpss = result.vpss\r\n              }\r\n              naluUtil.splitNaluByStartCode(getAVPacketData(avpacket, true)).forEach((nalu) => {\r\n                const type = (nalu[0] >>> 1) & 0x3f\r\n                if (type !== hevc.HEVCNaluType.kSliceAUD) {\r\n                  nalus.push(nalu)\r\n                }\r\n              })\r\n              const result = hevc.nalus2Annexb(vpss, spss, ppss, nalus)\r\n              addAVPacketData(avpacket, result.bufferPointer, result.length)\r\n            }\r\n            else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n              && !vvc.generateAnnexbExtradata(getAVPacketData(avpacket))\r\n            ) {\r\n              let spss: Uint8ArrayInterface[] = []\r\n              let ppss: Uint8ArrayInterface[] = []\r\n              let vpss: Uint8ArrayInterface[] = []\r\n              const nalus: Uint8ArrayInterface[] = []\r\n              if (naluUtil.isAnnexb(extradata)) {\r\n                naluUtil.splitNaluByStartCode(extradata).forEach((nalu) => {\r\n                  const type = (nalu[1] >>> 3) & 0x1f\r\n                  if (type === vvc.VVCNaluType.kVPS_NUT) {\r\n                    vpss.push(nalu)\r\n                  }\r\n                  else if (type === vvc.VVCNaluType.kSPS_NUT) {\r\n                    spss.push(nalu)\r\n                  }\r\n                  else if (type === vvc.VVCNaluType.kPPS_NUT) {\r\n                    ppss.push(nalu)\r\n                  }\r\n                })\r\n              }\r\n              else {\r\n                const result = vvc.extradata2VpsSpsPps(extradata)\r\n                spss = result.spss\r\n                ppss = result.ppss\r\n                vpss = result.vpss\r\n              }\r\n              naluUtil.splitNaluByStartCode(getAVPacketData(avpacket, true)).forEach((nalu) => {\r\n                const type = (nalu[1] >>> 3) & 0x1f\r\n                if (type !== vvc.VVCNaluType.kAUD_NUT) {\r\n                  nalus.push(nalu)\r\n                }\r\n              })\r\n              const result = vvc.nalus2Annexb(vpss, spss, ppss, nalus, !!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY))\r\n              addAVPacketData(avpacket, result.bufferPointer, result.length)\r\n            }\r\n          }\r\n          else {\r\n            let extradata = mapUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize)).slice()\r\n            if (naluUtil.isAnnexb(extradata)) {\r\n              if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264) {\r\n                extradata = h264.annexbExtradata2AvccExtradata(extradata)\r\n              }\r\n              else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC) {\r\n                extradata = hevc.annexbExtradata2AvccExtradata(extradata)\r\n              }\r\n              else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC) {\r\n                extradata = vvc.annexbExtradata2AvccExtradata(extradata)\r\n              }\r\n            }\r\n            const extradataPointer = avMalloc(extradata.length)\r\n            memcpyFromUint8Array(extradataPointer, extradata.length, extradata)\r\n            addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, extradataPointer, extradata.length)\r\n          }\r\n        }\r\n      }\r\n      streamContext.filter.sendAVPacket(avpacket)\r\n      streamContext.filter.receiveAVPacket(this.avpacket)\r\n      buffer = getAVPacketData(this.avpacket)\r\n      avpacket = this.avpacket\r\n    }\r\n\r\n    if (!buffer.length) {\r\n      return 0\r\n    }\r\n\r\n    buffer = buffer.slice()\r\n\r\n    let currentWrote = false\r\n\r\n    if (streamContext.pesSlices.total + buffer.length > this.options.pesMaxSize\r\n      || stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_VIDEO\r\n    ) {\r\n      if (streamContext.pesSlices.total === 0) {\r\n        streamContext.pesSlices.total = buffer.length\r\n        streamContext.pesSlices.buffers.push(buffer)\r\n        if (avpacket.dts !== NOPTS_VALUE_BIGINT) {\r\n          streamContext.pes.dts = avRescaleQ2(avpacket.dts, addressof(avpacket.timeBase), stream.timeBase) + this.context.delay\r\n        }\r\n        if (avpacket.pts !== NOPTS_VALUE_BIGINT) {\r\n          streamContext.pes.pts = avRescaleQ2(avpacket.pts, addressof(avpacket.timeBase), stream.timeBase) + this.context.delay\r\n        }\r\n        if (stream.codecpar.codecType !== AVMediaType.AVMEDIA_TYPE_VIDEO\r\n          || avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY\r\n        ) {\r\n          streamContext.pes.randomAccessIndicator = 1\r\n        }\r\n        else {\r\n          streamContext.pes.randomAccessIndicator = 0\r\n        }\r\n        currentWrote = true\r\n      }\r\n\r\n      ompegts.writePES(formatContext.ioWriter, streamContext.pes, streamContext.pesSlices, stream, this.context)\r\n\r\n      streamContext.pesSlices.total = 0\r\n      streamContext.pesSlices.buffers = []\r\n    }\r\n\r\n    if (!currentWrote) {\r\n      if (streamContext.pesSlices.total === 0) {\r\n        if (avpacket.dts !== NOPTS_VALUE_BIGINT) {\r\n          streamContext.pes.dts = avRescaleQ2(avpacket.dts, addressof(avpacket.timeBase), stream.timeBase) + this.context.delay\r\n        }\r\n        if (avpacket.pts !== NOPTS_VALUE_BIGINT) {\r\n          streamContext.pes.pts = avRescaleQ2(avpacket.pts, addressof(avpacket.timeBase), stream.timeBase) + this.context.delay\r\n        }\r\n        if (stream.codecpar.codecType !== AVMediaType.AVMEDIA_TYPE_VIDEO\r\n          || avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY\r\n        ) {\r\n          streamContext.pes.randomAccessIndicator = 1\r\n        }\r\n        else {\r\n          streamContext.pes.randomAccessIndicator = 0\r\n        }\r\n      }\r\n      streamContext.pesSlices.total += buffer.length\r\n      streamContext.pesSlices.buffers.push(buffer)\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  public writeTrailer(context: AVOFormatContext): number {\r\n\r\n    array.each(context.streams, (stream) => {\r\n      const streamContext = stream.privData as MpegtsStreamContext\r\n      if (streamContext.pesSlices.total) {\r\n        ompegts.writePES(context.ioWriter, streamContext.pes, streamContext.pesSlices, stream, this.context)\r\n      }\r\n      streamContext.pesSlices.total = 0\r\n      streamContext.pesSlices.buffers = []\r\n    })\r\n\r\n    context.ioWriter.flush()\r\n\r\n    return 0\r\n  }\r\n\r\n  public flush(context: AVOFormatContext): number {\r\n    context.ioWriter.flush()\r\n    return 0\r\n  }\r\n\r\n}\r\n","/*\r\n * libmedia calculate crc32\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nexport function calculateCRC32(data: Uint8Array) {\r\n  const generatorPolynomial = 0x04C11DB7\r\n  let crc = 0xFFFFFFFF\r\n  for (let i = 0; i < data.length; i++) {\r\n    crc ^= data[i] << 24\r\n    for (let j = 0; j < 8; j++) {\r\n      if (crc & 0x80000000) {\r\n        crc = (crc << 1) ^ generatorPolynomial\r\n      }\r\n      else {\r\n        crc <<= 1\r\n      }\r\n    }\r\n  }\r\n  return crc >>> 0\r\n}\r\n","/*\r\n * libmedia create mpegts context\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { NOPTS_VALUE } from 'avutil/constant'\r\nimport { PAT, PMT } from '../struct'\r\nimport { MpegtsContext } from '../type'\r\n\r\nexport default function createMpegtsContext(): MpegtsContext {\r\n\r\n  return {\r\n    currentProgram: NOPTS_VALUE,\r\n    currentPmtPid: NOPTS_VALUE,\r\n    tsPacketSize: NOPTS_VALUE,\r\n    hasPAT: false,\r\n    hasPMT: false,\r\n    tsSliceQueueMap: new Map(),\r\n    pat: new PAT(),\r\n    pmt: new PMT(),\r\n    program2Pmt: new Map(),\r\n    ioEnd: false,\r\n\r\n    startPid: 0x100,\r\n    delay: 0n\r\n  }\r\n}\r\n","/*\r\n * libmedia create mpegts stream context\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { NOPTS_VALUE } from 'avutil/constant'\r\nimport { MpegtsStreamContext } from '../type'\r\n\r\nexport default function createMpegtsStreamContext(): MpegtsStreamContext {\r\n  return {\r\n    pid: NOPTS_VALUE,\r\n    filter: null,\r\n    tsPacket: null,\r\n    pes: null,\r\n    pendingPES: null,\r\n    continuityCounter: 0,\r\n    pesSlices: {\r\n      total: 0,\r\n      buffers: []\r\n    },\r\n    latm: false\r\n  }\r\n}\r\n","/*\r\n * libmedia mpegts identify defined\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVCodecID, AVMediaType } from 'avutil/codec'\r\n\r\nexport const TS_FEC_PACKET_SIZE = 204\r\n\r\nexport const TS_DVHS_PACKET_SIZE = 192\r\n\r\nexport const TS_PACKET_SIZE = 188\r\n\r\nexport const TS_MAX_PACKET_SIZE = 204\r\n\r\nexport const NB_PID_MAX = 8192\r\n\r\nexport const USUAL_SECTION_SIZE = 1024\r\n\r\nexport const MAX_SECTION_SIZE = 4096\r\n\r\nexport const PROBE_PACKET_MAX_BUF = 8192\r\n\r\nexport const PROBE_PACKET_MARGIN = 5\r\n\r\n/**\r\n * maximum size in which we look for synchronization if\r\n * synchronization is lost \r\n */\r\nexport const MAX_RESYNC_SIZE = 65536\r\n\r\nexport const MAX_PES_PAYLOAD = 200 * 1024\r\n\r\nexport const MAX_MP4_DESCR_COUNT = 16\r\n\r\nexport const REGISTRATION_DESCRIPTOR = 0x05\r\n\r\nexport const ISO_639_LANGUAGE_DESCRIPTOR = 0x0a\r\n\r\nexport const enum TSPid {\r\n  /**\r\n   * Program Association Table\r\n   */\r\n  PAT = 0x0000,\r\n  /**\r\n   * Conditional Access Table\r\n   */\r\n  CAT = 0x0001,\r\n  /**\r\n   * Transport Stream Description Table\r\n   */\r\n  TSDT = 0x0002,\r\n  IPMP = 0x0003,\r\n\r\n  /**\r\n   * PID from 0x0004 to 0x000F are reserved\r\n   */\r\n\r\n  /**\r\n   * Network Information Table\r\n   */\r\n  NIT = 0x0010,\r\n  /**\r\n   * Service Description Table\r\n   */\r\n  SDT = 0x0011,\r\n  /**\r\n   * Bouquet Association Table\r\n   */\r\n  BAT = 0x0011,\r\n  /**\r\n   * Event Information Table\r\n   */\r\n  EIT = 0x0012,\r\n  /**\r\n   * Running Status Table\r\n   */\r\n  RST = 0x0013,\r\n  /**\r\n   * Time and Date Table \r\n   */\r\n  TDT = 0x0014,\r\n  TOT = 0x0014,\r\n  NET_SYNC = 0x0015,\r\n  /**\r\n   * RAR Notification Table\r\n   */\r\n  RNT = 0x0016,\r\n\r\n  /**\r\n   * PID from 0x0017 to 0x001B are reserved for future use\r\n   * \r\n   */\r\n\r\n  /**\r\n   * PID value 0x001C allocated to link-local inband signalling shall not be\r\n   * used on any broadcast signals. It shall only be used between devices in a\r\n   * controlled environment. \r\n   */\r\n  LINK_LOCAL = 0x001C,\r\n  MEASUREMENT = 0x001D,\r\n  /**\r\n   * Discontinuity Information Table\r\n   */\r\n  DIT = 0x001E,\r\n  /**\r\n   * Selection Information Table\r\n   */\r\n  SIT = 0x001F,\r\n  /**\r\n   * PID from 0x0020 to 0x1FFA may be assigned as needed to PMT, elementary\r\n   * streams and other data tables\r\n   */\r\n  FIRST_OTHER = 0x0020,\r\n  LAST_OTHER = 0x1FFA,\r\n  /**\r\n   * PID 0x1FFB is used by DigiCipher 2/ATSC MGT metadata\r\n   * PID from 0x1FFC to 0x1FFE may be assigned as needed to PMT, elementary\r\n   * streams and other data tables\r\n   */\r\n\r\n  /**\r\n   * Null packet (used for fixed bandwidth padding)\r\n   */\r\n  NULL = 0x1FFF,\r\n  /**\r\n   * m2ts pids\r\n   */\r\n  M2TS_PMT = 0x0100,\r\n  M2TS_PCR = 0x1001,\r\n  M2TS_VIDEO = 0x1011,\r\n  M2TS_AUDIO_START = 0x1100,\r\n  M2TS_PGSSUB_START = 0x1200,\r\n  M2TS_TEXTSUB = 0x1800,\r\n  M2TS_SECONDARY_AUDIO_START = 0x1A00,\r\n  M2TS_SECONDARY_VIDEO_START = 0x1B00\r\n}\r\n\r\nexport const enum TSTid {\r\n  /**\r\n   * Program Association section\r\n   */\r\n  PAT = 0x00,\r\n  /**\r\n   * Conditional Access section \r\n   */\r\n  CAT = 0x01,\r\n  /**\r\n   * Program Map section\r\n   */\r\n  PMT = 0x02,\r\n  /**\r\n   * Transport Stream Description section \r\n   */\r\n  TSDT = 0x03,\r\n\r\n  /**\r\n   * TID from 0x04 to 0x3F are reserved\r\n   */\r\n\r\n  M4OD = 0x05,\r\n  /**\r\n   * Network Information section - actual network\r\n   */\r\n  NIT = 0x40,\r\n  /**\r\n   * Network Information section - actual network\r\n   */\r\n  ONIT = 0x41,\r\n  /**\r\n   * Service Description section - actual TS\r\n   */\r\n  SDT = 0x42,\r\n\r\n  /**\r\n   * TID from 0x43 to 0x45 are reserved for future use\r\n   */\r\n\r\n  /**\r\n   * Service Descrition section - other TS \r\n   */\r\n  OSDT = 0x46,\r\n\r\n  /**\r\n   * TID from 0x47 to 0x49 are reserved for future use\r\n   */\r\n\r\n  /**\r\n   * Bouquet Association section\r\n   */\r\n  BAT = 0x4A,\r\n  /**\r\n   * Update Notification Table section\r\n   */\r\n  UNT = 0x4B,\r\n  /**\r\n   * Downloadable Font Info section\r\n   */\r\n  DFI = 0x4C,\r\n\r\n  /**\r\n   * TID 0x4D is reserved for future use \r\n   */\r\n\r\n  /**\r\n   * Event Information section - actual TS\r\n   */\r\n  EIT = 0x4E,\r\n  /**\r\n   * Event Information section - other TS\r\n   */\r\n  OEIT = 0x4F,\r\n  /**\r\n   * Event Information section schedule - actual TS \r\n   */\r\n  EITS_START = 0x50,\r\n  /**\r\n   * Event Information section schedule - actual TS \r\n   */\r\n  EITS_END = 0x5F,\r\n  /**\r\n   *  Event Information section schedule - other TS\r\n   */\r\n  OEITS_START = 0x60,\r\n  /**\r\n   * Event Information section schedule - other TS\r\n   */\r\n  OEITS_END = 0x6F,\r\n  /**\r\n   * Time Date section\r\n   */\r\n  TDT = 0x70,\r\n  /**\r\n   * Running Status section\r\n   */\r\n  RST = 0x71,\r\n  /**\r\n   * Stuffing section\r\n   */\r\n  ST = 0x72,\r\n  /**\r\n   * Time Offset section\r\n   */\r\n  TOT = 0x73,\r\n  /**\r\n   * Application Inforamtion section\r\n   */\r\n  AIT = 0x74,\r\n  /**\r\n   * Container section\r\n   */\r\n  CT = 0x75,\r\n  /**\r\n   * Related Content section\r\n   */\r\n  RCT = 0x76,\r\n  /**\r\n   * Related Content section\r\n   */\r\n  CIT = 0x77,\r\n  /**\r\n   * MPE-FEC section\r\n   */\r\n  MPE_FEC = 0x78,\r\n  /**\r\n   * Resolution Provider Notification section\r\n   */\r\n  RPNT = 0x79,\r\n  /**\r\n   * MPE-IFEC section\r\n   */\r\n  MPE_IFEC = 0x7A,\r\n  /**\r\n   * Protection Message section\r\n   */\r\n  PROTMT = 0x7B,\r\n\r\n  /**\r\n   * TID from 0x7C to 0x7D are reserved for future use\r\n   */\r\n\r\n  /**\r\n   * Discontinuity Information section\r\n   */\r\n  DIT = 0x7E,\r\n  /**\r\n   * Selection Information section\r\n   */\r\n  SIT = 0x7F\r\n\r\n  /**\r\n   * TID from 0x80 to 0xFE are user defined\r\n   * TID 0xFF is reserved\r\n   */\r\n}\r\n\r\nexport const enum TSStreamType {\r\n  NONE = 0x00,\r\n  VIDEO_MPEG1 = 0x01,\r\n  VIDEO_MPEG2 = 0x02,\r\n  AUDIO_MPEG1 = 0x03,\r\n  AUDIO_MPEG2 = 0x04,\r\n  PRIVATE_SECTION = 0x05,\r\n  PRIVATE_DATA = 0x06,\r\n  AUDIO_AAC = 0x0f,\r\n  AUDIO_AAC_LATM = 0x11,\r\n  VIDEO_MPEG4 = 0x10,\r\n  METADATA = 0x15,\r\n  VIDEO_H264 = 0x1b,\r\n  VIDEO_HEVC = 0x24,\r\n  VIDEO_VVC = 0x33,\r\n  VIDEO_CAVS = 0x42,\r\n  VIDEO_VC1 = 0xea,\r\n  VIDEO_DIRAC = 0xd1,\r\n\r\n  AUDIO_AC3 = 0x81,\r\n  AUDIO_DTS = 0x82,\r\n  AUDIO_TRUEHD = 0x83,\r\n  kSCTE35 = 0x86,\r\n  AUDIO_EAC3 = 0x87\r\n}\r\n\r\n/**\r\n * ISO/IEC 13818-1 Table 2-22\r\n */\r\nexport const enum TSStreamId {\r\n  PROGRAM_STREAM_MAP = 0xbc,\r\n  PRIVATE_STREAM_1 = 0xbd,\r\n  PADDING_STREAM = 0xbe,\r\n  PRIVATE_STREAM_2 = 0xbf,\r\n  AUDIO_STREAM_0 = 0xc0,\r\n  VIDEO_STREAM_0 = 0xe0,\r\n  ECM_STREAM = 0xf0,\r\n  EMM_STREAM = 0xf1,\r\n  DSMCC_STREAM = 0xf2,\r\n  TYPE_E_STREAM = 0xf8,\r\n  METADATA_STREAM = 0xfc,\r\n  EXTENDED_STREAM_ID = 0xfd,\r\n  PROGRAM_STREAM_DIRECTORY = 0xff\r\n}\r\n\r\n/**\r\n * ISO/IEC 13818-1 Table 2-45\r\n */\r\nexport const enum TSDescriptor {\r\n  VIDEO_STREAM = 0x02,\r\n  REGISTRATION = 0x05,\r\n  ISO_639_LANGUAGE = 0x0a,\r\n  IOD = 0x1d,\r\n  SL = 0x1e,\r\n  FMC = 0x1f,\r\n  METADATA = 0x26,\r\n  METADATA_STD = 0x27\r\n}\r\n\r\nexport const StreamType2AVCodecId: Partial<Record<TSStreamType, [AVMediaType, AVCodecID]>> = {\r\n  [TSStreamType.AUDIO_AAC]: [AVMediaType.AVMEDIA_TYPE_AUDIO, AVCodecID.AV_CODEC_ID_AAC],\r\n  [TSStreamType.AUDIO_AAC_LATM]: [AVMediaType.AVMEDIA_TYPE_AUDIO, AVCodecID.AV_CODEC_ID_AAC],\r\n  [TSStreamType.AUDIO_MPEG1]: [AVMediaType.AVMEDIA_TYPE_AUDIO, AVCodecID.AV_CODEC_ID_MP3],\r\n  [TSStreamType.AUDIO_MPEG2]: [AVMediaType.AVMEDIA_TYPE_AUDIO, AVCodecID.AV_CODEC_ID_MP3],\r\n  [TSStreamType.VIDEO_MPEG1]: [AVMediaType.AVMEDIA_TYPE_VIDEO, AVCodecID.AV_CODEC_ID_MPEG2VIDEO],\r\n  [TSStreamType.VIDEO_MPEG2]: [AVMediaType.AVMEDIA_TYPE_VIDEO, AVCodecID.AV_CODEC_ID_MPEG2VIDEO],\r\n  [TSStreamType.VIDEO_H264]: [AVMediaType.AVMEDIA_TYPE_VIDEO, AVCodecID.AV_CODEC_ID_H264],\r\n  [TSStreamType.VIDEO_MPEG4]: [AVMediaType.AVMEDIA_TYPE_VIDEO, AVCodecID.AV_CODEC_ID_MPEG4],\r\n  [TSStreamType.VIDEO_HEVC]: [AVMediaType.AVMEDIA_TYPE_VIDEO, AVCodecID.AV_CODEC_ID_HEVC],\r\n  [TSStreamType.VIDEO_VVC]: [AVMediaType.AVMEDIA_TYPE_VIDEO, AVCodecID.AV_CODEC_ID_VVC],\r\n  [TSStreamType.AUDIO_AC3]: [AVMediaType.AVMEDIA_TYPE_AUDIO, AVCodecID.AV_CODEC_ID_AC3],\r\n  [TSStreamType.AUDIO_EAC3]: [AVMediaType.AVMEDIA_TYPE_AUDIO, AVCodecID.AV_CODEC_ID_EAC3],\r\n  [TSStreamType.AUDIO_DTS]: [AVMediaType.AVMEDIA_TYPE_AUDIO, AVCodecID.AV_CODEC_ID_DTS]\r\n}\r\n","/*\r\n * libmedia mpegts encode util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { PAT, PES, PMT, SectionPacket, TSPacket } from './struct'\r\nimport { MpegtsContext, MpegtsStreamContext } from './type'\r\nimport * as mpegts from './mpegts'\r\nimport * as logger from 'common/util/logger'\r\nimport Stream from 'avutil/AVStream'\r\nimport mktag from '../../function/mktag'\r\nimport { AVCodecID, AVMediaType } from 'avutil/codec'\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\nimport { NOPTS_VALUE_BIGINT, UINT16_MAX } from 'avutil/constant'\r\nimport { calculateCRC32 } from './function/crc32'\r\n\r\nfunction getAdaptationFieldLength(tsPacket: TSPacket) {\r\n  if (tsPacket.adaptationFieldControl !== 0x02 && tsPacket.adaptationFieldControl !== 0x03) {\r\n    return 0\r\n  }\r\n\r\n  if (tsPacket.adaptationFieldControl === 0x02) {\r\n    return mpegts.TS_PACKET_SIZE - 4\r\n  }\r\n\r\n  let len = 2\r\n\r\n  if (tsPacket.adaptationFieldInfo.pcrFlag) {\r\n    len += 6\r\n  }\r\n  if (tsPacket.adaptationFieldInfo.opcrFlag) {\r\n    len += 6\r\n  }\r\n  if (tsPacket.adaptationFieldInfo.splicingPointFlag) {\r\n    len += 1\r\n  }\r\n  if (tsPacket.adaptationFieldInfo.transportPrivateDataFlag) {\r\n    len += tsPacket.adaptationFieldInfo.transportPrivateData\r\n      ? tsPacket.adaptationFieldInfo.transportPrivateData.length\r\n      : 0\r\n  }\r\n  if (tsPacket.adaptationFieldInfo.adaptationFieldExtensionFlag) {\r\n    len += tsPacket.adaptationFieldInfo.extension ? tsPacket.adaptationFieldInfo.extension.length : 0\r\n  }\r\n\r\n  if (len > 256) {\r\n    logger.warn('adaptationField size is too large')\r\n  }\r\n\r\n  return len\r\n}\r\n\r\nfunction getPESHeaderLength(pes: PES) {\r\n  let len = 6\r\n\r\n  const streamId = pes.streamId\r\n\r\n  if (streamId !== mpegts.TSStreamId.PROGRAM_STREAM_MAP\r\n    && streamId !== mpegts.TSStreamId.PADDING_STREAM\r\n    && streamId !== mpegts.TSStreamId.PRIVATE_STREAM_2\r\n    && streamId !== mpegts.TSStreamId.ECM_STREAM\r\n    && streamId !== mpegts.TSStreamId.EMM_STREAM\r\n    && streamId !== mpegts.TSStreamId.PROGRAM_STREAM_DIRECTORY\r\n    && streamId !== mpegts.TSStreamId.DSMCC_STREAM\r\n    && streamId !== mpegts.TSStreamId.TYPE_E_STREAM\r\n  ) {\r\n    len += 3\r\n\r\n    if (pes.pts !== NOPTS_VALUE_BIGINT) {\r\n      len += 5\r\n    }\r\n    if (pes.dts !== NOPTS_VALUE_BIGINT && pes.pts !== NOPTS_VALUE_BIGINT && pes.dts !== pes.pts) {\r\n      len += 5\r\n    }\r\n  }\r\n\r\n  return len\r\n}\r\n\r\nfunction writePESPayload(\r\n  ioWriter: IOWriter,\r\n  pes: PES,\r\n  payload: Uint8Array,\r\n  stream: Stream,\r\n  mpegtsContext: MpegtsContext\r\n) {\r\n\r\n  const streamContext = stream.privData as MpegtsStreamContext\r\n  const tsPacket = streamContext.tsPacket\r\n\r\n  if (pes.pid === mpegtsContext.pmt.pcrPid) {\r\n    tsPacket.adaptationFieldControl = 0x03\r\n    tsPacket.adaptationFieldInfo.pcrFlag = 1\r\n    tsPacket.adaptationFieldInfo.pcr = pes.dts * 300n\r\n  }\r\n  tsPacket.adaptationFieldInfo.randomAccessIndicator = pes.randomAccessIndicator\r\n\r\n  if (pes.randomAccessIndicator) {\r\n    tsPacket.adaptationFieldControl = 0x03\r\n  }\r\n\r\n  let adaptationFieldLength = getAdaptationFieldLength(tsPacket)\r\n\r\n  let continuityCounter = streamContext.continuityCounter\r\n\r\n  if (4 + adaptationFieldLength + payload.length <= mpegts.TS_PACKET_SIZE) {\r\n    tsPacket.payloadUnitStartIndicator = 0x01\r\n    tsPacket.payload = payload\r\n    tsPacket.continuityCounter = (continuityCounter++) % 16\r\n\r\n    writeTSPacket(ioWriter, tsPacket, mpegtsContext)\r\n\r\n    streamContext.continuityCounter = continuityCounter % 16\r\n    return\r\n  }\r\n\r\n  let len = mpegts.TS_PACKET_SIZE - (4 + adaptationFieldLength)\r\n  let pos = 0\r\n\r\n  while (pos < payload.length) {\r\n\r\n    let next = Math.min(pos + len, payload.length)\r\n\r\n    if (pos === 0) {\r\n      tsPacket.payloadUnitStartIndicator = 0x01\r\n    }\r\n    else {\r\n      tsPacket.payloadUnitStartIndicator = 0x00\r\n    }\r\n\r\n    if (tsPacket.adaptationFieldControl === 0x01 && (next - pos + 4 === mpegts.TS_PACKET_SIZE - 1)) {\r\n      // padding 至少需要 2 字节\r\n      next--\r\n    }\r\n\r\n    tsPacket.payload = payload.subarray(pos, next)\r\n    tsPacket.continuityCounter = (continuityCounter++) % 16\r\n\r\n    writeTSPacket(ioWriter, tsPacket, mpegtsContext)\r\n\r\n    if (pos === 0) {\r\n      tsPacket.adaptationFieldInfo.randomAccessIndicator = 0\r\n      tsPacket.adaptationFieldControl = 0x01\r\n      tsPacket.adaptationFieldInfo.pcrFlag = 0\r\n      adaptationFieldLength = getAdaptationFieldLength(tsPacket)\r\n      len = mpegts.TS_PACKET_SIZE - (4 + adaptationFieldLength)\r\n    }\r\n\r\n    pos = next\r\n  }\r\n\r\n  streamContext.continuityCounter = continuityCounter % 16\r\n}\r\n\r\nexport function getStreamType(stream: Stream) {\r\n\r\n  const context = stream.privData as MpegtsStreamContext || {} as any\r\n\r\n  switch (stream.codecpar.codecId) {\r\n    case AVCodecID.AV_CODEC_ID_MPEG1VIDEO:\r\n    case AVCodecID.AV_CODEC_ID_MPEG2VIDEO:\r\n      return mpegts.TSStreamType.VIDEO_MPEG2\r\n    case AVCodecID.AV_CODEC_ID_MPEG4:\r\n      return mpegts.TSStreamType.VIDEO_MPEG4\r\n    case AVCodecID.AV_CODEC_ID_H264:\r\n      return mpegts.TSStreamType.VIDEO_H264\r\n    case AVCodecID.AV_CODEC_ID_CAVS:\r\n      return mpegts.TSStreamType.VIDEO_CAVS\r\n    case AVCodecID.AV_CODEC_ID_HEVC:\r\n      return mpegts.TSStreamType.VIDEO_HEVC\r\n    case AVCodecID.AV_CODEC_ID_VVC:\r\n      return mpegts.TSStreamType.VIDEO_VVC\r\n    case AVCodecID.AV_CODEC_ID_DIRAC:\r\n      return mpegts.TSStreamType.VIDEO_DIRAC\r\n    case AVCodecID.AV_CODEC_ID_VC1:\r\n      return mpegts.TSStreamType.VIDEO_VC1\r\n\r\n    case AVCodecID.AV_CODEC_ID_MP2:\r\n    case AVCodecID.AV_CODEC_ID_MP3:\r\n      return stream.codecpar.sampleRate < 32000\r\n        ? mpegts.TSStreamType.AUDIO_MPEG2\r\n        : mpegts.TSStreamType.AUDIO_MPEG1\r\n\r\n    case AVCodecID.AV_CODEC_ID_AAC:\r\n      return context.latm\r\n        ? mpegts.TSStreamType.AUDIO_AAC_LATM\r\n        : mpegts.TSStreamType.AUDIO_AAC\r\n    case AVCodecID.AV_CODEC_ID_AAC_LATM:\r\n      return mpegts.TSStreamType.AUDIO_AAC_LATM\r\n    case AVCodecID.AV_CODEC_ID_AC3:\r\n      return mpegts.TSStreamType.AUDIO_AC3\r\n    case AVCodecID.AV_CODEC_ID_OPUS:\r\n    case AVCodecID.AV_CODEC_ID_AV1:\r\n      return mpegts.TSStreamType.PRIVATE_DATA\r\n    case AVCodecID.AV_CODEC_ID_TRUEHD:\r\n      return mpegts.TSStreamType.AUDIO_TRUEHD\r\n    case AVCodecID.AV_CODEC_ID_EAC3:\r\n      return mpegts.TSStreamType.AUDIO_EAC3\r\n    case AVCodecID.AV_CODEC_ID_DTS:\r\n      return mpegts.TSStreamType.AUDIO_DTS\r\n    case AVCodecID.AV_CODEC_ID_DVB_SUBTITLE:\r\n    case AVCodecID.AV_CODEC_ID_SMPTE_KLV:\r\n      return mpegts.TSStreamType.PRIVATE_DATA\r\n\r\n    default:\r\n      return mpegts.TSStreamType.PRIVATE_DATA\r\n  }\r\n}\r\n\r\nexport function getStreamId(stream: Stream) {\r\n  if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_VIDEO) {\r\n    if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_DIRAC) {\r\n      return mpegts.TSStreamId.EXTENDED_STREAM_ID\r\n    }\r\n    else {\r\n      return mpegts.TSStreamId.VIDEO_STREAM_0\r\n    }\r\n  }\r\n  else if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_AUDIO\r\n    && (\r\n      stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MP2\r\n        || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MP3\r\n        || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC\r\n    )\r\n  ) {\r\n    return mpegts.TSStreamId.AUDIO_STREAM_0\r\n  }\r\n  else if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_AUDIO\r\n    && stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AC3\r\n  ) {\r\n    return mpegts.TSStreamId.EXTENDED_STREAM_ID\r\n  }\r\n  else if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_DATA) {\r\n    return mpegts.TSStreamId.METADATA_STREAM\r\n  }\r\n  else {\r\n    return mpegts.TSStreamId.PRIVATE_STREAM_1\r\n  }\r\n}\r\n\r\nexport function getPATPayload(pat: PAT) {\r\n\r\n  const buffer = new Uint8Array(1024)\r\n\r\n  buffer[1] = 0x00\r\n  buffer[2] = 0xb0\r\n\r\n  // transport_stream_id 1 \r\n  buffer[5] = 1\r\n\r\n  // current_next_indicator\r\n  buffer[6] = (3 << 6) | 0x01\r\n\r\n  let pos = 9\r\n\r\n  if (pat.networkPid > -1) {\r\n    pos += 2\r\n    buffer[pos++] = (7 << 5) | ((pat.networkPid >> 8) & 0x1f)\r\n    buffer[pos++] = (pat.networkPid & 0xff)\r\n  }\r\n\r\n  pat.program2PmtPid.forEach((pid, programNumber) => {\r\n    buffer[pos++] = (programNumber >> 8) & 0xff\r\n    buffer[pos++] = programNumber & 0xff\r\n    buffer[pos++] = (7 << 5) | (pid >> 8) & 0x1f\r\n    buffer[pos++] = pid & 0xff\r\n  })\r\n\r\n  const crcPos = pos\r\n  pos += 4\r\n\r\n  for (let i = pos; i < mpegts.TS_PACKET_SIZE - 4; i++) {\r\n    buffer[i] = 0xff\r\n  }\r\n\r\n  const len = (pos - 1) - 3\r\n\r\n  buffer[2] |= ((len >> 8) & 0x0f)\r\n  buffer[3] = len & 0xff\r\n\r\n  // CRC32\r\n  const crc32 = calculateCRC32(buffer.subarray(1, crcPos))\r\n  buffer[crcPos] = (crc32 >> 24) & 0xff\r\n  buffer[crcPos + 1] = (crc32 >> 16) & 0xff\r\n  buffer[crcPos + 2] = (crc32 >> 8) & 0xff\r\n  buffer[crcPos + 3] = crc32 & 0xff\r\n\r\n  return buffer.slice(0, mpegts.TS_PACKET_SIZE - 4)\r\n}\r\n\r\nexport function getPMTPayload(pmt: PMT, streams: Stream[]) {\r\n  const buffer = new Uint8Array(1024)\r\n\r\n  buffer[1] = 0x02\r\n  buffer[2] = 0xb0\r\n\r\n  buffer[4] = ((pmt.programNumber >> 8) & 0x0f)\r\n  buffer[5] = pmt.programNumber & 0xff\r\n\r\n  // current_next_indicator\r\n  buffer[6] = (3 << 6) | 0x01\r\n\r\n  let pos = 9\r\n\r\n  buffer[pos++] = (7 << 5) | (pmt.pcrPid >> 8) & 0x1f\r\n  buffer[pos++] = pmt.pcrPid & 0xff\r\n\r\n  const programInfoLengthPos = pos\r\n  pos += 2\r\n\r\n  function putRegistrationDescriptor(tag: number) {\r\n    buffer[pos++] = mpegts.REGISTRATION_DESCRIPTOR\r\n    buffer[pos++] = 4\r\n    buffer[pos++] = tag >> 24\r\n    buffer[pos++] = tag >> 16\r\n    buffer[pos++] = tag >> 8\r\n    buffer[pos++] = tag\r\n  }\r\n\r\n  let len = 0xf000 | (pos - programInfoLengthPos - 2)\r\n  buffer[programInfoLengthPos] = len >> 8\r\n  buffer[programInfoLengthPos + 1] = len\r\n\r\n  for (let i = 0; i < streams.length; i++) {\r\n    const streamType = getStreamType(streams[i])\r\n    buffer[pos++] = streamType\r\n\r\n    const streamContext = streams[i].privData as MpegtsStreamContext\r\n\r\n    buffer[pos++] = (7 << 5) | (streamContext.pid >> 8) & 0x1f\r\n    buffer[pos++] = streamContext.pid  & 0xff\r\n\r\n    const descLengthPos = pos\r\n    pos += 2\r\n\r\n    const codecId = streams[i].codecpar.codecId\r\n\r\n    switch (streams[i].codecpar.codecType) {\r\n      case AVMediaType.AVMEDIA_TYPE_AUDIO: {\r\n        if (codecId === AVCodecID.AV_CODEC_ID_AC3) {\r\n          putRegistrationDescriptor(mktag('AC-3'))\r\n        }\r\n        if (codecId === AVCodecID.AV_CODEC_ID_EAC3) {\r\n          putRegistrationDescriptor(mktag('EAC3'))\r\n        }\r\n        if (codecId === AVCodecID.AV_CODEC_ID_S302M) {\r\n          putRegistrationDescriptor(mktag('BSSD'))\r\n        }\r\n        if (codecId === AVCodecID.AV_CODEC_ID_OPUS) {\r\n          putRegistrationDescriptor(mktag('Opus'))\r\n          buffer[pos++] = 0x7f\r\n          buffer[pos++] = 2\r\n          buffer[pos++] = 0x80\r\n          buffer[pos++] = streams[i].codecpar.chLayout.nbChannels\r\n        }\r\n        // language und\r\n        buffer[pos++] = mpegts.ISO_639_LANGUAGE_DESCRIPTOR\r\n        buffer[pos++] = 4\r\n        buffer[pos++] = 117\r\n        buffer[pos++] = 110\r\n        buffer[pos++] = 100\r\n        buffer[pos++] = 0\r\n        break\r\n      }\r\n      case AVMediaType.AVMEDIA_TYPE_VIDEO: {\r\n        if (codecId === AVCodecID.AV_CODEC_ID_AV1) {\r\n          putRegistrationDescriptor(mktag('AV01'))\r\n          if (streams[i].codecpar.extradata) {\r\n            buffer[pos++] = 0x80\r\n            buffer[pos++] = streams[i].codecpar.extradataSize\r\n            for (let j = 0; j < streams[i].codecpar.extradataSize; j++) {\r\n              buffer[pos++] = accessof(reinterpret_cast<pointer<uint8>>(streams[i].codecpar.extradata + j))\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    let len = 0xf000 | (pos - descLengthPos - 2)\r\n    buffer[descLengthPos] = len >> 8\r\n    buffer[descLengthPos + 1] = len\r\n  }\r\n\r\n  const crcPos = pos\r\n  pos += 4\r\n\r\n  for (let i = pos; i < mpegts.TS_PACKET_SIZE - 4; i++) {\r\n    buffer[i] = 0xff\r\n  }\r\n\r\n  len = (pos - 1) - 3\r\n  buffer[2] |= ((len >> 8) & 0x0f)\r\n  buffer[3] = len & 0xff\r\n\r\n  // CRC32\r\n  const crc32 = calculateCRC32(buffer.subarray(1, crcPos))\r\n  buffer[crcPos] = (crc32 >> 24) & 0xff\r\n  buffer[crcPos + 1] = (crc32 >> 16) & 0xff\r\n  buffer[crcPos + 2] = (crc32 >> 8) & 0xff\r\n  buffer[crcPos + 3] = crc32 & 0xff\r\n  return buffer.slice(0, mpegts.TS_PACKET_SIZE - 4)\r\n}\r\n\r\nexport function getSDTPayload() {\r\n  const buffer = new Uint8Array(1024)\r\n\r\n  buffer[1] = 0x42\r\n  buffer[2] = 0xf0\r\n\r\n  // transport_stream_id 1 \r\n  buffer[5] = 1\r\n\r\n  // current_next_indicator\r\n  buffer[6] = (3 << 6) | 0x01\r\n\r\n  let pos = 9\r\n\r\n  // original_network_id\r\n  buffer[pos++] = 0xff\r\n  buffer[pos++] = 1\r\n\r\n  buffer[pos++] = 0xff\r\n\r\n  /*\r\n   * put service\r\n   * service id\r\n   */\r\n  buffer[pos++] = 0\r\n  buffer[pos++] = 1\r\n\r\n  /* currently no EIT info */\r\n  buffer[pos++] =  0xfc | 0x00\r\n\r\n  const descListLenPtr = pos\r\n  pos += 2\r\n\r\n  // write only one descriptor for the service name and provider */\r\n  buffer[pos++] = 0x48\r\n\r\n  const descLenPtr = pos++\r\n\r\n  // service_type\r\n  buffer[pos++] = 1\r\n\r\n  const providerName = 'format-js'\r\n  const serviceName = 'Service01'\r\n\r\n  buffer[pos++] = providerName.length\r\n  for (let i = 0; i < providerName.length; i++) {\r\n    buffer[pos] = providerName.charCodeAt(i)\r\n    pos++\r\n  }\r\n\r\n  buffer[pos++] = serviceName.length\r\n  for (let i = 0; i < serviceName.length; i++) {\r\n    buffer[pos] = serviceName.charCodeAt(i)\r\n    pos++\r\n  }\r\n\r\n  buffer[descLenPtr] = pos - descLenPtr - 1\r\n\r\n  // fill descriptor length \r\n  let value = (4 << 13) | (0 << 12) | (pos - descListLenPtr - 2)\r\n  buffer[descListLenPtr] = (value >> 8) & 0xff\r\n  buffer[descListLenPtr + 1] = value & 0xff\r\n\r\n  const crcPos = pos\r\n  pos += 4\r\n\r\n  for (let i = pos; i < mpegts.TS_PACKET_SIZE - 4; i++) {\r\n    buffer[i] = 0xff\r\n  }\r\n\r\n  const len = (pos - 1) - 3\r\n\r\n  buffer[2] |= ((len >> 8) & 0x0f)\r\n  buffer[3] = len & 0xff\r\n\r\n  // CRC32\r\n  const crc32 = calculateCRC32(buffer.subarray(1, crcPos))\r\n  buffer[crcPos] = (crc32 >> 24) & 0xff\r\n  buffer[crcPos + 1] = (crc32 >> 16) & 0xff\r\n  buffer[crcPos + 2] = (crc32 >> 8) & 0xff\r\n  buffer[crcPos + 3] = crc32 & 0xff\r\n\r\n  return buffer.slice(0, mpegts.TS_PACKET_SIZE - 4)\r\n}\r\n\r\nexport function writeTSPacket(ioWriter: IOWriter, tsPacket: TSPacket, mpegtsContext: MpegtsContext) {\r\n  // TODO\r\n  if (mpegtsContext.tsPacketSize === mpegts.TS_DVHS_PACKET_SIZE) {\r\n    // skip ATS field (2-bits copy-control + 30-bits timestamp) for m2ts\r\n    ioWriter.skip(4)\r\n  }\r\n\r\n  if (!tsPacket.payload || tsPacket.payload.length === 0) {\r\n    tsPacket.adaptationFieldControl = 0x02\r\n  }\r\n\r\n  if (tsPacket.adaptationFieldControl === 0x01\r\n        && (tsPacket.payload.length + 4) < mpegts.TS_PACKET_SIZE\r\n  ) {\r\n    tsPacket.adaptationFieldControl = 0x03\r\n  }\r\n\r\n  const pos = ioWriter.getPos()\r\n\r\n  ioWriter.writeUint8(0x47)\r\n\r\n  let byte = 0\r\n\r\n  if (tsPacket.payloadUnitStartIndicator) {\r\n    // Payload unit start indicator\r\n    byte |= (1 << 6)\r\n  }\r\n\r\n  byte |= (tsPacket.transportPriority << 5)\r\n\r\n  // pid 高 5 位\r\n  byte |= (tsPacket.pid >> 8)\r\n\r\n  ioWriter.writeUint8(byte)\r\n  // pid 低 8 位\r\n  ioWriter.writeUint8(tsPacket.pid & 0xff)\r\n\r\n  byte = ((tsPacket.transportScramblingControl & 0x03) << 6)\r\n  byte |= ((tsPacket.adaptationFieldControl & 0x03) << 4)\r\n  byte |= (tsPacket.continuityCounter & 0x0f)\r\n  ioWriter.writeUint8(byte)\r\n\r\n  let adaptationFieldLength = getAdaptationFieldLength(tsPacket)\r\n\r\n  let paddingLen = mpegts.TS_PACKET_SIZE - 4 - adaptationFieldLength\r\n  if (tsPacket.payload?.length) {\r\n    paddingLen -= tsPacket.payload.length\r\n  }\r\n\r\n  if (tsPacket.adaptationFieldControl === 0x02 || tsPacket.adaptationFieldControl === 0x03) {\r\n    const now = ioWriter.getPos()\r\n\r\n    ioWriter.writeUint8(adaptationFieldLength - 1 + paddingLen)\r\n\r\n    byte = ((tsPacket.adaptationFieldInfo.discontinuityIndicator & 0x01) << 7)\r\n    byte |= ((tsPacket.adaptationFieldInfo.randomAccessIndicator & 0x01) << 6)\r\n    byte |= ((tsPacket.adaptationFieldInfo.elementaryStreamPriorityIndicator & 0x01) << 5)\r\n    byte |= ((tsPacket.adaptationFieldInfo.pcrFlag & 0x01) << 4)\r\n    byte |= ((tsPacket.adaptationFieldInfo.opcrFlag & 0x01) << 3)\r\n    byte |= ((tsPacket.adaptationFieldInfo.splicingPointFlag & 0x01) << 2)\r\n    byte |= ((tsPacket.adaptationFieldInfo.transportPrivateDataFlag & 0x01) << 1)\r\n    byte |= (tsPacket.adaptationFieldInfo.adaptationFieldExtensionFlag & 0x01)\r\n\r\n    ioWriter.writeUint8(byte)\r\n\r\n    if (tsPacket.adaptationFieldInfo.pcrFlag) {\r\n      const pcrLow = Number(tsPacket.adaptationFieldInfo.pcr % 300n)\r\n      const pcrHigh = Number((tsPacket.adaptationFieldInfo.pcr - static_cast<int64>(pcrLow)) / 300n)\r\n      ioWriter.writeUint8((pcrHigh >> 25) & 0xff)\r\n      ioWriter.writeUint8((pcrHigh >> 17) & 0xff)\r\n      ioWriter.writeUint8((pcrHigh >> 9) & 0xff)\r\n      ioWriter.writeUint8((pcrHigh >> 1) & 0xff)\r\n      ioWriter.writeUint8((pcrHigh << 7) | (pcrLow >> 8) | 0x7e)\r\n      ioWriter.writeUint8(pcrLow)\r\n    }\r\n    if (tsPacket.adaptationFieldInfo.opcrFlag) {\r\n      const pcrLow = Number(tsPacket.adaptationFieldInfo.pcr % 300n)\r\n      const pcrHigh = Number((tsPacket.adaptationFieldInfo.pcr - static_cast<int64>(pcrLow)) / 300n)\r\n      ioWriter.writeUint8((pcrHigh >> 25) & 0xff)\r\n      ioWriter.writeUint8((pcrHigh >> 17) & 0xff)\r\n      ioWriter.writeUint8((pcrHigh >> 9) & 0xff)\r\n      ioWriter.writeUint8((pcrHigh >> 1) & 0xff)\r\n      ioWriter.writeUint8((pcrHigh << 7) | (pcrLow >> 8) | 0x7e)\r\n      ioWriter.writeUint8(pcrLow)\r\n    }\r\n\r\n    if (tsPacket.adaptationFieldInfo.splicingPointFlag) {\r\n      ioWriter.writeUint8(tsPacket.adaptationFieldInfo.spliceCountDown)\r\n    }\r\n\r\n    if (tsPacket.adaptationFieldInfo.transportPrivateDataFlag) {\r\n      if (tsPacket.adaptationFieldInfo.transportPrivateData\r\n        && tsPacket.adaptationFieldInfo.transportPrivateData.length\r\n      ) {\r\n        ioWriter.writeUint8(tsPacket.adaptationFieldInfo.transportPrivateData.length)\r\n        ioWriter.writeBuffer(tsPacket.adaptationFieldInfo.transportPrivateData)\r\n      }\r\n      else {\r\n        ioWriter.writeUint8(0)\r\n      }\r\n    }\r\n\r\n    if (tsPacket.adaptationFieldInfo.adaptationFieldExtensionFlag) {\r\n      if (tsPacket.adaptationFieldInfo.extension && tsPacket.adaptationFieldInfo.extension.length) {\r\n        ioWriter.writeUint8(tsPacket.adaptationFieldInfo.extension.length)\r\n        ioWriter.writeBuffer(tsPacket.adaptationFieldInfo.extension)\r\n      }\r\n      else {\r\n        ioWriter.writeUint8(0)\r\n      }\r\n    }\r\n\r\n    const wroteAdaptationFieldLength = Number(ioWriter.getPos() - now)\r\n\r\n    if (wroteAdaptationFieldLength < adaptationFieldLength) {\r\n      ioWriter.skip(adaptationFieldLength - wroteAdaptationFieldLength)\r\n    }\r\n\r\n    while (paddingLen > 0) {\r\n      ioWriter.writeUint8(0xff)\r\n      paddingLen--\r\n    }\r\n  }\r\n\r\n  if ((tsPacket.adaptationFieldControl === 0x01 || tsPacket.adaptationFieldControl === 0x03)) {\r\n    if (tsPacket.payload?.length) {\r\n      ioWriter.writeBuffer(tsPacket.payload)\r\n    }\r\n  }\r\n\r\n  if (Number(ioWriter.getPos() - pos) !== mpegts.TS_PACKET_SIZE) {\r\n    logger.error(`write error data size to ts packet, need ${mpegts.TS_PACKET_SIZE}, wrote: ${Number(ioWriter.getPos() - pos)}`)\r\n  }\r\n\r\n  // TODO\r\n  if (mpegtsContext.tsPacketSize === mpegts.TS_FEC_PACKET_SIZE) {\r\n    // 16 crc\r\n    ioWriter.skip(16)\r\n  }\r\n}\r\n\r\nfunction writePts(buffer: Uint8Array, pos: number, fourBits: number, pts: bigint) {\r\n  let value = fourBits << 4 | ((Number(pts >> 30n) & 0x07) << 1) | 1\r\n  buffer[pos++] = value\r\n  value = ((Number(pts >> 15n) & 0x7fff) << 1) | 1\r\n  buffer[pos++] = (value >> 8) & 0xff\r\n  buffer[pos++] = value & 0xff\r\n  value = (Number(pts & 0x7fffn) << 1) | 1\r\n  buffer[pos++] = (value >> 8) & 0xff\r\n  buffer[pos++] = value & 0xff\r\n}\r\n\r\nexport function writePES(\r\n  ioWriter: IOWriter,\r\n  pes: PES,\r\n  pesSlices: {\r\n    total: number\r\n    buffers: Uint8Array[]\r\n  },\r\n  stream: Stream,\r\n  mpegtsContext: MpegtsContext\r\n) {\r\n  const streamId = pes.streamId\r\n  const header = new Uint8Array(getPESHeaderLength(pes))\r\n\r\n  header[2] = 0x01\r\n  header[3] = streamId\r\n\r\n  let len = pesSlices.total\r\n\r\n  if (streamId !== mpegts.TSStreamId.PROGRAM_STREAM_MAP\r\n    && streamId !== mpegts.TSStreamId.PADDING_STREAM\r\n    && streamId !== mpegts.TSStreamId.PRIVATE_STREAM_2\r\n    && streamId !== mpegts.TSStreamId.ECM_STREAM\r\n    && streamId !== mpegts.TSStreamId.EMM_STREAM\r\n    && streamId !== mpegts.TSStreamId.PROGRAM_STREAM_DIRECTORY\r\n    && streamId !== mpegts.TSStreamId.DSMCC_STREAM\r\n    && streamId !== mpegts.TSStreamId.TYPE_E_STREAM\r\n  ) {\r\n    let flags = 0\r\n    let headerLen = 0\r\n    if (pes.pts !== NOPTS_VALUE_BIGINT) {\r\n      headerLen += 5\r\n      flags |= 0x80\r\n    }\r\n    if (pes.dts !== NOPTS_VALUE_BIGINT && pes.pts !== NOPTS_VALUE_BIGINT && pes.dts !== pes.pts) {\r\n      headerLen += 5\r\n      flags |= 0x40\r\n    }\r\n\r\n    let value  = 0x80\r\n    /* data alignment indicator is required for subtitle and data streams */\r\n    if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_SUBTITLE\r\n      || stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_DATA\r\n    ) {\r\n      value |= 0x04\r\n    }\r\n    header[6] = value\r\n    header[7] = flags\r\n    header[8] = headerLen\r\n\r\n    len += (headerLen + 3)\r\n\r\n    if (pes.pts !== NOPTS_VALUE_BIGINT) {\r\n      writePts(header, 9, flags >> 6, pes.pts)\r\n    }\r\n    if (pes.dts !== NOPTS_VALUE_BIGINT && pes.pts !== NOPTS_VALUE_BIGINT && pes.dts !== pes.pts) {\r\n      writePts(header, 14, 1, pes.dts)\r\n    }\r\n  }\r\n\r\n  if (len <= UINT16_MAX && stream.codecpar.codecType !== AVMediaType.AVMEDIA_TYPE_VIDEO) {\r\n    header[4] = (len >> 8) & 0xff\r\n    header[5] = len & 0xff\r\n  }\r\n\r\n  writePESPayload(ioWriter, pes, concatTypeArray(Uint8Array, [header, ...pesSlices.buffers]), stream, mpegtsContext)\r\n}\r\n\r\nexport function writeSection(ioWriter: IOWriter, packet: SectionPacket, mpegtsContext: MpegtsContext) {\r\n  const adaptationFieldLength = getAdaptationFieldLength(packet)\r\n\r\n  let continuityCounter = packet.continuityCounter\r\n\r\n  if (4 + adaptationFieldLength + packet.payload.length <= mpegts.TS_PACKET_SIZE) {\r\n    packet.payloadUnitStartIndicator = 0x01\r\n    packet.continuityCounter = (continuityCounter++) % 16\r\n    writeTSPacket(ioWriter, packet, mpegtsContext)\r\n\r\n    packet.continuityCounter = continuityCounter % 16\r\n\r\n    return\r\n  }\r\n\r\n  const len = mpegts.TS_PACKET_SIZE - (4 + adaptationFieldLength)\r\n\r\n  let pos = 0\r\n\r\n  const payload = packet.payload\r\n  while (pos < payload.length) {\r\n    let next = Math.min(pos + len, payload.length)\r\n    if (pos === 0) {\r\n      packet.payloadUnitStartIndicator = 0x01\r\n    }\r\n    else {\r\n      packet.payloadUnitStartIndicator = 0x00\r\n    }\r\n\r\n    const currentLen = next - pos\r\n\r\n    if (currentLen + 4 === mpegts.TS_PACKET_SIZE) {\r\n      packet.adaptationFieldControl = 0x01\r\n    }\r\n    else if (adaptationFieldLength === 0 && currentLen + 4 + 1 === mpegts.TS_PACKET_SIZE) {\r\n      // adaptationFieldLength 需要至少 2 byte\r\n      next--\r\n    }\r\n\r\n    packet.payload = payload.subarray(pos, next)\r\n    packet.continuityCounter = (continuityCounter++) % 16\r\n\r\n    writeTSPacket(ioWriter, packet, mpegtsContext)\r\n    pos = next\r\n  }\r\n\r\n  packet.continuityCounter = continuityCounter % 16\r\n}\r\n","/*\r\n * libmedia mpegts struct defined\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { NOPTS_VALUE, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport { TSStreamType } from './mpegts'\r\nimport { PID } from './type'\r\n\r\nexport class TSPacketAdaptationFieldInfo {\r\n  discontinuityIndicator: number = 0\r\n  randomAccessIndicator: number = 0\r\n  elementaryStreamPriorityIndicator: number = 0\r\n  pcrFlag: number = 0\r\n  opcrFlag: number = 0\r\n  splicingPointFlag: number = 0\r\n  transportPrivateDataFlag: number = 0\r\n  adaptationFieldExtensionFlag: number = 0\r\n  pcr: bigint = 0n\r\n  opcr: bigint = 0n\r\n  spliceCountDown: number = 0\r\n  transportPrivateData: Uint8Array = null\r\n  extension: Uint8Array = null\r\n}\r\n\r\nexport class TSPacket {\r\n  pos: bigint = NOPTS_VALUE_BIGINT\r\n  payloadUnitStartIndicator: number = 0\r\n  transportPriority: number = 0\r\n  pid: PID = NOPTS_VALUE\r\n  adaptationFieldControl: number = 0\r\n  continuityCounter: number = 0\r\n  transportScramblingControl: number = 0\r\n  adaptationFieldInfo: TSPacketAdaptationFieldInfo = new TSPacketAdaptationFieldInfo()\r\n  payload: Uint8Array = null\r\n}\r\n\r\nexport class TSSliceQueue {\r\n  slices: Uint8Array[] = []\r\n  totalLength: number = 0\r\n  expectedLength: number = NOPTS_VALUE\r\n  randomAccessIndicator: number = 0\r\n  pid: PID = NOPTS_VALUE\r\n  streamType: TSStreamType = TSStreamType.NONE\r\n  pos: bigint = NOPTS_VALUE_BIGINT\r\n}\r\n\r\nexport class PAT {\r\n  versionNumber: number = 0\r\n  networkPid: PID = NOPTS_VALUE\r\n  program2PmtPid: Map<number, PID> = new Map()\r\n}\r\n\r\nexport class SectionPacket extends TSPacket {\r\n}\r\n\r\nexport class ESDescriptor {\r\n  tag: number\r\n  buffer: Uint8Array\r\n}\r\n\r\nexport class PMT {\r\n  versionNumber: number = 0\r\n  programNumber: number = 0\r\n  pcrPid: PID = 0\r\n  pid2StreamType: Map<number, TSStreamType> = new Map()\r\n  pid2ESDescriptor: Map<number, ESDescriptor[]> = new Map()\r\n}\r\n\r\nexport class PES {\r\n  pid: PID = NOPTS_VALUE\r\n  streamType: TSStreamType = TSStreamType.NONE\r\n  streamId: number = NOPTS_VALUE\r\n  dts: bigint = NOPTS_VALUE_BIGINT\r\n  pts: bigint = NOPTS_VALUE_BIGINT\r\n  pos: bigint = NOPTS_VALUE_BIGINT\r\n  payload: Uint8Array = null\r\n  data: Uint8Array = null\r\n  randomAccessIndicator: number = 0\r\n  flags: 0\r\n}\r\n","/*\r\n * libmedia string tag to uint32 in big end\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as logger from 'common/util/logger'\r\n\r\nexport default function mktag(tag: string): number {\r\n  if (tag.length !== 4) {\r\n    logger.warn(`tag length is not 4, tag: ${tag}`)\r\n  }\r\n\r\n  let value = 0\r\n  for (let i = 0; i < 4; i++) {\r\n    value = (value << 8) | tag.charCodeAt(i)\r\n  }\r\n\r\n  return value\r\n}\r\n","/*\r\n * libmedia opus util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVPacketSideDataType } from '../codec'\r\nimport AVStream from '../AVStream'\r\nimport AVCodecParameters from '../struct/avcodecparameters'\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport { avRescaleQ } from '../util/rational'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport const durations = [\r\n  /* Silk NB */\r\n  480, 960, 1920, 2880,\r\n  /* Silk MB */\r\n  480, 960, 1920, 2880,\r\n  /* Silk WB */\r\n  480, 960, 1920, 2880,\r\n  /* Hybrid SWB */\r\n  480, 960,\r\n  /* Hybrid FB */\r\n  480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960\r\n]\r\n\r\n\r\nexport function getBufferSamples(buffer: Uint8Array) {\r\n  let toc = 0, frameDuration = 0, nframes = 0\r\n\r\n  if (buffer.length < 1) {\r\n    return 0\r\n  }\r\n\r\n  toc = buffer[0]\r\n\r\n  frameDuration = durations[toc >> 3]\r\n\r\n  switch (toc & 3) {\r\n    case 0:\r\n      nframes = 1\r\n      break\r\n    case 1:\r\n      nframes = 2\r\n      break\r\n    case 2:\r\n      nframes = 2\r\n      break\r\n    case 3:\r\n      if (buffer.length < 2) {\r\n        return 0\r\n      }\r\n      nframes = buffer[1] & 63\r\n      break\r\n  }\r\n  return nframes * frameDuration\r\n}\r\n\r\n/**\r\n * opus extradata\r\n * \r\n * - 8 bytes Magic Signature: OpusHead\r\n * - 1 bytes unsigned, 对应值 0x01 version\r\n * - 1 bytes unsigned, channels 它可能和编码声道数不一致， 它可能被修改成 packet-by-packet, 对应值 0x01\r\n * - 2 bytes unsigned, preSkip 这是要从开始播放时的解码器输出， 从页面的颗粒位置减去以计算其 PCM 样本位置。\r\n * - 4 bytes unsigned, sampleRate 原始输入采样率\r\n * - 2 bytes signed, outputGain 这是解码时要应用的增益， 20 * log10 缩放解码器输出以实现所需的播放音量\r\n * - 1 bytes unsigned, channelMappingFamily 指示输出渠道的顺序和语音含义。该八位位组的每个当前指定的值表示一个映射系列，它定义了一组允许的通道数，以及每个允许的通道数的通道名称的有序集合\r\n * - channelMappingTable 可选， 当 Channel Mapping Family 为 0 时被省略。\r\n *  - 1 bytes, streamCount, unsigned ogg packet 里面编码了多少路 stream\r\n *  - 1 bytes, coupledStreamCount, unsigned 标识有多少路流是双声声道，必须小于 streamCount\r\n *  - C bytes, C 为总输出声道数 coupledStreamCount + streamCount\r\n * \r\n */\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 19) {\r\n    const reader = new BufferReader(extradata, false)\r\n    reader.skip(9)\r\n    stream.codecpar.chLayout.nbChannels = reader.readUint8()\r\n    stream.codecpar.initialPadding = reader.readUint16()\r\n    stream.codecpar.sampleRate = reader.readUint32()\r\n\r\n    stream.codecpar.seekPreroll = Number(avRescaleQ(\r\n      80n,\r\n      {\r\n        den: 1000,\r\n        num: 1\r\n      },\r\n      {\r\n        den: 48000,\r\n        num: 1\r\n      }\r\n    ))\r\n  }\r\n}\r\n\r\nexport function avCodecParameters2Extradata(codecpar: AVCodecParameters) {\r\n  const extradata = new Uint8Array(19)\r\n\r\n  const writer = new BufferWriter(extradata, false)\r\n\r\n  writer.writeString('OpusHead')\r\n  writer.writeUint8(0x01)\r\n  writer.writeUint8(codecpar.chLayout.nbChannels)\r\n  writer.writeUint16(codecpar.initialPadding)\r\n  writer.writeUint32(codecpar.sampleRate)\r\n\r\n  return extradata\r\n}\r\n","/*\r\n * libmedia vvc util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as array from 'common/util/array'\r\nimport AVPacket, { AVPacketFlags } from '../struct/avpacket'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport { AVPacketSideDataType } from '../codec'\r\nimport BitReader from 'common/io/BitReader'\r\nimport AVStream from '../AVStream'\r\nimport { mapUint8Array } from 'cheap/std/memory'\r\nimport * as naluUtil from '../util/nalu'\r\nimport { avMalloc } from '../util/mem'\r\nimport * as expgolomb from '../util/expgolomb'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport BitWriter from 'common/io/BitWriter'\r\nimport { Data } from 'common/types/type'\r\nimport * as intread from '../util/intread'\r\nimport * as intwrite from '../util/intwrite'\r\nimport { AVPixelFormat } from '../pixfmt'\r\n\r\nconst NALULengthSizeMinusOne = 3\r\n\r\nexport const enum VVCNaluType {\r\n  kTRAIL_NUT      = 0,\r\n  kSTSA_NUT       = 1,\r\n  kRADL_NUT       = 2,\r\n  kRASL_NUT       = 3,\r\n  kRSV_VCL_4      = 4,\r\n  kRSV_VCL_5      = 5,\r\n  kRSV_VCL_6      = 6,\r\n  kIDR_W_RADL     = 7,\r\n  kIDR_N_LP       = 8,\r\n  kCRA_NUT        = 9,\r\n  kGDR_NUT        = 10,\r\n  kRSV_IRAP_11    = 11,\r\n  kOPI_NUT        = 12,\r\n  kDCI_NUT        = 13,\r\n  kVPS_NUT        = 14,\r\n  kSPS_NUT        = 15,\r\n  kPPS_NUT        = 16,\r\n  kPREFIX_APS_NUT = 17,\r\n  kSUFFIX_APS_NUT = 18,\r\n  kPH_NUT         = 19,\r\n  kAUD_NUT        = 20,\r\n  kEOS_NUT        = 21,\r\n  kEOB_NUT        = 22,\r\n  kPREFIX_SEI_NUT = 23,\r\n  kSUFFIX_SEI_NUT = 24,\r\n  kFD_NUT         = 25,\r\n  kRSV_NVCL_26    = 26,\r\n  kRSV_NVCL_27    = 27,\r\n  kUNSPEC_28      = 28,\r\n  kUNSPEC_29      = 29,\r\n  kUNSPEC_30      = 30,\r\n  kUNSPEC_31      = 31,\r\n}\r\n\r\nexport const enum VVCSliceType {\r\n  kSliceNone = -1,\r\n  kSliceB = 0,\r\n  kSliceP = 1,\r\n  kSliceI = 2\r\n}\r\n\r\nexport const enum VVCAPSType {\r\n  kALF     = 0,\r\n  kLMCS    = 1,\r\n  kSCALING = 2\r\n}\r\n\r\n/* eslint-disable camelcase */\r\nfunction parsePTL(bitReader: BitReader) {\r\n  const olsIdx = bitReader.readU(9)\r\n  const numSublayers = bitReader.readU(3)\r\n  const constantFrameRate = bitReader.readU(2)\r\n  const chromaFormatIdc = bitReader.readU(2)\r\n  const bitDepthMinus8 = bitReader.readU(3)\r\n  bitReader.readU(5)\r\n\r\n  // VvcPTLRecord\r\n  bitReader.readU(2)\r\n  const num_bytes_constraint_info = bitReader.readU(6)\r\n  const generalProfileIdc = bitReader.readU(7)\r\n  const generalTierFlag = bitReader.readU(1)\r\n  const generalLevelIdc = bitReader.readU(8)\r\n  const ptlFrameOnlyConstraintFlag = bitReader.readU(1)\r\n  const ptlMultilayerEnabledFlag = bitReader.readU(1)\r\n  const generalConstraintInfo = []\r\n  const sublayerLevelIdc = []\r\n\r\n  if (num_bytes_constraint_info) {\r\n    for (let i = 0; i < num_bytes_constraint_info - 1; i++) {\r\n      generalConstraintInfo[i] = bitReader.readU(8)\r\n    }\r\n    generalConstraintInfo[num_bytes_constraint_info - 1] = bitReader.readU(6)\r\n  }\r\n  else {\r\n    bitReader.readU(6)\r\n  }\r\n  if (numSublayers > 1) {\r\n    let ptl_sublayer_present_mask = 0\r\n    for (let j = numSublayers - 2; j >= 0; --j) {\r\n      const val = bitReader.readU(1)\r\n      ptl_sublayer_present_mask |= val << j\r\n    }\r\n    for (let j = numSublayers; j <= 8 && numSublayers > 1; ++j) {\r\n      bitReader.readU(1)\r\n    }\r\n\r\n    for (let j = numSublayers - 2; j >= 0; --j) {\r\n      if (ptl_sublayer_present_mask & (1 << j)) {\r\n        sublayerLevelIdc[j] = bitReader.readU(8)\r\n      }\r\n    }\r\n  }\r\n  const ptl_num_sub_profiles = bitReader.readU(8)\r\n  const generalSubProfileIdc = []\r\n  if (ptl_num_sub_profiles) {\r\n    for (let i = 0; i < ptl_num_sub_profiles; i++) {\r\n      generalSubProfileIdc.push(bitReader.readU(8))\r\n    }\r\n  }\r\n\r\n  const maxPictureWidth = bitReader.readU(16)\r\n  const maxPictureHeight = bitReader.readU(16)\r\n  const avgFramerate = bitReader.readU(16)\r\n\r\n  return {\r\n    olsIdx,\r\n    numSublayers,\r\n    bitDepthMinus8,\r\n    chromaFormatIdc,\r\n    constantFrameRate,\r\n    generalProfileIdc,\r\n    generalTierFlag,\r\n    generalLevelIdc,\r\n    ptlFrameOnlyConstraintFlag,\r\n    ptlMultilayerEnabledFlag,\r\n    generalConstraintInfo,\r\n    sublayerLevelIdc,\r\n    generalSubProfileIdc,\r\n    maxPictureWidth,\r\n    maxPictureHeight,\r\n    avgFramerate\r\n  }\r\n}\r\n/* eslint-enable camelcase */\r\n\r\n/**\r\n * \r\n * vvcc 格式的 extradata 转 annexb vps sps pps\r\n * \r\n * bits    \r\n * - 5   reserved (11111)\r\n * - 2   lengthSizeMinusOne\r\n * - 1   ptl_present_flag\r\n * if ptl_present_flag\r\n *   - 9   ols_idx\r\n *   - 3  num_sublayers\r\n *   - 2  constant_frame_rate\r\n *   - 2  chroma_format_idc\r\n *   - 3  bit_depth_minus8\r\n *   - 5  reserved (11111)\r\n *   VvcPTLRecord\r\n *   - 2 reserved (11)\r\n *   - 6 num_bytes_constraint_info\r\n *   - 7 general_profile_idc\r\n *   - 1 general_tier_flag\r\n *   - 8 general_level_idc\r\n *   - 1 general_level_idc\r\n *   - 1 ptl_multilayer_enabled_flag\r\n *   if num_bytes_constraint_info > 0\r\n *      for (i = 0; i < num_bytes_constraint_info - 1; i++)\r\n *        - 8 general_constraint_info[i]\r\n *      - 6 general_constraint_info[num_bytes_constraint_info - 1]\r\n *   else\r\n *      - 6 reserved\r\n *   if num_sublayers > 1\r\n *      - num_sublayers - 2 ptl_sublayer_level_present_flag\r\n *      - 8 - num_sublayers + 1 ptl_reserved_zero_bit\r\n *      for (i = num_sublayers -2; i >= 0; i--)\r\n *        if ptl_sublayer_present_mask & (1 << i)\r\n *          - 8 sublayer_level_idc[i]\r\n *    - 8 ptl_num_sub_profiles\r\n *    if ptl_num_sub_profiles\r\n *      for (i = 0; i < ptl_num_sub_profiles; i++)\r\n *        - 32 general_sub_profile_idc[i]\r\n *    - 16 max_picture_width\r\n *    - 16 max_picture_height\r\n *    - 16 avg_frame_rate\r\n * - 8   numOfArrays\r\n * - repeated of array (vps/sps/pps)\r\n * - 1   array_completeness\r\n * - 2   reserved (0)\r\n * - 5   NAL_unit_type\r\n * if nalu_type != VVC_NALU_DEC_PARAM && nalu_type != VVC_NALU_OPI\r\n *    - 16  numNalus\r\n * else\r\n *   numNalus = 1\r\n * - repeated once per NAL\r\n * - 16  nalUnitLength\r\n * - N   NALU data\r\n * \r\n */\r\nexport function extradata2VpsSpsPps(extradata: Uint8ArrayInterface) {\r\n\r\n  const bufferReader = new BufferReader(extradata, true)\r\n\r\n  const ptlPresentFlag = bufferReader.readUint8() & 0x01\r\n\r\n  if (ptlPresentFlag) {\r\n    const bitReader = new BitReader()\r\n    bitReader.appendBuffer(extradata.subarray(1))\r\n    parsePTL(bitReader)\r\n    bufferReader.skip(bitReader.getPointer())\r\n  }\r\n\r\n  let vpss: Uint8ArrayInterface[] = []\r\n  let spss: Uint8ArrayInterface[] = []\r\n  let ppss: Uint8ArrayInterface[] = []\r\n\r\n  const arrayLen = bufferReader.readUint8()\r\n\r\n  for (let i = 0; i < arrayLen; i++) {\r\n    const naluType = bufferReader.readUint8() & 0x1f\r\n    let count = 1\r\n\r\n    if (naluType !== VVCNaluType.kDCI_NUT && naluType !== VVCNaluType.kOPI_NUT) {\r\n      count = bufferReader.readUint16()\r\n    }\r\n    const list = []\r\n\r\n    for (let j = 0; j < count; j++) {\r\n      const len = bufferReader.readUint16()\r\n      list.push(bufferReader.readBuffer(len))\r\n    }\r\n\r\n    if (naluType === VVCNaluType.kVPS_NUT) {\r\n      vpss = list\r\n    }\r\n    else if (naluType === VVCNaluType.kSPS_NUT) {\r\n      spss = list\r\n    }\r\n    else if (naluType === VVCNaluType.kPPS_NUT) {\r\n      ppss = list\r\n    }\r\n  }\r\n\r\n  return {\r\n    vpss,\r\n    spss,\r\n    ppss\r\n  }\r\n}\r\n\r\n/**\r\n * annexb vps sps pps 转 avcc 格式的 extradata\r\n * \r\n * @param vpss \r\n * @param spss \r\n * @param ppss \r\n * @returns \r\n */\r\nexport function vpsSpsPps2Extradata(vpss: Uint8ArrayInterface[], spss: Uint8ArrayInterface[], ppss: Uint8ArrayInterface[]) {\r\n\r\n  const sps = spss[0]\r\n  let ptl: Uint8Array\r\n  if (sps) {\r\n    const spsParams = parseSPS(sps)\r\n    let generalConstraintInfo = spsParams.generalConstraintInfo\r\n    if (!generalConstraintInfo.length) {\r\n      generalConstraintInfo = new Array(12).fill(0)\r\n    }\r\n    const biWriter = new BitWriter()\r\n    biWriter.writeU(9, 0)\r\n    biWriter.writeU(3, spsParams.spsMaxSublayersMinus1 + 1)\r\n    biWriter.writeU(2, 1)\r\n    biWriter.writeU(2, spsParams.chromaFormatIdc)\r\n    biWriter.writeU(3, spsParams.bitDepthMinus8)\r\n    biWriter.writeU(5, 0b11111)\r\n    biWriter.writeU(2, 0)\r\n    biWriter.writeU(6, generalConstraintInfo.length)\r\n    biWriter.writeU(7, spsParams.profile)\r\n    biWriter.writeU1(spsParams.tierFlag)\r\n    biWriter.writeU(8, spsParams.level)\r\n    biWriter.writeU1(spsParams.ptlFrameOnlyConstraintFlag)\r\n    biWriter.writeU1(spsParams.ptlMultilayerEnabledFlag)\r\n\r\n    if (generalConstraintInfo.length) {\r\n      for (let i = 0; i < generalConstraintInfo.length - 1; i++) {\r\n        biWriter.writeU(8, generalConstraintInfo[i])\r\n      }\r\n      biWriter.writeU(6, generalConstraintInfo[generalConstraintInfo.length - 1])\r\n    }\r\n    else {\r\n      biWriter.writeU(6, 0b111111)\r\n    }\r\n\r\n    if (spsParams.spsMaxSublayersMinus1 + 1 > 1) {\r\n      let ptlSubLayerLevelPresentFlags = 0\r\n      for (let i = spsParams.spsMaxSublayersMinus1 - 1; i >= 0; i--) {\r\n        ptlSubLayerLevelPresentFlags = (ptlSubLayerLevelPresentFlags << 1 | spsParams.ptlSublayerLevelPresentFlag[i])\r\n      }\r\n      biWriter.writeU(spsParams.spsMaxSublayersMinus1, ptlSubLayerLevelPresentFlags)\r\n\r\n      for (let j = spsParams.spsMaxSublayersMinus1 + 1; j <= 8 && spsParams.spsMaxSublayersMinus1 > 0; ++j) {\r\n        biWriter.writeU1(0)\r\n      }\r\n      for (let i = spsParams.spsMaxSublayersMinus1 - 1; i >= 0; i--) {\r\n        if (spsParams.ptlSublayerLevelPresentFlag[i]) {\r\n          biWriter.writeU(8, spsParams.sublayerLevelIdc[i])\r\n        }\r\n      }\r\n    }\r\n    biWriter.writeU(8, spsParams.generalSubProfileIdc.length)\r\n    for (let i = 0; i < spsParams.generalSubProfileIdc.length; i++) {\r\n      biWriter.writeU(8, spsParams.sublayerLevelIdc[i])\r\n    }\r\n    biWriter.writeU(16, spsParams.width)\r\n    biWriter.writeU(16, spsParams.height)\r\n    biWriter.writeU(16, 0)\r\n    biWriter.padding()\r\n    ptl = biWriter.getBuffer().subarray(0, biWriter.getPointer())\r\n  }\r\n\r\n  let length = 2 + (ptl ? ptl.length : 0)\r\n\r\n  if (vpss.length) {\r\n    // type + count\r\n    length += 3\r\n    length = vpss.reduce((prev, value) => {\r\n      // length + data\r\n      return prev + 2 + value.length\r\n    }, length)\r\n  }\r\n\r\n  if (spss.length) {\r\n    // type + count\r\n    length += 3\r\n    length = spss.reduce((prev, value) => {\r\n      // length + data\r\n      return prev + 2 + value.length\r\n    }, length)\r\n  }\r\n\r\n  if (ppss.length) {\r\n    // type + count\r\n    length += 3\r\n    length = ppss.reduce((prev, value) => {\r\n      // length + data\r\n      return prev + 2 + value.length\r\n    }, length)\r\n  }\r\n\r\n  const buffer = new Uint8Array(length)\r\n  const bufferWriter = new BufferWriter(buffer, true)\r\n\r\n  bufferWriter.writeUint8(NALULengthSizeMinusOne << 1 | (ptl ? 1 : 0) | 0xf8)\r\n\r\n  if (ptl) {\r\n    bufferWriter.writeBuffer(ptl)\r\n  }\r\n\r\n  // numOfArrays\r\n  let numOfArrays = 0\r\n  if (vpss.length) {\r\n    numOfArrays++\r\n  }\r\n  if (spss.length) {\r\n    numOfArrays++\r\n  }\r\n  if (ppss.length) {\r\n    numOfArrays++\r\n  }\r\n  bufferWriter.writeUint8(numOfArrays)\r\n\r\n  // vps\r\n  if (vpss.length) {\r\n    bufferWriter.writeUint8((1 << 7) | VVCNaluType.kVPS_NUT)\r\n    bufferWriter.writeUint16(vpss.length)\r\n    array.each(vpss, (vps) => {\r\n      bufferWriter.writeUint16(vps.length)\r\n      bufferWriter.writeBuffer(vps)\r\n    })\r\n  }\r\n\r\n  // sps\r\n  if (spss.length) {\r\n    bufferWriter.writeUint8((1 << 7) | VVCNaluType.kSPS_NUT)\r\n    bufferWriter.writeUint16(spss.length)\r\n    array.each(spss, (sps) => {\r\n      bufferWriter.writeUint16(sps.length)\r\n      bufferWriter.writeBuffer(sps)\r\n    })\r\n  }\r\n\r\n  // pps\r\n  if (ppss.length) {\r\n    bufferWriter.writeUint8((1 << 7) | VVCNaluType.kPPS_NUT)\r\n    bufferWriter.writeUint16(ppss.length)\r\n    array.each(ppss, (pps) => {\r\n      bufferWriter.writeUint16(pps.length)\r\n      bufferWriter.writeBuffer(pps)\r\n    })\r\n  }\r\n\r\n  return buffer\r\n}\r\n\r\n/**\r\n * annexb extradata 转 avcc extradata\r\n * \r\n * @param data \r\n * @returns \r\n */\r\nexport function annexbExtradata2AvccExtradata(data: Uint8ArrayInterface) {\r\n  let nalus = naluUtil.splitNaluByStartCode(data)\r\n\r\n  if (nalus.length >= 2) {\r\n    const vpss: Uint8ArrayInterface[] = []\r\n    const spss: Uint8ArrayInterface[] = []\r\n    const ppss: Uint8ArrayInterface[] = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kVPS_NUT) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kSPS_NUT) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kPPS_NUT) {\r\n        ppss.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (spss.length && ppss.length) {\r\n      return vpsSpsPps2Extradata(vpss, spss, ppss)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 从 annexb 码流里面生成 annexb extradata\r\n * \r\n * 提取出 vps、 sps 和 pps\r\n * \r\n * @param data \r\n * @returns \r\n */\r\nexport function generateAnnexbExtradata(data: Uint8ArrayInterface) {\r\n  let nalus = naluUtil.splitNaluByStartCode(data)\r\n\r\n  if (nalus.length >= 2) {\r\n    const vpss: Uint8ArrayInterface[] = []\r\n    const spss: Uint8ArrayInterface[] = []\r\n    const ppss: Uint8ArrayInterface[] = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kVPS_NUT) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kSPS_NUT) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kPPS_NUT) {\r\n        ppss.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (spss.length && ppss.length) {\r\n      const nalus = [spss[0], ppss[0]]\r\n      if (vpss.length) {\r\n        nalus.unshift(vpss[0])\r\n      }\r\n      return naluUtil.joinNaluByStartCode(nalus, 0)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * annexb 格式的 NALU 转 avcc NALU \r\n * \r\n * 需要保证 data 是 safe 的\r\n * \r\n */\r\nexport function annexb2Avcc(data: Uint8ArrayInterface, reverseSps: boolean = false) {\r\n  let extradata: Uint8Array\r\n  let key: boolean = false\r\n\r\n  let nalus = naluUtil.splitNaluByStartCode(data)\r\n\r\n  if (nalus.length) {\r\n    const vpss: Uint8ArrayInterface[] = []\r\n    const spss: Uint8ArrayInterface[] = []\r\n    const ppss: Uint8ArrayInterface[] = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kVPS_NUT) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kSPS_NUT) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kPPS_NUT) {\r\n        ppss.push(nalu)\r\n      }\r\n      if (type === VVCNaluType.kIDR_N_LP\r\n        || type === VVCNaluType.kIDR_W_RADL\r\n        || type === VVCNaluType.kCRA_NUT\r\n        || type === VVCNaluType.kGDR_NUT\r\n      ) {\r\n        key = true\r\n      }\r\n    })\r\n\r\n    if (spss.length && ppss.length) {\r\n      extradata = vpsSpsPps2Extradata(vpss, spss, ppss)\r\n      nalus = nalus.filter((nalu) => {\r\n        const type = (nalu[1] >>> 3) & 0x1f\r\n        return reverseSps\r\n          ? type !== VVCNaluType.kAUD_NUT\r\n          : (type !== VVCNaluType.kVPS_NUT\r\n            && type !== VVCNaluType.kSPS_NUT\r\n            && type !== VVCNaluType.kPPS_NUT\r\n            && type !== VVCNaluType.kAUD_NUT)\r\n      })\r\n    }\r\n    else {\r\n      nalus = nalus.filter((nalu) => {\r\n        const type = (nalu[1] >>> 3) & 0x1f\r\n        return type !== VVCNaluType.kAUD_NUT\r\n      })\r\n    }\r\n  }\r\n\r\n  const length = nalus.reduce((prev, nalu) => {\r\n    return prev + NALULengthSizeMinusOne + 1 + nalu.length\r\n  }, 0)\r\n\r\n  const bufferPointer: pointer<uint8> = avMalloc(length)\r\n  const buffer = mapUint8Array(bufferPointer, length)\r\n\r\n  naluUtil.joinNaluByLength(nalus, NALULengthSizeMinusOne, buffer)\r\n\r\n  return {\r\n    bufferPointer,\r\n    length,\r\n    extradata,\r\n    key\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * 需要保证 data 是 safe 的\r\n * \r\n * @param vpss \r\n * @param spss \r\n * @param ppss \r\n * @param nalus \r\n * @returns \r\n */\r\nexport function nalus2Annexb(\r\n  vpss: Uint8ArrayInterface[],\r\n  spss: Uint8ArrayInterface[],\r\n  ppss: Uint8ArrayInterface[],\r\n  nalus: Uint8ArrayInterface[],\r\n  key: boolean\r\n) {\r\n  const lengths = [\r\n    naluUtil.joinNaluByStartCodeLength(vpss, 0),\r\n    naluUtil.joinNaluByStartCodeLength(spss, 0),\r\n    naluUtil.joinNaluByStartCodeLength(ppss, 0),\r\n    naluUtil.joinNaluByStartCodeLength(nalus, 2)\r\n  ]\r\n\r\n  let length = lengths.reduce((prev, length) => {\r\n    return prev + length\r\n  }, 0)\r\n\r\n  const bufferPointer: pointer<uint8> = avMalloc(length + 7)\r\n\r\n  let offset = bufferPointer\r\n\r\n  // AUD\r\n  intwrite.w8(offset++, 0)\r\n  intwrite.w8(offset++, 0)\r\n  intwrite.w8(offset++, 0)\r\n  intwrite.w8(offset++, 1)\r\n  intwrite.w8(offset++, 0)\r\n  intwrite.w8(offset++, (VVCNaluType.kAUD_NUT << 3) | 1)\r\n  intwrite.w8(offset++, (key ? 1 : 0) << 7 | 0x28)\r\n\r\n  if (vpss.length) {\r\n    naluUtil.joinNaluByStartCode(vpss, 0, mapUint8Array(offset, lengths[0]))\r\n    offset = reinterpret_cast<pointer<uint8>>(offset + lengths[0])\r\n  }\r\n  if (spss.length) {\r\n    naluUtil.joinNaluByStartCode(spss, 0, mapUint8Array(offset, lengths[1]))\r\n    offset = reinterpret_cast<pointer<uint8>>(offset + lengths[1])\r\n  }\r\n  if (ppss.length) {\r\n    naluUtil.joinNaluByStartCode(ppss, 0, mapUint8Array(offset, lengths[2]))\r\n    offset = reinterpret_cast<pointer<uint8>>(offset + lengths[2])\r\n  }\r\n  if (nalus.length) {\r\n    naluUtil.joinNaluByStartCode(nalus, 2, mapUint8Array(offset, lengths[3]))\r\n  }\r\n\r\n  return {\r\n    bufferPointer,\r\n    length: length + 7\r\n  }\r\n}\r\n\r\n/**\r\n * annexb 添加 sps pps\r\n * \r\n * @param data \r\n * @param extradata \r\n */\r\nexport function annexbAddExtradata(data: Uint8ArrayInterface, extradata: Uint8ArrayInterface) {\r\n  let nalus = naluUtil.splitNaluByStartCode(data).concat(naluUtil.splitNaluByStartCode(extradata))\r\n  if (nalus.length) {\r\n    let vpss: Uint8ArrayInterface[] = []\r\n    let spss: Uint8ArrayInterface[] = []\r\n    let ppss: Uint8ArrayInterface[] = []\r\n    let others: Uint8ArrayInterface[] = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kVPS_NUT) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kSPS_NUT) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kPPS_NUT) {\r\n        ppss.push(nalu)\r\n      }\r\n      else if (type !== VVCNaluType.kAUD_NUT) {\r\n        others.push(nalu)\r\n      }\r\n    })\r\n    return nalus2Annexb(vpss, spss, ppss, others, true)\r\n  }\r\n}\r\n\r\n/**\r\n * avcc 格式的 NALU 转 annexb NALU \r\n * \r\n * 需要保证 data 是 safe 的\r\n * \r\n */\r\nexport function avcc2Annexb(data: Uint8ArrayInterface, extradata?: Uint8ArrayInterface) {\r\n  const naluLengthSizeMinusOne = extradata ? ((extradata[0] >>> 1) & 0x03) : NALULengthSizeMinusOne\r\n\r\n  let vpss: Uint8ArrayInterface[] = []\r\n  let spss: Uint8ArrayInterface[] = []\r\n  let ppss: Uint8ArrayInterface[] = []\r\n  let key = false\r\n\r\n  if (extradata) {\r\n    const result = extradata2VpsSpsPps(extradata)\r\n    vpss = result.vpss\r\n    spss = result.spss\r\n    ppss = result.ppss\r\n    key = true\r\n  }\r\n\r\n  const nalus = naluUtil.splitNaluByLength(data, naluLengthSizeMinusOne).filter((nalu) => {\r\n    const type = (nalu[1] >>> 3) & 0x1f\r\n    return type !== VVCNaluType.kAUD_NUT\r\n  })\r\n\r\n  return {\r\n    ...nalus2Annexb(vpss, spss, ppss, nalus, key),\r\n    key\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParametersBySps(stream: AVStream, sps: Uint8ArrayInterface) {\r\n  const { profile, level, width, height, videoDelay, chromaFormatIdc, bitDepthMinus8 } = parseSPS(sps)\r\n  stream.codecpar.profile = profile\r\n  stream.codecpar.level = level\r\n  stream.codecpar.width = width\r\n  stream.codecpar.height = height\r\n  stream.codecpar.videoDelay = videoDelay\r\n\r\n  switch (bitDepthMinus8) {\r\n    case 0:\r\n      if (chromaFormatIdc === 3) {\r\n        stream.codecpar.format = AVPixelFormat.AV_PIX_FMT_YUV444P\r\n      }\r\n      else if (chromaFormatIdc === 2) {\r\n        stream.codecpar.format = AVPixelFormat.AV_PIX_FMT_YUV422P\r\n      }\r\n      else {\r\n        stream.codecpar.format = AVPixelFormat.AV_PIX_FMT_YUV420P\r\n      }\r\n      break\r\n    case 2:\r\n      if (chromaFormatIdc === 3) {\r\n        stream.codecpar.format = AVPixelFormat.AV_PIX_FMT_YUV444P10LE\r\n      }\r\n      else if (chromaFormatIdc === 2) {\r\n        stream.codecpar.format = AVPixelFormat.AV_PIX_FMT_YUV422P10LE\r\n      }\r\n      else {\r\n        stream.codecpar.format = AVPixelFormat.AV_PIX_FMT_YUV420P10LE\r\n      }\r\n      break\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  let sps: Uint8ArrayInterface\r\n  if (extradata && naluUtil.isAnnexb(extradata)) {\r\n    array.each(naluUtil.splitNaluByStartCode(extradata), (nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kSPS_NUT) {\r\n        sps = nalu\r\n        return false\r\n      }\r\n    })\r\n  }\r\n  else if (extradata && extradata.length >= 6) {\r\n\r\n    stream.metadata.naluLengthSizeMinusOne = (extradata[0] >>> 1) & 0x03\r\n\r\n    const { spss } = extradata2VpsSpsPps(extradata)\r\n\r\n    if (spss.length) {\r\n      sps = spss[0]\r\n    }\r\n  }\r\n  if (sps) {\r\n    parseAVCodecParametersBySps(stream, sps)\r\n  }\r\n}\r\n\r\nexport function isIDR(avpacket: pointer<AVPacket>, naluLengthSize: int32 = 4) {\r\n  if (avpacket.flags & AVPacketFlags.AV_PKT_FLAG_H26X_ANNEXB) {\r\n    let nalus = naluUtil.splitNaluByStartCode(mapUint8Array(avpacket.data, reinterpret_cast<size>(avpacket.size)))\r\n    return nalus.some((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      return type === VVCNaluType.kIDR_N_LP || type === VVCNaluType.kIDR_W_RADL\r\n    })\r\n  }\r\n  else {\r\n    const size = avpacket.size\r\n    let i = 0\r\n    while (i < (size - naluLengthSize)) {\r\n      const type = (intread.r8(avpacket.data + (i + naluLengthSize + 1)) >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kIDR_N_LP || type === VVCNaluType.kIDR_W_RADL) {\r\n        return true\r\n      }\r\n      if (naluLengthSize === 4) {\r\n        i += intread.rb32(avpacket.data + i)\r\n      }\r\n      else if (naluLengthSize === 3) {\r\n        i += intread.rb24(avpacket.data + i)\r\n      }\r\n      else if (naluLengthSize === 2) {\r\n        i += intread.rb16(avpacket.data + i)\r\n      }\r\n      else {\r\n        i += intread.r8(avpacket.data + i)\r\n      }\r\n      i += naluLengthSize\r\n    }\r\n    return false\r\n  }\r\n}\r\n\r\n/* eslint-disable camelcase */\r\nexport interface VvcSPS {\r\n  profile: number\r\n  level: number\r\n  width: number\r\n  height: number\r\n  videoDelay: number\r\n  chromaFormatIdc: number\r\n  bitDepthMinus8: number\r\n  generalProfileSpace: number\r\n  tierFlag: number\r\n  generalConstraintInfo: number[]\r\n  generalSubProfileIdc: number[]\r\n  ptlFrameOnlyConstraintFlag: number\r\n  ptlMultilayerEnabledFlag: number\r\n  spsMaxSublayersMinus1: number\r\n  ptlSublayerLevelPresentFlag: number[]\r\n  sublayerLevelIdc: number[]\r\n  sps_log2_max_pic_order_cnt_lsb_minus4: number\r\n  sps_poc_msb_cycle_flag: number\r\n  sps_poc_msb_cycle_len_minus1: number\r\n  sps_num_extra_ph_bytes: number\r\n  sps_extra_ph_bit_present_flag: number[]\r\n}\r\n\r\nexport function parseSPS(sps: Uint8ArrayInterface): VvcSPS {\r\n  if (!sps || sps.length < 3) {\r\n    return\r\n  }\r\n\r\n  let offset = 0\r\n  if (sps[0] === 0x00\r\n    && sps[1] === 0x00\r\n    && sps[2] === 0x00\r\n    && sps[3] === 0x01\r\n  ) {\r\n    offset = 4\r\n  }\r\n\r\n  let profile = 0\r\n  let level = 0\r\n  let width = 0\r\n  let height = 0\r\n  let bitDepthMinus8 = 0\r\n  let chromaFormatIdc = 1\r\n  let generalProfileSpace = 0\r\n  let tierFlag = 0\r\n  let ptlFrameOnlyConstraintFlag = 0\r\n  let ptlMultilayerEnabledFlag = 0\r\n\r\n  const generalConstraintInfo = []\r\n  const ptlSublayerLevelPresentFlag = []\r\n  const sublayerLevelIdc = []\r\n  const generalSubProfileIdc = []\r\n\r\n  const buffer = naluUtil.naluUnescape(sps.subarray(offset))\r\n  const bitReader = new BitReader(buffer.length)\r\n  bitReader.appendBuffer(buffer)\r\n\r\n  // forbidden_zero_bit\r\n  bitReader.readU1()\r\n  // nuh_reserved_zero_bit\r\n  bitReader.readU1()\r\n  // layerId\r\n  bitReader.readU(6)\r\n  // nalu type\r\n  bitReader.readU(5)\r\n  // tid\r\n  bitReader.readU(3)\r\n\r\n  // sps_seq_parameter_set_id && sps_video_parameter_set_id\r\n  bitReader.readU(8)\r\n\r\n  const spsMaxSublayersMinus1 = bitReader.readU(3)\r\n  chromaFormatIdc = bitReader.readU(2)\r\n  const sps_log2_ctu_size_minus5 = bitReader.readU(2)\r\n  const sps_ptl_dpb_hrd_params_present_flag = bitReader.readU(1)\r\n  if (sps_ptl_dpb_hrd_params_present_flag) {\r\n    profile = bitReader.readU(7)\r\n    tierFlag = bitReader.readU(1)\r\n    level = bitReader.readU(8)\r\n    ptlFrameOnlyConstraintFlag = bitReader.readU(1)\r\n    ptlMultilayerEnabledFlag = bitReader.readU(1)\r\n    const gci_present_flag = bitReader.readU(1)\r\n    if (gci_present_flag) {\r\n      for (let j = 0; j < 8; j++) {\r\n        generalConstraintInfo[j] = bitReader.readU(8)\r\n      }\r\n      generalConstraintInfo[8] = bitReader.readU(7)\r\n      const gci_num_reserved_bits = bitReader.readU(8)\r\n      bitReader.readU(gci_num_reserved_bits)\r\n    }\r\n    bitReader.skipPadding()\r\n    for (let i = spsMaxSublayersMinus1 - 1; i >= 0; i--) {\r\n      ptlSublayerLevelPresentFlag[i] = bitReader.readU(1)\r\n    }\r\n    bitReader.skipPadding()\r\n    for (let i = spsMaxSublayersMinus1 - 1; i >= 0; i--) {\r\n      if (ptlSublayerLevelPresentFlag[i]) {\r\n        sublayerLevelIdc[i] = bitReader.readU(8)\r\n      }\r\n    }\r\n\r\n    const ptl_num_sub_profiles = bitReader.readU(8)\r\n    if (ptl_num_sub_profiles) {\r\n      for (let i = 0; i < ptl_num_sub_profiles; i++) {\r\n        generalSubProfileIdc[i] = bitReader.readU(32)\r\n      }\r\n    }\r\n  }\r\n\r\n  // sps_gdr_enabled_flag\r\n  bitReader.readU1()\r\n  const sps_ref_pic_resampling_enabled_flag = bitReader.readU1()\r\n  if (sps_ref_pic_resampling_enabled_flag) {\r\n    // sps_res_change_in_clvs_allowed_flag\r\n    bitReader.readU1()\r\n  }\r\n\r\n  const sps_pic_width_max_in_luma_samples = width = expgolomb.readUE(bitReader)\r\n  const sps_pic_height_max_in_luma_samples = height = expgolomb.readUE(bitReader)\r\n\r\n  if (bitReader.readU1()) {\r\n    // sps_conf_win_left_offset\r\n    expgolomb.readUE(bitReader)\r\n    // sps_conf_win_right_offset\r\n    expgolomb.readUE(bitReader)\r\n    // sps_conf_win_top_offset\r\n    expgolomb.readUE(bitReader)\r\n    // sps_conf_win_bottom_offset\r\n    expgolomb.readUE(bitReader)\r\n  }\r\n\r\n  if (bitReader.readU1()) {\r\n    const sps_num_subpics_minus1 = expgolomb.readUE(bitReader)\r\n    const ctb_log2_size_y = sps_log2_ctu_size_minus5 + 5\r\n    const ctb_size_y      = 1 << ctb_log2_size_y\r\n    const tmp_width_val   = sps_pic_width_max_in_luma_samples / (1 << ctb_log2_size_y)\r\n    const tmp_height_val  = sps_pic_height_max_in_luma_samples / (1 << ctb_log2_size_y)\r\n    const wlen            = Math.ceil(Math.log2(tmp_width_val))\r\n    const hlen            = Math.ceil(Math.log2(tmp_height_val))\r\n\r\n    let sps_subpic_id_len = 0\r\n    let sps_subpic_same_size_flag = 0\r\n    let sps_independent_subpics_flag = 0\r\n    // sps_num_subpics_minus1\r\n    if (sps_num_subpics_minus1 > 0) {\r\n      sps_independent_subpics_flag = bitReader.readU1()\r\n      sps_subpic_same_size_flag = bitReader.readU1()\r\n    }\r\n    for (let i = 0; sps_num_subpics_minus1 > 0 && i <= sps_num_subpics_minus1; i++) {\r\n      if (!sps_subpic_same_size_flag || i == 0) {\r\n        if (i > 0 && sps_pic_width_max_in_luma_samples > ctb_size_y) {\r\n          bitReader.readU(wlen)\r\n        }\r\n        if (i > 0 && sps_pic_height_max_in_luma_samples > ctb_size_y) {\r\n          bitReader.readU(hlen)\r\n        }\r\n        if (i < sps_num_subpics_minus1 && sps_pic_width_max_in_luma_samples > ctb_size_y) {\r\n          bitReader.readU(wlen)\r\n        }\r\n        if (i < sps_num_subpics_minus1 && sps_pic_height_max_in_luma_samples > ctb_size_y) {\r\n          bitReader.readU(hlen)\r\n        }\r\n      }\r\n      if (!sps_independent_subpics_flag) {\r\n        // sps_subpic_treated_as_pic_flag && sps_loop_filter_across_subpic_enabled_flag\r\n        bitReader.readU(2)\r\n      }\r\n    }\r\n    sps_subpic_id_len = expgolomb.readUE(bitReader) + 1\r\n    // sps_subpic_id_mapping_explicitly_signalled_flag\r\n    if (bitReader.readU(1)) {\r\n      // sps_subpic_id_mapping_present_flag\r\n      if (bitReader.readU(1)) {\r\n        for (let i = 0; i <= sps_num_subpics_minus1; i++) {\r\n          // sps_subpic_id[i]\r\n          bitReader.readU(sps_subpic_id_len)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  bitDepthMinus8 = expgolomb.readUE(bitReader)\r\n\r\n  // sps_entropy_coding_sync_enabled_flag\r\n  bitReader.readU(1)\r\n  // sps_entry_point_offsets_present_flag\r\n  bitReader.readU(1)\r\n\r\n  const sps_log2_max_pic_order_cnt_lsb_minus4 = bitReader.readU(4)\r\n  const sps_poc_msb_cycle_flag = bitReader.readU(1)\r\n  let sps_poc_msb_cycle_len_minus1 = 0\r\n  if (sps_poc_msb_cycle_flag) {\r\n    sps_poc_msb_cycle_len_minus1 = expgolomb.readUE(bitReader)\r\n  }\r\n  const sps_extra_ph_bit_present_flag: number[] = []\r\n  const sps_num_extra_ph_bytes = bitReader.readU(2)\r\n  for (let i = 0; i < (sps_num_extra_ph_bytes * 8); i++) {\r\n    sps_extra_ph_bit_present_flag[i] = bitReader.readU(1)\r\n  }\r\n\r\n  const videoDelay = (spsMaxSublayersMinus1 + 1)  > 2 ? 2 : spsMaxSublayersMinus1\r\n\r\n  return {\r\n    profile,\r\n    level,\r\n    width,\r\n    height,\r\n    videoDelay,\r\n    chromaFormatIdc,\r\n    bitDepthMinus8,\r\n    generalProfileSpace,\r\n    tierFlag,\r\n    generalConstraintInfo,\r\n    generalSubProfileIdc,\r\n    ptlFrameOnlyConstraintFlag,\r\n    ptlMultilayerEnabledFlag,\r\n    spsMaxSublayersMinus1,\r\n    ptlSublayerLevelPresentFlag,\r\n    sublayerLevelIdc,\r\n    sps_log2_max_pic_order_cnt_lsb_minus4,\r\n    sps_poc_msb_cycle_flag,\r\n    sps_poc_msb_cycle_len_minus1,\r\n    sps_num_extra_ph_bytes,\r\n    sps_extra_ph_bit_present_flag\r\n  }\r\n}\r\n\r\nexport function parseExtraData(extradata: Uint8ArrayInterface) {\r\n\r\n  if (naluUtil.isAnnexb(extradata)) {\r\n    extradata = annexbExtradata2AvccExtradata(extradata)\r\n  }\r\n\r\n  const bitReader = new BitReader()\r\n  bitReader.appendBuffer(extradata)\r\n  const ptlPresentFlag = bitReader.readU(8) & 0x01\r\n  if (ptlPresentFlag) {\r\n    return parsePTL(bitReader)\r\n  }\r\n  return {} as Data\r\n}\r\n"],"names":[],"sourceRoot":""}