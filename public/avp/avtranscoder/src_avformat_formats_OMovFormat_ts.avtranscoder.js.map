{"version":3,"file":"src_avformat_formats_OMovFormat_ts.avtranscoder.js","mappings":"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","sources":["webpack://AVTranscoder/./src/avformat/bsf/AVBSFilter.ts","webpack://AVTranscoder/./src/avformat/bsf/h2645/Annexb2AvccFilter.ts","webpack://AVTranscoder/./src/avformat/formats/OMovFormat.ts","webpack://AVTranscoder/./src/avformat/formats/mov/boxType.ts","webpack://AVTranscoder/./src/avformat/formats/mov/function/createFragmentTrack.ts","webpack://AVTranscoder/./src/avformat/formats/mov/function/createMovContext.ts","webpack://AVTranscoder/./src/avformat/formats/mov/function/createMovStreamContext.ts","webpack://AVTranscoder/./src/avformat/formats/mov/function/getSampleDuration.ts","webpack://AVTranscoder/./src/avformat/formats/mov/function/updatePositionSize.ts","webpack://AVTranscoder/./src/avformat/formats/mov/layout.ts","webpack://AVTranscoder/./src/avformat/formats/mov/mov.ts","webpack://AVTranscoder/./src/avformat/formats/mov/omov.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/av1c.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/avcc.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/btrt.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/co64.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/colr.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/ctts.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/dac3.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/dec3.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/dfla.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/dops.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/dref.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/edts.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/esds.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/function/writeMatrix.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/hdlr.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/hvcc.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/mdhd.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/mfhd.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/minfHdlr.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/mvhd.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/pasp.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/saio.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/saiz.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/senc.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/smhd.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/stco.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/stsc.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/stsd.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/stss.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/stsz.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/stts.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/tfdt.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/tfhd.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/tkhd.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/trex.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/trun.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/vmhd.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/vpcc.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/vvcc.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/wave.ts","webpack://AVTranscoder/./src/avformat/formats/mov/writing/writers.ts","webpack://AVTranscoder/./src/avformat/function/arrayItemSame.ts","webpack://AVTranscoder/./src/avformat/function/digital2Tag.ts","webpack://AVTranscoder/./src/avformat/function/mktag.ts","webpack://AVTranscoder/./src/avformat/function/rewriteIO.ts","webpack://AVTranscoder/./src/avutil/codecs/ac3.ts","webpack://AVTranscoder/./src/avutil/codecs/flac.ts","webpack://AVTranscoder/./src/avutil/codecs/vvc.ts","webpack://AVTranscoder/./src/avutil/util/encryption.ts"],"sourcesContent":["/*\r\n * libmedia AVBSFilter\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport { avMallocz } from 'avutil/util/mem'\r\nimport { copyCodecParameters, freeCodecParameters } from 'avutil/util/codecparameters'\r\n\r\nexport default abstract class AVBSFilter {\r\n\r\n  inCodecpar: pointer<AVCodecParameters>\r\n  inTimeBase: Rational\r\n\r\n  outCodecpar: pointer<AVCodecParameters>\r\n\r\n  public init(codecpar: pointer<AVCodecParameters>, timeBase: pointer<Rational>): number {\r\n    this.inCodecpar = reinterpret_cast<pointer<AVCodecParameters>>(avMallocz(sizeof(AVCodecParameters)))\r\n    copyCodecParameters(this.inCodecpar, codecpar)\r\n\r\n    this.inTimeBase = {\r\n      den: timeBase.den,\r\n      num: timeBase.num\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  public destroy() {\r\n    if (this.inCodecpar) {\r\n      freeCodecParameters(this.inCodecpar)\r\n      this.inCodecpar = nullptr\r\n    }\r\n  }\r\n\r\n  public abstract sendAVPacket(avpacket: pointer<AVPacket>): number\r\n  public abstract receiveAVPacket(avpacket: pointer<AVPacket>): number\r\n  public abstract reset(): number\r\n}\r\n","/*\r\n * libmedia Annexb2AvccFilter\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport AVBSFilter from '../AVBSFilter'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport { addAVPacketData, addAVPacketSideData, copyAVPacketProps, createAVPacket,\r\n  destroyAVPacket, refAVPacket, unrefAVPacket\r\n} from 'avutil/util/avpacket'\r\n\r\nimport * as h264 from 'avutil/codecs/h264'\r\nimport * as hevc from 'avutil/codecs/hevc'\r\nimport * as vvc from 'avutil/codecs/vvc'\r\nimport { mapSafeUint8Array, memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport { AVCodecID, AVPacketSideDataType } from 'avutil/codec'\r\nimport * as errorType from 'avutil/error'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport * as logger from 'common/util/logger'\r\n\r\nexport default class Annexb2AvccFilter extends AVBSFilter {\r\n\r\n  private cache: pointer<AVPacket>\r\n  private cached: boolean\r\n  private reverseSps: boolean\r\n\r\n  constructor(reverseSps: boolean = false) {\r\n    super()\r\n    this.reverseSps = reverseSps\r\n  }\r\n\r\n  public init(codecpar: pointer<AVCodecParameters>, timeBase: pointer<Rational>): number {\r\n    super.init(codecpar, timeBase)\r\n    this.cache = createAVPacket()\r\n    this.cached = false\r\n\r\n    return 0\r\n  }\r\n\r\n  public destroy(): void {\r\n    super.destroy()\r\n    destroyAVPacket(this.cache)\r\n    this.cache = nullptr\r\n  }\r\n\r\n  public sendAVPacket(avpacket: pointer<AVPacket>): number {\r\n\r\n    if (!(avpacket.flags & AVPacketFlags.AV_PKT_FLAG_H26X_ANNEXB)) {\r\n      refAVPacket(this.cache, avpacket)\r\n    }\r\n    else {\r\n\r\n      copyAVPacketProps(this.cache, avpacket)\r\n\r\n      let convert: {\r\n        bufferPointer: pointer<uint8>,\r\n        length: number,\r\n        extradata: Uint8Array,\r\n        key: boolean\r\n      }\r\n\r\n      const buffer = mapSafeUint8Array(avpacket.data, reinterpret_cast<size>(avpacket.size))\r\n\r\n      if (this.inCodecpar.codecId === AVCodecID.AV_CODEC_ID_H264) {\r\n        convert = h264.annexb2Avcc(buffer, this.reverseSps)\r\n      }\r\n      else if (this.inCodecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC) {\r\n        convert = hevc.annexb2Avcc(buffer, this.reverseSps)\r\n      }\r\n      else if (this.inCodecpar.codecId === AVCodecID.AV_CODEC_ID_VVC) {\r\n        convert = vvc.annexb2Avcc(buffer, this.reverseSps)\r\n      }\r\n      else {\r\n        logger.fatal(`not support for codecId: ${this.inCodecpar.codecId}`)\r\n      }\r\n\r\n      this.cache.flags &= ~AVPacketFlags.AV_PKT_FLAG_H26X_ANNEXB\r\n\r\n      addAVPacketData(this.cache, convert.bufferPointer, convert.length)\r\n\r\n      if (convert.key) {\r\n        this.cache.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n      }\r\n\r\n      if (convert.extradata) {\r\n        const extradata = avMalloc(convert.extradata.length)\r\n        memcpyFromUint8Array(extradata, convert.extradata.length, convert.extradata)\r\n        addAVPacketSideData(this.cache, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, extradata, convert.extradata.length)\r\n      }\r\n    }\r\n    this.cached = true\r\n    return 0\r\n  }\r\n\r\n  public receiveAVPacket(avpacket: pointer<AVPacket>): number {\r\n    if (this.cached) {\r\n      unrefAVPacket(avpacket)\r\n      refAVPacket(avpacket, this.cache)\r\n      this.cached = false\r\n      return 0\r\n    }\r\n    else {\r\n      return errorType.DATA_INVALID\r\n    }\r\n  }\r\n\r\n  public reset(): number {\r\n    return 0\r\n  }\r\n}\r\n","/*\r\n * libmedia mov encoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport OFormat from './OFormat'\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport { AVOFormatContext } from '../AVFormatContext'\r\n\r\nimport { MOVContext, MOVStreamContext } from './mov/type'\r\nimport createMovContext from './mov/function/createMovContext'\r\nimport mktag from '../function/mktag'\r\nimport { AVCodecID, AVMediaType, AVPacketSideDataType } from 'avutil/codec'\r\nimport * as omov from './mov/omov'\r\nimport { BoxType, SampleFlags, TKHDFlags } from './mov/boxType'\r\nimport createMovStreamContext from './mov/function/createMovStreamContext'\r\nimport createFragmentTrack from './mov/function/createFragmentTrack'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport * as array from 'common/util/array'\r\nimport * as logger from 'common/util/logger'\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\nimport updatePositionSize from './mov/function/updatePositionSize'\r\nimport { AV_MILLI_TIME_BASE_Q, AV_TIME_BASE, AV_TIME_BASE_Q, NOPTS_VALUE_BIGINT, UINT32_MAX } from 'avutil/constant'\r\nimport { MovFragmentMode, MovMode } from './mov/mov'\r\nimport * as object from 'common/util/object'\r\nimport rewriteIO from '../function/rewriteIO'\r\n\r\nimport arrayItemSame from '../function/arrayItemSame'\r\nimport AVStream, { AVDisposition, AVStreamMetadataEncryption, AVStreamMetadataKey } from 'avutil/AVStream'\r\nimport { AVFormat } from 'avutil/avformat'\r\nimport { avQ2D, avRescaleQ, avRescaleQ2 } from 'avutil/util/rational'\r\nimport { createAVPacket, destroyAVPacket, getAVPacketData, getSideData } from 'avutil/util/avpacket'\r\nimport Annexb2AvccFilter from '../bsf/h2645/Annexb2AvccFilter'\r\nimport * as is from 'common/util/is'\r\nimport * as bigint from 'common/util/bigint'\r\n\r\nimport * as ac3 from 'avutil/codecs/ac3'\r\nimport { mapUint8Array } from 'cheap/std/memory'\r\nimport getSampleDuration from './mov/function/getSampleDuration'\r\nimport { encryptionSideData2Info } from 'avutil/util/encryption'\r\n\r\nexport {\r\n  MovFragmentMode,\r\n  MovMode\r\n}\r\n\r\nexport interface OMovFormatOptions {\r\n  /**\r\n   * fragment 按 gop 分段还是按帧分段\r\n   */\r\n  fragmentMode?: MovFragmentMode\r\n  /**\r\n   * mp4 还是 mov\r\n   */\r\n  movMode?: MovMode\r\n  /**\r\n   * fragment 模式\r\n   */\r\n  fragment?: boolean\r\n  /**\r\n   * moov 放到文件开头\r\n   */\r\n  fastOpen?: boolean\r\n  /**\r\n   * data offset 基于 moof box(mse 使用）\r\n   */\r\n  defaultBaseIsMoof?: boolean\r\n  /**\r\n   * 忽略 editlist box 的约束\r\n   */\r\n  ignoreEditlist?: boolean\r\n  /**\r\n   * drm 加密信息\r\n   */\r\n  encryption?: AVStreamMetadataEncryption\r\n  /**\r\n   * 保留 avcc 码流中的 sps，用于封装 sps 中途更改的流\r\n   */\r\n  reverseSpsInAvcc?: boolean\r\n  /**\r\n   * 忽略 drm 数据写入\r\n   */\r\n  ignoreEncryption?: boolean\r\n  /**\r\n   * fragment 最短时长（只有音频时使用，默认 5 秒）\r\n   */\r\n  minFragmentLength?: number\r\n  /**\r\n   * fragment index 最短时长（只有音频时使用，默认 5 秒）\r\n   */\r\n  minFragmentIndexLength?: number\r\n  /**\r\n   * fragment 结束时是否追加 tfra 用于 seek\r\n   */\r\n  hasTfra?: boolean\r\n}\r\n\r\nconst defaultOptions: OMovFormatOptions = {\r\n  fragmentMode: MovFragmentMode.GOP,\r\n  movMode: MovMode.MP4,\r\n  fragment: false,\r\n  fastOpen: false,\r\n  defaultBaseIsMoof: false,\r\n  reverseSpsInAvcc: false,\r\n  ignoreEncryption: false,\r\n  minFragmentLength: 5000,\r\n  minFragmentIndexLength: 5000,\r\n  hasTfra: true\r\n}\r\n\r\nexport default class OMovFormat extends OFormat {\r\n\r\n  public type: AVFormat = AVFormat.MOV\r\n\r\n  private context: MOVContext\r\n\r\n  public options: OMovFormatOptions\r\n\r\n  private annexb2AvccFilter: Annexb2AvccFilter\r\n  private avpacket: pointer<AVPacket>\r\n\r\n  constructor(options: OMovFormatOptions = {}) {\r\n    super()\r\n\r\n    this.options = object.extend({}, defaultOptions, options)\r\n\r\n    this.context = createMovContext()\r\n  }\r\n\r\n  public init(formatContext: AVOFormatContext): number {\r\n    formatContext.ioWriter.setEndian(true)\r\n    const videoStream = formatContext.getStreamByMediaType(AVMediaType.AVMEDIA_TYPE_VIDEO)\r\n\r\n    if (videoStream\r\n      && (videoStream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n        || videoStream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n        || videoStream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n      )\r\n    ) {\r\n      this.annexb2AvccFilter = new Annexb2AvccFilter(this.options.reverseSpsInAvcc)\r\n      this.annexb2AvccFilter.init(addressof(videoStream.codecpar), addressof(videoStream.timeBase))\r\n    }\r\n    this.avpacket = createAVPacket()\r\n\r\n    return 0\r\n  }\r\n\r\n  public async destroy(formatContext: AVOFormatContext) {\r\n    if (this.annexb2AvccFilter) {\r\n      this.annexb2AvccFilter.destroy()\r\n      this.annexb2AvccFilter = null\r\n    }\r\n    if (this.avpacket) {\r\n      destroyAVPacket(this.avpacket)\r\n      this.avpacket = nullptr\r\n    }\r\n  }\r\n\r\n  /*\r\n   * stream.disposition controls the \"enabled\" flag in the tkhd tag.\r\n   * QuickTime will not play a track if it is not enabled.  So make sure\r\n   * that one track of each type (audio, video, subtitle) is enabled.\r\n   *\r\n   * Subtitles are special.  For audio and video, setting \"enabled\" also\r\n   * makes the track \"default\" (i.e. it is rendered when played). For\r\n   * subtitles, an \"enabled\" subtitle is not rendered by default, but\r\n   * if no subtitle is enabled, the subtitle menu in QuickTime will be\r\n   * empty!\r\n   */\r\n  private enableStreams(formatContext: AVOFormatContext) {\r\n    const enabled = []\r\n    const first = []\r\n\r\n    for (let i = 0; i < AVMediaType.AVMEDIA_TYPE_NB; i++) {\r\n      enabled[i] = 0\r\n      first[i] = -1\r\n    }\r\n    array.each(formatContext.streams, (stream, index) => {\r\n      if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_UNKNOWN\r\n        || stream.codecpar.codecType >= AVMediaType.AVMEDIA_TYPE_NB\r\n      ) {\r\n        return true\r\n      }\r\n\r\n      if (first[stream.codecpar.codecType] < 0) {\r\n        first[stream.codecpar.codecType] = index\r\n      }\r\n\r\n      if (stream.disposition & AVDisposition.DEFAULT) {\r\n        enabled[stream.codecpar.codecType]++\r\n        (stream.privData as MOVStreamContext).flags |= TKHDFlags.ENABLED\r\n      }\r\n    })\r\n\r\n    for (let i = 0; i < AVMediaType.AVMEDIA_TYPE_NB; i++) {\r\n      switch (i) {\r\n        case AVMediaType.AVMEDIA_TYPE_VIDEO:\r\n        case AVMediaType.AVMEDIA_TYPE_AUDIO:\r\n        case AVMediaType.AVMEDIA_TYPE_SUBTITLE:\r\n          if (enabled[i] > 1) {\r\n            (formatContext.streams[enabled[i]].privData as MOVStreamContext).perStreamGrouping = true\r\n          }\r\n          if (!enabled[i] && first[i] >= 0) {\r\n            (formatContext.streams[first[i]].privData as MOVStreamContext).flags |= TKHDFlags.ENABLED\r\n          }\r\n          break\r\n      }\r\n    }\r\n  }\r\n\r\n  public writeHeader(formatContext: AVOFormatContext): number {\r\n\r\n    this.context.majorBrand = mktag('isom')\r\n    this.context.minorVersion = 512\r\n    this.context.compatibleBrand = [mktag('isom')]\r\n    this.context.timescale = 1000\r\n    this.context.ignoreEncryption = this.options.ignoreEncryption\r\n\r\n    if (this.options.fragment) {\r\n      this.context.compatibleBrand.push(mktag('iso6'))\r\n      this.context.fragment = true\r\n    }\r\n    if (this.options.movMode === MovMode.MOV) {\r\n      this.context.isom = true\r\n      this.context.majorBrand = mktag('qt  ')\r\n      this.context.compatibleBrand = [this.context.majorBrand]\r\n    }\r\n\r\n    if (this.options.movMode !== MovMode.MOV) {\r\n      this.context.compatibleBrand.push(mktag('iso2'))\r\n\r\n      const videoStream = formatContext.getStreamByMediaType(AVMediaType.AVMEDIA_TYPE_VIDEO)\r\n\r\n      if (videoStream && videoStream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264) {\r\n        this.context.compatibleBrand.push(mktag('avc1'))\r\n      }\r\n\r\n      this.context.compatibleBrand.push(mktag('mp41'))\r\n    }\r\n\r\n    omov.writeFtyp(formatContext.ioWriter, this.context)\r\n    this.context.holdMoovPos = formatContext.ioWriter.getPos()\r\n\r\n    if (this.options.fragment) {\r\n      this.context.currentFragment = {\r\n        pos: 0n,\r\n        currentTrack: null,\r\n        sequence: 1,\r\n        tracks: [],\r\n        size: 0,\r\n        firstWrote: false\r\n      }\r\n\r\n      array.each(formatContext.streams, (stream, index) => {\r\n        const streamContext = createMovStreamContext()\r\n        stream.privData = streamContext\r\n\r\n        streamContext.chunkOffsets = []\r\n        streamContext.cttsSampleCounts = []\r\n        streamContext.cttsSampleOffsets = []\r\n        streamContext.stscFirstChunk = []\r\n        streamContext.stscSamplesPerChunk = []\r\n        streamContext.stscSampleDescriptionIndex = []\r\n        streamContext.stssSampleNumbers = []\r\n        streamContext.sampleSizes = []\r\n        streamContext.sttsSampleCounts = []\r\n        streamContext.sttsSampleDeltas = []\r\n        streamContext.alternateGroup = index\r\n\r\n        const track = createFragmentTrack()\r\n        track.baseIsMoof = this.options.defaultBaseIsMoof\r\n        track.streamIndex = stream.index\r\n        track.trackId = this.context.nextTrackId++\r\n        streamContext.trackId = track.trackId\r\n\r\n        const encryption = this.options.encryption || stream.metadata[AVStreamMetadataKey.ENCRYPTION] as AVStreamMetadataEncryption\r\n        if (encryption) {\r\n          const cenc = this.context.cencs || {}\r\n          cenc[track.trackId] = {\r\n            schemeType: encryption.schemeType,\r\n            schemeVersion: encryption.schemeVersion,\r\n            cryptByteBlock: encryption.cryptByteBlock,\r\n            skipByteBlock: encryption.skipByteBlock,\r\n            defaultConstantIV: encryption.constantIV,\r\n            isProtected: 1,\r\n            defaultPerSampleIVSize: encryption.perSampleIVSize,\r\n            defaultKeyId: encryption.kid,\r\n            pattern: !!encryption.pattern\r\n          }\r\n          this.context.cencs = cenc\r\n        }\r\n\r\n        track.ioWriter = new IOWriter()\r\n        track.ioWriter.onFlush = (data) => {\r\n          track.buffers.push(data.slice())\r\n          return 0\r\n        }\r\n        this.context.currentFragment.tracks.push(track)\r\n      })\r\n\r\n      this.enableStreams(formatContext)\r\n\r\n      omov.writeMoov(formatContext.ioWriter, formatContext, this.context)\r\n      formatContext.ioWriter.flush()\r\n    }\r\n    else {\r\n      array.each(formatContext.streams, (stream, index) => {\r\n        const streamContext = createMovStreamContext()\r\n        stream.privData = streamContext\r\n\r\n        streamContext.trackId = this.context.nextTrackId++\r\n\r\n        streamContext.chunkOffsets = []\r\n        streamContext.cttsSampleCounts = []\r\n        streamContext.cttsSampleOffsets = []\r\n        streamContext.stscFirstChunk = []\r\n        streamContext.stscSamplesPerChunk = []\r\n        streamContext.stscSampleDescriptionIndex = []\r\n        streamContext.stssSampleNumbers = []\r\n        streamContext.sampleSizes = []\r\n        streamContext.sttsSampleCounts = []\r\n        streamContext.sttsSampleDeltas = []\r\n        streamContext.alternateGroup = index\r\n      })\r\n\r\n      this.enableStreams(formatContext)\r\n\r\n      const pos = formatContext.ioWriter.getPos()\r\n      formatContext.ioWriter.writeUint32(0)\r\n      formatContext.ioWriter.writeUint32(mktag(BoxType.MDAT))\r\n      this.context.boxsPositionInfo.push({\r\n        pos,\r\n        type: BoxType.MDAT,\r\n        size: 0\r\n      })\r\n    }\r\n    if (!formatContext.getStreamByMediaType(AVMediaType.AVMEDIA_TYPE_VIDEO)) {\r\n      this.context.audioOnly = true\r\n    }\r\n    return 0\r\n  }\r\n\r\n  private updateCurrentChunk(formatContext: AVOFormatContext) {\r\n    let currentChunk = this.context.currentChunk\r\n\r\n    if (!currentChunk || !currentChunk.sampleCount) {\r\n      return\r\n    }\r\n\r\n    const prevStream = formatContext.streams.find((stream) => {\r\n      return stream.index === currentChunk.streamIndex\r\n    })\r\n    const prevMovStreamContext = prevStream.privData as MOVStreamContext\r\n    prevMovStreamContext.chunkCount++\r\n    prevMovStreamContext.chunkOffsets.push(currentChunk.pos)\r\n    if (!prevMovStreamContext.stscFirstChunk.length) {\r\n      prevMovStreamContext.stscFirstChunk.push(prevMovStreamContext.chunkCount)\r\n      prevMovStreamContext.stscSamplesPerChunk.push(currentChunk.sampleCount)\r\n      prevMovStreamContext.stscSampleDescriptionIndex.push(1)\r\n      prevMovStreamContext.lastStscCount = currentChunk.sampleCount\r\n    }\r\n    else {\r\n      if (prevMovStreamContext.lastStscCount !== currentChunk.sampleCount) {\r\n        prevMovStreamContext.stscFirstChunk.push(prevMovStreamContext.chunkCount)\r\n        prevMovStreamContext.stscSamplesPerChunk.push(currentChunk.sampleCount)\r\n        prevMovStreamContext.stscSampleDescriptionIndex.push(1)\r\n        prevMovStreamContext.lastStscCount = currentChunk.sampleCount\r\n      }\r\n    }\r\n  }\r\n\r\n  private updateCurrentFragment(formatContext: AVOFormatContext, currentDts?: int64) {\r\n    if (this.context.currentFragment.firstWrote) {\r\n      array.each(this.context.currentFragment.tracks, (track) => {\r\n\r\n        const stream = formatContext.streams.find((stream) => {\r\n          return stream.index === track.streamIndex\r\n        })\r\n\r\n        if (!track.sampleCount || !stream) {\r\n          return  true\r\n        }\r\n\r\n        const streamContext = stream.privData as MOVStreamContext\r\n\r\n        track.baseDataOffset = formatContext.ioWriter.getPos()\r\n        this.context.currentFragment.pos = formatContext.ioWriter.getPos()\r\n\r\n        if (!track.sampleDurations.length) {\r\n          if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_AUDIO) {\r\n            if (currentDts) {\r\n              track.sampleDurations.push(static_cast<double>(currentDts - streamContext.lastDts))\r\n            }\r\n            else if (stream.codecpar.frameSize > 0) {\r\n              track.sampleDurations.push(static_cast<double>(avRescaleQ(\r\n                static_cast<int64>(stream.codecpar.frameSize / stream.codecpar.sampleRate * AV_TIME_BASE),\r\n                AV_TIME_BASE_Q,\r\n                stream.timeBase\r\n              )))\r\n            }\r\n            else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC) {\r\n              track.sampleDurations.push(static_cast<double>(avRescaleQ(\r\n                static_cast<int64>(1024 / stream.codecpar.sampleRate * AV_TIME_BASE),\r\n                AV_TIME_BASE_Q,\r\n                stream.timeBase\r\n              )))\r\n            }\r\n            else {\r\n              // 随便猜一个？每帧一个 fragment 没有 sampleDuration QuickTime 无法播放\r\n              track.sampleDurations.push(static_cast<double>(avRescaleQ(\r\n                static_cast<int64>(1024 / stream.codecpar.sampleRate * AV_TIME_BASE),\r\n                AV_TIME_BASE_Q,\r\n                stream.timeBase\r\n              )))\r\n            }\r\n          }\r\n          else if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_VIDEO) {\r\n            if (currentDts) {\r\n              track.sampleDurations.push(static_cast<double>(currentDts - streamContext.lastDts))\r\n            }\r\n            else if (avQ2D(stream.codecpar.framerate) > 0) {\r\n              track.sampleDurations.push(static_cast<double>(avRescaleQ(\r\n                static_cast<int64>(1 / avQ2D(stream.codecpar.framerate) * AV_TIME_BASE),\r\n                AV_TIME_BASE_Q,\r\n                stream.timeBase\r\n              )))\r\n            }\r\n            else {\r\n              // 随便猜一个？每帧一个 fragment 没有 sampleDuration QuickTime 无法播放\r\n              // 取帧率 30\r\n              track.sampleDurations.push((stream.timeBase.den / (30 * stream.timeBase.num)) >>> 0)\r\n            }\r\n          }\r\n          else {\r\n            track.sampleDurations.push(0)\r\n          }\r\n        }\r\n        else if (currentDts && track.sampleDurations.length === track.sampleSizes.length - 1) {\r\n          track.sampleDurations.push(static_cast<double>(currentDts - streamContext.lastDts))\r\n        }\r\n\r\n        streamContext.lastDuration = track.sampleDurations[track.sampleSizes.length - 1]\r\n\r\n        if (track.sampleFlags.length === 1 || arrayItemSame(track.sampleFlags, 1)) {\r\n          track.firstSampleFlags = track.sampleFlags[0]\r\n          track.defaultSampleFlags = track.sampleFlags[1] ?? track.firstSampleFlags\r\n          track.sampleFlags = []\r\n        }\r\n        if (track.sampleSizes.length === 1 || arrayItemSame(track.sampleSizes)) {\r\n          track.defaultSampleSize = track.sampleSizes[0]\r\n          track.sampleSizes = []\r\n        }\r\n        if (track.sampleDurations.length === 1 || arrayItemSame(track.sampleDurations)) {\r\n          track.defaultSampleDuration = track.sampleDurations[0]\r\n          track.sampleDurations = []\r\n        }\r\n        if (track.cenc) {\r\n          if (track.cenc.sampleSizes.length === 1 || arrayItemSame(track.cenc.sampleSizes)) {\r\n            track.cenc.defaultSampleInfoSize = track.cenc.sampleSizes[0]\r\n            track.cenc.sampleSizes = []\r\n          }\r\n        }\r\n\r\n        if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_AUDIO) {\r\n          track.defaultSampleFlags = SampleFlags.DEPENDS_NO\r\n        }\r\n        else if (track.sampleFlags.length) {\r\n          track.defaultSampleFlags = track.sampleFlags[0]\r\n        }\r\n\r\n        if (track.sampleSizes.length) {\r\n          track.defaultSampleSize = track.sampleSizes[0]\r\n        }\r\n\r\n        if (track.sampleDurations.length) {\r\n          track.defaultSampleDuration = track.sampleDurations[0]\r\n        }\r\n\r\n        if (this.options.hasTfra) {\r\n          if (!streamContext.fragIndexes.length\r\n            || this.options.fragmentMode === MovFragmentMode.GOP\r\n            || avRescaleQ(track.baseDataOffset - track.lastFragIndexDts, stream.timeBase, AV_MILLI_TIME_BASE_Q) >= this.options.minFragmentIndexLength\r\n          ) {\r\n            streamContext.fragIndexes.push({\r\n              pos: track.baseDataOffset,\r\n              time: track.baseMediaDecodeTime + static_cast<int64>(track.sampleCompositionTimeOffset[0] ?? 0)\r\n            })\r\n            track.lastFragIndexDts = streamContext.lastDts\r\n          }\r\n        }\r\n      })\r\n\r\n      formatContext.ioWriter.flush()\r\n      omov.writeMoof(formatContext.ioWriter, formatContext, this.context)\r\n\r\n      let dataOffset = this.context.currentFragment.size + 8\r\n      const buffers = []\r\n      let mdatSize = 8\r\n      array.each(this.context.currentFragment.tracks, (track) => {\r\n        if (!track.sampleCount) {\r\n          return  true\r\n        }\r\n\r\n        track.ioWriter.flush()\r\n        const buffer = concatTypeArray(Uint8Array, track.buffers)\r\n        track.dataOffset = dataOffset\r\n        dataOffset += buffer.length\r\n        mdatSize += buffer.length\r\n        buffers.push(buffer)\r\n        rewriteIO(formatContext.ioWriter, track.dataOffsetPos, track.dataOffset, 'int32')\r\n        if (track.cenc) {\r\n          if (track.cenc.offsetPos) {\r\n            rewriteIO(formatContext.ioWriter, track.cenc.offsetPos, track.cenc.offset, 'int32')\r\n          }\r\n        }\r\n\r\n        track.buffers = []\r\n        track.sampleFlags = []\r\n        track.sampleSizes = []\r\n        track.sampleDurations = []\r\n        track.sampleCompositionTimeOffset = []\r\n        track.sampleCount = 0\r\n        track.firstSampleFlags = 0\r\n        track.cenc = null\r\n      })\r\n\r\n      formatContext.ioWriter.writeUint32(mdatSize)\r\n      formatContext.ioWriter.writeUint32(mktag(BoxType.MDAT))\r\n      array.each(buffers, (buffer) => {\r\n        formatContext.ioWriter.writeBuffer(buffer)\r\n      })\r\n\r\n      updatePositionSize(formatContext.ioWriter, this.context)\r\n\r\n      formatContext.ioWriter.flush()\r\n\r\n      this.context.currentFragment.firstWrote = false\r\n      this.context.currentFragment.sequence++\r\n    }\r\n  }\r\n\r\n  private handleEAC3(avpacket: pointer<AVPacket>, stream: AVStream) {\r\n    if (!this.context.ac3Info) {\r\n      this.context.ac3Info = {\r\n        done: false,\r\n        numBlocks: 0,\r\n        dataRate: 0,\r\n        ac3BitrateCode: -1,\r\n        numIndSub: 0,\r\n        substream: []\r\n      }\r\n    }\r\n\r\n    const ac3Info = this.context.ac3Info\r\n\r\n    const info = ac3.parseHeader(mapUint8Array(avpacket.data, reinterpret_cast<size>(avpacket.size)))\r\n\r\n    if (is.number(info)) {\r\n      ac3Info.done = true\r\n      return\r\n    }\r\n\r\n    ac3Info.dataRate = Math.max(ac3Info.dataRate, info.bitrate / 1000)\r\n    ac3Info.ac3BitrateCode = Math.max(ac3Info.ac3BitrateCode, info.ac3BitrateCode)\r\n\r\n    if (!ac3Info.done) {\r\n      if (info.bitstreamId <= 10 && info.substreamId != 0) {\r\n        return\r\n      }\r\n      if (info.frameType === ac3.EAC3FrameType.EAC3_FRAME_TYPE_INDEPENDENT\r\n        || info.frameType == ac3.EAC3FrameType.EAC3_FRAME_TYPE_AC3_CONVERT) {\r\n        /* substream ids must be incremental */\r\n        if (info.substreamId > ac3Info.numIndSub + 1) {\r\n          return\r\n        }\r\n        if (info.substreamId == ac3Info.numIndSub + 1) {\r\n          return\r\n        }\r\n        else if (info.substreamId < ac3Info.numIndSub ||\r\n          info.substreamId == 0 && ac3Info.substream[0]?.bsid) {\r\n          ac3Info.done = true\r\n          return\r\n        }\r\n      }\r\n      else {\r\n        if (info.substreamId != 0) {\r\n          return\r\n        }\r\n      }\r\n\r\n      if (!ac3Info.substream[info.substreamId]) {\r\n        ac3Info.substream[info.substreamId] = {\r\n          fscod: 0,\r\n          bsid: 0,\r\n          bsmod: 0,\r\n          acmod: 0,\r\n          lfeon: 0,\r\n          numDepSub: 0,\r\n          chanLoc: 0\r\n        }\r\n      }\r\n\r\n      ac3Info.substream[info.substreamId].fscod = info.srCode\r\n      ac3Info.substream[info.substreamId].bsid = info.bitstreamId\r\n      ac3Info.substream[info.substreamId].bsmod = info.bitstreamMode\r\n      ac3Info.substream[info.substreamId].acmod = info.channelMode\r\n      ac3Info.substream[info.substreamId].lfeon = info.lfeOn\r\n\r\n      if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AC3) {\r\n        ac3Info.done = true\r\n        return\r\n      }\r\n    }\r\n  }\r\n\r\n  public writeAVPacket(formatContext: AVOFormatContext, avpacket: pointer<AVPacket>): number {\r\n\r\n    if (!avpacket.size) {\r\n      logger.warn(`packet\\'s size is 0: ${avpacket.streamIndex}, ignore it`)\r\n      return 0\r\n    }\r\n\r\n    const stream = formatContext.getStreamByIndex(avpacket.streamIndex)\r\n\r\n    if (!stream) {\r\n      logger.warn(`can not found the stream width the avpacket\\'s streamIndex: ${avpacket.streamIndex}, ignore it`)\r\n      return\r\n    }\r\n\r\n    const streamContext = stream.privData as MOVStreamContext\r\n\r\n    let dts = avRescaleQ2(avpacket.dts, addressof(avpacket.timeBase), stream.timeBase)\r\n    let pts = avRescaleQ2(avpacket.pts !== NOPTS_VALUE_BIGINT ? avpacket.pts : avpacket.dts, addressof(avpacket.timeBase), stream.timeBase)\r\n    const duration = avpacket.duration !== NOPTS_VALUE_BIGINT ? avRescaleQ2(avpacket.duration, addressof(avpacket.timeBase), stream.timeBase) : -1n\r\n\r\n    if ((stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n      || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n      || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n    )\r\n      && (avpacket.flags & AVPacketFlags.AV_PKT_FLAG_H26X_ANNEXB)\r\n    ) {\r\n      this.annexb2AvccFilter.sendAVPacket(avpacket)\r\n      this.annexb2AvccFilter.receiveAVPacket(this.avpacket)\r\n      avpacket = this.avpacket\r\n    }\r\n    else if ((stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AC3\r\n      || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_EAC3\r\n    )\r\n      && (!this.context.ac3Info || !this.context.ac3Info.done)\r\n    ) {\r\n      this.handleEAC3(avpacket, stream)\r\n    }\r\n\r\n    if (this.context.fragment) {\r\n      const track = this.context.currentFragment.tracks.find((track) => {\r\n        return track.streamIndex === avpacket.streamIndex\r\n      })\r\n\r\n      if (track) {\r\n        if (track.tfdtDelay === NOPTS_VALUE_BIGINT) {\r\n          if (dts < 0) {\r\n            track.tfdtDelay = -dts\r\n          }\r\n          else {\r\n            track.tfdtDelay = 0n\r\n          }\r\n          if (pts < 0) {\r\n            track.trunPtsDelay = track.tfdtDelay\r\n          }\r\n        }\r\n        dts += track.tfdtDelay\r\n        pts += track.trunPtsDelay\r\n\r\n        if (this.options.fragmentMode === MovFragmentMode.GOP\r\n          && (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_VIDEO\r\n            && avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY\r\n            || this.context.audioOnly\r\n              && avRescaleQ(dts - track.baseMediaDecodeTime, stream.timeBase, AV_MILLI_TIME_BASE_Q) >= this.options.minFragmentLength\r\n          )\r\n          || this.options.fragmentMode === MovFragmentMode.FRAME\r\n        ) {\r\n          if (this.context.currentFragment.tracks.length === 1) {\r\n            this.updateCurrentFragment(formatContext, dts)\r\n          }\r\n          else {\r\n            this.updateCurrentFragment(formatContext)\r\n          }\r\n        }\r\n\r\n        track.ioWriter.writeBuffer(getAVPacketData(avpacket))\r\n\r\n        if (!track.sampleSizes.length) {\r\n          track.baseMediaDecodeTime = dts\r\n        }\r\n\r\n        if (track.sampleSizes.length\r\n          && (!track.sampleDurations[track.sampleSizes.length - 1]\r\n            || track.sampleDurations[track.sampleSizes.length - 1] <= 0\r\n          )\r\n        ) {\r\n          track.sampleDurations[track.sampleSizes.length - 1] = static_cast<double>(dts - streamContext.lastDts)\r\n        }\r\n        if (avpacket.duration > 0) {\r\n          track.sampleDurations.push(static_cast<double>(avRescaleQ(\r\n            avpacket.duration,\r\n            avpacket.timeBase,\r\n            stream.timeBase\r\n          )))\r\n        }\r\n        track.sampleSizes.push(avpacket.size)\r\n\r\n        if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_VIDEO) {\r\n          let flag = 0\r\n          if (avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY) {\r\n            flag |= SampleFlags.DEPENDS_NO\r\n          }\r\n          else {\r\n            flag |= (SampleFlags.DEPENDS_YES | SampleFlags.IS_NON_SYN)\r\n          }\r\n          track.sampleCompositionTimeOffset.push(static_cast<double>((pts !== NOPTS_VALUE_BIGINT ? pts : dts) - dts))\r\n\r\n          track.sampleFlags.push(flag)\r\n        }\r\n\r\n        const sideData = getSideData(\r\n          addressof(avpacket.sideData),\r\n          addressof(avpacket.sideDataElems),\r\n          AVPacketSideDataType.AV_PKT_DATA_ENCRYPTION_INFO\r\n        )\r\n        const cenc = this.context.cencs && this.context.cencs[streamContext.trackId]\r\n        if (sideData && cenc) {\r\n          const info = encryptionSideData2Info(mapUint8Array(sideData.data, sideData.size))\r\n          if (!track.cenc) {\r\n            track.cenc = {\r\n              sampleCount: 0,\r\n              defaultSampleInfoSize: 0,\r\n              sampleSizes: [],\r\n              offset: 0,\r\n              useSubsamples: false,\r\n              sampleInfoOffset: [],\r\n              sampleEncryption: []\r\n            }\r\n          }\r\n          if (info.subsamples.length) {\r\n            if (!track.cenc.useSubsamples && track.cenc.sampleSizes.length) {\r\n              track.cenc.sampleSizes = track.cenc.sampleSizes.map((value) => {\r\n                return value + 2\r\n              })\r\n            }\r\n            track.cenc.useSubsamples = true\r\n          }\r\n          track.cenc.sampleCount++\r\n          track.cenc.sampleSizes.push(cenc.defaultPerSampleIVSize + (track.cenc.useSubsamples ? (2 + info.subsamples.length * 6) : 0))\r\n          track.cenc.sampleEncryption.push({\r\n            iv: info.iv,\r\n            subsamples: info.subsamples\r\n          })\r\n        }\r\n\r\n        track.sampleCount++\r\n        streamContext.lastPts = bigint.max(streamContext.lastPts, pts + (duration !== NOPTS_VALUE_BIGINT ? duration : 0n))\r\n        streamContext.lastDts = dts\r\n        this.context.currentFragment.firstWrote = true\r\n      }\r\n      else {\r\n        logger.warn(`can not found track width streamIndex ${avpacket.streamIndex}, ignore it`)\r\n      }\r\n    }\r\n    else {\r\n\r\n      const pos = formatContext.ioWriter.getPos()\r\n\r\n      let currentChunk = this.context.currentChunk\r\n\r\n      if (!currentChunk) {\r\n        currentChunk = this.context.currentChunk = {\r\n          pos,\r\n          streamIndex: avpacket.streamIndex,\r\n          sampleCount: 1\r\n        }\r\n      }\r\n      else if (currentChunk.streamIndex !== avpacket.streamIndex) {\r\n        this.updateCurrentChunk(formatContext)\r\n        currentChunk.streamIndex = avpacket.streamIndex\r\n        currentChunk.sampleCount = 1\r\n        currentChunk.pos = pos\r\n      }\r\n      else {\r\n        currentChunk.sampleCount++\r\n      }\r\n\r\n      formatContext.ioWriter.writeBuffer(getAVPacketData(avpacket))\r\n      streamContext.sampleSizes.push(avpacket.size)\r\n\r\n      if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_VIDEO\r\n        && avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY\r\n      ) {\r\n        streamContext.stssSampleNumbers.push(streamContext.sampleSizes.length)\r\n      }\r\n\r\n      if (!streamContext.firstWrote) {\r\n        streamContext.startDts = dts\r\n        streamContext.startCT = static_cast<double>((pts !== NOPTS_VALUE_BIGINT ? pts : dts) - dts)\r\n        streamContext.firstWrote = true\r\n      }\r\n      else {\r\n        const deltas = static_cast<double>(dts - streamContext.lastDts)\r\n        if (!streamContext.sttsSampleCounts.length) {\r\n          streamContext.sttsSampleCounts.push(1)\r\n          streamContext.sttsSampleDeltas.push(deltas)\r\n        }\r\n        else {\r\n          if (streamContext.sttsSampleDeltas[streamContext.sttsSampleDeltas.length - 1] === deltas) {\r\n            streamContext.sttsSampleCounts[streamContext.sttsSampleCounts.length - 1]++\r\n          }\r\n          else {\r\n            streamContext.sttsSampleCounts.push(1)\r\n            streamContext.sttsSampleDeltas.push(deltas)\r\n          }\r\n        }\r\n      }\r\n\r\n      if (pts >= 0) {\r\n        if (streamContext.startPts === NOPTS_VALUE_BIGINT) {\r\n          streamContext.startPts = pts\r\n        }\r\n        else {\r\n          streamContext.startPts = bigint.min(streamContext.startPts, pts)\r\n        }\r\n      }\r\n\r\n      if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_VIDEO) {\r\n        const ctts = static_cast<double>((pts !== NOPTS_VALUE_BIGINT ? pts : dts) - dts)\r\n        if (!streamContext.cttsSampleCounts.length) {\r\n          streamContext.cttsSampleCounts.push(1)\r\n          streamContext.cttsSampleOffsets.push(ctts)\r\n        }\r\n        else {\r\n          if (streamContext.cttsSampleOffsets[streamContext.cttsSampleOffsets.length - 1] === ctts) {\r\n            streamContext.cttsSampleCounts[streamContext.cttsSampleCounts.length - 1]++\r\n          }\r\n          else {\r\n            streamContext.cttsSampleCounts.push(1)\r\n            streamContext.cttsSampleOffsets.push(ctts)\r\n          }\r\n        }\r\n      }\r\n\r\n      streamContext.lastPts = bigint.max(streamContext.lastPts, pts + (duration !== NOPTS_VALUE_BIGINT ? duration : 0n))\r\n      streamContext.lastDts = dts\r\n      streamContext.lastDuration = static_cast<double>(duration as int64)\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  public writeTrailer(formatContext: AVOFormatContext): number {\r\n    if (!this.context.fragment) {\r\n      this.updateCurrentChunk(formatContext)\r\n\r\n      let duration = 0n\r\n\r\n      array.each(formatContext.streams, (stream) => {\r\n        const streamContext = stream.privData as MOVStreamContext\r\n        if (streamContext.sampleSizes.length) {\r\n          if (streamContext.sttsSampleDeltas.length) {\r\n            if (streamContext.lastDuration > 0\r\n              && streamContext.lastDuration !== streamContext.sttsSampleDeltas[streamContext.sttsSampleDeltas.length - 1]\r\n            ) {\r\n              streamContext.sttsSampleCounts.push(1)\r\n              streamContext.sttsSampleDeltas.push(streamContext.lastDuration)\r\n            }\r\n            else {\r\n              streamContext.sttsSampleCounts[streamContext.sttsSampleCounts.length - 1]++\r\n            }\r\n          }\r\n          else {\r\n            streamContext.sttsSampleCounts = [1]\r\n            streamContext.sttsSampleDeltas = [0]\r\n          }\r\n        }\r\n        const streamDuration = avRescaleQ(\r\n          getSampleDuration(streamContext),\r\n          stream.timeBase,\r\n          { den: 1000, num: 1 }\r\n        )\r\n        if (streamDuration > duration) {\r\n          duration = streamDuration\r\n        }\r\n      })\r\n\r\n      this.context.duration = duration\r\n\r\n      const mdat = this.context.boxsPositionInfo[this.context.boxsPositionInfo.length - 1]\r\n\r\n      if (mdat.type !== BoxType.MDAT) {\r\n        logger.error('last box is not mdat')\r\n      }\r\n\r\n      mdat.size = static_cast<double>(formatContext.ioWriter.getPos() - mdat.pos)\r\n\r\n      if (mdat.size > UINT32_MAX) {\r\n        const now = formatContext.ioWriter.getPos()\r\n        formatContext.ioWriter.seek(mdat.pos - 8n)\r\n        // overwrite 'free' placeholder atom\r\n        formatContext.ioWriter.writeUint32(1)\r\n        formatContext.ioWriter.writeUint32(mktag(BoxType.MDAT))\r\n        formatContext.ioWriter.writeUint64(static_cast<uint64>(mdat.size as uint32) + 8n)\r\n        formatContext.ioWriter.seek(now)\r\n        this.context.boxsPositionInfo.pop()\r\n        this.context.use64Mdat = true\r\n      }\r\n      updatePositionSize(formatContext.ioWriter, this.context)\r\n\r\n      if (this.options.fastOpen) {\r\n        formatContext.ioWriter.flush()\r\n\r\n        let buffers = []\r\n        const rawFlush = formatContext.ioWriter.onFlush\r\n\r\n        formatContext.ioWriter.onFlush = (buffer) => {\r\n          buffers.push(buffer.slice())\r\n          return 0\r\n        }\r\n\r\n        omov.writeMoov(formatContext.ioWriter, formatContext, this.context)\r\n        formatContext.ioWriter.flush()\r\n\r\n        let data = concatTypeArray(Uint8Array, buffers)\r\n\r\n        array.each(formatContext.streams, (stream) => {\r\n          const streamContext = stream.privData as MOVStreamContext\r\n          if (streamContext.chunkOffsets.length) {\r\n            for (let i = 0; i < streamContext.chunkOffsets.length; i++) {\r\n              streamContext.chunkOffsets[i] += static_cast<int64>(data.length)\r\n            }\r\n          }\r\n        })\r\n\r\n        buffers = []\r\n\r\n        omov.writeMoov(formatContext.ioWriter, formatContext, this.context)\r\n        formatContext.ioWriter.flush()\r\n\r\n        data = concatTypeArray(Uint8Array, buffers)\r\n\r\n        if (rawFlush) {\r\n          rawFlush(data, this.context.holdMoovPos)\r\n        }\r\n\r\n        formatContext.ioWriter.onFlush = rawFlush\r\n      }\r\n      else {\r\n        omov.writeMoov(formatContext.ioWriter, formatContext, this.context)\r\n        formatContext.ioWriter.flush()\r\n      }\r\n    }\r\n    else {\r\n      array.each(this.context.currentFragment.tracks, (track) => {\r\n        const stream = formatContext.streams.find((stream) => {\r\n          return stream.index === track.streamIndex\r\n        })\r\n        const streamContext = stream.privData as MOVStreamContext\r\n        if (track.sampleCount) {\r\n          if (track.sampleDurations.length) {\r\n            track.sampleDurations.push(track.sampleDurations[track.sampleDurations.length - 1])\r\n          }\r\n          else {\r\n            track.sampleDurations = [streamContext.lastDuration]\r\n          }\r\n        }\r\n      })\r\n      this.updateCurrentFragment(formatContext)\r\n\r\n      if (this.options.hasTfra) {\r\n        omov.writeMfra(formatContext.ioWriter, formatContext, this.context)\r\n      }\r\n      else {\r\n        formatContext.ioWriter.writeUint32(8)\r\n        formatContext.ioWriter.writeString(BoxType.MFRA)\r\n      }\r\n\r\n      formatContext.ioWriter.flush()\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  public flush(formatContext: AVOFormatContext): number {\r\n    if (this.options.fragment) {\r\n      array.each(this.context.currentFragment.tracks, (track) => {\r\n        const stream = formatContext.streams.find((stream) => {\r\n          return stream.index === track.streamIndex\r\n        })\r\n        const streamContext = stream.privData as MOVStreamContext\r\n        if (track.sampleCount) {\r\n          if (track.sampleDurations.length) {\r\n            track.sampleDurations.push(track.sampleDurations[track.sampleDurations.length - 1])\r\n          }\r\n          else {\r\n            track.sampleDurations = [streamContext.lastDuration]\r\n          }\r\n        }\r\n      })\r\n      this.updateCurrentFragment(formatContext)\r\n    }\r\n    formatContext.ioWriter.flush()\r\n    return 0\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 box defined\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nexport const enum BoxType {\r\n  MDAT = 'mdat',\r\n  IDAT = 'idat',\r\n  FREE = 'free',\r\n  WIDE = 'wide',\r\n  SKIP = 'skip',\r\n  MECO = 'meco',\r\n  STRK = 'strk',\r\n  HMHD = 'hmhd',\r\n  NMHD = 'nmhd',\r\n  IODS = 'iods',\r\n  XML = 'xml ',\r\n  BXML = 'bxml',\r\n  IPRO = 'ipro',\r\n  MERE = 'mere',\r\n  MOOV = 'moov',\r\n  TRAK = 'trak',\r\n  EDTS = 'edts',\r\n  MDIA = 'mdia',\r\n  MINF = 'minf',\r\n  SMHD = 'smhd',\r\n  DINF = 'dinf',\r\n  DREF = 'dref',\r\n  STBL = 'stbl',\r\n  MVEX = 'mvex',\r\n  MOOF = 'moof',\r\n  TRAF = 'traf',\r\n  VTTE = 'vtte',\r\n  VTTC = 'vttc',\r\n  PAYL = 'payl',\r\n  TREF = 'tref',\r\n  IREF = 'iref',\r\n  MFRA = 'mfra',\r\n  HNTI = 'hnti',\r\n  HINF = 'hinf',\r\n  STRD = 'strd',\r\n  SINF = 'sinf',\r\n  RINF = 'rinf',\r\n  SCHI = 'schi',\r\n  TRGR = 'trgr',\r\n  UDTA = 'udta',\r\n  IPRP = 'iprp',\r\n  IPCO = 'ipco',\r\n  UUID = 'uuid',\r\n  STTS = 'stts',\r\n  CTTS = 'ctts',\r\n  STSS = 'stss',\r\n  STSZ = 'stsz',\r\n  STZ2 = 'stz2',\r\n  STSC = 'stsc',\r\n  STCO = 'stco',\r\n  CO64 = 'co64',\r\n  MVHD = 'mvhd',\r\n  TKHD = 'tkhd',\r\n  MDHD = 'mdhd',\r\n  HDLR = 'hdlr',\r\n  FTYP = 'ftyp',\r\n  STSD = 'stsd',\r\n  AVC1 = 'avc1',\r\n  AVC3 = 'avc3',\r\n  AVCC = 'avcC',\r\n  HEV1 = 'hev1',\r\n  HVC1 = 'hvc1',\r\n  HVCC = 'hvcC',\r\n  VVC1 = 'vvc1',\r\n  VVI1 = 'vvi1',\r\n  VVCC = 'vvcC',\r\n  MP4A = 'mp4a',\r\n  MP4V = 'mp4v',\r\n  VP09 = 'vp09',\r\n  VPCC = 'vpcC',\r\n  AV01 = 'av01',\r\n  AV1C = 'av1C',\r\n  OPUS = 'Opus',\r\n  FLAC = 'fLaC',\r\n  ESDS = 'esds',\r\n  WAVE = 'wave',\r\n  DFLA = 'dfLa',\r\n  DOPS = 'dOps',\r\n  TREX = 'trex',\r\n  MFHD = 'mfhd',\r\n  TFHD = 'tfhd',\r\n  TFDT = 'tfdt',\r\n  TRUN = 'trun',\r\n  COLR = 'colr',\r\n  PASP = 'pasp',\r\n  BTRT = 'btrt',\r\n  TEXT = 'text',\r\n  VMHD = 'vmhd',\r\n  ELST = 'elst',\r\n  URL = 'url ',\r\n  NONE = 'none',\r\n  STPP = 'stpp',\r\n  WVTT = 'wvtt',\r\n  TX3G = 'tx3g',\r\n  C608 = 'c608',\r\n  MFRO = 'mfro',\r\n  TFRA = 'tfra',\r\n  MINF_HDLR = 'minf_hdlr',\r\n  FRMA = 'frma',\r\n  DAC3 = 'dac3',\r\n  DEC3 = 'dec3',\r\n  EC_3 = 'ec-3',\r\n  AC_3 = 'ac-3',\r\n  PSSH = 'pssh',\r\n  ENCV = 'encv',\r\n  ENCA = 'enca',\r\n  SAIZ = 'saiz',\r\n  SAIO = 'saio',\r\n  SENC = 'senc',\r\n  SCHM = 'schm',\r\n  TENC = 'tenc'\r\n}\r\n\r\nexport const BasicBoxs = [\r\n  BoxType.FTYP,\r\n  BoxType.MDAT,\r\n  BoxType.IDAT,\r\n  BoxType.FREE,\r\n  BoxType.SKIP,\r\n  BoxType.MECO,\r\n  BoxType.STRK,\r\n]\r\n\r\nexport const FullBoxs = [\r\n  BoxType.HMHD,\r\n  BoxType.NMHD,\r\n  BoxType.IODS,\r\n  BoxType.XML,\r\n  BoxType.URL,\r\n  BoxType.BXML,\r\n  BoxType.IPRO,\r\n  BoxType.MERE,\r\n  BoxType.STTS,\r\n  BoxType.CTTS,\r\n  BoxType.STSS,\r\n  BoxType.STSZ,\r\n  BoxType.STZ2,\r\n  BoxType.STSC,\r\n  BoxType.STCO,\r\n  BoxType.CO64,\r\n  BoxType.STSD,\r\n  BoxType.DREF,\r\n\r\n  BoxType.MVHD,\r\n  BoxType.TKHD,\r\n  BoxType.MDHD,\r\n  BoxType.HDLR\r\n]\r\n\r\nexport const ContainerBoxs = [\r\n  BoxType.MOOV,\r\n  BoxType.TRAK,\r\n  BoxType.EDTS,\r\n  BoxType.MDIA,\r\n  BoxType.MINF,\r\n  BoxType.DINF,\r\n  BoxType.STBL,\r\n  BoxType.MVEX,\r\n  BoxType.MOOF,\r\n  BoxType.TRAF,\r\n  BoxType.VTTC,\r\n  BoxType.TREF,\r\n  BoxType.IREF,\r\n  BoxType.MFRA,\r\n  BoxType.HNTI,\r\n  BoxType.HINF,\r\n  BoxType.STRD,\r\n  BoxType.SINF,\r\n  BoxType.RINF,\r\n  BoxType.SCHI,\r\n  BoxType.TRGR,\r\n  BoxType.UDTA,\r\n  BoxType.IPRP,\r\n  BoxType.IPCO,\r\n  BoxType.STRK,\r\n  BoxType.MECO,\r\n  BoxType.ENCV,\r\n  BoxType.ENCA,\r\n  BoxType.SINF,\r\n  BoxType.SCHI\r\n]\r\n\r\nexport const enum TFHDFlags {\r\n  BASE_DATA_OFFSET = 0x01,\r\n  SAMPLE_DESCRIPTION\t= 0x02,\r\n  SAMPLE_DURATION = 0x08,\r\n  SAMPLE_SIZE\t= 0x10,\r\n  SAMPLE_FLAGS = 0x20,\r\n  DURATION_EMPTY = 0x10000,\r\n  DEFAULT_BASE_IS_MOOF = 0x20000\r\n}\r\n\r\nexport const enum TRUNFlags {\r\n  DATA_OFFSET = 0x01,\r\n  FIRST_FLAG = 0x04,\r\n  DURATION = 0x100,\r\n  SIZE = 0x200,\r\n  FLAGS = 0x400,\r\n  CTS_OFFSET = 0x800\r\n}\r\n\r\nexport const enum SampleFlags {\r\n  DEGRADATION_PRIORITY_MASK = 0x0000ffff,\r\n  IS_NON_SYN = 0x00010000,\r\n  PADDING_MASK = 0x000e0000,\r\n  REDUNDANCY_MASK = 0x00300000,\r\n  DEPENDED_MASK = 0x00c00000,\r\n  DEPENDS_MASK = 0x03000000,\r\n  DEPENDS_NO = 0x02000000,\r\n  DEPENDS_YES = 0x01000000\r\n}\r\n\r\nexport const enum MP4Tag {\r\n  MP4_O_DESCR_TAG = 0x01,\r\n  MP4_IO_DESCR_TAG = 0x02,\r\n  MP4_ES_DESCR_TAG = 0x03,\r\n  MP4_DEC_CONFIG_DESCR_TAG = 0x04,\r\n  MP4_DEC_SPECIFIC_DESCR_TAG = 0x05,\r\n  MP4_SL_DESCR_TAG = 0x06\r\n}\r\n\r\nexport const enum TKHDFlags {\r\n  ENABLED = 0x0001,\r\n  IN_MOVIE = 0x0002,\r\n  IN_PREVIEW = 0x0004,\r\n  POSTER = 0x0008\r\n}\r\n","/*\r\n * libmedia create fragment track\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport { FragmentTrack } from '../type'\r\n\r\nexport default function createFragmentTrack(): FragmentTrack {\r\n  return {\r\n    trackId: 0,\r\n    baseDataOffset: 0n,\r\n    defaultSampleDuration: 0,\r\n    defaultSampleSize: 0,\r\n    defaultSampleFlags: 0,\r\n    baseMediaDecodeTime: 0n,\r\n    sampleCount: 0,\r\n    dataOffset: 0,\r\n    remainDataOffsets: [],\r\n    remainDataOffsetIndex: [],\r\n    dataOffsetPos: 0n,\r\n    firstSampleFlags: 0,\r\n    sampleDurations: [],\r\n    sampleSizes: [],\r\n    sampleFlags: [],\r\n    sampleCompositionTimeOffset: [],\r\n    baseIsMoof: false,\r\n    ioWriter: null,\r\n    buffers: [],\r\n    lastFragIndexDts: 0n,\r\n    tfdtDelay: NOPTS_VALUE_BIGINT,\r\n    trunPtsDelay: 0n\r\n  }\r\n}\r\n","/*\r\n * libmedia create mov context\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { MOVContext } from '../type'\r\nimport { NOPTS_VALUE, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\n\r\nexport default function createMovContext(): MOVContext {\r\n  return {\r\n    isom: false,\r\n    timescale: NOPTS_VALUE,\r\n    duration: NOPTS_VALUE_BIGINT,\r\n    foundMoov: false,\r\n    foundMdat: false,\r\n    majorBrand: 0,\r\n    minorVersion: 0,\r\n    compatibleBrand: [],\r\n    creationTime: 0n,\r\n    modificationTime: 0n,\r\n    rate: NOPTS_VALUE,\r\n    volume: NOPTS_VALUE,\r\n    matrix: null,\r\n    nextTrackId: 1,\r\n    fragment: false,\r\n    trexs: [],\r\n    currentFragment: null,\r\n    boxsPositionInfo: [],\r\n    holdMoovPos: 0n,\r\n    currentChunk: null\r\n  }\r\n}\r\n","/*\r\n * libmedia create mov stream context\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { MOVStreamContext } from '../type'\r\nimport { NOPTS_VALUE, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\n\r\nexport default function createMovStreamContext(): MOVStreamContext {\r\n  return {\r\n    chunkOffsets: null,\r\n    cttsSampleCounts: null,\r\n    cttsSampleOffsets: null,\r\n    stscFirstChunk: null,\r\n    stscSamplesPerChunk: null,\r\n    stscSampleDescriptionIndex: null,\r\n    stssSampleNumbersMap: null,\r\n    stssSampleNumbers: null,\r\n    sampleSizes: null,\r\n    sttsSampleCounts: null,\r\n    sttsSampleDeltas: null,\r\n\r\n    duration: 0n,\r\n    trackId: NOPTS_VALUE,\r\n    layer: 0,\r\n    alternateGroup: 0,\r\n    volume: 0,\r\n    matrix: null,\r\n    width: 0,\r\n    height: 0,\r\n\r\n    audioCid: 0,\r\n    samplesPerFrame: 0,\r\n    bytesPerFrame: 0,\r\n\r\n    currentSample: 0,\r\n    sampleEnd: false,\r\n    samplesIndex: [],\r\n    samplesEncryption: [],\r\n    fragIndexes: [],\r\n\r\n    lastPts: NOPTS_VALUE_BIGINT,\r\n    lastDts: NOPTS_VALUE_BIGINT,\r\n    startDts: NOPTS_VALUE_BIGINT,\r\n    startCT: NOPTS_VALUE,\r\n    startPts: NOPTS_VALUE_BIGINT,\r\n    lastDuration: 0,\r\n    chunkCount: 0,\r\n    firstWrote: false,\r\n    lastStscCount: 0,\r\n    perStreamGrouping: false,\r\n    index: 0,\r\n    flags: 0\r\n  }\r\n}\r\n","/*\r\n * libmedia get sample duration\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport { MOVStreamContext } from '../type'\r\n\r\nexport default function getSampleDuration(context: MOVStreamContext) {\r\n  if (context.startPts !== NOPTS_VALUE_BIGINT) {\r\n    return context.lastPts - context.startPts\r\n  }\r\n  if (context.startDts === NOPTS_VALUE_BIGINT) {\r\n    return context.lastPts\r\n  }\r\n  return context.lastPts - (context.startDts + static_cast<int64>(context.startCT as int32))\r\n}\r\n","/*\r\n * libmedia update box position size\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxsPositionSizeInfo, MOVContext } from '../type'\r\nimport * as array from 'common/util/array'\r\n\r\nexport default function updatePositionSize(ioWriter: IOWriter, movContext: MOVContext) {\r\n  const pos = ioWriter.getPos()\r\n  const pointer = ioWriter.getPointer()\r\n  const minPos = pos - static_cast<int64>(pointer)\r\n\r\n  const seeks: BoxsPositionSizeInfo[] = []\r\n\r\n  array.each(movContext.boxsPositionInfo, (item) => {\r\n    if (item.pos < pos && item.pos >= minPos) {\r\n      ioWriter.seekInline(pointer + Number(item.pos - pos))\r\n      ioWriter.writeUint32(item.size)\r\n    }\r\n    else {\r\n      seeks.push(item)\r\n    }\r\n  })\r\n\r\n  array.each(seeks, (item) => {\r\n    ioWriter.seek(item.pos)\r\n    ioWriter.writeUint32(item.size)\r\n  })\r\n\r\n  if (seeks.length) {\r\n    ioWriter.seek(pos)\r\n  }\r\n  else {\r\n    ioWriter.seekInline(pointer)\r\n  }\r\n\r\n  movContext.boxsPositionInfo = []\r\n}\r\n","/*\r\n * libmedia mp4 box layout\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVMediaType } from 'avutil/codec'\r\nimport { BoxType } from './boxType'\r\nimport { FragmentTrack, MOVContext } from './type'\r\n\r\nexport interface BoxLayout {\r\n  type: BoxType,\r\n  children?: BoxLayout[]\r\n}\r\n\r\nfunction getTrackBoxAudioLayout(context: MOVContext) {\r\n  return [\r\n    {\r\n      type: BoxType.TKHD\r\n    },\r\n    {\r\n      type: BoxType.EDTS\r\n    },\r\n    {\r\n      type: BoxType.MDIA,\r\n      children: [\r\n        {\r\n          type: BoxType.MDHD\r\n        },\r\n        {\r\n          type: BoxType.HDLR\r\n        },\r\n        {\r\n          type: BoxType.MINF,\r\n          children: [\r\n            {\r\n              type: BoxType.SMHD\r\n            },\r\n            context.isom\r\n              ? {\r\n                type: BoxType.MINF_HDLR\r\n              }\r\n              : null,\r\n            {\r\n              type: BoxType.DINF,\r\n              children: [\r\n                {\r\n                  type: BoxType.DREF,\r\n                  children: [\r\n                    {\r\n                      type: BoxType.URL\r\n                    }\r\n                  ]\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              type: BoxType.STBL,\r\n              children: [\r\n                {\r\n                  type: BoxType.STSD\r\n                },\r\n                {\r\n                  type: BoxType.STTS\r\n                },\r\n                {\r\n                  type: BoxType.STSC\r\n                },\r\n                {\r\n                  type: BoxType.STSZ\r\n                },\r\n                {\r\n                  type: context.use64Mdat ? BoxType.CO64 : BoxType.STCO\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  ] as BoxLayout[]\r\n}\r\n\r\nfunction getTrackBoxVideoLayout(context: MOVContext) {\r\n  return [\r\n    {\r\n      type: BoxType.TKHD\r\n    },\r\n    {\r\n      type: BoxType.EDTS\r\n    },\r\n    {\r\n      type: BoxType.MDIA,\r\n      children: [\r\n        {\r\n          type: BoxType.MDHD\r\n        },\r\n        {\r\n          type: BoxType.HDLR\r\n        },\r\n        {\r\n          type: BoxType.MINF,\r\n          children: [\r\n            {\r\n              type: BoxType.VMHD\r\n            },\r\n            context.isom\r\n              ? {\r\n                type: BoxType.MINF_HDLR\r\n              }\r\n              : null,\r\n            {\r\n              type: BoxType.DINF,\r\n              children: [\r\n                {\r\n                  type: BoxType.DREF,\r\n                  children: [\r\n                    {\r\n                      type: BoxType.URL\r\n                    }\r\n                  ]\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              type: BoxType.STBL,\r\n              children: [\r\n                {\r\n                  type: BoxType.STSD\r\n                },\r\n                {\r\n                  type: BoxType.STTS\r\n                },\r\n                {\r\n                  type: BoxType.STSS\r\n                },\r\n                {\r\n                  type: BoxType.CTTS\r\n                },\r\n                {\r\n                  type: BoxType.STSC\r\n                },\r\n                {\r\n                  type: BoxType.STSZ\r\n                },\r\n                {\r\n                  type: context.use64Mdat ? BoxType.CO64 : BoxType.STCO\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  ] as BoxLayout[]\r\n}\r\n\r\nfunction getFragmentTrackAudioBoxLayout(context: MOVContext) {\r\n  return [\r\n    {\r\n      type: BoxType.TKHD\r\n    },\r\n    {\r\n      type: BoxType.MDIA,\r\n      children: [\r\n        {\r\n          type: BoxType.MDHD\r\n        },\r\n        {\r\n          type: BoxType.HDLR\r\n        },\r\n        {\r\n          type: BoxType.MINF,\r\n          children: [\r\n            {\r\n              type: BoxType.SMHD\r\n            },\r\n            context.isom\r\n              ? {\r\n                type: BoxType.MINF_HDLR\r\n              }\r\n              : null,\r\n            {\r\n              type: BoxType.DINF,\r\n              children: [\r\n                {\r\n                  type: BoxType.DREF,\r\n                  children: [\r\n                    {\r\n                      type: BoxType.URL\r\n                    }\r\n                  ]\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              type: BoxType.STBL,\r\n              children: [\r\n                {\r\n                  type: BoxType.STSD\r\n                },\r\n                {\r\n                  type: BoxType.STTS\r\n                },\r\n                {\r\n                  type: BoxType.STSC\r\n                },\r\n                {\r\n                  type: BoxType.STSZ\r\n                },\r\n                {\r\n                  type: BoxType.STCO\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  ] as BoxLayout[]\r\n}\r\n\r\nfunction getFragmentTrackVideoBoxLayout(context: MOVContext) {\r\n  return [\r\n    {\r\n      type: BoxType.TKHD\r\n    },\r\n    {\r\n      type: BoxType.MDIA,\r\n      children: [\r\n        {\r\n          type: BoxType.MDHD\r\n        },\r\n        {\r\n          type: BoxType.HDLR\r\n        },\r\n        {\r\n          type: BoxType.MINF,\r\n          children: [\r\n            {\r\n              type: BoxType.VMHD\r\n            },\r\n            context.isom\r\n              ? {\r\n                type: BoxType.MINF_HDLR\r\n              }\r\n              : null,\r\n            {\r\n              type: BoxType.DINF,\r\n              children: [\r\n                {\r\n                  type: BoxType.DREF,\r\n                  children: [\r\n                    {\r\n                      type: BoxType.URL\r\n                    }\r\n                  ]\r\n                }\r\n              ]\r\n            },\r\n            {\r\n              type: BoxType.STBL,\r\n              children: [\r\n                {\r\n                  type: BoxType.STSD\r\n                },\r\n                {\r\n                  type: BoxType.STTS\r\n                },\r\n                {\r\n                  type: BoxType.STSC\r\n                },\r\n                {\r\n                  type: BoxType.STSZ\r\n                },\r\n                {\r\n                  type: BoxType.STCO\r\n                }\r\n              ]\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  ] as BoxLayout[]\r\n}\r\n\r\nexport const FragmentTrackBoxLayoutMap: Record<number, (context: MOVContext) => BoxLayout[]> = {\r\n  [AVMediaType.AVMEDIA_TYPE_AUDIO]: getFragmentTrackAudioBoxLayout,\r\n  [AVMediaType.AVMEDIA_TYPE_VIDEO]: getFragmentTrackVideoBoxLayout\r\n}\r\n\r\nexport const TrackBoxLayoutMap: Record<number, (context: MOVContext) => BoxLayout[]> = {\r\n  [AVMediaType.AVMEDIA_TYPE_AUDIO]: getTrackBoxAudioLayout,\r\n  [AVMediaType.AVMEDIA_TYPE_VIDEO]: getTrackBoxVideoLayout\r\n}\r\n\r\nexport const MoofTrafBoxLayout = function (track: FragmentTrack) {\r\n  return [\r\n    {\r\n      type: BoxType.TFHD\r\n    },\r\n    {\r\n      type: BoxType.TFDT\r\n    },\r\n    {\r\n      type: BoxType.TRUN\r\n    },\r\n    track.cenc && (track.cenc.defaultSampleInfoSize || track.cenc.sampleSizes.length)\r\n      ?\r\n      {\r\n        type: BoxType.SAIZ\r\n      }\r\n      : null,\r\n    track.cenc && (track.cenc.defaultSampleInfoSize || track.cenc.sampleSizes.length)\r\n      ?\r\n      {\r\n        type: BoxType.SAIO\r\n      }\r\n      : null,\r\n    track.cenc\r\n      ?\r\n      {\r\n        type: BoxType.SENC\r\n      }\r\n      : null\r\n  ]\r\n}\r\n","/*\r\n * libmedia mp4 identify defined\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport mktag from '../../function/mktag'\r\nimport { AVCodecID } from 'avutil/codec'\r\nimport { AVMediaType } from 'avutil/codec'\r\nimport { BoxType } from './boxType'\r\n\r\nexport const Mp4Tag2AVCodecID = {\r\n  mp4v: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  avc1: AVCodecID.AV_CODEC_ID_H264,\r\n  avc3: AVCodecID.AV_CODEC_ID_H264,\r\n  hev1: AVCodecID.AV_CODEC_ID_HEVC,\r\n  hvc1: AVCodecID.AV_CODEC_ID_HEVC,\r\n  vvc1: AVCodecID.AV_CODEC_ID_VVC,\r\n  vvi1: AVCodecID.AV_CODEC_ID_VVC,\r\n  vp09: AVCodecID.AV_CODEC_ID_VP9,\r\n  av01: AVCodecID.AV_CODEC_ID_AV1,\r\n  mp4a: AVCodecID.AV_CODEC_ID_AAC,\r\n  opus: AVCodecID.AV_CODEC_ID_OPUS\r\n}\r\n\r\nexport const AVCodecID2Mp4a = {\r\n  [AVCodecID.AV_CODEC_ID_AAC]: 0x40,\r\n  [AVCodecID.AV_CODEC_ID_MP3]: 0x69,\r\n  [AVCodecID.AV_CODEC_ID_OPUS]: 0xAD,\r\n  [AVCodecID.AV_CODEC_ID_FLAC]: 0xC1,\r\n  [AVCodecID.AV_CODEC_ID_VORBIS]: 0xDD,\r\n\r\n  [AVCodecID.AV_CODEC_ID_MPEG4]: 0x20,\r\n  [AVCodecID.AV_CODEC_ID_H264]: 0x21,\r\n  [AVCodecID.AV_CODEC_ID_HEVC]: 0x23,\r\n  [AVCodecID.AV_CODEC_ID_VVC]: 0x33,\r\n  [AVCodecID.AV_CODEC_ID_VP9]: 0xB1,\r\n  [AVCodecID.AV_CODEC_ID_NONE]: 0\r\n}\r\n\r\nexport const Mp4aObj2AVCodecID = {\r\n  0x20: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  0x21: AVCodecID.AV_CODEC_ID_H264,\r\n  0x23: AVCodecID.AV_CODEC_ID_HEVC,\r\n  0x33: AVCodecID.AV_CODEC_ID_VVC,\r\n  0xB1: AVCodecID.AV_CODEC_ID_VP9,\r\n\r\n  0x40: AVCodecID.AV_CODEC_ID_AAC,\r\n  0x66: AVCodecID.AV_CODEC_ID_AAC,\r\n  0x67: AVCodecID.AV_CODEC_ID_AAC,\r\n  0x68: AVCodecID.AV_CODEC_ID_AAC,\r\n  0x69: AVCodecID.AV_CODEC_ID_MP3,\r\n  0x6B: AVCodecID.AV_CODEC_ID_MP3,\r\n  0xAD: AVCodecID.AV_CODEC_ID_OPUS,\r\n  0xC1: AVCodecID.AV_CODEC_ID_FLAC,\r\n  0xDD: AVCodecID.AV_CODEC_ID_VORBIS,\r\n  0: AVCodecID.AV_CODEC_ID_NONE\r\n}\r\n\r\nexport const HandlerType2MediaType = {\r\n  vide: AVMediaType.AVMEDIA_TYPE_VIDEO,\r\n  soun: AVMediaType.AVMEDIA_TYPE_AUDIO,\r\n  clcp: AVMediaType.AVMEDIA_TYPE_SUBTITLE,\r\n  sbtl: AVMediaType.AVMEDIA_TYPE_SUBTITLE,\r\n  subt: AVMediaType.AVMEDIA_TYPE_SUBTITLE,\r\n  subp: AVMediaType.AVMEDIA_TYPE_SUBTITLE,\r\n  text: AVMediaType.AVMEDIA_TYPE_SUBTITLE\r\n}\r\n\r\nexport const tag2CodecId = {\r\n  [mktag(BoxType.MP4A)]: AVCodecID.AV_CODEC_ID_AAC,\r\n  [0x6D730055]: AVCodecID.AV_CODEC_ID_MP3,\r\n  [mktag('Opus')]: AVCodecID.AV_CODEC_ID_OPUS,\r\n  [mktag('fLaC')]: AVCodecID.AV_CODEC_ID_FLAC,\r\n  [mktag('spex')]: AVCodecID.AV_CODEC_ID_SPEEX,\r\n  [mktag('SPXN')]: AVCodecID.AV_CODEC_ID_SPEEX,\r\n  [mktag('ac-3')]: AVCodecID.AV_CODEC_ID_AC3,\r\n  [mktag('sac3')]: AVCodecID.AV_CODEC_ID_AC3,\r\n\r\n  [mktag[BoxType.MP4V]]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktag('av01')]: AVCodecID.AV_CODEC_ID_AV1,\r\n  [mktag('vp08')]: AVCodecID.AV_CODEC_ID_VP8,\r\n  [mktag('vp09')]: AVCodecID.AV_CODEC_ID_VP9,\r\n  [mktag('avc1')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktag('hev1')]: AVCodecID.AV_CODEC_ID_HEVC,\r\n  [mktag('hvc1')]: AVCodecID.AV_CODEC_ID_HEVC,\r\n  [mktag('vvc1')]: AVCodecID.AV_CODEC_ID_VVC,\r\n  [mktag('vvi1')]: AVCodecID.AV_CODEC_ID_VVC,\r\n\r\n  [mktag('text')]: AVCodecID.AV_CODEC_ID_MOV_TEXT,\r\n  [mktag('tx3g')]: AVCodecID.AV_CODEC_ID_MOV_TEXT\r\n}\r\n\r\nexport const enum MovFragmentMode {\r\n  GOP,\r\n  FRAME\r\n}\r\n\r\nexport const enum MovMode {\r\n  MP4,\r\n  MOV\r\n}\r\n","/*\r\n * libmedia mp4 encode util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { MOVContext, MOVStreamContext } from './type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport mktag from '../../function/mktag'\r\nimport { BoxType, FullBoxs } from './boxType'\r\nimport * as array from 'common/util/array'\r\nimport { AVOFormatContext } from '../../AVFormatContext'\r\nimport Stream from 'avutil/AVStream'\r\nimport writers from './writing/writers'\r\nimport { BoxLayout, FragmentTrackBoxLayoutMap, MoofTrafBoxLayout, TrackBoxLayoutMap } from './layout'\r\nimport updatePositionSize from './function/updatePositionSize'\r\nimport { getSideData } from 'avutil/util/avpacket'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport { encryptionSideData2InitInfo } from 'avutil/util/encryption'\r\nimport { mapUint8Array } from 'cheap/std/memory'\r\nimport { EncryptionInitInfo } from 'avutil/struct/encryption'\r\n\r\nexport function updateSize(ioWriter: IOWriter, pointer: number, size: number) {\r\n  const current = ioWriter.getPointer()\r\n  ioWriter.seekInline(pointer)\r\n  ioWriter.writeUint32(size)\r\n  ioWriter.seekInline(current)\r\n}\r\n\r\nexport function writeFtyp(ioWriter: IOWriter, context: MOVContext) {\r\n  ioWriter.flush()\r\n\r\n  const pointer = ioWriter.getPointer()\r\n  const now = ioWriter.getPos()\r\n\r\n  ioWriter.writeUint32(0)\r\n  ioWriter.writeUint32(mktag(BoxType.FTYP))\r\n\r\n  ioWriter.writeUint32(context.majorBrand || mktag('isom'))\r\n  ioWriter.writeUint32(context.minorVersion || 512)\r\n  array.each(context.compatibleBrand, (value) => {\r\n    ioWriter.writeUint32(value)\r\n  })\r\n\r\n  updateSize(ioWriter, pointer, Number(ioWriter.getPos() - now))\r\n\r\n  if (context.isom) {\r\n    ioWriter.writeUint32(8)\r\n    ioWriter.writeUint32(mktag(BoxType.WIDE))\r\n  }\r\n  else if (!context.fragment) {\r\n    ioWriter.writeUint32(8)\r\n    ioWriter.writeUint32(mktag(BoxType.FREE))\r\n  }\r\n}\r\n\r\nfunction writeEmptyBox(ioWriter: IOWriter, tag: BoxType) {\r\n  const isFullBox = array.has(FullBoxs, tag)\r\n  ioWriter.writeUint32(isFullBox ? 12 : 8)\r\n  ioWriter.writeUint32(mktag(tag))\r\n\r\n  if (isFullBox) {\r\n    // version & flags\r\n    ioWriter.writeUint32(0)\r\n  }\r\n}\r\n\r\nfunction writeLayout(ioWriter: IOWriter, layouts: BoxLayout[], stream: Stream, movContext: MOVContext) {\r\n  array.each(layouts, (layout) => {\r\n    if (!layout) {\r\n      return true\r\n    }\r\n    if (writers[layout.type]) {\r\n      writers[layout.type](ioWriter, stream, movContext)\r\n    }\r\n    else if (layout.children) {\r\n      const pos = ioWriter.getPos()\r\n      ioWriter.writeUint32(0)\r\n      ioWriter.writeUint32(mktag(layout.type))\r\n      writeLayout(ioWriter, layout.children, stream, movContext)\r\n      movContext.boxsPositionInfo.push({\r\n        pos,\r\n        type: layout.type,\r\n        size: Number(ioWriter.getPos() - pos)\r\n      })\r\n    }\r\n    else {\r\n      writeEmptyBox(ioWriter, layout.type)\r\n    }\r\n  })\r\n}\r\n\r\nfunction writePssh(ioWriter: IOWriter, formatContext: AVOFormatContext, movContext: MOVContext) {\r\n  const pssh: EncryptionInitInfo[] = []\r\n\r\n  function has(info: EncryptionInitInfo) {\r\n    if (!pssh.length) {\r\n      return false\r\n    }\r\n    for (let i = 0; i < pssh.length; i++) {\r\n      const item = pssh[i]\r\n      if (!array.same(item.systemId, info.systemId)) {\r\n        return false\r\n      }\r\n      if (!item.keyIds || !info.keyIds) {\r\n        return false\r\n      }\r\n      if (item.keyIds.length !== info.keyIds.length) {\r\n        return false\r\n      }\r\n      for (let i = 0; i < item.keyIds.length; i++) {\r\n        if (!array.same(item.keyIds[i], info.keyIds[i])) {\r\n          return false\r\n        }\r\n      }\r\n      if (!array.same(item.data, info.data)) {\r\n        return false\r\n      }\r\n    }\r\n    return true\r\n  }\r\n  array.each(formatContext.streams, (stream) => {\r\n    const sideData = getSideData(\r\n      addressof(stream.codecpar.codedSideData),\r\n      addressof(stream.codecpar.nbCodedSideData),\r\n      AVPacketSideDataType.AV_PKT_DATA_ENCRYPTION_INIT_INFO\r\n    )\r\n    if (sideData) {\r\n      const infos = encryptionSideData2InitInfo(mapUint8Array(sideData.data, sideData.size))\r\n      infos.forEach((info) => {\r\n        if (!has(info)) {\r\n          pssh.push(info)\r\n        }\r\n      })\r\n    }\r\n  })\r\n\r\n  if (pssh.length) {\r\n    pssh.forEach((info) => {\r\n      const pos = ioWriter.getPos()\r\n      ioWriter.writeUint32(0)\r\n      ioWriter.writeUint32(mktag(BoxType.PSSH))\r\n\r\n      // version\r\n      ioWriter.writeUint8(1)\r\n      ioWriter.writeUint24(0)\r\n      ioWriter.writeBuffer(info.systemId)\r\n      ioWriter.writeUint32(info.keyIds.length)\r\n      info.keyIds.forEach((keyId) => {\r\n        ioWriter.writeBuffer(keyId)\r\n      })\r\n      ioWriter.writeUint32(info.data.length)\r\n      ioWriter.writeBuffer(info.data)\r\n\r\n      movContext.boxsPositionInfo.push({\r\n        pos,\r\n        type: BoxType.PSSH,\r\n        size: Number(ioWriter.getPos() - pos)\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\nexport function writeMoov(ioWriter: IOWriter, formatContext: AVOFormatContext, movContext: MOVContext) {\r\n  const pos = ioWriter.getPos()\r\n\r\n  ioWriter.writeUint32(0)\r\n  ioWriter.writeUint32(mktag(BoxType.MOOV))\r\n\r\n  writers[BoxType.MVHD](ioWriter, null, movContext)\r\n  array.each(formatContext.streams, (stream) => {\r\n    const pos = ioWriter.getPos()\r\n    ioWriter.writeUint32(0)\r\n    ioWriter.writeUint32(mktag(BoxType.TRAK))\r\n\r\n    writeLayout(\r\n      ioWriter,\r\n      movContext.fragment\r\n        ? FragmentTrackBoxLayoutMap[stream.codecpar.codecType](movContext)\r\n        : TrackBoxLayoutMap[stream.codecpar.codecType](movContext),\r\n      stream,\r\n      movContext\r\n    )\r\n\r\n    movContext.boxsPositionInfo.push({\r\n      pos,\r\n      type: BoxType.TRAK,\r\n      size: Number(ioWriter.getPos() - pos)\r\n    })\r\n  })\r\n\r\n  if (movContext.fragment) {\r\n    const pos = ioWriter.getPos()\r\n    ioWriter.writeUint32(0)\r\n    ioWriter.writeUint32(mktag(BoxType.MVEX))\r\n\r\n    array.each(formatContext.streams, (stream) => {\r\n      writers[BoxType.TREX](ioWriter, stream, movContext)\r\n    })\r\n\r\n    movContext.boxsPositionInfo.push({\r\n      pos,\r\n      type: BoxType.MVEX,\r\n      size: Number(ioWriter.getPos() - pos)\r\n    })\r\n\r\n    if (!movContext.ignoreEncryption) {\r\n      writePssh(ioWriter, formatContext, movContext)\r\n    }\r\n  }\r\n\r\n  movContext.boxsPositionInfo.push({\r\n    pos,\r\n    type: BoxType.MOOV,\r\n    size: Number(ioWriter.getPos() - pos)\r\n  })\r\n  updatePositionSize(ioWriter, movContext)\r\n}\r\n\r\nexport function writeMoof(ioWriter: IOWriter, formatContext: AVOFormatContext, movContext: MOVContext) {\r\n  const pos = ioWriter.getPos()\r\n\r\n  ioWriter.writeUint32(0)\r\n  ioWriter.writeUint32(mktag(BoxType.MOOF))\r\n\r\n  writers[BoxType.MFHD](ioWriter, null, movContext)\r\n\r\n  array.each(movContext.currentFragment.tracks, (track) => {\r\n\r\n    if (!track.sampleCount) {\r\n      return true\r\n    }\r\n\r\n    const pos = ioWriter.getPos()\r\n    ioWriter.writeUint32(0)\r\n    ioWriter.writeUint32(mktag(BoxType.TRAF))\r\n\r\n    const stream = formatContext.streams.find((stream) => {\r\n      return (stream.privData as MOVStreamContext).trackId === track.trackId\r\n    })\r\n\r\n    writeLayout(\r\n      ioWriter,\r\n      MoofTrafBoxLayout(track),\r\n      stream,\r\n      movContext\r\n    )\r\n\r\n    movContext.boxsPositionInfo.push({\r\n      pos,\r\n      type: BoxType.TRAF,\r\n      size: Number(ioWriter.getPos() - pos)\r\n    })\r\n  })\r\n\r\n  const size = Number(ioWriter.getPos() - pos)\r\n\r\n  movContext.boxsPositionInfo.push({\r\n    pos,\r\n    type: BoxType.MOOF,\r\n    size\r\n  })\r\n\r\n  movContext.currentFragment.size = size\r\n}\r\n\r\nexport function writeMfra(ioWriter: IOWriter, formatContext: AVOFormatContext, movContext: MOVContext) {\r\n  let size = 8 + 16\r\n  array.each(movContext.currentFragment.tracks, (track) => {\r\n    const stream = formatContext.streams.find((stream) => {\r\n      return stream.index === track.streamIndex\r\n    })\r\n    const streamContext = stream.privData as MOVStreamContext\r\n    if (streamContext.fragIndexes.length) {\r\n      size += 6 * 4 + streamContext.fragIndexes.length * 19\r\n    }\r\n  })\r\n  ioWriter.writeUint32(size)\r\n  ioWriter.writeString(BoxType.MFRA)\r\n  array.each(movContext.currentFragment.tracks, (track) => {\r\n    const stream = formatContext.streams.find((stream) => {\r\n      return stream.index === track.streamIndex\r\n    })\r\n    const streamContext = stream.privData as MOVStreamContext\r\n    if (streamContext.fragIndexes.length) {\r\n      ioWriter.writeUint32(6 * 4 + streamContext.fragIndexes.length * 19)\r\n      ioWriter.writeString(BoxType.TFRA)\r\n      ioWriter.writeUint8(1)\r\n      ioWriter.writeUint24(0)\r\n      ioWriter.writeUint32(track.trackId)\r\n      ioWriter.writeUint32(0)\r\n      ioWriter.writeUint32(streamContext.fragIndexes.length)\r\n      streamContext.fragIndexes.forEach((item) => {\r\n        ioWriter.writeUint64(item.time)\r\n        ioWriter.writeUint64(item.pos)\r\n        ioWriter.writeUint8(1)\r\n        ioWriter.writeUint8(1)\r\n        ioWriter.writeUint8(1)\r\n      })\r\n    }\r\n  })\r\n  ioWriter.writeUint32(16)\r\n  ioWriter.writeString(BoxType.MFRO)\r\n  ioWriter.writeUint32(0)\r\n  ioWriter.writeUint32(size)\r\n}\r\n","/*\r\n * libmedia mp4 av1c box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport { mapUint8Array } from 'cheap/std/memory'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n  // size\r\n  ioWriter.writeUint32(8 + (stream.codecpar.extradataSize ?? 0))\r\n  // tag\r\n  ioWriter.writeString(BoxType.AV1C)\r\n\r\n  if (movContext.fragment) {\r\n    if (stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n      ioWriter.writeBuffer(stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA])\r\n      delete stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n    }\r\n    else {\r\n      if (stream.codecpar.extradata) {\r\n        ioWriter.writeBuffer(mapUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize)))\r\n      }\r\n    }\r\n  }\r\n  else {\r\n    if (stream.codecpar.extradata) {\r\n      ioWriter.writeBuffer(mapUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize)))\r\n    }\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 avcc box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport { mapUint8Array } from 'cheap/std/memory'\r\nimport * as naluUtil from 'avutil/util/nalu'\r\nimport * as h264 from 'avutil/codecs/h264'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n  let extradata: Uint8Array\r\n\r\n  if (movContext.fragment) {\r\n    if (stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n      extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n      delete stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n    }\r\n    else {\r\n      if (stream.codecpar.extradata) {\r\n        extradata = mapUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize))\r\n      }\r\n    }\r\n  }\r\n  else {\r\n    if (stream.codecpar.extradata) {\r\n      extradata = mapUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize))\r\n    }\r\n  }\r\n\r\n  if (extradata && naluUtil.isAnnexb(extradata)) {\r\n    extradata = h264.annexbExtradata2AvccExtradata(extradata)\r\n  }\r\n  // size\r\n  ioWriter.writeUint32(8 + (extradata ? extradata.length : 0))\r\n  // tag\r\n  ioWriter.writeString(BoxType.AVCC)\r\n\r\n  if (extradata) {\r\n    ioWriter.writeBuffer(extradata)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 btrt box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n  // size\r\n  ioWriter.writeUint32(20)\r\n  // tag\r\n  ioWriter.writeString(BoxType.BTRT)\r\n\r\n  ioWriter.writeUint32(0)\r\n  ioWriter.writeUint32(0)\r\n  ioWriter.writeUint32(0)\r\n}\r\n","/*\r\n * libmedia mp4 co64 box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext, MOVStreamContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n  const chunkOffsets = (stream.privData as MOVStreamContext).chunkOffsets || []\r\n\r\n  // size\r\n  ioWriter.writeUint32(16 + chunkOffsets.length * 8)\r\n  // tag\r\n  ioWriter.writeString(BoxType.CO64)\r\n\r\n  // version\r\n  ioWriter.writeUint8(0)\r\n  // flags\r\n  ioWriter.writeUint24(0)\r\n  ioWriter.writeUint32(chunkOffsets.length)\r\n\r\n  for (let i = 0; i < chunkOffsets.length; i++) {\r\n    ioWriter.writeUint64(chunkOffsets[i])\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 colr box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\nimport { AVColorRange } from 'avutil/pixfmt'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n\r\n  const icc = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_ICC_PROFILE]\r\n\r\n  if (icc) {\r\n    // size\r\n    ioWriter.writeUint32(12 + icc.length)\r\n    // tag\r\n    ioWriter.writeString(BoxType.COLR)\r\n\r\n    ioWriter.writeString('prof')\r\n\r\n    ioWriter.writeBuffer(icc)\r\n  }\r\n  else {\r\n    const fullRange = stream.codecpar.colorRange === AVColorRange.AVCOL_RANGE_JPEG\r\n    // size\r\n    ioWriter.writeUint32(19)\r\n    // tag\r\n    ioWriter.writeString(BoxType.COLR)\r\n\r\n    ioWriter.writeString('nclx')\r\n\r\n    ioWriter.writeUint16(stream.codecpar.colorPrimaries)\r\n    ioWriter.writeUint16(stream.codecpar.colorTrc)\r\n    ioWriter.writeUint16(stream.codecpar.colorSpace)\r\n    ioWriter.writeUint8(fullRange ? (1 << 7) : 0)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 ctts box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext, MOVStreamContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\nimport * as logger from 'common/util/logger'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n  const context = stream.privData as MOVStreamContext\r\n\r\n  const sampleCounts = context.cttsSampleCounts || []\r\n  const sampleOffsets = context.cttsSampleOffsets || []\r\n\r\n  if (sampleCounts.length !== sampleOffsets.length) {\r\n    logger.warn('ctts sampleCounts\\'s length is not match sampleOffsets\\'s length')\r\n  }\r\n\r\n  const entryCount = Math.min(sampleCounts.length, sampleOffsets.length)\r\n\r\n  // size\r\n  ioWriter.writeUint32(16 + entryCount * 8)\r\n  // tag\r\n  ioWriter.writeString(BoxType.CTTS)\r\n\r\n  // version use int\r\n  ioWriter.writeUint8(1)\r\n  // flags\r\n  ioWriter.writeUint24(0)\r\n\r\n  ioWriter.writeUint32(entryCount)\r\n\r\n  for (let i = 0; i < entryCount; i++) {\r\n    ioWriter.writeUint32(sampleCounts[i])\r\n    ioWriter.writeInt32(sampleOffsets[i])\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 dac3 box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\nimport BitWriter from 'common/io/BitWriter'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n  // size\r\n  ioWriter.writeUint32(11)\r\n  // tag\r\n  ioWriter.writeString(BoxType.DAC3)\r\n\r\n  const bitWriter = new BitWriter(3)\r\n\r\n  const info = movContext.ac3Info\r\n\r\n  bitWriter.writeU(2, info.substream[0].fscod)\r\n  bitWriter.writeU(5, info.substream[0].bsid)\r\n  bitWriter.writeU(3, info.substream[0].bsmod)\r\n  bitWriter.writeU(3, info.substream[0].acmod)\r\n  bitWriter.writeU(1, info.substream[0].lfeon)\r\n  bitWriter.writeU(5, info.ac3BitrateCode)\r\n  bitWriter.writeU(5, 0)\r\n\r\n  ioWriter.writeBuffer(bitWriter.getBuffer())\r\n}\r\n","/*\r\n * libmedia mp4 dec3 box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\nimport BitWriter from 'common/io/BitWriter'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n\r\n  const info = movContext.ac3Info\r\n\r\n  const bitWriter = new BitWriter(2 + ((34 * (info.numIndSub + 1) + 7) >> 3))\r\n\r\n  bitWriter.writeU(13, info.dataRate)\r\n  bitWriter.writeU(3, info.numIndSub)\r\n  for (let i = 0; i < info.numIndSub; i++) {\r\n    bitWriter.writeU(2, info.substream[i].fscod)\r\n    bitWriter.writeU(5, info.substream[i].bsid)\r\n    bitWriter.writeU(1, 0)\r\n    bitWriter.writeU(1, 0)\r\n    bitWriter.writeU(3, info.substream[i].bsmod)\r\n    bitWriter.writeU(3, info.substream[i].acmod)\r\n    bitWriter.writeU(1, info.substream[i].lfeon)\r\n    bitWriter.writeU(5, 0)\r\n    bitWriter.writeU(4, info.substream[i].numDepSub)\r\n\r\n    if (!info.substream[i].numDepSub) {\r\n      bitWriter.writeU(1, 0)\r\n    }\r\n    else {\r\n      bitWriter.writeU(9, info.substream[i].chanLoc)\r\n    }\r\n  }\r\n\r\n  bitWriter.padding()\r\n  const size = bitWriter.getPointer()\r\n  // size\r\n  ioWriter.writeUint32(8 + size)\r\n  // tag\r\n  ioWriter.writeString(BoxType.DEC3)\r\n\r\n  ioWriter.writeBuffer(bitWriter.getBuffer().subarray(0, size))\r\n}\r\n","/*\r\n * libmedia mp4 dfla box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\nimport { mapUint8Array } from 'cheap/std/memory'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport * as logger from 'common/util/logger'\r\nimport { FlacMetadataType } from 'avutil/codecs/flac'\r\nimport { FLAC_STREAMINFO_SIZE } from 'avutil/codecs/flac'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n  let extradata: Uint8Array\r\n\r\n  if (movContext.fragment) {\r\n    if (stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n      extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n      delete stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n    }\r\n    else {\r\n      if (stream.codecpar.extradata) {\r\n        extradata = mapUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize))\r\n      }\r\n    }\r\n  }\r\n  else {\r\n    if (stream.codecpar.extradata) {\r\n      extradata = mapUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize))\r\n    }\r\n  }\r\n\r\n  if (!extradata || extradata.length !== FLAC_STREAMINFO_SIZE) {\r\n    logger.error('invalid extradata')\r\n  }\r\n  else {\r\n    // size\r\n    ioWriter.writeUint32(extradata.length + 16)\r\n    // tag\r\n    ioWriter.writeString(BoxType.DFLA)\r\n    // version\r\n    ioWriter.writeUint8(0)\r\n    // flags\r\n    ioWriter.writeUint24(0)\r\n\r\n    ioWriter.writeUint8((1 << 7) | FlacMetadataType.FLAC_METADATA_TYPE_STREAMINFO)\r\n    ioWriter.writeUint24(extradata.length)\r\n    ioWriter.writeBuffer(extradata)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 dops box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport { mapUint8Array } from 'cheap/std/memory'\r\nimport BufferReader from 'common/io/BufferReader'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n\r\n  let extradata: Uint8Array\r\n\r\n  if (movContext.fragment) {\r\n    if (stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n      extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n      delete stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n    }\r\n    else {\r\n      if (stream.codecpar.extradata) {\r\n        extradata = mapUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize))\r\n      }\r\n    }\r\n  }\r\n  else {\r\n    if (stream.codecpar.extradata) {\r\n      extradata = mapUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize))\r\n    }\r\n  }\r\n\r\n  if (!extradata || extradata.length < 19) {\r\n    ioWriter.writeUint32(19)\r\n    ioWriter.writeString(BoxType.DOPS)\r\n    ioWriter.writeUint8(0)\r\n    ioWriter.writeUint8(stream.codecpar.chLayout.nbChannels)\r\n    ioWriter.writeUint16(stream.codecpar.initialPadding)\r\n    ioWriter.writeUint32(stream.codecpar.sampleRate)\r\n    ioWriter.writeUint16(0)\r\n    ioWriter.writeUint8(0)\r\n  }\r\n  else {\r\n    const reader = new BufferReader(extradata, false)\r\n    // size\r\n    ioWriter.writeUint32(extradata.length)\r\n    // tag\r\n    ioWriter.writeString(BoxType.DOPS)\r\n    // Version\r\n    ioWriter.writeUint8(0)\r\n\r\n    reader.seek(9)\r\n    ioWriter.writeUint8(reader.readUint8())\r\n    ioWriter.writeUint16(reader.readUint16())\r\n    ioWriter.writeUint32(reader.readUint32())\r\n    ioWriter.writeUint16(reader.readUint16())\r\n    ioWriter.writeBuffer(extradata.subarray(18))\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 dref box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n  // size\r\n  ioWriter.writeUint32(28)\r\n  // tag\r\n  ioWriter.writeString(BoxType.DREF)\r\n\r\n  // version & flags\r\n  ioWriter.writeUint32(0)\r\n\r\n  // entry count\r\n  ioWriter.writeUint32(1)\r\n\r\n  // size\r\n  ioWriter.writeUint32(0x0c)\r\n\r\n  ioWriter.writeString(BoxType.URL)\r\n\r\n  // version & flags\r\n  ioWriter.writeUint32(1)\r\n}\r\n","/*\r\n * libmedia mp4 edts box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext, MOVStreamContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\nimport { INT32_MAX, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport getSampleDuration from '../function/getSampleDuration'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n  const streamContext = stream.privData as MOVStreamContext\r\n  let duration = avRescaleQ(\r\n    getSampleDuration(streamContext),\r\n    stream.timeBase,\r\n    {\r\n      den: movContext.timescale,\r\n      num: 1\r\n    }\r\n  )\r\n  let startCT = streamContext.startCT\r\n  const delay = avRescaleQ(\r\n    streamContext.startDts + static_cast<int64>(startCT),\r\n    stream.timeBase,\r\n    {\r\n      den: movContext.timescale,\r\n      num: 1\r\n    }\r\n  )\r\n\r\n  let version = duration < INT32_MAX ? 0 : 1\r\n  version |= delay < INT32_MAX ? 0 : 1\r\n\r\n  const entrySize = (version === 1) ? 20 : 12\r\n  const entryCount = 1 + (delay > 0 ? 1 : 0)\r\n  const size = 24 + entryCount * entrySize\r\n\r\n  // size\r\n  ioWriter.writeUint32(size)\r\n  // tag\r\n  ioWriter.writeString(BoxType.EDTS)\r\n\r\n  ioWriter.writeUint32(size - 8)\r\n  ioWriter.writeString(BoxType.ELST)\r\n\r\n  ioWriter.writeUint8(version)\r\n  ioWriter.writeUint24(0)\r\n\r\n  ioWriter.writeUint32(entryCount)\r\n\r\n  if (delay > 0) {\r\n    if (version === 1) {\r\n      ioWriter.writeUint64(delay)\r\n      ioWriter.writeInt64(NOPTS_VALUE_BIGINT)\r\n    }\r\n    else {\r\n      ioWriter.writeUint32(Number(delay))\r\n      ioWriter.writeInt32(-1)\r\n    }\r\n    ioWriter.writeUint32(0x00010000)\r\n  }\r\n  else {\r\n    startCT  = -Math.min(Number(streamContext.startDts), 0)\r\n    duration += delay\r\n  }\r\n\r\n  if (movContext.fragment) {\r\n    duration = 0n\r\n  }\r\n\r\n  if (version === 1) {\r\n    ioWriter.writeUint64(duration)\r\n    ioWriter.writeInt64(static_cast<int64>(startCT))\r\n  }\r\n  else {\r\n    ioWriter.writeUint32(Number(duration))\r\n    ioWriter.writeInt32(startCT)\r\n  }\r\n  ioWriter.writeUint32(0x00010000)\r\n}\r\n","/*\r\n * libmedia mp4 esds box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext, MOVStreamContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType, MP4Tag } from '../boxType'\r\nimport { AVCodecID, AVMediaType } from 'avutil/codec'\r\nimport { AVCodecID2Mp4a } from '../mov'\r\nimport { mapUint8Array } from 'cheap/std/memory'\r\n\r\nfunction writeDescriptorLength(ioWriter: IOWriter, tag: MP4Tag, size: number) {\r\n  ioWriter.writeUint8(tag)\r\n  for (let i = 3; i > 0; i--) {\r\n    ioWriter.writeUint8((size >> (7 * i)) | 0x80)\r\n  }\r\n  ioWriter.writeUint8(size & 0x7F)\r\n}\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n\r\n  const streamContext = stream.privData as MOVStreamContext\r\n\r\n  const decoderSpecificInfoLen = stream.codecpar.extradata ? 5 + stream.codecpar.extradataSize : 0\r\n\r\n  const pos = ioWriter.getPos()\r\n  // size\r\n  ioWriter.writeUint32(0)\r\n  // tag\r\n  ioWriter.writeString(BoxType.ESDS)\r\n\r\n  // version = 0\r\n  ioWriter.writeUint32(0)\r\n\r\n  // ES descriptor\r\n  writeDescriptorLength(ioWriter, MP4Tag.MP4_ES_DESCR_TAG, 3 + 5 + 13 + decoderSpecificInfoLen + 5 + 1)\r\n  ioWriter.writeUint16(streamContext.trackId)\r\n  // ioWriter\r\n  ioWriter.writeUint8(0x00)\r\n\r\n  // DecoderConfig descriptor\r\n  writeDescriptorLength(ioWriter, MP4Tag.MP4_DEC_CONFIG_DESCR_TAG, 13 + decoderSpecificInfoLen)\r\n\r\n  // Object type indication\r\n  if ((stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MP2 || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MP3)\r\n    && stream.codecpar.sampleRate > 24000\r\n  ) {\r\n    // 11172-3\r\n    ioWriter.writeUint8(0x6B)\r\n  }\r\n  else {\r\n    ioWriter.writeUint8(AVCodecID2Mp4a[stream.codecpar.codecId])\r\n  }\r\n\r\n  if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_DVD_SUBTITLE) {\r\n    // flags (= NeroSubpicStream)\r\n    ioWriter.writeUint8((0x38 << 2) | 1)\r\n  }\r\n  else if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_AUDIO) {\r\n    // flags (= Audiostream)\r\n    ioWriter.writeUint8(0x15)\r\n  }\r\n  else {\r\n    // flags (= Visualstream)\r\n    ioWriter.writeUint8(0x11)\r\n  }\r\n\r\n  //  Buffersize DB\r\n  ioWriter.writeUint24(0)\r\n  // maxbitrate\r\n  ioWriter.writeUint32(0)\r\n  // avgbitrate\r\n  ioWriter.writeUint32(0)\r\n\r\n  if (stream.codecpar.extradata) {\r\n    writeDescriptorLength(ioWriter, MP4Tag.MP4_DEC_SPECIFIC_DESCR_TAG, stream.codecpar.extradataSize)\r\n    ioWriter.writeBuffer(mapUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize)))\r\n  }\r\n\r\n  // SL descriptor\r\n  writeDescriptorLength(ioWriter, MP4Tag.MP4_SL_DESCR_TAG, 1)\r\n  ioWriter.writeUint8(0x02)\r\n\r\n  movContext.boxsPositionInfo.push({\r\n    pos,\r\n    type: BoxType.ESDS,\r\n    size: Number(ioWriter.getPos() - pos)\r\n  })\r\n}\r\n","/*\r\n * libmedia write matrix\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOWriter from 'common/io/IOWriterSync'\r\n\r\n/**\r\n * transformation matrix\r\n *  |a  b  u|\r\n *  |c  d  v|\r\n *  |tx ty w|\r\n */\r\nexport default function writeMatrix(\r\n  ioWriter: IOWriter,\r\n  a: number,\r\n  b: number,\r\n  c: number,\r\n  d: number,\r\n  tx: number,\r\n  ty: number\r\n) {\r\n  ioWriter.writeInt32(Math.floor(a * 65536))\r\n  ioWriter.writeInt32(Math.floor(b * 65536))\r\n  ioWriter.writeInt32(0)\r\n  ioWriter.writeInt32(Math.floor(c * 65536))\r\n  ioWriter.writeInt32(Math.floor(d * 65536))\r\n  ioWriter.writeInt32(0)\r\n  ioWriter.writeInt32(Math.floor(tx * 65536))\r\n  ioWriter.writeInt32(Math.floor(ty * 65536))\r\n  ioWriter.writeInt32(1 << 30)\r\n}\r\n","/*\r\n * libmedia mp4 hdlr box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\nimport { AVMediaType } from 'avutil/codec'\r\nimport { AVStreamMetadataKey } from 'avutil/AVStream'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n\r\n  const pos = ioWriter.getPos()\r\n  // size\r\n  ioWriter.writeUint32(0)\r\n  // tag\r\n  ioWriter.writeString(BoxType.HDLR)\r\n\r\n  // version\r\n  ioWriter.writeUint8(0)\r\n  // flags\r\n  ioWriter.writeUint24(0)\r\n\r\n  let hdlr = 'dhlr'\r\n  let hdlrType = 'url '\r\n  let descr = 'DataHandler'\r\n\r\n  if (stream) {\r\n    hdlr = 'mhlr'\r\n    if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_AUDIO) {\r\n      hdlrType = 'soun'\r\n      descr = 'SoundHandler'\r\n    }\r\n    else if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_VIDEO) {\r\n      hdlrType = 'vide'\r\n      descr = 'VideoHandler'\r\n    }\r\n    else if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_SUBTITLE) {\r\n      hdlrType = 'text'\r\n      descr = 'SubtitleHandler'\r\n    }\r\n    else {\r\n      if (stream.metadata[AVStreamMetadataKey.HANDLER_NAME]) {\r\n        descr = stream.metadata[AVStreamMetadataKey.HANDLER_NAME]\r\n      }\r\n      if (stream.metadata['hdlrType']) {\r\n        hdlrType = stream.metadata['hdlrType']\r\n      }\r\n    }\r\n  }\r\n\r\n  // handler\r\n  ioWriter.writeString(hdlr)\r\n  // handler type \r\n  ioWriter.writeString(hdlrType)\r\n\r\n  // reserved\r\n  ioWriter.writeUint32(0)\r\n  ioWriter.writeUint32(0)\r\n  ioWriter.writeUint32(0)\r\n\r\n  if (!stream || movContext.isom) {\r\n    ioWriter.writeUint8(descr.length)\r\n  }\r\n\r\n  ioWriter.writeString(descr)\r\n\r\n  if (stream && !movContext.isom) {\r\n    // c string\r\n    ioWriter.writeUint8(0)\r\n  }\r\n\r\n  movContext.boxsPositionInfo.push({\r\n    pos,\r\n    type: BoxType.HDLR,\r\n    size: Number(ioWriter.getPos() - pos)\r\n  })\r\n}\r\n","/*\r\n * libmedia mp4 hvcc box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport { mapUint8Array } from 'cheap/std/memory'\r\nimport * as naluUtil from 'avutil/util/nalu'\r\nimport * as hevc from 'avutil/codecs/hevc'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n  let extradata: Uint8Array\r\n\r\n  if (movContext.fragment) {\r\n    if (stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n      extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n      delete stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n    }\r\n    else {\r\n      if (stream.codecpar.extradata) {\r\n        extradata = mapUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize))\r\n      }\r\n    }\r\n  }\r\n  else {\r\n    if (stream.codecpar.extradata) {\r\n      extradata = mapUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize))\r\n    }\r\n  }\r\n\r\n  if (extradata && naluUtil.isAnnexb(extradata)) {\r\n    extradata = hevc.annexbExtradata2AvccExtradata(extradata)\r\n  }\r\n  // size\r\n  ioWriter.writeUint32(8 + (extradata ? extradata.length : 0))\r\n  // tag\r\n  ioWriter.writeString(BoxType.HVCC)\r\n\r\n  if (extradata) {\r\n    ioWriter.writeBuffer(extradata)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 mdhd box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext, MOVStreamContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\nimport { UINT32_MAX } from 'avutil/constant'\r\nimport getSampleDuration from '../function/getSampleDuration'\r\nimport { AVStreamMetadataKey } from 'avutil/AVStream'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n\r\n  const streamContext = stream.privData as MOVStreamContext\r\n\r\n  const duration = getSampleDuration(streamContext)\r\n\r\n  const creationTime = stream.metadata[AVStreamMetadataKey.CREATION_TIME] || 0\r\n  const modificationTime = stream.metadata[AVStreamMetadataKey.MODIFICATION_TIME] || 0\r\n  const languge = stream.metadata[AVStreamMetadataKey.LANGUAGE] || 21956\r\n\r\n  let version = duration < static_cast<int64>(UINT32_MAX) ? 0 : 1\r\n  version = creationTime < UINT32_MAX ? 0 : 1\r\n  version = modificationTime < UINT32_MAX ? 0 : 1\r\n\r\n  // size\r\n  ioWriter.writeUint32(version === 1 ? 44 : 32)\r\n  // tag\r\n  ioWriter.writeString(BoxType.MDHD)\r\n\r\n  // version\r\n  ioWriter.writeUint8(version)\r\n  // flags\r\n  ioWriter.writeUint24(0)\r\n\r\n  if (version === 1) {\r\n    ioWriter.writeUint64(static_cast<int64>(creationTime))\r\n    ioWriter.writeUint64(static_cast<int64>(modificationTime))\r\n  }\r\n  else {\r\n    ioWriter.writeUint32(Number(creationTime))\r\n    ioWriter.writeUint32(Number(modificationTime))\r\n  }\r\n\r\n  // timescale\r\n  ioWriter.writeUint32(stream.timeBase.den)\r\n\r\n  if (version === 1) {\r\n    ioWriter.writeUint64(duration)\r\n  }\r\n  else {\r\n    ioWriter.writeUint32(Number(duration))\r\n  }\r\n\r\n  // language\r\n  ioWriter.writeUint16(languge)\r\n  // reserved (quality) \r\n  ioWriter.writeUint16(0)\r\n}\r\n","/*\r\n * libmedia mp4 mfhd box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n  // size\r\n  ioWriter.writeUint32(16)\r\n  // tag\r\n  ioWriter.writeString(BoxType.MFHD)\r\n\r\n  // version\r\n  ioWriter.writeUint8(0)\r\n  // flags\r\n  ioWriter.writeUint24(0)\r\n\r\n  ioWriter.writeUint32(movContext.currentFragment.sequence)\r\n\r\n}\r\n","/*\r\n * libmedia mp4 hdlr box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport hdlr from './hdlr'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n  hdlr(ioWriter, null, movContext)\r\n}\r\n","/*\r\n * libmedia mp4 mvhd box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\nimport { UINT32_MAX } from 'avutil/constant'\r\nimport writeMatrix from './function/writeMatrix'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n\r\n  const duration = movContext.duration\r\n  const creationTime = movContext.creationTime || 0\r\n  const modificationTime = movContext.modificationTime || 0\r\n  const timescale = movContext.timescale || 0\r\n  let nextTrackId = movContext.nextTrackId || 1\r\n\r\n  if (movContext.fragment) {\r\n    nextTrackId = 2\r\n  }\r\n\r\n  let version = duration < static_cast<int64>(UINT32_MAX) ? 0 : 1\r\n  version = creationTime < UINT32_MAX ? 0 : 1\r\n  version = modificationTime < UINT32_MAX ? 0 : 1\r\n\r\n  // size\r\n  ioWriter.writeUint32(version === 1 ? 120 : 108)\r\n  // tag\r\n  ioWriter.writeString(BoxType.MVHD)\r\n\r\n  // version\r\n  ioWriter.writeUint8(version)\r\n  // flags\r\n  ioWriter.writeUint24(0)\r\n\r\n  if (version === 1) {\r\n    ioWriter.writeUint64(static_cast<int64>(creationTime))\r\n    ioWriter.writeUint64(static_cast<int64>(modificationTime))\r\n  }\r\n  else {\r\n    ioWriter.writeUint32(Number(creationTime))\r\n    ioWriter.writeUint32(Number(modificationTime))\r\n  }\r\n\r\n  // timescale\r\n  ioWriter.writeUint32(timescale)\r\n\r\n  if (version === 1) {\r\n    ioWriter.writeUint64(duration)\r\n  }\r\n  else {\r\n    ioWriter.writeUint32(Number(duration))\r\n  }\r\n\r\n  // reserved (preferred rate) 1.0 = normal\r\n  ioWriter.writeUint32(0x00010000)\r\n  // reserved (preferred volume) 1.0 = normal\r\n  ioWriter.writeUint16(0x0100)\r\n  // reserved\r\n  ioWriter.writeUint16(0)\r\n  ioWriter.writeUint32(0)\r\n  ioWriter.writeUint32(0)\r\n\r\n  writeMatrix(ioWriter, 1, 0, 0, 1, 0, 0)\r\n\r\n  // reserved (preview time)\r\n  ioWriter.writeUint32(0)\r\n  // reserved (preview duration)\r\n  ioWriter.writeUint32(0)\r\n  // reserved (poster time)\r\n  ioWriter.writeUint32(0)\r\n  // reserved (selection time)\r\n  ioWriter.writeUint32(0)\r\n  // reserved (selection time)\r\n  ioWriter.writeUint32(0)\r\n  // reserved (current time)\r\n  ioWriter.writeUint32(0)\r\n\r\n  ioWriter.writeUint32(nextTrackId)\r\n}\r\n","/*\r\n * libmedia mp4 pasp box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n  // size\r\n  ioWriter.writeUint32(16)\r\n  // tag\r\n  ioWriter.writeString(BoxType.PASP)\r\n\r\n  ioWriter.writeUint32(1)\r\n  ioWriter.writeUint32(1)\r\n}\r\n","/*\r\n * libmedia mp4 saio box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext, MOVStreamContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n  const track = movContext.currentFragment.tracks.find((track) => {\r\n    return track.trackId === (stream.privData as MOVStreamContext).trackId\r\n  })\r\n  // size\r\n  ioWriter.writeUint32(20)\r\n  // tag\r\n  ioWriter.writeString(BoxType.SAIO)\r\n  ioWriter.writeUint32(0)\r\n  ioWriter.writeUint32(1)\r\n  track.cenc.offsetPos = ioWriter.getPos()\r\n  ioWriter.writeUint32(0)\r\n}\r\n","/*\r\n * libmedia mp4 saiz box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext, MOVStreamContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n  const track = movContext.currentFragment.tracks.find((track) => {\r\n    return track.trackId === (stream.privData as MOVStreamContext).trackId\r\n  })\r\n  const pos = ioWriter.getPos()\r\n  // size\r\n  ioWriter.writeUint32(0)\r\n  // tag\r\n  ioWriter.writeString(BoxType.SAIZ)\r\n  ioWriter.writeUint32(0)\r\n\r\n  ioWriter.writeUint8(track.cenc.sampleSizes.length ? 0 : track.cenc.defaultSampleInfoSize)\r\n  ioWriter.writeUint32(track.cenc.sampleCount)\r\n  if (track.cenc.sampleSizes.length) {\r\n    track.cenc.sampleSizes.forEach((size) => {\r\n      ioWriter.writeUint8(size)\r\n    })\r\n  }\r\n  movContext.boxsPositionInfo.push({\r\n    pos,\r\n    type: BoxType.SAIZ,\r\n    size: Number(ioWriter.getPos() - pos)\r\n  })\r\n}\r\n","/*\r\n * libmedia mp4 senc box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext, MOVStreamContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n  const track = movContext.currentFragment.tracks.find((track) => {\r\n    return track.trackId === (stream.privData as MOVStreamContext).trackId\r\n  })\r\n  const cenc = movContext.cencs ? movContext.cencs[track.trackId] : null\r\n  const pos = ioWriter.getPos()\r\n  // size\r\n  ioWriter.writeUint32(0)\r\n  // tag\r\n  ioWriter.writeString(BoxType.SENC)\r\n\r\n  ioWriter.writeUint32(track.cenc.useSubsamples ? 0x02 : 0)\r\n  ioWriter.writeUint32(track.cenc.sampleEncryption.length)\r\n\r\n  track.cenc.offset = Number(ioWriter.getPos() - movContext.currentFragment.pos)\r\n\r\n  track.cenc.sampleEncryption.forEach((item) => {\r\n    if (cenc.defaultPerSampleIVSize) {\r\n      ioWriter.writeBuffer(item.iv)\r\n    }\r\n    if (track.cenc.useSubsamples) {\r\n      ioWriter.writeUint16(item.subsamples.length)\r\n      item.subsamples.forEach((sub) => {\r\n        ioWriter.writeUint16(sub.bytesOfClearData)\r\n        ioWriter.writeUint32(sub.bytesOfProtectedData)\r\n      })\r\n    }\r\n  })\r\n  movContext.boxsPositionInfo.push({\r\n    pos,\r\n    type: BoxType.SENC,\r\n    size: Number(ioWriter.getPos() - pos)\r\n  })\r\n}\r\n","/*\r\n * libmedia mp4 smhd box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n  // size\r\n  ioWriter.writeUint32(16)\r\n  // tag\r\n  ioWriter.writeString(BoxType.SMHD)\r\n\r\n  // version & flags\r\n  ioWriter.writeUint32(0)\r\n  // reserved (balance, normally = 0\r\n  ioWriter.writeUint16(0)\r\n  // reserved\r\n  ioWriter.writeUint16(0)\r\n}\r\n","/*\r\n * libmedia mp4 stco box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext, MOVStreamContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n  const context = stream.privData as MOVStreamContext\r\n  const chunkOffsets = context.chunkOffsets || []\r\n\r\n  // size\r\n  ioWriter.writeUint32(16 + chunkOffsets.length * 4)\r\n  // tag\r\n  ioWriter.writeString(BoxType.STCO)\r\n\r\n  // version\r\n  ioWriter.writeUint8(0)\r\n  // flags\r\n  ioWriter.writeUint24(0)\r\n\r\n  ioWriter.writeUint32(chunkOffsets.length)\r\n\r\n  for (let i = 0; i < chunkOffsets.length; i++) {\r\n    ioWriter.writeUint32(Number(chunkOffsets[i]))\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 stsc box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext, MOVStreamContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\nimport * as logger from 'common/util/logger'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n  const context = stream.privData as MOVStreamContext\r\n\r\n  const firstChunk: number[] = context.stscFirstChunk\r\n  const samplesPerChunk: number[] = context.stscSamplesPerChunk\r\n  const sampleDescriptionIndex: number[] = context.stscSampleDescriptionIndex\r\n\r\n  if (firstChunk.length !== samplesPerChunk.length\r\n        || firstChunk.length !== sampleDescriptionIndex.length\r\n  ) {\r\n    logger.warn('ctts firstChunk\\'s length is not match samplesPerChunk\\'s length or sampleDescriptionIndex\\'s length')\r\n  }\r\n\r\n  const entryCount = Math.min(firstChunk.length, samplesPerChunk.length, sampleDescriptionIndex.length)\r\n\r\n  // size\r\n  ioWriter.writeUint32(16 + entryCount * 12)\r\n  // tag\r\n  ioWriter.writeString(BoxType.STSC)\r\n\r\n  // version\r\n  ioWriter.writeUint8(0)\r\n  // flags\r\n  ioWriter.writeUint24(0)\r\n\r\n  ioWriter.writeUint32(entryCount)\r\n\r\n  for (let i = 0; i < entryCount; i++) {\r\n    ioWriter.writeUint32(firstChunk[i])\r\n    ioWriter.writeUint32(samplesPerChunk[i])\r\n    ioWriter.writeUint32(sampleDescriptionIndex[i])\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 stsd box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVStream, { AVStreamMetadataEncryption, AVStreamMetadataKey } from 'avutil/AVStream'\r\nimport { MOVContext, MOVStreamContext } from '../type'\r\nimport { BoxType } from '../boxType'\r\nimport { AVCodecID, AVMediaType } from 'avutil/codec'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { AVPixelFormat } from 'avutil/pixfmt'\r\n\r\nimport avcc from './avcc'\r\nimport hvcc from './hvcc'\r\nimport vvcc from './vvcc'\r\nimport vpcc from './vpcc'\r\nimport av1c from './av1c'\r\nimport dlfa from './dfla'\r\nimport dops from './dops'\r\nimport esds from './esds'\r\nimport colr from './colr'\r\nimport pasp from './pasp'\r\nimport btrt from './btrt'\r\nimport wave from './wave'\r\nimport dac3 from './dac3'\r\nimport dec3 from './dec3'\r\nimport { mapUint8Array } from 'cheap/std/memory'\r\nimport digital2Tag from '../../../function/digital2Tag'\r\nimport mktag from '../../../function/mktag'\r\n\r\nconst AVCodecID2Tag = {\r\n  [AVCodecID.AV_CODEC_ID_H264]: BoxType.AVC1,\r\n  [AVCodecID.AV_CODEC_ID_HEVC]: BoxType.HVC1,\r\n  [AVCodecID.AV_CODEC_ID_VVC]: BoxType.VVC1,\r\n  [AVCodecID.AV_CODEC_ID_AV1]: BoxType.AV01,\r\n  [AVCodecID.AV_CODEC_ID_VP9]: BoxType.VP09,\r\n  [AVCodecID.AV_CODEC_ID_AC3]: BoxType.AC_3,\r\n  [AVCodecID.AV_CODEC_ID_EAC3]: BoxType.EC_3,\r\n}\r\n\r\nfunction getTag(codecpar: AVCodecParameters): BoxType {\r\n  if (codecpar.codecTag) {\r\n    return digital2Tag(codecpar.codecTag) as BoxType\r\n  }\r\n  let tag = AVCodecID2Tag[codecpar.codecId]\r\n  if (!tag) {\r\n    if (codecpar.codecType === AVMediaType.AVMEDIA_TYPE_VIDEO) {\r\n      tag = BoxType.MP4V\r\n    }\r\n    else if (codecpar.codecType === AVMediaType.AVMEDIA_TYPE_AUDIO) {\r\n      if (codecpar.codecId === AVCodecID.AV_CODEC_ID_OPUS) {\r\n        tag = BoxType.OPUS\r\n      }\r\n      else if (codecpar.codecId === AVCodecID.AV_CODEC_ID_FLAC) {\r\n        tag = BoxType.FLAC\r\n      }\r\n      else {\r\n        tag = BoxType.MP4A\r\n      }\r\n    }\r\n    else if (codecpar.codecType === AVMediaType.AVMEDIA_TYPE_SUBTITLE) {\r\n      tag = BoxType.TEXT\r\n    }\r\n    else {\r\n      tag = BoxType.NONE\r\n    }\r\n  }\r\n  return tag\r\n}\r\n\r\nfunction writeSinf(ioWriter: IOWriter, stream: AVStream, movContext: MOVContext) {\r\n\r\n  const streamContext = stream.privData as MOVStreamContext\r\n  const cenc = movContext.cencs[streamContext.trackId]\r\n\r\n  const pos = ioWriter.getPos()\r\n  // size\r\n  ioWriter.writeUint32(0)\r\n  ioWriter.writeString(BoxType.SINF)\r\n\r\n  ioWriter.writeUint32(12)\r\n  ioWriter.writeString(BoxType.FRMA)\r\n  ioWriter.writeString(getTag(stream.codecpar))\r\n\r\n  ioWriter.writeUint32(20)\r\n  ioWriter.writeString(BoxType.SCHM)\r\n  ioWriter.writeUint32(0)\r\n  ioWriter.writeUint32(cenc.schemeType || mktag('cenc'))\r\n  ioWriter.writeUint32(cenc.schemeVersion || 0x10000)\r\n\r\n  ioWriter.writeUint32(16 + cenc.defaultKeyId.length + 8 + (cenc.defaultConstantIV ? (1 + cenc.defaultConstantIV.length) : 0))\r\n  ioWriter.writeString(BoxType.SCHI)\r\n  ioWriter.writeUint32(16 + cenc.defaultKeyId.length + (cenc.defaultConstantIV ? (1 + cenc.defaultConstantIV.length) : 0))\r\n  ioWriter.writeString(BoxType.TENC)\r\n  if (cenc.cryptByteBlock || cenc.skipByteBlock || cenc.pattern) {\r\n    ioWriter.writeUint8(1)\r\n  }\r\n  else {\r\n    ioWriter.writeUint8(0)\r\n  }\r\n  ioWriter.writeUint24(0)\r\n\r\n  ioWriter.writeUint8(0)\r\n  ioWriter.writeUint8((((cenc.cryptByteBlock || 0) & 0x0f) << 4) | ((cenc.skipByteBlock || 0) & 0x0f))\r\n  ioWriter.writeUint8(1)\r\n\r\n  ioWriter.writeUint8(cenc.defaultPerSampleIVSize)\r\n  ioWriter.writeBuffer(cenc.defaultKeyId)\r\n  if (cenc.defaultConstantIV) {\r\n    ioWriter.writeUint8(cenc.defaultConstantIV.length)\r\n    ioWriter.writeBuffer(cenc.defaultConstantIV)\r\n  }\r\n\r\n  movContext.boxsPositionInfo.push({\r\n    pos,\r\n    type: BoxType.SINF,\r\n    size: Number(ioWriter.getPos() - pos)\r\n  })\r\n}\r\n\r\nfunction writeAudioTagHeader(ioWriter: IOWriter, stream: AVStream, movContext: MOVContext) {\r\n  const version = movContext.isom ? 1 : 0\r\n  // Reserved\r\n  ioWriter.writeUint32(0)\r\n  // Reserved\r\n  ioWriter.writeUint16(0)\r\n  // Data-reference index\r\n  ioWriter.writeUint16(1)\r\n\r\n  // SoundDescription Version\r\n  ioWriter.writeUint16(version)\r\n  // SoundDescription Revision level\r\n  ioWriter.writeUint16(0)\r\n  // Reserved\r\n  ioWriter.writeUint32(0)\r\n\r\n  if (movContext.isom) {\r\n    ioWriter.writeUint16(stream.codecpar.chLayout.nbChannels)\r\n\r\n    if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_U8\r\n      || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_S8\r\n    ) {\r\n      ioWriter.writeUint16(8)\r\n    }\r\n    else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_ADPCM_G726) {\r\n      ioWriter.writeUint16(stream.codecpar.bitsPerCodedSample)\r\n    }\r\n    else {\r\n      ioWriter.writeUint16(16)\r\n    }\r\n    ioWriter.writeUint16(-2)\r\n  }\r\n  else {\r\n    if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_FLAC\r\n      || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_ALAC\r\n      || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_OPUS\r\n    ) {\r\n      ioWriter.writeUint16(stream.codecpar.chLayout.nbChannels)\r\n    }\r\n    else {\r\n      ioWriter.writeUint16(2)\r\n    }\r\n\r\n    if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_FLAC\r\n      || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_ALAC\r\n    ) {\r\n      ioWriter.writeUint16(stream.codecpar.bitsPerRawSample)\r\n    }\r\n    else {\r\n      ioWriter.writeUint16(16)\r\n    }\r\n    ioWriter.writeUint16(0)\r\n  }\r\n\r\n  // packet size (= 0) \r\n  ioWriter.writeUint16(0)\r\n\r\n  if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_OPUS) {\r\n    ioWriter.writeUint16(48000)\r\n  }\r\n  else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_TRUEHD) {\r\n    ioWriter.writeUint32(stream.codecpar.sampleRate)\r\n  }\r\n  else {\r\n    ioWriter.writeUint16(stream.codecpar.sampleRate)\r\n  }\r\n\r\n  if (stream.codecpar.codecId !== AVCodecID.AV_CODEC_ID_TRUEHD) {\r\n    // Reserved\r\n    ioWriter.writeUint16(0)\r\n  }\r\n\r\n  // SoundDescription V1 extended info\r\n  if (version === 1) {\r\n    // Samples per packet\r\n    ioWriter.writeUint32(stream.codecpar.frameSize)\r\n    // Bytes per packet\r\n    ioWriter.writeUint32(0)\r\n    // Bytes per frame\r\n    ioWriter.writeUint32(0)\r\n    // Bytes per sample\r\n    ioWriter.writeUint32(2)\r\n  }\r\n}\r\n\r\nfunction writeAudioTagCodecpar(ioWriter: IOWriter, stream: AVStream, movContext: MOVContext) {\r\n  const tag = getTag(stream.codecpar)\r\n\r\n  if (movContext.isom\r\n    && (\r\n      stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC\r\n        || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AC3\r\n        || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_EAC3\r\n        || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AMR_NB\r\n        || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_ALAC\r\n        || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_ADPCM_MS\r\n        || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_ADPCM_IMA_WAV\r\n        || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_QDM2\r\n    )\r\n  ) {\r\n    wave(ioWriter, stream, movContext)\r\n  }\r\n  else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_FLAC) {\r\n    dlfa(ioWriter, stream, movContext)\r\n  }\r\n  else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_OPUS) {\r\n    dops(ioWriter, stream, movContext)\r\n  }\r\n  else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AC3) {\r\n    dac3(ioWriter, stream, movContext)\r\n  }\r\n  else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_EAC3) {\r\n    dec3(ioWriter, stream, movContext)\r\n  }\r\n  else if (tag == BoxType.MP4A) {\r\n    esds(ioWriter, stream, movContext)\r\n  }\r\n}\r\n\r\nfunction writeAudioTag(ioWriter: IOWriter, stream: AVStream, movContext: MOVContext) {\r\n  const pos = ioWriter.getPos()\r\n  const tag = getTag(stream.codecpar)\r\n\r\n  // size\r\n  ioWriter.writeUint32(0)\r\n  ioWriter.writeString(tag)\r\n\r\n  writeAudioTagHeader(ioWriter, stream, movContext)\r\n  writeAudioTagCodecpar(ioWriter, stream, movContext)\r\n\r\n  if (!movContext.isom) {\r\n    btrt(ioWriter, stream, movContext)\r\n  }\r\n\r\n  movContext.boxsPositionInfo.push({\r\n    pos,\r\n    type: tag,\r\n    size: Number(ioWriter.getPos() - pos)\r\n  })\r\n}\r\n\r\nfunction writeEncaTag(ioWriter: IOWriter, stream: AVStream, movContext: MOVContext) {\r\n  const pos = ioWriter.getPos()\r\n  // size\r\n  ioWriter.writeUint32(0)\r\n  ioWriter.writeString(BoxType.ENCA)\r\n\r\n  writeAudioTagHeader(ioWriter, stream, movContext)\r\n  writeSinf(ioWriter, stream, movContext)\r\n  writeAudioTagCodecpar(ioWriter, stream, movContext)\r\n\r\n  movContext.boxsPositionInfo.push({\r\n    pos,\r\n    type: BoxType.ENCA,\r\n    size: Number(ioWriter.getPos() - pos)\r\n  })\r\n}\r\n\r\nfunction writeVideoTagHeader(ioWriter: IOWriter, stream: AVStream, movContext: MOVContext) {\r\n  const uncompressedYcbcr = ((stream.codecpar.codecId == AVCodecID.AV_CODEC_ID_RAWVIDEO\r\n      && stream.codecpar.format == AVPixelFormat.AV_PIX_FMT_UYVY422\r\n  )\r\n    || (stream.codecpar.codecId == AVCodecID.AV_CODEC_ID_RAWVIDEO\r\n      && stream.codecpar.format == AVPixelFormat.AV_PIX_FMT_YUYV422\r\n    )\r\n    ||  stream.codecpar.codecId == AVCodecID.AV_CODEC_ID_V308\r\n    ||  stream.codecpar.codecId == AVCodecID.AV_CODEC_ID_V408\r\n    ||  stream.codecpar.codecId == AVCodecID.AV_CODEC_ID_V410\r\n    ||  stream.codecpar.codecId == AVCodecID.AV_CODEC_ID_V210)\r\n  // Reserved\r\n  ioWriter.writeUint32(0)\r\n  // Reserved\r\n  ioWriter.writeUint16(0)\r\n  // Data-reference index\r\n  ioWriter.writeUint16(1)\r\n\r\n  // Codec stream version\r\n  ioWriter.writeUint16(uncompressedYcbcr ? 2 : 0)\r\n\r\n  // Codec stream revision (=0)\r\n  ioWriter.writeUint16(0)\r\n\r\n  // Reserved\r\n  if (movContext.isom) {\r\n    ioWriter.writeString('FFMP')\r\n    if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_RAWVIDEO || uncompressedYcbcr) {\r\n      /* Temporal Quality */\r\n      ioWriter.writeUint32(0)\r\n      /* Spatial Quality = lossless*/\r\n      ioWriter.writeUint32(0x400)\r\n    }\r\n    else {\r\n      /* Temporal Quality = normal */\r\n      ioWriter.writeUint32(0x200)\r\n      /* Spatial Quality = normal */\r\n      ioWriter.writeUint32(0x200)\r\n    }\r\n  }\r\n  else {\r\n    ioWriter.writeUint32(0)\r\n    ioWriter.writeUint32(0)\r\n    ioWriter.writeUint32(0)\r\n  }\r\n\r\n  ioWriter.writeUint16(stream.codecpar.width)\r\n  ioWriter.writeUint16(stream.codecpar.height)\r\n  // Horizontal resolution 72dpi\r\n  ioWriter.writeUint32(0x00480000)\r\n  // Vertical resolution 72dpi\r\n  ioWriter.writeUint32(0x00480000)\r\n  // Data size (= 0)\r\n  ioWriter.writeUint32(0)\r\n  // Frame count (= 1)\r\n  ioWriter.writeUint16(1)\r\n\r\n  let compressorName: string = (stream.metadata['compressorName'] || '')\r\n  compressorName = compressorName.slice(0, 31)\r\n  ioWriter.writeUint8(compressorName.length)\r\n  ioWriter.writeString(compressorName)\r\n  if (compressorName.length < 31) {\r\n    let len = 31 - compressorName.length\r\n    while (len > 0) {\r\n      ioWriter.writeUint8(0)\r\n      len--\r\n    }\r\n  }\r\n\r\n  // Reserved\r\n  if (movContext.isom && stream.codecpar.bitsPerCodedSample) {\r\n    ioWriter.writeUint16(stream.codecpar.bitsPerCodedSample)\r\n  }\r\n  else {\r\n    ioWriter.writeUint16(0x18)\r\n  }\r\n\r\n  ioWriter.writeUint16(0xffff)\r\n}\r\n\r\nfunction writeVideoTagCodecpar(ioWriter: IOWriter, stream: AVStream, movContext: MOVContext) {\r\n  const tag = getTag(stream.codecpar)\r\n\r\n  if (tag === BoxType.MP4V) {\r\n    esds(ioWriter, stream, movContext)\r\n  }\r\n  else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264) {\r\n    avcc(ioWriter, stream, movContext)\r\n  }\r\n  else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC) {\r\n    hvcc(ioWriter, stream, movContext)\r\n  }\r\n  else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC) {\r\n    vvcc(ioWriter, stream, movContext)\r\n  }\r\n  else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VP9) {\r\n    vpcc(ioWriter, stream, movContext)\r\n  }\r\n  else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AV1) {\r\n    av1c(ioWriter, stream, movContext)\r\n  }\r\n}\r\n\r\nfunction writeEncvTag(ioWriter: IOWriter, stream: AVStream, movContext: MOVContext) {\r\n  const pos = ioWriter.getPos()\r\n  // size\r\n  ioWriter.writeUint32(0)\r\n  ioWriter.writeString(BoxType.ENCV)\r\n\r\n  writeVideoTagHeader(ioWriter, stream, movContext)\r\n  writeSinf(ioWriter, stream, movContext)\r\n  writeVideoTagCodecpar(ioWriter, stream, movContext)\r\n\r\n  movContext.boxsPositionInfo.push({\r\n    pos,\r\n    type: BoxType.ENCV,\r\n    size: Number(ioWriter.getPos() - pos)\r\n  })\r\n}\r\n\r\nfunction writeVideoTag(ioWriter: IOWriter, stream: AVStream, movContext: MOVContext) {\r\n  const pos = ioWriter.getPos()\r\n  const tag = getTag(stream.codecpar)\r\n\r\n  // size\r\n  ioWriter.writeUint32(0)\r\n  ioWriter.writeString(tag)\r\n\r\n  writeVideoTagHeader(ioWriter, stream, movContext)\r\n  writeVideoTagCodecpar(ioWriter, stream, movContext)\r\n\r\n  colr(ioWriter, stream, movContext)\r\n  pasp(ioWriter, stream, movContext)\r\n\r\n  if (!movContext.isom) {\r\n    btrt(ioWriter, stream, movContext)\r\n  }\r\n\r\n  movContext.boxsPositionInfo.push({\r\n    pos,\r\n    type: tag,\r\n    size: Number(ioWriter.getPos() - pos)\r\n  })\r\n}\r\n\r\nfunction writeSubtitleTag(ioWriter: IOWriter, stream: AVStream, movContext: MOVContext) {\r\n  const pos = ioWriter.getPos()\r\n  const tag = getTag(stream.codecpar)\r\n\r\n  // size\r\n  ioWriter.writeUint32(0)\r\n  ioWriter.writeString(tag)\r\n\r\n  // Reserved\r\n  ioWriter.writeUint32(0)\r\n  // Reserved\r\n  ioWriter.writeUint16(0)\r\n  // Data-reference index\r\n  ioWriter.writeUint16(1)\r\n\r\n  if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_DVD_SUBTITLE) {\r\n    esds(ioWriter, stream, movContext)\r\n  }\r\n  else if (stream.codecpar.extradata) {\r\n    ioWriter.writeBuffer(mapUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize)))\r\n  }\r\n\r\n  if (!movContext.isom) {\r\n    btrt(ioWriter, stream, movContext)\r\n  }\r\n\r\n  movContext.boxsPositionInfo.push({\r\n    pos,\r\n    type: tag,\r\n    size: Number(ioWriter.getPos() - pos)\r\n  })\r\n}\r\n\r\n\r\nexport default function write(ioWriter: IOWriter, stream: AVStream, movContext: MOVContext) {\r\n  const pos = ioWriter.getPos()\r\n  // size\r\n  ioWriter.writeUint32(0)\r\n  // tag\r\n  ioWriter.writeString(BoxType.STSD)\r\n\r\n  const streamContext = stream.privData as MOVStreamContext\r\n\r\n  const hasEncryption = movContext.cencs && movContext.cencs[streamContext.trackId]\r\n    && (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_AUDIO\r\n      || stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_VIDEO\r\n    )\r\n    && !movContext.ignoreEncryption\r\n\r\n  // version\r\n  ioWriter.writeUint8(0)\r\n  // flags\r\n  ioWriter.writeUint24(0)\r\n  // entry count\r\n  ioWriter.writeUint32(hasEncryption ? 2 : 1)\r\n\r\n  if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_AUDIO) {\r\n    if (hasEncryption) {\r\n      writeEncaTag(ioWriter, stream, movContext)\r\n    }\r\n    writeAudioTag(ioWriter, stream, movContext)\r\n  }\r\n  else if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_VIDEO) {\r\n    if (hasEncryption) {\r\n      writeEncvTag(ioWriter, stream, movContext)\r\n    }\r\n    writeVideoTag(ioWriter, stream, movContext)\r\n  }\r\n  else if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_SUBTITLE) {\r\n    writeSubtitleTag(ioWriter, stream, movContext)\r\n  }\r\n\r\n  movContext.boxsPositionInfo.push({\r\n    pos,\r\n    type: BoxType.ESDS,\r\n    size: Number(ioWriter.getPos() - pos)\r\n  })\r\n}\r\n","/*\r\n * libmedia mp4 stss box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext, MOVStreamContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n\r\n  const sampleNumbers = (stream.privData as MOVStreamContext).stssSampleNumbers\r\n\r\n  // size\r\n  ioWriter.writeUint32(16 + sampleNumbers.length * 4)\r\n  // tag\r\n  ioWriter.writeString(BoxType.STSS)\r\n\r\n  // version\r\n  ioWriter.writeUint8(0)\r\n  // flags\r\n  ioWriter.writeUint24(0)\r\n\r\n  ioWriter.writeUint32(sampleNumbers.length)\r\n\r\n  for (let i = 0; i < sampleNumbers.length; i++) {\r\n    ioWriter.writeUint32(sampleNumbers[i])\r\n  }\r\n}\r\n\r\n","/*\r\n * libmedia mp4 stsz box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext, MOVStreamContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n\r\n  const sampleSizes = (stream.privData as MOVStreamContext).sampleSizes\r\n\r\n  // size\r\n  ioWriter.writeUint32(20 + sampleSizes.length * 4)\r\n  // tag\r\n  ioWriter.writeString(BoxType.STSZ)\r\n\r\n  // version\r\n  ioWriter.writeUint8(0)\r\n  // flags\r\n  ioWriter.writeUint24(0)\r\n\r\n  ioWriter.writeUint32(0)\r\n  ioWriter.writeUint32(sampleSizes.length)\r\n\r\n  for (let i = 0; i < sampleSizes.length; i++) {\r\n    ioWriter.writeUint32(sampleSizes[i])\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 stts box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext, MOVStreamContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\nimport * as logger from 'common/util/logger'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n  const context = stream.privData as MOVStreamContext\r\n\r\n  const sampleCounts = context.sttsSampleCounts || []\r\n  const sampleDeltas = context.sttsSampleDeltas || []\r\n\r\n  if (sampleCounts.length !== sampleDeltas.length) {\r\n    logger.warn('stts sampleCounts\\'s length is not match sampleDeltas\\'s length')\r\n  }\r\n\r\n  const entryCount = Math.min(sampleCounts.length, sampleDeltas.length)\r\n\r\n  // size\r\n  ioWriter.writeUint32(16 + entryCount * 8)\r\n  // tag\r\n  ioWriter.writeString(BoxType.STTS)\r\n\r\n  // version\r\n  ioWriter.writeUint8(0)\r\n  // flags\r\n  ioWriter.writeUint24(0)\r\n\r\n  ioWriter.writeUint32(entryCount)\r\n\r\n  for (let i = 0; i < entryCount; i++) {\r\n    ioWriter.writeUint32(sampleCounts[i])\r\n    ioWriter.writeInt32(sampleDeltas[i])\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 tfdt box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext, MOVStreamContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n\r\n  const track = movContext.currentFragment.tracks.find((track) => {\r\n    return track.trackId === (stream.privData as MOVStreamContext).trackId\r\n  })\r\n\r\n  const baseMediaDecodeTime = track ? track.baseMediaDecodeTime : 0n\r\n\r\n  // size\r\n  ioWriter.writeUint32(20)\r\n  // tag\r\n  ioWriter.writeString(BoxType.TFDT)\r\n\r\n  // version use int64\r\n  ioWriter.writeUint8(1)\r\n  // flags\r\n  ioWriter.writeUint24(0)\r\n\r\n  ioWriter.writeUint64(baseMediaDecodeTime)\r\n}\r\n","/*\r\n * libmedia mp4 tfhd box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext, MOVStreamContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType, TFHDFlags } from '../boxType'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n  const track = movContext.currentFragment.tracks.find((track) => {\r\n    return track.trackId === (stream.privData as MOVStreamContext).trackId\r\n  })\r\n\r\n  let flags = TFHDFlags.BASE_DATA_OFFSET\r\n    | TFHDFlags.SAMPLE_DURATION\r\n    | TFHDFlags.SAMPLE_SIZE\r\n    | TFHDFlags.SAMPLE_FLAGS\r\n\r\n  if (track.baseIsMoof) {\r\n    flags &= ~TFHDFlags.BASE_DATA_OFFSET\r\n    flags |= TFHDFlags.DEFAULT_BASE_IS_MOOF\r\n  }\r\n\r\n  const pos = ioWriter.getPos()\r\n\r\n  // size\r\n  ioWriter.writeUint32(0)\r\n  // tag\r\n  ioWriter.writeString(BoxType.TFHD)\r\n\r\n  // version use int64\r\n  ioWriter.writeUint8(0)\r\n  // flags\r\n  ioWriter.writeUint24(flags)\r\n\r\n  ioWriter.writeUint32(track.trackId)\r\n  if (flags & TFHDFlags.BASE_DATA_OFFSET) {\r\n    ioWriter.writeUint64(track.baseDataOffset)\r\n  }\r\n  if (flags & TFHDFlags.SAMPLE_DURATION) {\r\n    ioWriter.writeUint32(track.defaultSampleDuration)\r\n  }\r\n  if (flags & TFHDFlags.SAMPLE_SIZE) {\r\n    ioWriter.writeUint32(track.defaultSampleSize)\r\n  }\r\n  if (flags & TFHDFlags.SAMPLE_FLAGS) {\r\n    ioWriter.writeUint32(track.defaultSampleFlags)\r\n  }\r\n\r\n  movContext.boxsPositionInfo.push({\r\n    pos,\r\n    type: BoxType.TFHD,\r\n    size: Number(ioWriter.getPos() - pos)\r\n  })\r\n}\r\n","/*\r\n * libmedia mp4 tkhd box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext, MOVStreamContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType, TKHDFlags } from '../boxType'\r\nimport { UINT16_MAX, UINT32_MAX } from 'avutil/constant'\r\nimport writeMatrix from './function/writeMatrix'\r\nimport { AVMediaType } from 'avutil/codec'\r\nimport { avQ2D, avRescaleQ } from 'avutil/util/rational'\r\nimport getSampleDuration from '../function/getSampleDuration'\r\nimport { AVStreamMetadataKey } from 'avutil/AVStream'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n\r\n  const streamContext = stream.privData as MOVStreamContext\r\n\r\n  const duration = avRescaleQ(\r\n    getSampleDuration(streamContext),\r\n    stream.timeBase,\r\n    {\r\n      den: movContext.timescale,\r\n      num: 1\r\n    }\r\n  )\r\n  const creationTime = stream.metadata[AVStreamMetadataKey.CREATION_TIME] || 0\r\n  const modificationTime = stream.metadata[AVStreamMetadataKey.MODIFICATION_TIME] || 0\r\n  const layer = streamContext.layer || 0\r\n  const alternateGroup = streamContext.alternateGroup || 0\r\n  let width = stream.codecpar.width > 0 ? stream.codecpar.width : 0\r\n  let height = stream.codecpar.height > 0 ? stream.codecpar.height : 0\r\n  const sar = avQ2D(stream.codecpar.sampleAspectRatio)\r\n  if (sar !== 0 && sar !== Infinity) {\r\n    width = Math.floor(width * sar)\r\n  }\r\n\r\n  if (width < UINT16_MAX) {\r\n    width = width << 16\r\n  }\r\n  if (height < UINT16_MAX) {\r\n    height = height << 16\r\n  }\r\n\r\n  let version = duration < static_cast<int64>(UINT32_MAX) ? 0 : 1\r\n  version = creationTime < UINT32_MAX ? 0 : 1\r\n  version = modificationTime < UINT32_MAX ? 0 : 1\r\n\r\n  let flags = TKHDFlags.IN_MOVIE\r\n\r\n  if (streamContext.flags & TKHDFlags.ENABLED) {\r\n    flags |= TKHDFlags.ENABLED\r\n  }\r\n\r\n  // size\r\n  ioWriter.writeUint32(version === 1 ? 100 : 92)\r\n  // tag\r\n  ioWriter.writeString(BoxType.TKHD)\r\n\r\n  // version\r\n  ioWriter.writeUint8(version)\r\n  // flags\r\n  ioWriter.writeUint24(flags)\r\n\r\n  if (version === 1) {\r\n    ioWriter.writeUint64(static_cast<int64>(creationTime))\r\n    ioWriter.writeUint64(static_cast<int64>(modificationTime))\r\n  }\r\n  else {\r\n    ioWriter.writeUint32(Number(creationTime))\r\n    ioWriter.writeUint32(Number(modificationTime))\r\n  }\r\n\r\n  // trackId\r\n  ioWriter.writeUint32(streamContext.trackId)\r\n  // reserved\r\n  ioWriter.writeUint32(0)\r\n\r\n  if (version === 1) {\r\n    ioWriter.writeUint64(duration)\r\n  }\r\n  else {\r\n    ioWriter.writeUint32(Number(duration))\r\n  }\r\n\r\n  // reserved\r\n  ioWriter.writeUint32(0)\r\n  ioWriter.writeUint32(0)\r\n\r\n  ioWriter.writeInt16(layer)\r\n  ioWriter.writeInt16(streamContext.perStreamGrouping ? alternateGroup : stream.codecpar.codecType)\r\n\r\n  if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_AUDIO) {\r\n    ioWriter.writeInt16(0x0100)\r\n  }\r\n  else {\r\n    ioWriter.writeInt16(0)\r\n  }\r\n\r\n  // reserved\r\n  ioWriter.writeInt16(0)\r\n  const matrix = stream.metadata[AVStreamMetadataKey.MATRIX]\r\n  if (matrix) {\r\n    writeMatrix(ioWriter, matrix[0], matrix[1], matrix[3], matrix[4], matrix[6], matrix[7])\r\n  }\r\n  else {\r\n    writeMatrix(ioWriter, 1, 0, 0, 1, 0, 0)\r\n  }\r\n\r\n  ioWriter.writeUint32(width)\r\n  ioWriter.writeUint32(height)\r\n}\r\n","/*\r\n * libmedia mp4 trex box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext, MOVStreamContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n\r\n  const track = movContext.currentFragment.tracks.find((track) => {\r\n    return track.trackId === (stream.privData as MOVStreamContext).trackId\r\n  })\r\n\r\n  const trex = movContext.trexs.find((trex) => {\r\n    trex.trackId === (stream.privData as MOVStreamContext).trackId\r\n  })\r\n\r\n  const duration = trex?.duration ?? 0\r\n  const size = trex?.size ?? 0\r\n  const flags = trex?.flags ?? 0\r\n\r\n  // size\r\n  ioWriter.writeUint32(32)\r\n  // tag\r\n  ioWriter.writeString(BoxType.TREX)\r\n\r\n  // version use int64\r\n  ioWriter.writeUint8(0)\r\n  // flags\r\n  ioWriter.writeUint24(0)\r\n\r\n  ioWriter.writeUint32(track.trackId)\r\n  // default_sample_description_index\r\n  ioWriter.writeUint32(1)\r\n  ioWriter.writeUint32(duration)\r\n  ioWriter.writeUint32(size)\r\n  ioWriter.writeUint32(flags)\r\n}\r\n","/*\r\n * libmedia mp4 trun box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext, MOVStreamContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType, TRUNFlags } from '../boxType'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n  const streamContext = stream.privData as MOVStreamContext\r\n  const track = movContext.currentFragment.tracks.find((track) => {\r\n    return track.trackId === streamContext.trackId\r\n  })\r\n\r\n  const firstSampleFlags = track.firstSampleFlags || 0\r\n  const dataOffset = track.dataOffset || 0\r\n  const sampleDurations = track.sampleDurations\r\n  const sampleSizes = track.sampleSizes\r\n  const sampleFlags = track.sampleFlags\r\n  const sampleCompositionTimeOffset = track.sampleCompositionTimeOffset\r\n  const sampleCount = track.sampleCount\r\n\r\n  const hasSampleDurations = sampleDurations.length > 0\r\n  const hasSampleSizes = sampleSizes.length > 0\r\n  const hasSampleFlags = sampleFlags.length > 0\r\n  const hasSampleCompositionTimeOffset = sampleCompositionTimeOffset.length > 0\r\n  const hasFirstFlag = firstSampleFlags !== 0\r\n\r\n  let flags = TRUNFlags.DATA_OFFSET\r\n  if (hasFirstFlag) {\r\n    flags |= TRUNFlags.FIRST_FLAG\r\n  }\r\n  if (hasSampleDurations) {\r\n    flags |= TRUNFlags.DURATION\r\n  }\r\n  if (hasSampleSizes) {\r\n    flags |= TRUNFlags.SIZE\r\n  }\r\n  if (hasSampleFlags) {\r\n    flags |= TRUNFlags.FLAGS\r\n  }\r\n  if (hasSampleCompositionTimeOffset) {\r\n    flags |= TRUNFlags.CTS_OFFSET\r\n  }\r\n\r\n  const pos = ioWriter.getPos()\r\n\r\n  // size\r\n  ioWriter.writeUint32(0)\r\n  // tag\r\n  ioWriter.writeString(BoxType.TRUN)\r\n\r\n  // version use int32\r\n  ioWriter.writeUint8(1)\r\n  // flags\r\n  ioWriter.writeUint24(flags)\r\n\r\n  ioWriter.writeUint32(sampleCount)\r\n\r\n  track.dataOffsetPos = ioWriter.getPos()\r\n  ioWriter.writeInt32(dataOffset)\r\n\r\n  if (hasFirstFlag) {\r\n    ioWriter.writeUint32(firstSampleFlags)\r\n  }\r\n\r\n  for (let i = 0; i < sampleCount; i++) {\r\n    if (hasSampleDurations) {\r\n      ioWriter.writeUint32(sampleDurations[i] || 0)\r\n    }\r\n    if (hasSampleSizes) {\r\n      ioWriter.writeUint32(sampleSizes[i] || 0)\r\n    }\r\n    if (hasSampleFlags) {\r\n      ioWriter.writeUint32(sampleFlags[i] || 0)\r\n    }\r\n    if (hasSampleCompositionTimeOffset) {\r\n      ioWriter.writeInt32(sampleCompositionTimeOffset[i] || 0)\r\n    }\r\n  }\r\n\r\n  movContext.boxsPositionInfo.push({\r\n    pos,\r\n    type: BoxType.TRUN,\r\n    size: Number(ioWriter.getPos() - pos)\r\n  })\r\n}\r\n","/*\r\n * libmedia mp4 vmhd box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n  // size\r\n  ioWriter.writeUint32(20)\r\n  // tag\r\n  ioWriter.writeString(BoxType.VMHD)\r\n\r\n  // version\r\n  ioWriter.writeUint8(0)\r\n  // flags\r\n  ioWriter.writeUint24(1)\r\n  // reserved (graphics mode = copy)\r\n  ioWriter.writeUint64(0n)\r\n}\r\n","/*\r\n * libmedia mp4 vpcc box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport { mapUint8Array } from 'cheap/std/memory'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n  // size\r\n  ioWriter.writeUint32(12 + (stream.codecpar.extradataSize ?? 0))\r\n  // tag\r\n  ioWriter.writeString(BoxType.VPCC)\r\n  // version\r\n  ioWriter.writeUint8(1)\r\n  // flags\r\n  ioWriter.writeUint24(0)\r\n\r\n  if (movContext.fragment) {\r\n    if (stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n      ioWriter.writeBuffer(stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA])\r\n      delete stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n    }\r\n    else {\r\n      if (stream.codecpar.extradata) {\r\n        ioWriter.writeBuffer(mapUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize)))\r\n      }\r\n    }\r\n  }\r\n  else {\r\n    if (stream.codecpar.extradata) {\r\n      ioWriter.writeBuffer(mapUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize)))\r\n    }\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 vvcc box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\nimport { AVPacketSideDataType } from 'avutil/codec'\r\nimport { mapUint8Array } from 'cheap/std/memory'\r\nimport * as naluUtil from 'avutil/util/nalu'\r\nimport * as vvc from 'avutil/codecs/vvc'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n\r\n\r\n  let extradata: Uint8Array\r\n\r\n  if (movContext.fragment) {\r\n    if (stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n      extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n      delete stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n    }\r\n    else {\r\n      if (stream.codecpar.extradata) {\r\n        extradata = mapUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize))\r\n      }\r\n    }\r\n  }\r\n  else {\r\n    if (stream.codecpar.extradata) {\r\n      extradata = mapUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize))\r\n    }\r\n  }\r\n\r\n  if (extradata && naluUtil.isAnnexb(extradata)) {\r\n    extradata = vvc.annexbExtradata2AvccExtradata(extradata)\r\n  }\r\n\r\n  // size\r\n  ioWriter.writeUint32(12 + (extradata ? extradata.length : 0))\r\n  // tag\r\n  ioWriter.writeString(BoxType.VVCC)\r\n\r\n  // version\r\n  ioWriter.writeUint8(0)\r\n  // flags\r\n  ioWriter.writeUint24(0)\r\n\r\n  if (extradata) {\r\n    ioWriter.writeBuffer(extradata)\r\n  }\r\n}\r\n","/*\r\n * libmedia mp4 wave box write\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext } from '../type'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport { BoxType } from '../boxType'\r\nimport { AVCodecID, AVPacketSideDataType } from 'avutil/codec'\r\nimport { mapUint8Array } from 'cheap/std/memory'\r\nimport esds from './esds'\r\n\r\nexport default function write(ioWriter: IOWriter, stream: Stream, movContext: MOVContext) {\r\n  const pos = ioWriter.getPos()\r\n\r\n  // size\r\n  ioWriter.writeUint32(0)\r\n  // tag\r\n  ioWriter.writeString(BoxType.WAVE)\r\n\r\n  if (stream.codecpar.codecId !== AVCodecID.AV_CODEC_ID_QDM2) {\r\n    ioWriter.writeUint32(12)\r\n    ioWriter.writeString(BoxType.FRMA)\r\n    ioWriter.writeUint32(stream.codecpar.codecTag)\r\n  }\r\n\r\n  if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC) {\r\n    // seless atom needed by mplayer, ipod, not needed by quicktime\r\n    ioWriter.writeUint32(12)\r\n    ioWriter.writeString(BoxType.MP4A)\r\n    ioWriter.writeUint32(0)\r\n    esds(ioWriter, stream, movContext)\r\n  }\r\n  else {\r\n    if (movContext.fragment) {\r\n      if (stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n        ioWriter.writeBuffer(stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA])\r\n        delete stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n      }\r\n      else {\r\n        if (stream.codecpar.extradata) {\r\n          ioWriter.writeBuffer(mapUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize)))\r\n        }\r\n      }\r\n    }\r\n    else {\r\n      if (stream.codecpar.extradata) {\r\n        ioWriter.writeBuffer(mapUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize)))\r\n      }\r\n    }\r\n  }\r\n\r\n  // null tag\r\n  ioWriter.writeUint32(8)\r\n  ioWriter.writeUint32(0)\r\n\r\n  movContext.boxsPositionInfo.push({\r\n    pos,\r\n    type: BoxType.WAVE,\r\n    size: Number(ioWriter.getPos() - pos)\r\n  })\r\n}\r\n","/*\r\n * libmedia mp4 box writers\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { BoxType } from '../boxType'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport Stream from 'avutil/AVStream'\r\nimport { MOVContext } from '../type'\r\n\r\nimport stts from './stts'\r\nimport ctts from './ctts'\r\nimport stss from './stss'\r\nimport stsz from './stsz'\r\nimport stsc from './stsc'\r\nimport stco from './stco'\r\nimport co64 from './co64'\r\nimport mdhd from './mdhd'\r\nimport mvhd from './mvhd'\r\nimport tkhd from './tkhd'\r\nimport hdlr from './hdlr'\r\nimport stsd from './stsd'\r\nimport vmhd from './vmhd'\r\nimport edts from './edts'\r\nimport smhd from './smhd'\r\nimport dref from './dref'\r\n\r\nimport trex from './trex'\r\nimport mfhd from './mfhd'\r\nimport tfhd from './tfhd'\r\nimport tfdt from './tfdt'\r\nimport trun from './trun'\r\nimport minfHdlr from './minfHdlr'\r\n\r\nimport saiz from './saiz'\r\nimport saio from './saio'\r\nimport senc from './senc'\r\n\r\n\r\nconst writers: Partial<Record<BoxType, (ioWriter: IOWriter, stream: Stream, movContext: MOVContext) => void>> = {\r\n  [BoxType.STTS]: stts,\r\n  [BoxType.CTTS]: ctts,\r\n  [BoxType.STSS]: stss,\r\n  [BoxType.STSZ]: stsz,\r\n  [BoxType.STSC]: stsc,\r\n  [BoxType.STCO]: stco,\r\n  [BoxType.CO64]: co64,\r\n  [BoxType.MDHD]: mdhd,\r\n  [BoxType.MVHD]: mvhd,\r\n  [BoxType.TKHD]: tkhd,\r\n  [BoxType.HDLR]: hdlr,\r\n  [BoxType.STSD]: stsd,\r\n  [BoxType.VMHD]: vmhd,\r\n  [BoxType.EDTS]: edts,\r\n  [BoxType.SMHD]: smhd,\r\n  [BoxType.DREF]: dref,\r\n\r\n  [BoxType.TREX]: trex,\r\n  [BoxType.MFHD]: mfhd,\r\n  [BoxType.TFHD]: tfhd,\r\n  [BoxType.TFDT]: tfdt,\r\n  [BoxType.TRUN]: trun,\r\n\r\n  [BoxType.MINF_HDLR]: minfHdlr,\r\n\r\n  [BoxType.SAIO]: saio,\r\n  [BoxType.SAIZ]: saiz,\r\n  [BoxType.SENC]: senc\r\n}\r\n\r\nexport default writers\r\n","/*\r\n * libmedia array item is all same\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nexport default function arrayItemSame(data: any[], start: number = 0) {\r\n  if (!data) {\r\n    return false\r\n  }\r\n  if (data.length < 2) {\r\n    return true\r\n  }\r\n\r\n  let first = data[start]\r\n\r\n  let i = start + 1\r\n  for (; i < data.length; i++) {\r\n    if (first !== data[i]) {\r\n      break\r\n    }\r\n  }\r\n  return i === data.length\r\n}\r\n","/*\r\n * libmedia number to tag string\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as is from 'common/util/is'\r\n\r\nexport default function digital2Tag(value: number | bigint, len: number = 4) {\r\n  let tag = ''\r\n  for (let i = 0; i < len; i++) {\r\n    if (is.number(value)) {\r\n      tag = String.fromCharCode(value & 0xff) + tag\r\n      value >>>= 8\r\n    }\r\n    else {\r\n      tag = String.fromCharCode(Number(value & 0xffn)) + tag\r\n      value >>= 8n\r\n    }\r\n  }\r\n  return tag\r\n}\r\n","/*\r\n * libmedia string tag to uint32 in big end\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as logger from 'common/util/logger'\r\n\r\nexport default function mktag(tag: string): number {\r\n  if (tag.length !== 4) {\r\n    logger.warn(`tag length is not 4, tag: ${tag}`)\r\n  }\r\n\r\n  let value = 0\r\n  for (let i = 0; i < 4; i++) {\r\n    value = (value << 8) | tag.charCodeAt(i)\r\n  }\r\n\r\n  return value\r\n}\r\n","/*\r\n * libmedia rewrite value with pos\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOWriter from 'common/io/IOWriterSync'\r\n\r\ntype Type = 'uint8' | 'int8' | 'uint16' | 'int16'\r\n| 'uint32' | 'int32' | 'uint64' | 'int64' | 'float' | 'double'\r\n\r\nexport default function rewriteIO(\r\n  ioWriter: IOWriter,\r\n  pos: bigint,\r\n  value: number | bigint,\r\n  type: Type\r\n) {\r\n  const nowPos = ioWriter.getPos()\r\n  const pointer = ioWriter.getPointer()\r\n  const minPos = nowPos - static_cast<int64>(pointer)\r\n\r\n  let inline = false\r\n\r\n  if (pos < nowPos && pos >= minPos) {\r\n    ioWriter.seekInline(pointer + Number(pos - nowPos))\r\n    inline = true\r\n  }\r\n  else {\r\n    ioWriter.seek(pos)\r\n  }\r\n\r\n  switch (type) {\r\n    case 'uint8':\r\n      ioWriter.writeUint8(static_cast<uint8>(value))\r\n      break\r\n    case 'int8':\r\n      ioWriter.writeInt8(static_cast<int8>(value))\r\n      break\r\n    case 'uint16':\r\n      ioWriter.writeUint16(static_cast<uint16>(value))\r\n      break\r\n    case 'int16':\r\n      ioWriter.writeInt16(static_cast<int16>(value))\r\n      break\r\n    case 'uint32':\r\n      ioWriter.writeUint32(static_cast<uint32>(value))\r\n      break\r\n    case 'int32':\r\n      ioWriter.writeInt32(static_cast<int32>(value))\r\n      break\r\n    case 'uint64':\r\n      ioWriter.writeUint64(static_cast<uint64>(value))\r\n      break\r\n    case 'int64':\r\n      ioWriter.writeInt64(static_cast<int64>(value))\r\n      break\r\n    case 'float':\r\n      ioWriter.writeFloat(static_cast<float>(value))\r\n      break\r\n    case 'double':\r\n      ioWriter.writeDouble(static_cast<double>(value))\r\n      break\r\n  }\r\n\r\n  if (inline) {\r\n    ioWriter.seekInline(pointer)\r\n  }\r\n  else {\r\n    ioWriter.seek(nowPos)\r\n  }\r\n}\r\n","/*\r\n * libmedia ac3 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVChannelLayout } from '../audiosamplefmt'\r\nimport BitReader from 'common/io/BitReader'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport const enum AC3DeltaStrategy {\r\n  DBA_REUSE = 0,\r\n  DBA_NEW,\r\n  DBA_NONE,\r\n  DBA_RESERVED\r\n}\r\n\r\nexport const enum AC3ChannelMode {\r\n  AC3_CHMODE_DUALMONO = 0,\r\n  AC3_CHMODE_MONO,\r\n  AC3_CHMODE_STEREO,\r\n  AC3_CHMODE_3F,\r\n  AC3_CHMODE_2F1R,\r\n  AC3_CHMODE_3F1R,\r\n  AC3_CHMODE_2F2R,\r\n  AC3_CHMODE_3F2R\r\n}\r\n\r\nexport const enum AC3DolbySurroundMode {\r\n  AC3_DSURMOD_NOTINDICATED = 0,\r\n  AC3_DSURMOD_OFF,\r\n  AC3_DSURMOD_ON,\r\n  AC3_DSURMOD_RESERVED\r\n}\r\n\r\nexport const enum AC3DolbySurroundEXMode {\r\n  AC3_DSUREXMOD_NOTINDICATED = 0,\r\n  AC3_DSUREXMOD_OFF,\r\n  AC3_DSUREXMOD_ON,\r\n  AC3_DSUREXMOD_PLIIZ\r\n}\r\n\r\nexport const enum AC3DolbyHeadphoneMode {\r\n  AC3_DHEADPHONMOD_NOTINDICATED = 0,\r\n  AC3_DHEADPHONMOD_OFF,\r\n  AC3_DHEADPHONMOD_ON,\r\n  AC3_DHEADPHONMOD_RESERVED\r\n}\r\n\r\nexport const enum AC3PreferredStereoDownmixMode {\r\n  AC3_DMIXMOD_NOTINDICATED = 0,\r\n  AC3_DMIXMOD_LTRT,\r\n  AC3_DMIXMOD_LORO,\r\n  // reserved value in A/52, but used by encoders to indicate DPL2\r\n  AC3_DMIXMOD_DPLII\r\n}\r\n\r\nexport const enum EAC3FrameType {\r\n  EAC3_FRAME_TYPE_INDEPENDENT = 0,\r\n  EAC3_FRAME_TYPE_DEPENDENT,\r\n  EAC3_FRAME_TYPE_AC3_CONVERT,\r\n  EAC3_FRAME_TYPE_RESERVED\r\n}\r\n\r\nexport const AC3ChannelLayout: uint32[] = [\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_STEREO,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_MONO,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_STEREO,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_SURROUND,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_2_1,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_4POINT0,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_2_2,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_5POINT0\r\n]\r\n\r\nexport interface AC3HeaderInfo {\r\n  syncWord: uint16\r\n  crc1: uint16\r\n  srCode: uint8\r\n  bitstreamId: uint8\r\n  bitstreamMode: uint8\r\n  channelMode: uint8\r\n  lfeOn: uint8\r\n  frameType: uint8\r\n  substreamId: int32\r\n  centerMixLevel: int32\r\n  surroundMixLevel: int32\r\n  channelMap: uint16\r\n  numBlocks: int32\r\n  dolbySurroundMode: int32\r\n  srShift: uint8\r\n  sampleRate: uint16\r\n  bitrate: uint32\r\n  channels: uint8\r\n  frameSize: uint16\r\n  channelLayout: uint64\r\n  ac3BitrateCode: int8\r\n}\r\n\r\nconst AC3FrameSizeTab = [\r\n  [ 64,   69,   96   ],\r\n  [ 64,   70,   96   ],\r\n  [ 80,   87,   120  ],\r\n  [ 80,   88,   120  ],\r\n  [ 96,   104,  144  ],\r\n  [ 96,   105,  144  ],\r\n  [ 112,  121,  168  ],\r\n  [ 112,  122,  168  ],\r\n  [ 128,  139,  192  ],\r\n  [ 128,  140,  192  ],\r\n  [ 160,  174,  240  ],\r\n  [ 160,  175,  240  ],\r\n  [ 192,  208,  288  ],\r\n  [ 192,  209,  288  ],\r\n  [ 224,  243,  336  ],\r\n  [ 224,  244,  336  ],\r\n  [ 256,  278,  384  ],\r\n  [ 256,  279,  384  ],\r\n  [ 320,  348,  480  ],\r\n  [ 320,  349,  480  ],\r\n  [ 384,  417,  576  ],\r\n  [ 384,  418,  576  ],\r\n  [ 448,  487,  672  ],\r\n  [ 448,  488,  672  ],\r\n  [ 512,  557,  768  ],\r\n  [ 512,  558,  768  ],\r\n  [ 640,  696,  960  ],\r\n  [ 640,  697,  960  ],\r\n  [ 768,  835,  1152 ],\r\n  [ 768,  836,  1152 ],\r\n  [ 896,  975,  1344 ],\r\n  [ 896,  976,  1344 ],\r\n  [ 1024, 1114, 1536 ],\r\n  [ 1024, 1115, 1536 ],\r\n  [ 1152, 1253, 1728 ],\r\n  [ 1152, 1254, 1728 ],\r\n  [ 1280, 1393, 1920 ],\r\n  [ 1280, 1394, 1920 ],\r\n]\r\n\r\nconst CenterLevelsTab = [4, 5, 6, 5]\r\nconst SurroundLevelsTab = [4, 6, 7, 6]\r\nconst AC3SampleRateTab = [48000, 44100, 32000, 0]\r\nconst AC3BitrateTab = [\r\n  32, 40, 48, 56, 64, 80, 96, 112, 128,\r\n  160, 192, 224, 256, 320, 384, 448, 512, 576, 640\r\n]\r\nconst AC3ChannelsTab = [\r\n  2, 1, 2, 3, 3, 4, 4, 5\r\n]\r\n\r\nconst EAC3Blocks = [\r\n  1, 2, 3, 6\r\n]\r\n\r\nconst AC3_HEADER_SIZE = 7\r\n\r\nexport function parseHeader(buf: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader(buf.length)\r\n  bitReader.appendBuffer(buf)\r\n\r\n  const info: AC3HeaderInfo = {\r\n    syncWord: 0,\r\n    crc1: 0,\r\n    srCode: 0,\r\n    bitstreamId: 0,\r\n    bitstreamMode: 0,\r\n    channelMode: 0,\r\n    lfeOn: 0,\r\n    frameType: 0,\r\n    substreamId: 0,\r\n    centerMixLevel: 0,\r\n    surroundMixLevel: 0,\r\n    channelMap: 0,\r\n    numBlocks: 0,\r\n    dolbySurroundMode: 0,\r\n    srShift: 0,\r\n    sampleRate: 0,\r\n    bitrate: 0,\r\n    channels: 0,\r\n    frameSize: 0,\r\n    channelLayout: 0n,\r\n    ac3BitrateCode: 0\r\n  }\r\n\r\n  info.syncWord = bitReader.readU(16)\r\n\r\n  if (info.syncWord !== 0x0B77) {\r\n    return -1\r\n  }\r\n\r\n  info.bitstreamId = bitReader.peekU(29) & 0x1f\r\n\r\n  if (info.bitstreamId > 16) {\r\n    return -2\r\n  }\r\n\r\n  info.numBlocks = 6\r\n  info.ac3BitrateCode = -1\r\n  info.centerMixLevel = 5\r\n  info.surroundMixLevel = 6\r\n\r\n  info.dolbySurroundMode = AC3DolbySurroundMode.AC3_DSURMOD_NOTINDICATED\r\n\r\n  if (info.bitstreamId <= 10) {\r\n    info.crc1 = bitReader.readU(16)\r\n    info.srCode = bitReader.readU(2)\r\n\r\n    if (info.srCode === 3) {\r\n      return -3\r\n    }\r\n\r\n    const frameSizeCode = bitReader.readU(6)\r\n    if (frameSizeCode > 37) {\r\n      return -4\r\n    }\r\n\r\n    info.ac3BitrateCode = (frameSizeCode >> 1)\r\n\r\n    bitReader.readU(5)\r\n\r\n    info.bitstreamMode = bitReader.readU(3)\r\n    info.channelMode = bitReader.readU(3)\r\n\r\n    if (info.channelMode == AC3ChannelMode.AC3_CHMODE_STEREO) {\r\n      info.dolbySurroundMode = bitReader.readU(2)\r\n    }\r\n    else {\r\n      if ((info.channelMode & 1) && info.channelMode != AC3ChannelMode.AC3_CHMODE_MONO) {\r\n        info.centerMixLevel = CenterLevelsTab[bitReader.readU(2)]\r\n      }\r\n      if (info.channelMode & 4) {\r\n        info.surroundMixLevel = SurroundLevelsTab[bitReader.readU(2)]\r\n      }\r\n    }\r\n    info.lfeOn = bitReader.readU(1)\r\n\r\n    info.srShift = Math.max(info.bitstreamId, 8) - 8\r\n    info.sampleRate = AC3SampleRateTab[info.srCode] >> info.srShift\r\n    info.bitrate = (AC3BitrateTab[info.ac3BitrateCode] * 1000) >> info.srShift\r\n    info.channels = AC3ChannelsTab[info.channelMode] + info.lfeOn\r\n    info.frameSize = AC3FrameSizeTab[frameSizeCode][info.srCode] * 2\r\n    info.frameType = EAC3FrameType.EAC3_FRAME_TYPE_AC3_CONVERT\r\n    info.substreamId = 0\r\n  }\r\n  else {\r\n    /* Enhanced AC-3 */\r\n    info.crc1 = 0\r\n    info.frameType = bitReader.readU(2)\r\n    if (info.frameType == EAC3FrameType.EAC3_FRAME_TYPE_RESERVED) {\r\n      return -5\r\n    }\r\n    info.substreamId = bitReader.readU(3)\r\n\r\n    info.frameSize = (bitReader.readU(11) + 1) << 1\r\n    if (info.frameSize < AC3_HEADER_SIZE) {\r\n      return -6\r\n    }\r\n\r\n    info.srCode = bitReader.readU(2)\r\n    if (info.srCode == 3) {\r\n      const srCode2 = bitReader.readU(2)\r\n      if (srCode2 == 3) {\r\n        return -7\r\n      }\r\n      info.sampleRate = AC3SampleRateTab[srCode2] / 2\r\n      info.srShift = 1\r\n    }\r\n    else {\r\n      info.numBlocks = EAC3Blocks[bitReader.readU(2)]\r\n      info.sampleRate = AC3SampleRateTab[info.srCode]\r\n      info.srShift = 0\r\n    }\r\n\r\n    info.channelMode = bitReader.readU(3)\r\n    info.lfeOn = bitReader.readU(1)\r\n\r\n    info.bitrate = 8 * info.frameSize * info.sampleRate / (info.numBlocks * 256)\r\n    info.channels = AC3ChannelsTab[info.channelMode] + info.lfeOn\r\n  }\r\n  info.channelLayout = static_cast<uint64>(AC3ChannelLayout[info.channelMode])\r\n  if (info.lfeOn) {\r\n    info.channelLayout |= static_cast<uint64>(AVChannelLayout.AV_CHANNEL_LAYOUT_LOW_FREQUENCY as uint32)\r\n  }\r\n\r\n  return info\r\n}\r\n","/*\r\n * libmedia flac util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport Stream from '../AVStream'\r\nimport { AVPacketSideDataType } from '../codec'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport const enum MetaDataBlockType {\r\n  STREAMINFO,\r\n  PADDING,\r\n  APPLICATION,\r\n  SEEKTABLE,\r\n  VORBIS_COMMENT,\r\n  CUESHEET,\r\n  PICTURE\r\n}\r\n\r\nexport const enum FlacCHMode {\r\n  INDEPENDENT = 0,\r\n  LEFT_SIDE = 1,\r\n  RIGHT_SIDE = 2,\r\n  MID_SIDE = 3\r\n}\r\n\r\nexport const FLAC_STREAMINFO_SIZE = 34\r\nexport const FLAC_MAX_CHANNELS = 8\r\nexport const FLAC_MIN_BLOCKSIZE = 16\r\nexport const FLAC_MAX_BLOCKSIZE = 65535\r\nexport const FLAC_MIN_FRAME_SIZE = 10\r\n\r\nexport const SampleSizeTable: number[] = [0, 8, 12, 0, 16, 20, 24, 32]\r\n\r\nexport const SampleRateTable: number[] = [\r\n  0, 88200, 176400, 192000, 8000, 16000, 22050,\r\n  24000, 32000, 44100, 48000, 96000,\r\n  0, 0, 0, 0\r\n]\r\n\r\nexport const BlockSizeTable: number[] = [\r\n  0, 192, 576 << 0, 576 << 1, 576 << 2, 576 << 3, 0, 0,\r\n  256 << 0, 256 << 1, 256 << 2, 256 << 3, 256 << 4, 256 << 5, 256 << 6, 256 << 7\r\n]\r\n\r\nexport const enum FlacChmode {\r\n  FLAC_CHMODE_INDEPENDENT = 0,\r\n  FLAC_CHMODE_LEFT_SIDE   = 1,\r\n  FLAC_CHMODE_RIGHT_SIDE  = 2,\r\n  FLAC_CHMODE_MID_SIDE    = 3,\r\n}\r\n\r\nexport const enum FlacMetadataType {\r\n  FLAC_METADATA_TYPE_STREAMINFO = 0,\r\n  FLAC_METADATA_TYPE_PADDING,\r\n  FLAC_METADATA_TYPE_APPLICATION,\r\n  FLAC_METADATA_TYPE_SEEKTABLE,\r\n  FLAC_METADATA_TYPE_VORBIS_COMMENT,\r\n  FLAC_METADATA_TYPE_CUESHEET,\r\n  FLAC_METADATA_TYPE_PICTURE,\r\n  FLAC_METADATA_TYPE_INVALID = 127\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: Stream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length === FLAC_STREAMINFO_SIZE) {\r\n    const { bitsPerRawSample, sampleRate, channels } = getAVCodecParameters(extradata)\r\n    stream.codecpar.bitsPerRawSample = bitsPerRawSample\r\n    stream.codecpar.sampleRate = sampleRate\r\n    stream.codecpar.chLayout.nbChannels = channels\r\n  }\r\n}\r\n\r\nfunction getAVCodecParameters(extradata: Uint8ArrayInterface) {\r\n  const bufferReader = new BufferReader(extradata)\r\n  bufferReader.skip(10)\r\n  const value = bufferReader.readUint24()\r\n  const sampleRate = (value >> 4)\r\n  const channels = ((value & 0x0f) >>> 1) + 1\r\n  const bitPerSample = bufferReader.readUint8()\r\n  return {\r\n    sampleRate,\r\n    channels,\r\n    bitsPerRawSample: (((value & 0x01) << 4) | ((bitPerSample & 0xf0) >>> 4)) + 1\r\n  }\r\n}\r\n","/*\r\n * libmedia vvc util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as array from 'common/util/array'\r\nimport AVPacket, { AVPacketFlags } from '../struct/avpacket'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport { AVPacketSideDataType } from '../codec'\r\nimport BitReader from 'common/io/BitReader'\r\nimport AVStream from '../AVStream'\r\nimport { mapUint8Array } from 'cheap/std/memory'\r\nimport * as naluUtil from '../util/nalu'\r\nimport { avMalloc } from '../util/mem'\r\nimport * as expgolomb from '../util/expgolomb'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport BitWriter from 'common/io/BitWriter'\r\nimport { Data } from 'common/types/type'\r\nimport * as intread from '../util/intread'\r\nimport * as intwrite from '../util/intwrite'\r\nimport { AVPixelFormat } from '../pixfmt'\r\n\r\nconst NALULengthSizeMinusOne = 3\r\n\r\nexport const enum VVCNaluType {\r\n  kTRAIL_NUT      = 0,\r\n  kSTSA_NUT       = 1,\r\n  kRADL_NUT       = 2,\r\n  kRASL_NUT       = 3,\r\n  kRSV_VCL_4      = 4,\r\n  kRSV_VCL_5      = 5,\r\n  kRSV_VCL_6      = 6,\r\n  kIDR_W_RADL     = 7,\r\n  kIDR_N_LP       = 8,\r\n  kCRA_NUT        = 9,\r\n  kGDR_NUT        = 10,\r\n  kRSV_IRAP_11    = 11,\r\n  kOPI_NUT        = 12,\r\n  kDCI_NUT        = 13,\r\n  kVPS_NUT        = 14,\r\n  kSPS_NUT        = 15,\r\n  kPPS_NUT        = 16,\r\n  kPREFIX_APS_NUT = 17,\r\n  kSUFFIX_APS_NUT = 18,\r\n  kPH_NUT         = 19,\r\n  kAUD_NUT        = 20,\r\n  kEOS_NUT        = 21,\r\n  kEOB_NUT        = 22,\r\n  kPREFIX_SEI_NUT = 23,\r\n  kSUFFIX_SEI_NUT = 24,\r\n  kFD_NUT         = 25,\r\n  kRSV_NVCL_26    = 26,\r\n  kRSV_NVCL_27    = 27,\r\n  kUNSPEC_28      = 28,\r\n  kUNSPEC_29      = 29,\r\n  kUNSPEC_30      = 30,\r\n  kUNSPEC_31      = 31,\r\n}\r\n\r\nexport const enum VVCSliceType {\r\n  kSliceNone = -1,\r\n  kSliceB = 0,\r\n  kSliceP = 1,\r\n  kSliceI = 2\r\n}\r\n\r\nexport const enum VVCAPSType {\r\n  kALF     = 0,\r\n  kLMCS    = 1,\r\n  kSCALING = 2\r\n}\r\n\r\n/* eslint-disable camelcase */\r\nfunction parsePTL(bitReader: BitReader) {\r\n  const olsIdx = bitReader.readU(9)\r\n  const numSublayers = bitReader.readU(3)\r\n  const constantFrameRate = bitReader.readU(2)\r\n  const chromaFormatIdc = bitReader.readU(2)\r\n  const bitDepthMinus8 = bitReader.readU(3)\r\n  bitReader.readU(5)\r\n\r\n  // VvcPTLRecord\r\n  bitReader.readU(2)\r\n  const num_bytes_constraint_info = bitReader.readU(6)\r\n  const generalProfileIdc = bitReader.readU(7)\r\n  const generalTierFlag = bitReader.readU(1)\r\n  const generalLevelIdc = bitReader.readU(8)\r\n  const ptlFrameOnlyConstraintFlag = bitReader.readU(1)\r\n  const ptlMultilayerEnabledFlag = bitReader.readU(1)\r\n  const generalConstraintInfo = []\r\n  const sublayerLevelIdc = []\r\n\r\n  if (num_bytes_constraint_info) {\r\n    for (let i = 0; i < num_bytes_constraint_info - 1; i++) {\r\n      generalConstraintInfo[i] = bitReader.readU(8)\r\n    }\r\n    generalConstraintInfo[num_bytes_constraint_info - 1] = bitReader.readU(6)\r\n  }\r\n  else {\r\n    bitReader.readU(6)\r\n  }\r\n  if (numSublayers > 1) {\r\n    let ptl_sublayer_present_mask = 0\r\n    for (let j = numSublayers - 2; j >= 0; --j) {\r\n      const val = bitReader.readU(1)\r\n      ptl_sublayer_present_mask |= val << j\r\n    }\r\n    for (let j = numSublayers; j <= 8 && numSublayers > 1; ++j) {\r\n      bitReader.readU(1)\r\n    }\r\n\r\n    for (let j = numSublayers - 2; j >= 0; --j) {\r\n      if (ptl_sublayer_present_mask & (1 << j)) {\r\n        sublayerLevelIdc[j] = bitReader.readU(8)\r\n      }\r\n    }\r\n  }\r\n  const ptl_num_sub_profiles = bitReader.readU(8)\r\n  const generalSubProfileIdc = []\r\n  if (ptl_num_sub_profiles) {\r\n    for (let i = 0; i < ptl_num_sub_profiles; i++) {\r\n      generalSubProfileIdc.push(bitReader.readU(8))\r\n    }\r\n  }\r\n\r\n  const maxPictureWidth = bitReader.readU(16)\r\n  const maxPictureHeight = bitReader.readU(16)\r\n  const avgFramerate = bitReader.readU(16)\r\n\r\n  return {\r\n    olsIdx,\r\n    numSublayers,\r\n    bitDepthMinus8,\r\n    chromaFormatIdc,\r\n    constantFrameRate,\r\n    generalProfileIdc,\r\n    generalTierFlag,\r\n    generalLevelIdc,\r\n    ptlFrameOnlyConstraintFlag,\r\n    ptlMultilayerEnabledFlag,\r\n    generalConstraintInfo,\r\n    sublayerLevelIdc,\r\n    generalSubProfileIdc,\r\n    maxPictureWidth,\r\n    maxPictureHeight,\r\n    avgFramerate\r\n  }\r\n}\r\n/* eslint-enable camelcase */\r\n\r\n/**\r\n * \r\n * vvcc 格式的 extradata 转 annexb vps sps pps\r\n * \r\n * bits    \r\n * - 5   reserved (11111)\r\n * - 2   lengthSizeMinusOne\r\n * - 1   ptl_present_flag\r\n * if ptl_present_flag\r\n *   - 9   ols_idx\r\n *   - 3  num_sublayers\r\n *   - 2  constant_frame_rate\r\n *   - 2  chroma_format_idc\r\n *   - 3  bit_depth_minus8\r\n *   - 5  reserved (11111)\r\n *   VvcPTLRecord\r\n *   - 2 reserved (11)\r\n *   - 6 num_bytes_constraint_info\r\n *   - 7 general_profile_idc\r\n *   - 1 general_tier_flag\r\n *   - 8 general_level_idc\r\n *   - 1 general_level_idc\r\n *   - 1 ptl_multilayer_enabled_flag\r\n *   if num_bytes_constraint_info > 0\r\n *      for (i = 0; i < num_bytes_constraint_info - 1; i++)\r\n *        - 8 general_constraint_info[i]\r\n *      - 6 general_constraint_info[num_bytes_constraint_info - 1]\r\n *   else\r\n *      - 6 reserved\r\n *   if num_sublayers > 1\r\n *      - num_sublayers - 2 ptl_sublayer_level_present_flag\r\n *      - 8 - num_sublayers + 1 ptl_reserved_zero_bit\r\n *      for (i = num_sublayers -2; i >= 0; i--)\r\n *        if ptl_sublayer_present_mask & (1 << i)\r\n *          - 8 sublayer_level_idc[i]\r\n *    - 8 ptl_num_sub_profiles\r\n *    if ptl_num_sub_profiles\r\n *      for (i = 0; i < ptl_num_sub_profiles; i++)\r\n *        - 32 general_sub_profile_idc[i]\r\n *    - 16 max_picture_width\r\n *    - 16 max_picture_height\r\n *    - 16 avg_frame_rate\r\n * - 8   numOfArrays\r\n * - repeated of array (vps/sps/pps)\r\n * - 1   array_completeness\r\n * - 2   reserved (0)\r\n * - 5   NAL_unit_type\r\n * if nalu_type != VVC_NALU_DEC_PARAM && nalu_type != VVC_NALU_OPI\r\n *    - 16  numNalus\r\n * else\r\n *   numNalus = 1\r\n * - repeated once per NAL\r\n * - 16  nalUnitLength\r\n * - N   NALU data\r\n * \r\n */\r\nexport function extradata2VpsSpsPps(extradata: Uint8ArrayInterface) {\r\n\r\n  const bufferReader = new BufferReader(extradata, true)\r\n\r\n  const ptlPresentFlag = bufferReader.readUint8() & 0x01\r\n\r\n  if (ptlPresentFlag) {\r\n    const bitReader = new BitReader()\r\n    bitReader.appendBuffer(extradata.subarray(1))\r\n    parsePTL(bitReader)\r\n    bufferReader.skip(bitReader.getPointer())\r\n  }\r\n\r\n  let vpss: Uint8ArrayInterface[] = []\r\n  let spss: Uint8ArrayInterface[] = []\r\n  let ppss: Uint8ArrayInterface[] = []\r\n\r\n  const arrayLen = bufferReader.readUint8()\r\n\r\n  for (let i = 0; i < arrayLen; i++) {\r\n    const naluType = bufferReader.readUint8() & 0x1f\r\n    let count = 1\r\n\r\n    if (naluType !== VVCNaluType.kDCI_NUT && naluType !== VVCNaluType.kOPI_NUT) {\r\n      count = bufferReader.readUint16()\r\n    }\r\n    const list = []\r\n\r\n    for (let j = 0; j < count; j++) {\r\n      const len = bufferReader.readUint16()\r\n      list.push(bufferReader.readBuffer(len))\r\n    }\r\n\r\n    if (naluType === VVCNaluType.kVPS_NUT) {\r\n      vpss = list\r\n    }\r\n    else if (naluType === VVCNaluType.kSPS_NUT) {\r\n      spss = list\r\n    }\r\n    else if (naluType === VVCNaluType.kPPS_NUT) {\r\n      ppss = list\r\n    }\r\n  }\r\n\r\n  return {\r\n    vpss,\r\n    spss,\r\n    ppss\r\n  }\r\n}\r\n\r\n/**\r\n * annexb vps sps pps 转 avcc 格式的 extradata\r\n * \r\n * @param vpss \r\n * @param spss \r\n * @param ppss \r\n * @returns \r\n */\r\nexport function vpsSpsPps2Extradata(vpss: Uint8ArrayInterface[], spss: Uint8ArrayInterface[], ppss: Uint8ArrayInterface[]) {\r\n\r\n  const sps = spss[0]\r\n  let ptl: Uint8Array\r\n  if (sps) {\r\n    const spsParams = parseSPS(sps)\r\n    let generalConstraintInfo = spsParams.generalConstraintInfo\r\n    if (!generalConstraintInfo.length) {\r\n      generalConstraintInfo = new Array(12).fill(0)\r\n    }\r\n    const biWriter = new BitWriter()\r\n    biWriter.writeU(9, 0)\r\n    biWriter.writeU(3, spsParams.spsMaxSublayersMinus1 + 1)\r\n    biWriter.writeU(2, 1)\r\n    biWriter.writeU(2, spsParams.chromaFormatIdc)\r\n    biWriter.writeU(3, spsParams.bitDepthMinus8)\r\n    biWriter.writeU(5, 0b11111)\r\n    biWriter.writeU(2, 0)\r\n    biWriter.writeU(6, generalConstraintInfo.length)\r\n    biWriter.writeU(7, spsParams.profile)\r\n    biWriter.writeU1(spsParams.tierFlag)\r\n    biWriter.writeU(8, spsParams.level)\r\n    biWriter.writeU1(spsParams.ptlFrameOnlyConstraintFlag)\r\n    biWriter.writeU1(spsParams.ptlMultilayerEnabledFlag)\r\n\r\n    if (generalConstraintInfo.length) {\r\n      for (let i = 0; i < generalConstraintInfo.length - 1; i++) {\r\n        biWriter.writeU(8, generalConstraintInfo[i])\r\n      }\r\n      biWriter.writeU(6, generalConstraintInfo[generalConstraintInfo.length - 1])\r\n    }\r\n    else {\r\n      biWriter.writeU(6, 0b111111)\r\n    }\r\n\r\n    if (spsParams.spsMaxSublayersMinus1 + 1 > 1) {\r\n      let ptlSubLayerLevelPresentFlags = 0\r\n      for (let i = spsParams.spsMaxSublayersMinus1 - 1; i >= 0; i--) {\r\n        ptlSubLayerLevelPresentFlags = (ptlSubLayerLevelPresentFlags << 1 | spsParams.ptlSublayerLevelPresentFlag[i])\r\n      }\r\n      biWriter.writeU(spsParams.spsMaxSublayersMinus1, ptlSubLayerLevelPresentFlags)\r\n\r\n      for (let j = spsParams.spsMaxSublayersMinus1 + 1; j <= 8 && spsParams.spsMaxSublayersMinus1 > 0; ++j) {\r\n        biWriter.writeU1(0)\r\n      }\r\n      for (let i = spsParams.spsMaxSublayersMinus1 - 1; i >= 0; i--) {\r\n        if (spsParams.ptlSublayerLevelPresentFlag[i]) {\r\n          biWriter.writeU(8, spsParams.sublayerLevelIdc[i])\r\n        }\r\n      }\r\n    }\r\n    biWriter.writeU(8, spsParams.generalSubProfileIdc.length)\r\n    for (let i = 0; i < spsParams.generalSubProfileIdc.length; i++) {\r\n      biWriter.writeU(8, spsParams.sublayerLevelIdc[i])\r\n    }\r\n    biWriter.writeU(16, spsParams.width)\r\n    biWriter.writeU(16, spsParams.height)\r\n    biWriter.writeU(16, 0)\r\n    biWriter.padding()\r\n    ptl = biWriter.getBuffer().subarray(0, biWriter.getPointer())\r\n  }\r\n\r\n  let length = 2 + (ptl ? ptl.length : 0)\r\n\r\n  if (vpss.length) {\r\n    // type + count\r\n    length += 3\r\n    length = vpss.reduce((prev, value) => {\r\n      // length + data\r\n      return prev + 2 + value.length\r\n    }, length)\r\n  }\r\n\r\n  if (spss.length) {\r\n    // type + count\r\n    length += 3\r\n    length = spss.reduce((prev, value) => {\r\n      // length + data\r\n      return prev + 2 + value.length\r\n    }, length)\r\n  }\r\n\r\n  if (ppss.length) {\r\n    // type + count\r\n    length += 3\r\n    length = ppss.reduce((prev, value) => {\r\n      // length + data\r\n      return prev + 2 + value.length\r\n    }, length)\r\n  }\r\n\r\n  const buffer = new Uint8Array(length)\r\n  const bufferWriter = new BufferWriter(buffer, true)\r\n\r\n  bufferWriter.writeUint8(NALULengthSizeMinusOne << 1 | (ptl ? 1 : 0) | 0xf8)\r\n\r\n  if (ptl) {\r\n    bufferWriter.writeBuffer(ptl)\r\n  }\r\n\r\n  // numOfArrays\r\n  let numOfArrays = 0\r\n  if (vpss.length) {\r\n    numOfArrays++\r\n  }\r\n  if (spss.length) {\r\n    numOfArrays++\r\n  }\r\n  if (ppss.length) {\r\n    numOfArrays++\r\n  }\r\n  bufferWriter.writeUint8(numOfArrays)\r\n\r\n  // vps\r\n  if (vpss.length) {\r\n    bufferWriter.writeUint8((1 << 7) | VVCNaluType.kVPS_NUT)\r\n    bufferWriter.writeUint16(vpss.length)\r\n    array.each(vpss, (vps) => {\r\n      bufferWriter.writeUint16(vps.length)\r\n      bufferWriter.writeBuffer(vps)\r\n    })\r\n  }\r\n\r\n  // sps\r\n  if (spss.length) {\r\n    bufferWriter.writeUint8((1 << 7) | VVCNaluType.kSPS_NUT)\r\n    bufferWriter.writeUint16(spss.length)\r\n    array.each(spss, (sps) => {\r\n      bufferWriter.writeUint16(sps.length)\r\n      bufferWriter.writeBuffer(sps)\r\n    })\r\n  }\r\n\r\n  // pps\r\n  if (ppss.length) {\r\n    bufferWriter.writeUint8((1 << 7) | VVCNaluType.kPPS_NUT)\r\n    bufferWriter.writeUint16(ppss.length)\r\n    array.each(ppss, (pps) => {\r\n      bufferWriter.writeUint16(pps.length)\r\n      bufferWriter.writeBuffer(pps)\r\n    })\r\n  }\r\n\r\n  return buffer\r\n}\r\n\r\n/**\r\n * annexb extradata 转 avcc extradata\r\n * \r\n * @param data \r\n * @returns \r\n */\r\nexport function annexbExtradata2AvccExtradata(data: Uint8ArrayInterface) {\r\n  let nalus = naluUtil.splitNaluByStartCode(data)\r\n\r\n  if (nalus.length >= 2) {\r\n    const vpss: Uint8ArrayInterface[] = []\r\n    const spss: Uint8ArrayInterface[] = []\r\n    const ppss: Uint8ArrayInterface[] = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kVPS_NUT) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kSPS_NUT) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kPPS_NUT) {\r\n        ppss.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (spss.length && ppss.length) {\r\n      return vpsSpsPps2Extradata(vpss, spss, ppss)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 从 annexb 码流里面生成 annexb extradata\r\n * \r\n * 提取出 vps、 sps 和 pps\r\n * \r\n * @param data \r\n * @returns \r\n */\r\nexport function generateAnnexbExtradata(data: Uint8ArrayInterface) {\r\n  let nalus = naluUtil.splitNaluByStartCode(data)\r\n\r\n  if (nalus.length >= 2) {\r\n    const vpss: Uint8ArrayInterface[] = []\r\n    const spss: Uint8ArrayInterface[] = []\r\n    const ppss: Uint8ArrayInterface[] = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kVPS_NUT) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kSPS_NUT) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kPPS_NUT) {\r\n        ppss.push(nalu)\r\n      }\r\n    })\r\n\r\n    if (spss.length && ppss.length) {\r\n      const nalus = [spss[0], ppss[0]]\r\n      if (vpss.length) {\r\n        nalus.unshift(vpss[0])\r\n      }\r\n      return naluUtil.joinNaluByStartCode(nalus, 0)\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * annexb 格式的 NALU 转 avcc NALU \r\n * \r\n * 需要保证 data 是 safe 的\r\n * \r\n */\r\nexport function annexb2Avcc(data: Uint8ArrayInterface, reverseSps: boolean = false) {\r\n  let extradata: Uint8Array\r\n  let key: boolean = false\r\n\r\n  let nalus = naluUtil.splitNaluByStartCode(data)\r\n\r\n  if (nalus.length) {\r\n    const vpss: Uint8ArrayInterface[] = []\r\n    const spss: Uint8ArrayInterface[] = []\r\n    const ppss: Uint8ArrayInterface[] = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kVPS_NUT) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kSPS_NUT) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kPPS_NUT) {\r\n        ppss.push(nalu)\r\n      }\r\n      if (type === VVCNaluType.kIDR_N_LP\r\n        || type === VVCNaluType.kIDR_W_RADL\r\n        || type === VVCNaluType.kCRA_NUT\r\n        || type === VVCNaluType.kGDR_NUT\r\n      ) {\r\n        key = true\r\n      }\r\n    })\r\n\r\n    if (spss.length && ppss.length) {\r\n      extradata = vpsSpsPps2Extradata(vpss, spss, ppss)\r\n      nalus = nalus.filter((nalu) => {\r\n        const type = (nalu[1] >>> 3) & 0x1f\r\n        return reverseSps\r\n          ? type !== VVCNaluType.kAUD_NUT\r\n          : (type !== VVCNaluType.kVPS_NUT\r\n            && type !== VVCNaluType.kSPS_NUT\r\n            && type !== VVCNaluType.kPPS_NUT\r\n            && type !== VVCNaluType.kAUD_NUT)\r\n      })\r\n    }\r\n    else {\r\n      nalus = nalus.filter((nalu) => {\r\n        const type = (nalu[1] >>> 3) & 0x1f\r\n        return type !== VVCNaluType.kAUD_NUT\r\n      })\r\n    }\r\n  }\r\n\r\n  const length = nalus.reduce((prev, nalu) => {\r\n    return prev + NALULengthSizeMinusOne + 1 + nalu.length\r\n  }, 0)\r\n\r\n  const bufferPointer: pointer<uint8> = avMalloc(length)\r\n  const buffer = mapUint8Array(bufferPointer, length)\r\n\r\n  naluUtil.joinNaluByLength(nalus, NALULengthSizeMinusOne, buffer)\r\n\r\n  return {\r\n    bufferPointer,\r\n    length,\r\n    extradata,\r\n    key\r\n  }\r\n}\r\n\r\n/**\r\n * \r\n * 需要保证 data 是 safe 的\r\n * \r\n * @param vpss \r\n * @param spss \r\n * @param ppss \r\n * @param nalus \r\n * @returns \r\n */\r\nexport function nalus2Annexb(\r\n  vpss: Uint8ArrayInterface[],\r\n  spss: Uint8ArrayInterface[],\r\n  ppss: Uint8ArrayInterface[],\r\n  nalus: Uint8ArrayInterface[],\r\n  key: boolean\r\n) {\r\n  const lengths = [\r\n    naluUtil.joinNaluByStartCodeLength(vpss, 0),\r\n    naluUtil.joinNaluByStartCodeLength(spss, 0),\r\n    naluUtil.joinNaluByStartCodeLength(ppss, 0),\r\n    naluUtil.joinNaluByStartCodeLength(nalus, 2)\r\n  ]\r\n\r\n  let length = lengths.reduce((prev, length) => {\r\n    return prev + length\r\n  }, 0)\r\n\r\n  const bufferPointer: pointer<uint8> = avMalloc(length + 7)\r\n\r\n  let offset = bufferPointer\r\n\r\n  // AUD\r\n  intwrite.w8(offset++, 0)\r\n  intwrite.w8(offset++, 0)\r\n  intwrite.w8(offset++, 0)\r\n  intwrite.w8(offset++, 1)\r\n  intwrite.w8(offset++, 0)\r\n  intwrite.w8(offset++, (VVCNaluType.kAUD_NUT << 3) | 1)\r\n  intwrite.w8(offset++, (key ? 1 : 0) << 7 | 0x28)\r\n\r\n  if (vpss.length) {\r\n    naluUtil.joinNaluByStartCode(vpss, 0, mapUint8Array(offset, lengths[0]))\r\n    offset = reinterpret_cast<pointer<uint8>>(offset + lengths[0])\r\n  }\r\n  if (spss.length) {\r\n    naluUtil.joinNaluByStartCode(spss, 0, mapUint8Array(offset, lengths[1]))\r\n    offset = reinterpret_cast<pointer<uint8>>(offset + lengths[1])\r\n  }\r\n  if (ppss.length) {\r\n    naluUtil.joinNaluByStartCode(ppss, 0, mapUint8Array(offset, lengths[2]))\r\n    offset = reinterpret_cast<pointer<uint8>>(offset + lengths[2])\r\n  }\r\n  if (nalus.length) {\r\n    naluUtil.joinNaluByStartCode(nalus, 2, mapUint8Array(offset, lengths[3]))\r\n  }\r\n\r\n  return {\r\n    bufferPointer,\r\n    length: length + 7\r\n  }\r\n}\r\n\r\n/**\r\n * annexb 添加 sps pps\r\n * \r\n * @param data \r\n * @param extradata \r\n */\r\nexport function annexbAddExtradata(data: Uint8ArrayInterface, extradata: Uint8ArrayInterface) {\r\n  let nalus = naluUtil.splitNaluByStartCode(data).concat(naluUtil.splitNaluByStartCode(extradata))\r\n  if (nalus.length) {\r\n    let vpss: Uint8ArrayInterface[] = []\r\n    let spss: Uint8ArrayInterface[] = []\r\n    let ppss: Uint8ArrayInterface[] = []\r\n    let others: Uint8ArrayInterface[] = []\r\n\r\n    nalus.forEach((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kVPS_NUT) {\r\n        vpss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kSPS_NUT) {\r\n        spss.push(nalu)\r\n      }\r\n      else if (type === VVCNaluType.kPPS_NUT) {\r\n        ppss.push(nalu)\r\n      }\r\n      else if (type !== VVCNaluType.kAUD_NUT) {\r\n        others.push(nalu)\r\n      }\r\n    })\r\n    return nalus2Annexb(vpss, spss, ppss, others, true)\r\n  }\r\n}\r\n\r\n/**\r\n * avcc 格式的 NALU 转 annexb NALU \r\n * \r\n * 需要保证 data 是 safe 的\r\n * \r\n */\r\nexport function avcc2Annexb(data: Uint8ArrayInterface, extradata?: Uint8ArrayInterface) {\r\n  const naluLengthSizeMinusOne = extradata ? ((extradata[0] >>> 1) & 0x03) : NALULengthSizeMinusOne\r\n\r\n  let vpss: Uint8ArrayInterface[] = []\r\n  let spss: Uint8ArrayInterface[] = []\r\n  let ppss: Uint8ArrayInterface[] = []\r\n  let key = false\r\n\r\n  if (extradata) {\r\n    const result = extradata2VpsSpsPps(extradata)\r\n    vpss = result.vpss\r\n    spss = result.spss\r\n    ppss = result.ppss\r\n    key = true\r\n  }\r\n\r\n  const nalus = naluUtil.splitNaluByLength(data, naluLengthSizeMinusOne).filter((nalu) => {\r\n    const type = (nalu[1] >>> 3) & 0x1f\r\n    return type !== VVCNaluType.kAUD_NUT\r\n  })\r\n\r\n  return {\r\n    ...nalus2Annexb(vpss, spss, ppss, nalus, key),\r\n    key\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParametersBySps(stream: AVStream, sps: Uint8ArrayInterface) {\r\n  const { profile, level, width, height, videoDelay, chromaFormatIdc, bitDepthMinus8 } = parseSPS(sps)\r\n  stream.codecpar.profile = profile\r\n  stream.codecpar.level = level\r\n  stream.codecpar.width = width\r\n  stream.codecpar.height = height\r\n  stream.codecpar.videoDelay = videoDelay\r\n\r\n  switch (bitDepthMinus8) {\r\n    case 0:\r\n      if (chromaFormatIdc === 3) {\r\n        stream.codecpar.format = AVPixelFormat.AV_PIX_FMT_YUV444P\r\n      }\r\n      else if (chromaFormatIdc === 2) {\r\n        stream.codecpar.format = AVPixelFormat.AV_PIX_FMT_YUV422P\r\n      }\r\n      else {\r\n        stream.codecpar.format = AVPixelFormat.AV_PIX_FMT_YUV420P\r\n      }\r\n      break\r\n    case 2:\r\n      if (chromaFormatIdc === 3) {\r\n        stream.codecpar.format = AVPixelFormat.AV_PIX_FMT_YUV444P10LE\r\n      }\r\n      else if (chromaFormatIdc === 2) {\r\n        stream.codecpar.format = AVPixelFormat.AV_PIX_FMT_YUV422P10LE\r\n      }\r\n      else {\r\n        stream.codecpar.format = AVPixelFormat.AV_PIX_FMT_YUV420P10LE\r\n      }\r\n      break\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  let sps: Uint8ArrayInterface\r\n  if (extradata && naluUtil.isAnnexb(extradata)) {\r\n    array.each(naluUtil.splitNaluByStartCode(extradata), (nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kSPS_NUT) {\r\n        sps = nalu\r\n        return false\r\n      }\r\n    })\r\n  }\r\n  else if (extradata && extradata.length >= 6) {\r\n\r\n    stream.metadata.naluLengthSizeMinusOne = (extradata[0] >>> 1) & 0x03\r\n\r\n    const { spss } = extradata2VpsSpsPps(extradata)\r\n\r\n    if (spss.length) {\r\n      sps = spss[0]\r\n    }\r\n  }\r\n  if (sps) {\r\n    parseAVCodecParametersBySps(stream, sps)\r\n  }\r\n}\r\n\r\nexport function isIDR(avpacket: pointer<AVPacket>, naluLengthSize: int32 = 4) {\r\n  if (avpacket.flags & AVPacketFlags.AV_PKT_FLAG_H26X_ANNEXB) {\r\n    let nalus = naluUtil.splitNaluByStartCode(mapUint8Array(avpacket.data, reinterpret_cast<size>(avpacket.size)))\r\n    return nalus.some((nalu) => {\r\n      const type = (nalu[1] >>> 3) & 0x1f\r\n      return type === VVCNaluType.kIDR_N_LP || type === VVCNaluType.kIDR_W_RADL\r\n    })\r\n  }\r\n  else {\r\n    const size = avpacket.size\r\n    let i = 0\r\n    while (i < (size - naluLengthSize)) {\r\n      const type = (intread.r8(avpacket.data + (i + naluLengthSize + 1)) >>> 3) & 0x1f\r\n      if (type === VVCNaluType.kIDR_N_LP || type === VVCNaluType.kIDR_W_RADL) {\r\n        return true\r\n      }\r\n      if (naluLengthSize === 4) {\r\n        i += intread.rb32(avpacket.data + i)\r\n      }\r\n      else if (naluLengthSize === 3) {\r\n        i += intread.rb24(avpacket.data + i)\r\n      }\r\n      else if (naluLengthSize === 2) {\r\n        i += intread.rb16(avpacket.data + i)\r\n      }\r\n      else {\r\n        i += intread.r8(avpacket.data + i)\r\n      }\r\n      i += naluLengthSize\r\n    }\r\n    return false\r\n  }\r\n}\r\n\r\n/* eslint-disable camelcase */\r\nexport interface VvcSPS {\r\n  profile: number\r\n  level: number\r\n  width: number\r\n  height: number\r\n  videoDelay: number\r\n  chromaFormatIdc: number\r\n  bitDepthMinus8: number\r\n  generalProfileSpace: number\r\n  tierFlag: number\r\n  generalConstraintInfo: number[]\r\n  generalSubProfileIdc: number[]\r\n  ptlFrameOnlyConstraintFlag: number\r\n  ptlMultilayerEnabledFlag: number\r\n  spsMaxSublayersMinus1: number\r\n  ptlSublayerLevelPresentFlag: number[]\r\n  sublayerLevelIdc: number[]\r\n  sps_log2_max_pic_order_cnt_lsb_minus4: number\r\n  sps_poc_msb_cycle_flag: number\r\n  sps_poc_msb_cycle_len_minus1: number\r\n  sps_num_extra_ph_bytes: number\r\n  sps_extra_ph_bit_present_flag: number[]\r\n}\r\n\r\nexport function parseSPS(sps: Uint8ArrayInterface): VvcSPS {\r\n  if (!sps || sps.length < 3) {\r\n    return\r\n  }\r\n\r\n  let offset = 0\r\n  if (sps[0] === 0x00\r\n    && sps[1] === 0x00\r\n    && sps[2] === 0x00\r\n    && sps[3] === 0x01\r\n  ) {\r\n    offset = 4\r\n  }\r\n\r\n  let profile = 0\r\n  let level = 0\r\n  let width = 0\r\n  let height = 0\r\n  let bitDepthMinus8 = 0\r\n  let chromaFormatIdc = 1\r\n  let generalProfileSpace = 0\r\n  let tierFlag = 0\r\n  let ptlFrameOnlyConstraintFlag = 0\r\n  let ptlMultilayerEnabledFlag = 0\r\n\r\n  const generalConstraintInfo = []\r\n  const ptlSublayerLevelPresentFlag = []\r\n  const sublayerLevelIdc = []\r\n  const generalSubProfileIdc = []\r\n\r\n  const buffer = naluUtil.naluUnescape(sps.subarray(offset))\r\n  const bitReader = new BitReader(buffer.length)\r\n  bitReader.appendBuffer(buffer)\r\n\r\n  // forbidden_zero_bit\r\n  bitReader.readU1()\r\n  // nuh_reserved_zero_bit\r\n  bitReader.readU1()\r\n  // layerId\r\n  bitReader.readU(6)\r\n  // nalu type\r\n  bitReader.readU(5)\r\n  // tid\r\n  bitReader.readU(3)\r\n\r\n  // sps_seq_parameter_set_id && sps_video_parameter_set_id\r\n  bitReader.readU(8)\r\n\r\n  const spsMaxSublayersMinus1 = bitReader.readU(3)\r\n  chromaFormatIdc = bitReader.readU(2)\r\n  const sps_log2_ctu_size_minus5 = bitReader.readU(2)\r\n  const sps_ptl_dpb_hrd_params_present_flag = bitReader.readU(1)\r\n  if (sps_ptl_dpb_hrd_params_present_flag) {\r\n    profile = bitReader.readU(7)\r\n    tierFlag = bitReader.readU(1)\r\n    level = bitReader.readU(8)\r\n    ptlFrameOnlyConstraintFlag = bitReader.readU(1)\r\n    ptlMultilayerEnabledFlag = bitReader.readU(1)\r\n    const gci_present_flag = bitReader.readU(1)\r\n    if (gci_present_flag) {\r\n      for (let j = 0; j < 8; j++) {\r\n        generalConstraintInfo[j] = bitReader.readU(8)\r\n      }\r\n      generalConstraintInfo[8] = bitReader.readU(7)\r\n      const gci_num_reserved_bits = bitReader.readU(8)\r\n      bitReader.readU(gci_num_reserved_bits)\r\n    }\r\n    bitReader.skipPadding()\r\n    for (let i = spsMaxSublayersMinus1 - 1; i >= 0; i--) {\r\n      ptlSublayerLevelPresentFlag[i] = bitReader.readU(1)\r\n    }\r\n    bitReader.skipPadding()\r\n    for (let i = spsMaxSublayersMinus1 - 1; i >= 0; i--) {\r\n      if (ptlSublayerLevelPresentFlag[i]) {\r\n        sublayerLevelIdc[i] = bitReader.readU(8)\r\n      }\r\n    }\r\n\r\n    const ptl_num_sub_profiles = bitReader.readU(8)\r\n    if (ptl_num_sub_profiles) {\r\n      for (let i = 0; i < ptl_num_sub_profiles; i++) {\r\n        generalSubProfileIdc[i] = bitReader.readU(32)\r\n      }\r\n    }\r\n  }\r\n\r\n  // sps_gdr_enabled_flag\r\n  bitReader.readU1()\r\n  const sps_ref_pic_resampling_enabled_flag = bitReader.readU1()\r\n  if (sps_ref_pic_resampling_enabled_flag) {\r\n    // sps_res_change_in_clvs_allowed_flag\r\n    bitReader.readU1()\r\n  }\r\n\r\n  const sps_pic_width_max_in_luma_samples = width = expgolomb.readUE(bitReader)\r\n  const sps_pic_height_max_in_luma_samples = height = expgolomb.readUE(bitReader)\r\n\r\n  if (bitReader.readU1()) {\r\n    // sps_conf_win_left_offset\r\n    expgolomb.readUE(bitReader)\r\n    // sps_conf_win_right_offset\r\n    expgolomb.readUE(bitReader)\r\n    // sps_conf_win_top_offset\r\n    expgolomb.readUE(bitReader)\r\n    // sps_conf_win_bottom_offset\r\n    expgolomb.readUE(bitReader)\r\n  }\r\n\r\n  if (bitReader.readU1()) {\r\n    const sps_num_subpics_minus1 = expgolomb.readUE(bitReader)\r\n    const ctb_log2_size_y = sps_log2_ctu_size_minus5 + 5\r\n    const ctb_size_y      = 1 << ctb_log2_size_y\r\n    const tmp_width_val   = sps_pic_width_max_in_luma_samples / (1 << ctb_log2_size_y)\r\n    const tmp_height_val  = sps_pic_height_max_in_luma_samples / (1 << ctb_log2_size_y)\r\n    const wlen            = Math.ceil(Math.log2(tmp_width_val))\r\n    const hlen            = Math.ceil(Math.log2(tmp_height_val))\r\n\r\n    let sps_subpic_id_len = 0\r\n    let sps_subpic_same_size_flag = 0\r\n    let sps_independent_subpics_flag = 0\r\n    // sps_num_subpics_minus1\r\n    if (sps_num_subpics_minus1 > 0) {\r\n      sps_independent_subpics_flag = bitReader.readU1()\r\n      sps_subpic_same_size_flag = bitReader.readU1()\r\n    }\r\n    for (let i = 0; sps_num_subpics_minus1 > 0 && i <= sps_num_subpics_minus1; i++) {\r\n      if (!sps_subpic_same_size_flag || i == 0) {\r\n        if (i > 0 && sps_pic_width_max_in_luma_samples > ctb_size_y) {\r\n          bitReader.readU(wlen)\r\n        }\r\n        if (i > 0 && sps_pic_height_max_in_luma_samples > ctb_size_y) {\r\n          bitReader.readU(hlen)\r\n        }\r\n        if (i < sps_num_subpics_minus1 && sps_pic_width_max_in_luma_samples > ctb_size_y) {\r\n          bitReader.readU(wlen)\r\n        }\r\n        if (i < sps_num_subpics_minus1 && sps_pic_height_max_in_luma_samples > ctb_size_y) {\r\n          bitReader.readU(hlen)\r\n        }\r\n      }\r\n      if (!sps_independent_subpics_flag) {\r\n        // sps_subpic_treated_as_pic_flag && sps_loop_filter_across_subpic_enabled_flag\r\n        bitReader.readU(2)\r\n      }\r\n    }\r\n    sps_subpic_id_len = expgolomb.readUE(bitReader) + 1\r\n    // sps_subpic_id_mapping_explicitly_signalled_flag\r\n    if (bitReader.readU(1)) {\r\n      // sps_subpic_id_mapping_present_flag\r\n      if (bitReader.readU(1)) {\r\n        for (let i = 0; i <= sps_num_subpics_minus1; i++) {\r\n          // sps_subpic_id[i]\r\n          bitReader.readU(sps_subpic_id_len)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  bitDepthMinus8 = expgolomb.readUE(bitReader)\r\n\r\n  // sps_entropy_coding_sync_enabled_flag\r\n  bitReader.readU(1)\r\n  // sps_entry_point_offsets_present_flag\r\n  bitReader.readU(1)\r\n\r\n  const sps_log2_max_pic_order_cnt_lsb_minus4 = bitReader.readU(4)\r\n  const sps_poc_msb_cycle_flag = bitReader.readU(1)\r\n  let sps_poc_msb_cycle_len_minus1 = 0\r\n  if (sps_poc_msb_cycle_flag) {\r\n    sps_poc_msb_cycle_len_minus1 = expgolomb.readUE(bitReader)\r\n  }\r\n  const sps_extra_ph_bit_present_flag: number[] = []\r\n  const sps_num_extra_ph_bytes = bitReader.readU(2)\r\n  for (let i = 0; i < (sps_num_extra_ph_bytes * 8); i++) {\r\n    sps_extra_ph_bit_present_flag[i] = bitReader.readU(1)\r\n  }\r\n\r\n  const videoDelay = (spsMaxSublayersMinus1 + 1)  > 2 ? 2 : spsMaxSublayersMinus1\r\n\r\n  return {\r\n    profile,\r\n    level,\r\n    width,\r\n    height,\r\n    videoDelay,\r\n    chromaFormatIdc,\r\n    bitDepthMinus8,\r\n    generalProfileSpace,\r\n    tierFlag,\r\n    generalConstraintInfo,\r\n    generalSubProfileIdc,\r\n    ptlFrameOnlyConstraintFlag,\r\n    ptlMultilayerEnabledFlag,\r\n    spsMaxSublayersMinus1,\r\n    ptlSublayerLevelPresentFlag,\r\n    sublayerLevelIdc,\r\n    sps_log2_max_pic_order_cnt_lsb_minus4,\r\n    sps_poc_msb_cycle_flag,\r\n    sps_poc_msb_cycle_len_minus1,\r\n    sps_num_extra_ph_bytes,\r\n    sps_extra_ph_bit_present_flag\r\n  }\r\n}\r\n\r\nexport function parseExtraData(extradata: Uint8ArrayInterface) {\r\n\r\n  if (naluUtil.isAnnexb(extradata)) {\r\n    extradata = annexbExtradata2AvccExtradata(extradata)\r\n  }\r\n\r\n  const bitReader = new BitReader()\r\n  bitReader.appendBuffer(extradata)\r\n  const ptlPresentFlag = bitReader.readU(8) & 0x01\r\n  if (ptlPresentFlag) {\r\n    return parsePTL(bitReader)\r\n  }\r\n  return {} as Data\r\n}\r\n","/*\r\n * libmedia encryption util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport { EncryptionInfo, EncryptionInitInfo } from '../struct/encryption'\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\n\r\n// The format of the AVEncryptionInfo side data:\r\n// u32be scheme\r\n// u32be crypt_byte_block\r\n// u32be skip_byte_block\r\n// u32be key_id_size\r\n// u32be iv_size\r\n// u32be subsample_count\r\n// u8[key_id_size] key_id\r\n// u8[iv_size] iv\r\n// {\r\n//   u32be bytes_of_clear_data\r\n//   u32be bytes_of_protected_data\r\n// }[subsample_count]\r\n\r\nexport function encryptionSideData2Info(buffer: Uint8ArrayInterface): EncryptionInfo {\r\n  const bufferReader = new BufferReader(buffer, true)\r\n\r\n  const scheme = bufferReader.readUint32()\r\n  const cryptByteBlock = bufferReader.readUint32()\r\n  const skipByteBlock = bufferReader.readUint32()\r\n  const keyIdSize = bufferReader.readUint32()\r\n  const ivSize = bufferReader.readUint32()\r\n  const subsampleCount = bufferReader.readUint32()\r\n  const info: EncryptionInfo = {\r\n    scheme,\r\n    cryptByteBlock,\r\n    skipByteBlock,\r\n    keyId: bufferReader.readBuffer(keyIdSize),\r\n    iv: bufferReader.readBuffer(ivSize),\r\n    subsamples: []\r\n  }\r\n  if (subsampleCount) {\r\n    for (let i = 0; i < subsampleCount; i++) {\r\n      info.subsamples.push({\r\n        bytesOfClearData: bufferReader.readUint32(),\r\n        bytesOfProtectedData: bufferReader.readUint32()\r\n      })\r\n    }\r\n  }\r\n  return info\r\n}\r\n\r\nexport function encryptionInfo2SideData(info: EncryptionInfo): Uint8Array {\r\n  const buffer = new Uint8Array(4 * 6 + info.keyId.length + info.iv.length + info.subsamples.length * 8)\r\n  const writer = new BufferWriter(buffer, true)\r\n  writer.writeUint32(info.scheme)\r\n  writer.writeUint32(info.cryptByteBlock)\r\n  writer.writeUint32(info.skipByteBlock)\r\n  writer.writeUint32(info.keyId.length)\r\n  writer.writeUint32(info.iv.length)\r\n  writer.writeUint32(info.subsamples.length)\r\n  writer.writeBuffer(info.keyId)\r\n  writer.writeBuffer(info.iv)\r\n  info.subsamples.forEach((item) => {\r\n    writer.writeUint32(item.bytesOfClearData)\r\n    writer.writeUint32(item.bytesOfProtectedData)\r\n  })\r\n\r\n  return buffer\r\n}\r\n\r\n// The format of the AVEncryptionInitInfo side data:\r\n// u32be init_info_count\r\n// {\r\n//   u32be system_id_size\r\n//   u32be num_key_ids\r\n//   u32be key_id_size\r\n//   u32be data_size\r\n//   u8[system_id_size] system_id\r\n//   u8[key_id_size][num_key_id] key_ids\r\n//   u8[data_size] data\r\n// }[init_info_count]\r\n\r\nexport function encryptionSideData2InitInfo(buffer: Uint8ArrayInterface): EncryptionInitInfo[] {\r\n  const bufferReader = new BufferReader(buffer, true)\r\n\r\n  const count = bufferReader.readUint32()\r\n\r\n  const infos: EncryptionInitInfo[] = []\r\n  for (let i = 0; i < count; i++) {\r\n    const systemIdSize = bufferReader.readUint32()\r\n    const numKeyIds = bufferReader.readUint32()\r\n    const keyIdSize = bufferReader.readUint32()\r\n    const dataSize = bufferReader.readUint32()\r\n    const info: EncryptionInitInfo = {\r\n      systemId: bufferReader.readBuffer(systemIdSize),\r\n      keyIds: [],\r\n      data: null\r\n    }\r\n    if (numKeyIds) {\r\n      for (let i = 0; i < numKeyIds; i++) {\r\n        info.keyIds.push(bufferReader.readBuffer(keyIdSize))\r\n      }\r\n    }\r\n    info.data = bufferReader.readBuffer(dataSize)\r\n    infos.push(info)\r\n  }\r\n  return infos\r\n}\r\n\r\nexport function encryptionInitInfo2SideData(infos: EncryptionInitInfo[]): Uint8Array {\r\n  let size = 4\r\n  infos.forEach((info) => {\r\n    size += 4 * 4 + info.systemId.length + info.keyIds.length * (info.keyIds.length ? info.keyIds[0].length : 0) + info.data.length\r\n  })\r\n  const buffer = new Uint8Array(size)\r\n  const writer = new BufferWriter(buffer, true)\r\n  writer.writeUint32(infos.length)\r\n  infos.forEach((info) => {\r\n    writer.writeUint32(info.systemId.length)\r\n    writer.writeUint32(info.keyIds.length)\r\n    writer.writeUint32(info.keyIds.length ? info.keyIds[0].length : 0)\r\n    writer.writeUint32(info.data.length)\r\n    writer.writeBuffer(info.systemId)\r\n    info.keyIds.forEach((keyId) => {\r\n      writer.writeBuffer(keyId)\r\n    })\r\n    writer.writeBuffer(info.data)\r\n  })\r\n  return buffer\r\n}\r\n"],"names":[],"sourceRoot":""}