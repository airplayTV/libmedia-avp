{"version":3,"file":"src_avformat_formats_OWavFormat_ts.avtranscoder.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AA2B+B;AAGa;AACA;AACA;AACI;AACN;AACT;AAC2C;AAC3B;AAMjD,MAAM,cAAc,GAAsB;IACxC,SAAS,EAAE,KAAK;CACjB;AAGc,MAAM,UAAW,SAAQ,gDAAO;IAEtC,IAAI,yBAAyB;IAE5B,OAAO,CAAmB;IAE1B,MAAM,CAAO;IACb,MAAM,CAAO;IACb,YAAY,CAAO;IACnB,WAAW,CAAO;IAClB,OAAO,CAAO;IACd,KAAK,CAAO;IAEpB,YAAY,UAA6B,EAAE;QACzC,KAAK,EAAE;QACP,IAAI,CAAC,OAAO,GAAG,sDAAa,CAAC,EAAE,EAAE,cAAc,EAAE,OAAO,CAAC;IAC3D,CAAC;IAGM,IAAI,CAAC,aAA+B;QACzC,aAAa,CAAC,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC;QACvC,IAAI,CAAC,MAAM,aAAK;QAChB,IAAI,CAAC,MAAM,qBAAsB,uDAAU,EAAC;QAC5C,IAAI,CAAC,WAAW,aAAK;QACrB,IAAI,CAAC,YAAY,aAAK;QACtB,IAAI,CAAC,OAAO,GAAG,UAAG;QAClB,IAAI,CAAC,KAAK,GAAG,UAAG;QAChB,OAAO,CAAC;IACV,CAAC;IAEM,WAAW,CAAC,aAA+B;QAEhD,MAAM,MAAM,GAAG,aAAa,CAAC,oBAAoB,wCAAgC;QAEjF,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC,QAAQ,GAAG,MAAM,EAAE,CAAC;YACnE,IAAI,SAAS,GAAG,MAAM;YAEtB,IAAI,MAAM,CAAC,QAAQ,CAAC,OAAO,gDAAoC;mBAC1D,MAAM,CAAC,QAAQ,CAAC,OAAO,gDAAoC,EAC9D,CAAC;gBACD,SAAS,GAAG,MAAM;YACpB,CAAC;iBACI,IAAI,MAAM,CAAC,QAAQ,CAAC,OAAO,6CAAiC;mBAC5D,MAAM,CAAC,QAAQ,CAAC,OAAO,gDAAoC;mBAC3D,MAAM,CAAC,QAAQ,CAAC,OAAO,gDAAoC;mBAC3D,MAAM,CAAC,QAAQ,CAAC,OAAO,gDAAoC;mBAC3D,MAAM,CAAC,QAAQ,CAAC,OAAO,gDAAoC,EAC9D,CAAC;gBACD,SAAS,GAAG,MAAM;YACpB,CAAC;iBACI,CAAC;gBACJ,oDAAW,CAAC,sDAAc,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE,EAAE;oBAC3C,IAAI,OAAO,KAAK,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,CAAC;wBACxC,SAAS,GAAG,CAAC,GAAG;oBAClB,CAAC;gBACH,CAAC,CAAC;YACJ,CAAC;YACD,MAAM,CAAC,QAAQ,CAAC,QAAQ,GAAG,SAAS;QACtC,CAAC;QACD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,kBAAkB,EAAE,CAAC;YACxC,MAAM,CAAC,QAAQ,CAAC,kBAAkB,GAAG,6DAAwB,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC;QACxF,CAAC;QACD,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;YAChC,MAAM,CAAC,QAAQ,CAAC,UAAU,GAAG,MAAM,CAAC,QAAQ,CAAC,kBAAkB,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,GAAG,2DAAG,CAAC,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,kBAAkB,CAAC;QACpJ,CAAC;QAED,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC;QAC1C,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QACtC,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC;QAE1C,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC,QAAQ,CAAC,MAAM,EAAE;QAC5C,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC;QAC1C,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC;QACtC,YAAY;QACZ,aAAa,CAAC,QAAQ,CAAC,WAAW,WAAI;QACtC,YAAY;QACZ,aAAa,CAAC,QAAQ,CAAC,WAAW,WAAI;QACtC,eAAe;QACf,aAAa,CAAC,QAAQ,CAAC,WAAW,WAAI;QACtC,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;QAGrC,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC;QAC1C,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC;QACtC,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;QAC5D,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC;QACvE,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC;QAC9D,aAAa,CAAC,QAAQ,CAAC,WAAW,2BAAqB,CAAC,MAAM,CAAC,QAAQ,CAAC,OAAO,YAAK,CAAW,GAAE;QACjG,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC;QAC9D,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,kBAAkB,CAAC;QAEtE,IAAI,CAAC,OAAO,GAAG,aAAa,CAAC,QAAQ,CAAC,MAAM,EAAE;QAC9C,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC;QAC1C,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAEtC,OAAO,CAAC;IACV,CAAC;IACM,aAAa,CAAC,aAA+B,EAAE,QAA2B;QAE/E,IAAI,CAAC,2EAAQ,MAAK,EAAE,CAAC;YACnB,oDAAW,CAAC,wBAAwB,2EAAQ,MAAY,aAAa,2BAAC;YACtE,OAAM;QACR,CAAC;QAED,MAAM,MAAM,GAAG,aAAa,CAAC,gBAAgB,CAAC,2EAAQ,OAAa;QAEnE,IAAI,CAAC,MAAM,EAAE,CAAC;YACZ,oDAAW,CAAC,6DAA6D,2EAAQ,MAAY,aAAa,2BAAC;YAC3G,OAAM;QACR,CAAC;QAED,IAAI,MAAM,CAAC,QAAQ,CAAC,SAAS,2CAAmC,EAAE,CAAC;YACjE,oDAAW,CAAC,gCAAgC,2EAAQ,MAAY,aAAa,2BAAC;YAC9E,OAAM;QACR,CAAC;QAED,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,+DAAa,CAAC,2EAAQ,2EAA8B,QAAQ,QAAQ;QAEvG,IAAI,2EAAQ,QAAO,IAAI,CAAC,MAAM,EAAE,CAAC;YAC/B,IAAI,CAAC,MAAM,GAAG,2EAAQ,MAAI;QAC5B,CAAC;QACD,IAAI,2EAAQ,QAAO,IAAI,CAAC,MAAM,EAAE,CAAC;YAC/B,IAAI,CAAC,MAAM,GAAG,2EAAQ,MAAI;QAC5B,CAAC;QACD,IAAI,2EAAQ,WAAc,+DAAkB,EAAE,CAAC;YAC7C,IAAI,CAAC,YAAY,GAAG,2EAAQ,OAAS;QACvC,CAAC;QAED,IAAI,MAAM,CAAC,QAAQ,CAAC,OAAO,gDAAoC;eAC1D,MAAM,CAAC,QAAQ,CAAC,OAAO,gDAAoC;eAC3D,MAAM,CAAC,QAAQ,CAAC,OAAO,6CAAiC;eACxD,MAAM,CAAC,QAAQ,CAAC,OAAO,gDAAoC;eAC3D,MAAM,CAAC,QAAQ,CAAC,OAAO,gDAAoC;eAC3D,MAAM,CAAC,QAAQ,CAAC,OAAO,gDAAoC;eAC3D,MAAM,CAAC,QAAQ,CAAC,OAAO,gDAAoC,EAC9D,CAAC;YACD,IAAI,CAAC,WAAW,WAAuB,IAAI,CAAC,KAAK,CAAC,2EAAQ,SAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,GAAG,MAAM,CAAC,QAAQ,CAAC,kBAAkB,GAAG,CAAC,CAAC,CAAU,MAAC;QAC7J,CAAC;QAED,OAAO,CAAC;IACV,CAAC;IACM,YAAY,CAAC,aAA+B;QACjD,aAAa,CAAC,QAAQ,CAAC,KAAK,EAAE;QAE9B,MAAM,MAAM,GAAG,aAAa,CAAC,oBAAoB,wCAAgC;QAEjF,MAAM,QAAQ,GAAG,aAAa,CAAC,QAAQ,CAAC,MAAM,EAAE;QAChD,MAAM,QAAQ,GAAG,QAAQ,GAAG,IAAI,CAAC,OAAO,YAAK;QAC7C,IAAI,IAAI,GAAG,KAAK;QAChB,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,IAAI,QAAQ,YAAK,UAAsB,uDAAoB,CAAC,EAAE,CAAC;YACvF,IAAI,GAAG,IAAI;QACb,CAAC;aACI,CAAC;YACJ,aAAa,CAAC,QAAQ,CAAC,IAAI,WAAI;YAC/B,aAAa,CAAC,QAAQ,CAAC,WAAW,2BAAqB,CAAC,QAAQ,YAAK,CAAW,GAAE;YAClF,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,YAAK,CAAC;YAC9C,aAAa,CAAC,QAAQ,CAAC,WAAW,2BAAqB,QAAkB,GAAE;YAC3E,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC;QACvC,CAAC;QAED,IAAI,IAAI,EAAE,CAAC;YACT,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW;YAClC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;gBACtB,WAAW,GAAG,gEAAU,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,YAAY,EAAE,MAAM,CAAC,QAAQ,EAAE,EAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,MAAM,CAAC,QAAQ,CAAC,UAAU,EAAC,CAAC;YACrI,CAAC;YACD,aAAa,CAAC,QAAQ,CAAC,IAAI,WAAI;YAC/B,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC;YAC1C,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAEtC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;YACvC,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,MAAM,CAAC;YAC1C,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE,CAAC;YACtC,YAAY;YACZ,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,QAAQ,YAAK,CAAC;YACjD,YAAY;YACZ,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,QAAQ,CAAC;YAC5C,eAAe;YACf,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,WAAW,CAAC;YAC/C,aAAa,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;YACrC,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC;QACvC,CAAC;QAED,OAAO,CAAC;IACV,CAAC;IAEM,KAAK,CAAC,aAA+B;QAC1C,aAAa,CAAC,QAAQ,CAAC,KAAK,EAAE;QAC9B,OAAO,CAAC;IACV,CAAC;CAEF;;;;;;;;;;;;;;;;;;;;;AC7O2C;AAGrC,MAAM,cAAc,GAAG;IAC5B,MAAM,0CAA8B;IACpC,MAAM,4CAAgC;IACtC,MAAM,6CAAiC;IACvC,MAAM,4CAAgC;IACtC,MAAM,6CAAiC;IACvC,MAAM,4CAAgC;IACtC,MAAM,iDAAqC;IAC3C,MAAM,iDAAqC;IAC3C,MAAM,iDAAqC;IAC3C,MAAM,gDAAoC;IAC1C,MAAM,8CAAkC;IACxC,MAAM,0CAA8B;IACpC,MAAM,0CAA8B;IACpC,MAAM,0CAA8B;IACpC,MAAM,0CAA8B;IACpC,MAAM,8CAAkC;IACxC,MAAM,8CAAkC;IACxC,MAAM,8CAAkC;IACxC,MAAM,uCAA2B;IACjC,MAAM,uCAA2B;IACjC,MAAM,0CAA8B;IACpC,MAAM,0CAA8B;IACpC,MAAM,iDAAqC;IAC3C,MAAM,iDAAqC;IAC3C,MAAM,8CAAkC;IACxC,MAAM,iDAAqC;IAC3C,MAAM,6CAAiC;IACvC,MAAM,wCAA4B;IAClC,MAAM,uCAA2B;IACjC,MAAM,0CAA8B;IACpC,MAAM,wCAA4B;IAClC,MAAM,gDAAoC;IAC1C,MAAM,yCAA6B;IACnC,MAAM,yCAA6B;IACnC,MAAM,0CAA8B;IACpC,MAAM,+CAAmC;IACzC,MAAM,wCAA4B;IAClC,MAAM,wCAA4B;IAClC,MAAM,uCAA2B;IACjC,MAAM,4CAAgC;IACtC,MAAM,2CAA+B;IACrC,MAAM,2CAA+B;IACrC,MAAM,0CAA8B;IACpC,MAAM,4CAAgC;IACtC,MAAM,8CAAkC;IACxC,MAAM,yCAA6B;IACnC,MAAM,uCAA2B;IACjC,MAAM,uCAA2B;IACjC,MAAM,0CAA8B;IACpC,MAAM,0CAA8B;IACpC,MAAM,0CAA8B;IACpC,MAAM,8CAAkC;IAExC,WAAW;IACX,MAAM,uCAA2B;IACjC,MAAM,4CAAgC;IACtC,MAAM,uCAA2B;IACjC,MAAM,uCAA2B;IACjC,MAAM,yCAA6B;IACnC,MAAM,wCAA4B;IAClC,MAAM,6CAAiC;IACvC,MAAM,uCAA2B;IACjC,MAAM,uCAA2B;IACjC,MAAM,uCAA2B;IACjC,MAAM,4CAAgC;IACtC,MAAM,wCAA4B;IAClC,MAAM,uCAA2B;IACjC,MAAM,0CAA8B;IACpC,MAAM,uCAA2B;IACjC,MAAM,yCAA6B;IACnC,MAAM,wCAA4B;IAClC,MAAM,yCAA6B;IACnC,MAAM,6CAAiC;IACvC,MAAM,0CAA8B;CACrC;AAEM,MAAM,YAAY,GAA6B;IACpD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,oCAA4B;IAC7C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,oCAA4B;IAC7C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,oCAA4B;IAC7C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,oCAA4B;IAC7C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,oCAA4B;IAC7C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,oCAA4B;IAC7C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,oCAA4B;IAC7C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,oCAA4B;IAC7C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,oCAA4B;IAC7C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,oCAA4B;IAC7C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,oCAA4B;IAE7C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,qCAA4B;IAC7C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,qCAA4B;IAC7C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,qCAA4B;IAC7C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,qCAA4B;IAC7C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,qCAA4B;IAC7C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,qCAA4B;IAC7C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,qCAA4B;IAC7C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,qCAA4B;IAC7C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,qCAA4B;IAC7C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,qCAA4B;IAC7C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,qCAA4B;IAC7C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,qCAA4B;IAC7C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,qCAA4B;IAC7C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,qCAA4B;IAE7C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,IAAa,CAAC,sCAA6B;IAC5C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAE9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAi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","sources":["webpack://AVTranscoder/./src/avformat/formats/OWavFormat.ts","webpack://AVTranscoder/./src/avformat/formats/riff/riff.ts","webpack://AVTranscoder/./src/avformat/function/mktagle.ts","webpack://AVTranscoder/./src/avutil/util/pcm.ts"],"sourcesContent":["/*\r\n * libmedia wav encoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVOFormatContext } from '../AVFormatContext'\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport OFormat from './OFormat'\r\nimport { AVCodecID, AVMediaType } from 'avutil/codec'\r\nimport { AVFormat } from 'avutil/avformat'\r\nimport * as logger from 'common/util/logger'\r\nimport * as object from 'common/util/object'\r\nimport { WavTag2CodecId } from './riff/riff'\r\nimport { mapUint8Array } from 'cheap/std/memory'\r\nimport * as pcmUtil from 'avutil/util/pcm'\r\nimport gcd from 'common/math/gcd'\r\nimport { NOPTS_VALUE_BIGINT, UINT32_MAX, UINT64_MAX } from 'avutil/constant'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\n\r\nexport interface OWavFormatOptions {\r\n  forceRF64?: boolean\r\n}\r\n\r\nconst defaultOptions: OWavFormatOptions = {\r\n  forceRF64: false\r\n}\r\n\r\n\r\nexport default class OWavFormat extends OFormat {\r\n\r\n  public type: AVFormat = AVFormat.WAV\r\n\r\n  private options: OWavFormatOptions\r\n\r\n  private minPts: int64\r\n  private maxPts: int64\r\n  private lastDuration: int64\r\n  private sampleCount: int64\r\n  private dataPos: int64\r\n  private dsPos: int64\r\n\r\n  constructor(options: OWavFormatOptions = {}) {\r\n    super()\r\n    this.options = object.extend({}, defaultOptions, options)\r\n  }\r\n\r\n\r\n  public init(formatContext: AVOFormatContext): number {\r\n    formatContext.ioWriter.setEndian(false)\r\n    this.maxPts = 0n\r\n    this.minPts = static_cast<int64>(UINT64_MAX)\r\n    this.sampleCount = 0n\r\n    this.lastDuration = 0n\r\n    this.dataPos = -1n\r\n    this.dsPos = -1n\r\n    return 0\r\n  }\r\n\r\n  public writeHeader(formatContext: AVOFormatContext): number {\r\n\r\n    const stream = formatContext.getStreamByMediaType(AVMediaType.AVMEDIA_TYPE_AUDIO)\r\n\r\n    if (!stream.codecpar.codecTag || stream.codecpar.codecTag > 0xffff) {\r\n      let subFormat = 0xfffe\r\n\r\n      if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_F32LE\r\n        || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_F64LE\r\n      ) {\r\n        subFormat = 0x0003\r\n      }\r\n      else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_U8\r\n        || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_S16LE\r\n        || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_S24LE\r\n        || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_S32LE\r\n        || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_S64LE\r\n      ) {\r\n        subFormat = 0x0001\r\n      }\r\n      else {\r\n        object.each(WavTag2CodecId, (codecId, key) => {\r\n          if (codecId === stream.codecpar.codecId) {\r\n            subFormat = +key\r\n          }\r\n        })\r\n      }\r\n      stream.codecpar.codecTag = subFormat\r\n    }\r\n    if (!stream.codecpar.bitsPerCodedSample) {\r\n      stream.codecpar.bitsPerCodedSample = pcmUtil.getBitsPerSample(stream.codecpar.codecId)\r\n    }\r\n    if (!stream.codecpar.blockAlign) {\r\n      stream.codecpar.blockAlign = stream.codecpar.bitsPerCodedSample * stream.codecpar.chLayout.nbChannels / gcd(8, stream.codecpar.bitsPerCodedSample)\r\n    }\r\n\r\n    formatContext.ioWriter.writeString('RIFF')\r\n    formatContext.ioWriter.writeUint32(-1)\r\n    formatContext.ioWriter.writeString('WAVE')\r\n\r\n    this.dsPos = formatContext.ioWriter.getPos()\r\n    formatContext.ioWriter.writeString('JUNK')\r\n    formatContext.ioWriter.writeUint32(28)\r\n    // riff size\r\n    formatContext.ioWriter.writeUint64(0n)\r\n    // data size\r\n    formatContext.ioWriter.writeUint64(0n)\r\n    // sample count\r\n    formatContext.ioWriter.writeUint64(0n)\r\n    formatContext.ioWriter.writeUint32(0)\r\n\r\n\r\n    formatContext.ioWriter.writeString('fmt ')\r\n    formatContext.ioWriter.writeUint32(16)\r\n    formatContext.ioWriter.writeUint16(stream.codecpar.codecTag)\r\n    formatContext.ioWriter.writeUint16(stream.codecpar.chLayout.nbChannels)\r\n    formatContext.ioWriter.writeUint32(stream.codecpar.sampleRate)\r\n    formatContext.ioWriter.writeUint32(static_cast<uint32>((stream.codecpar.bitrate / 8n) as uint64))\r\n    formatContext.ioWriter.writeUint16(stream.codecpar.blockAlign)\r\n    formatContext.ioWriter.writeUint16(stream.codecpar.bitsPerCodedSample)\r\n\r\n    this.dataPos = formatContext.ioWriter.getPos()\r\n    formatContext.ioWriter.writeString('data')\r\n    formatContext.ioWriter.writeUint32(-1)\r\n\r\n    return 0\r\n  }\r\n  public writeAVPacket(formatContext: AVOFormatContext, avpacket: pointer<AVPacket>): number {\r\n\r\n    if (!avpacket.size) {\r\n      logger.warn(`packet\\'s size is 0: ${avpacket.streamIndex}, ignore it`)\r\n      return\r\n    }\r\n\r\n    const stream = formatContext.getStreamByIndex(avpacket.streamIndex)\r\n\r\n    if (!stream) {\r\n      logger.warn(`can not found the stream width the packet\\'s streamIndex: ${avpacket.streamIndex}, ignore it`)\r\n      return\r\n    }\r\n\r\n    if (stream.codecpar.codecType !== AVMediaType.AVMEDIA_TYPE_AUDIO) {\r\n      logger.warn(`packet\\'s type is not audio: ${avpacket.streamIndex}, ignore it`)\r\n      return\r\n    }\r\n\r\n    formatContext.ioWriter.writeBuffer(mapUint8Array(avpacket.data, reinterpret_cast<size>(avpacket.size)))\r\n\r\n    if (avpacket.pts < this.minPts) {\r\n      this.minPts = avpacket.pts\r\n    }\r\n    if (avpacket.pts > this.maxPts) {\r\n      this.maxPts = avpacket.pts\r\n    }\r\n    if (avpacket.duration !== NOPTS_VALUE_BIGINT) {\r\n      this.lastDuration = avpacket.duration\r\n    }\r\n\r\n    if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_F32LE\r\n      || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_F64LE\r\n      || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_U8\r\n      || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_S16LE\r\n      || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_S24LE\r\n      || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_S32LE\r\n      || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_S64LE\r\n    ) {\r\n      this.sampleCount += static_cast<int64>(Math.floor(avpacket.size / (stream.codecpar.chLayout.nbChannels * stream.codecpar.bitsPerCodedSample / 8)) as int32)\r\n    }\r\n\r\n    return 0\r\n  }\r\n  public writeTrailer(formatContext: AVOFormatContext): number {\r\n    formatContext.ioWriter.flush()\r\n\r\n    const stream = formatContext.getStreamByMediaType(AVMediaType.AVMEDIA_TYPE_AUDIO)\r\n\r\n    const fileSize = formatContext.ioWriter.getPos()\r\n    const dataSize = fileSize - this.dataPos - 8n\r\n    let rf64 = false\r\n    if (this.options.forceRF64 || fileSize - 8n > static_cast<int64>(UINT32_MAX as uint32)) {\r\n      rf64 = true\r\n    }\r\n    else {\r\n      formatContext.ioWriter.seek(4n)\r\n      formatContext.ioWriter.writeUint32(static_cast<uint32>((fileSize - 8n) as uint64))\r\n      formatContext.ioWriter.seek(this.dataPos + 4n)\r\n      formatContext.ioWriter.writeUint32(static_cast<uint32>(dataSize as uint64))\r\n      formatContext.ioWriter.seek(fileSize)\r\n    }\r\n\r\n    if (rf64) {\r\n      let sampleCount = this.sampleCount\r\n      if (!this.sampleCount) {\r\n        sampleCount = avRescaleQ(this.maxPts - this.minPts + this.lastDuration, stream.timeBase, {num: 1, den: stream.codecpar.sampleRate})\r\n      }\r\n      formatContext.ioWriter.seek(0n)\r\n      formatContext.ioWriter.writeString('RF64')\r\n      formatContext.ioWriter.writeUint32(-1)\r\n\r\n      formatContext.ioWriter.seek(this.dsPos)\r\n      formatContext.ioWriter.writeString('ds64')\r\n      formatContext.ioWriter.writeUint32(28)\r\n      // riff size\r\n      formatContext.ioWriter.writeUint64(fileSize - 8n)\r\n      // data size\r\n      formatContext.ioWriter.writeUint64(dataSize)\r\n      // sample count\r\n      formatContext.ioWriter.writeUint64(sampleCount)\r\n      formatContext.ioWriter.writeUint32(0)\r\n      formatContext.ioWriter.seek(fileSize)\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  public flush(formatContext: AVOFormatContext): number {\r\n    formatContext.ioWriter.flush()\r\n    return 0\r\n  }\r\n\r\n}\r\n","import { AVStreamMetadataKey } from 'avutil/AVStream'\r\nimport mktagle from '../../function/mktagle'\r\nimport { AVCodecID } from 'avutil/codec'\r\n\r\nexport const WavTag2CodecId = {\r\n  0x0001: AVCodecID.AV_CODEC_ID_PCM_U8,\r\n  0x0002: AVCodecID.AV_CODEC_ID_ADPCM_MS,\r\n  0x0003: AVCodecID.AV_CODEC_ID_PCM_F32LE,\r\n  0x0006: AVCodecID.AV_CODEC_ID_PCM_ALAW,\r\n  0x0007: AVCodecID.AV_CODEC_ID_PCM_MULAW,\r\n  0x000A: AVCodecID.AV_CODEC_ID_WMAVOICE,\r\n  0x0010: AVCodecID.AV_CODEC_ID_ADPCM_IMA_OKI,\r\n  0x0011: AVCodecID.AV_CODEC_ID_ADPCM_IMA_WAV,\r\n  0x0017: AVCodecID.AV_CODEC_ID_ADPCM_IMA_OKI,\r\n  0x0020: AVCodecID.AV_CODEC_ID_ADPCM_YAMAHA,\r\n  0x0022: AVCodecID.AV_CODEC_ID_TRUESPEECH,\r\n  0x0031: AVCodecID.AV_CODEC_ID_GSM_MS,\r\n  0x0032: AVCodecID.AV_CODEC_ID_GSM_MS,\r\n  0x0038: AVCodecID.AV_CODEC_ID_AMR_NB,\r\n  0x0042: AVCodecID.AV_CODEC_ID_G723_1,\r\n  0x0045: AVCodecID.AV_CODEC_ID_ADPCM_G726,\r\n  0x0014: AVCodecID.AV_CODEC_ID_ADPCM_G726,\r\n  0x0040: AVCodecID.AV_CODEC_ID_ADPCM_G726,\r\n  0x0050: AVCodecID.AV_CODEC_ID_MP2,\r\n  0x0055: AVCodecID.AV_CODEC_ID_MP3,\r\n  0x0057: AVCodecID.AV_CODEC_ID_AMR_NB,\r\n  0x0058: AVCodecID.AV_CODEC_ID_AMR_WB,\r\n  0x0061: AVCodecID.AV_CODEC_ID_ADPCM_IMA_DK4,\r\n  0x0062: AVCodecID.AV_CODEC_ID_ADPCM_IMA_DK3,\r\n  0x0064: AVCodecID.AV_CODEC_ID_ADPCM_G726,\r\n  0x0069: AVCodecID.AV_CODEC_ID_ADPCM_IMA_WAV,\r\n  0x0075: AVCodecID.AV_CODEC_ID_METASOUND,\r\n  0x0083: AVCodecID.AV_CODEC_ID_G729,\r\n  0x00ff: AVCodecID.AV_CODEC_ID_AAC,\r\n  0x0111: AVCodecID.AV_CODEC_ID_G723_1,\r\n  0x0130: AVCodecID.AV_CODEC_ID_SIPR,\r\n  0x0135: AVCodecID.AV_CODEC_ID_ACELP_KELVIN,\r\n  0x0160: AVCodecID.AV_CODEC_ID_WMAV1,\r\n  0x0161: AVCodecID.AV_CODEC_ID_WMAV2,\r\n  0x0162: AVCodecID.AV_CODEC_ID_WMAPRO,\r\n  0x0163: AVCodecID.AV_CODEC_ID_WMALOSSLESS,\r\n  0x0165: AVCodecID.AV_CODEC_ID_XMA1,\r\n  0x0166: AVCodecID.AV_CODEC_ID_XMA2,\r\n  0x0180: AVCodecID.AV_CODEC_ID_FTR,\r\n  0x0200: AVCodecID.AV_CODEC_ID_ADPCM_CT,\r\n  0x0215: AVCodecID.AV_CODEC_ID_DVAUDIO,\r\n  0x0216: AVCodecID.AV_CODEC_ID_DVAUDIO,\r\n  0x0270: AVCodecID.AV_CODEC_ID_ATRAC3,\r\n  0x028E: AVCodecID.AV_CODEC_ID_MSNSIREN,\r\n  0x028F: AVCodecID.AV_CODEC_ID_ADPCM_G722,\r\n  0x0350: AVCodecID.AV_CODEC_ID_MISC4,\r\n  0x0401: AVCodecID.AV_CODEC_ID_IMC,\r\n  0x0402: AVCodecID.AV_CODEC_ID_IAC,\r\n  0x0500: AVCodecID.AV_CODEC_ID_ON2AVC,\r\n  0x0501: AVCodecID.AV_CODEC_ID_ON2AVC,\r\n  0x1500: AVCodecID.AV_CODEC_ID_GSM_MS,\r\n  0x1501: AVCodecID.AV_CODEC_ID_TRUESPEECH,\r\n\r\n  // ADTS AAC\r\n  0x1600: AVCodecID.AV_CODEC_ID_AAC,\r\n  0x1602: AVCodecID.AV_CODEC_ID_AAC_LATM,\r\n  0x2000: AVCodecID.AV_CODEC_ID_AC3,\r\n  0x2001: AVCodecID.AV_CODEC_ID_DTS,\r\n  0x2048: AVCodecID.AV_CODEC_ID_SONIC,\r\n  0x2222: AVCodecID.AV_CODEC_ID_G729,\r\n  0x6c75: AVCodecID.AV_CODEC_ID_PCM_MULAW,\r\n  0x706d: AVCodecID.AV_CODEC_ID_AAC,\r\n  0x4143: AVCodecID.AV_CODEC_ID_AAC,\r\n  0x4180: AVCodecID.AV_CODEC_ID_FTR,\r\n  0x594a: AVCodecID.AV_CODEC_ID_XAN_DPCM,\r\n  0x729A: AVCodecID.AV_CODEC_ID_G729,\r\n  0x8180: AVCodecID.AV_CODEC_ID_FTR,\r\n  0xA100: AVCodecID.AV_CODEC_ID_G723_1,\r\n  0xA106: AVCodecID.AV_CODEC_ID_AAC,\r\n  0xA109: AVCodecID.AV_CODEC_ID_SPEEX,\r\n  0xF1AC: AVCodecID.AV_CODEC_ID_FLAC,\r\n  0xFFFE: AVCodecID.AV_CODEC_ID_DFPWM,\r\n  0x5346: AVCodecID.AV_CODEC_ID_ADPCM_SWF,\r\n  0x566f: AVCodecID.AV_CODEC_ID_VORBIS\r\n}\r\n\r\nexport const codecBmpTags: Record<int32, AVCodecID> = {\r\n  [mktagle('H261')]: AVCodecID.AV_CODEC_ID_H261,\r\n  [mktagle('H263')]: AVCodecID.AV_CODEC_ID_H263,\r\n  [mktagle('X263')]: AVCodecID.AV_CODEC_ID_H263,\r\n  [mktagle('T263')]: AVCodecID.AV_CODEC_ID_H263,\r\n  [mktagle('L263')]: AVCodecID.AV_CODEC_ID_H263,\r\n  [mktagle('VX1K')]: AVCodecID.AV_CODEC_ID_H263,\r\n  [mktagle('ZyGo')]: AVCodecID.AV_CODEC_ID_H263,\r\n  [mktagle('M263')]: AVCodecID.AV_CODEC_ID_H263,\r\n  [mktagle('lsvm')]: AVCodecID.AV_CODEC_ID_H263,\r\n  [mktagle('I263')]: AVCodecID.AV_CODEC_ID_H263I,\r\n  [mktagle('U263')]: AVCodecID.AV_CODEC_ID_H263,\r\n  [mktagle('VSM4')]: AVCodecID.AV_CODEC_ID_H263,\r\n\r\n  [mktagle('H264')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('h264')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('X264')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('x264')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('avc1')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('DAVC')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('SMV2')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('VSSH')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('Q264')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('V264')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('GAVC')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('UMSV')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('tshd')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('INMC')]: AVCodecID.AV_CODEC_ID_H264,\r\n\r\n  [mktagle('FMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DIVX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DX50')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('XVID')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('MP4S')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('M4S2')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DIVX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [0x04 as int32]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('ZMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DIV1')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('BLZ0')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('mp4v')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('UMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('WV1F')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('SEDG')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('RMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('3IV2')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('WAWV')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('FFDS')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('FVFW')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DCOD')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('MVXM')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('PM4V')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('SMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DXGM')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('VIDM')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('M4T3')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('GEOX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('G264')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('HDX4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DM4V')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DMK2')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DYM4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DIGI')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('EPHV')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('EM4A')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('M4CC')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('SN40')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('VSPX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('ULDX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('GEOV')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('SIPP')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('SM4V')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('XVIX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DreX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('QMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('PLV1')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('GLV4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('GMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('MNM4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('GTM4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n\r\n  [mktagle('MPG4')]: AVCodecID.AV_CODEC_ID_MSMPEG4V1,\r\n  [mktagle('MP41')]: AVCodecID.AV_CODEC_ID_MSMPEG4V1,\r\n  [mktagle('MP42')]: AVCodecID.AV_CODEC_ID_MSMPEG4V2,\r\n  [mktagle('DIV2')]: AVCodecID.AV_CODEC_ID_MSMPEG4V2,\r\n  [mktagle('MP43')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('DIV3')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('MPG3')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('DIV5')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('DIV6')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('DIV4')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('DVX3')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('AP41')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('COL1')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('COL0')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n\r\n  [mktagle('WMV1')]: AVCodecID.AV_CODEC_ID_WMV1,\r\n  [mktagle('WMV2')]: AVCodecID.AV_CODEC_ID_WMV2,\r\n  [mktagle('GXVE')]: AVCodecID.AV_CODEC_ID_WMV2,\r\n\r\n  [mktagle('dvsd')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('dvhd')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('dvh1')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('dvsl')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('dv25')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('dv50')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('cdvc')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('CDVH')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('CDV5')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('dvc ')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('dvcs')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('dvh1')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('dvis')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('pdvc')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('SL25')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('SLDV')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('AVd1')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n\r\n  [mktagle('mpg1')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('mpg2')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('MPEG')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('PIM1')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('PIM2')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('VCR2')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [0x10000001 as uint32]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [0x10000002 as uint32]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [0x10000004 as uint32]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('DVR ')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('MMES')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('LMP2')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('slif')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('EM2V')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('M701')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('M702')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('M703')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('M704')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('M705')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('mpgv')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('BW10')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('XMPG')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('MJPG')]: AVCodecID.AV_CODEC_ID_MJPEG,\r\n\r\n  [mktagle('RV40')]: AVCodecID.AV_CODEC_ID_RV40,\r\n  [mktagle('AV01')]: AVCodecID.AV_CODEC_ID_AV1,\r\n  [mktagle('VP80')]: AVCodecID.AV_CODEC_ID_VP8,\r\n  [mktagle('VP90')]: AVCodecID.AV_CODEC_ID_VP9,\r\n  [mktagle('HEVC')]: AVCodecID.AV_CODEC_ID_HEVC,\r\n  [mktagle('H265')]: AVCodecID.AV_CODEC_ID_HEVC\r\n}\r\n\r\nexport const MEDIASUBTYPE_BASE_GUID = '00001000800000AA00389B71'\r\nexport const AMBISONIC_BASE_GUID = '2107D3118644C8C1CA000000'\r\nexport const BROKEN_BASE_GUID = '0000000000001000800000AA'\r\n\r\nexport const codecBmpGuid: Record<string, AVCodecID> = {\r\n  '2C806DE046DBCF11B4D100805F6CBBEA': AVCodecID.AV_CODEC_ID_AC3,\r\n  'BFAA23E958CB7144A119FFFA01E4CE62': AVCodecID.AV_CODEC_ID_ATRAC3P,\r\n  'D242E147BA368D4D88FC61654F8C836C': AVCodecID.AV_CODEC_ID_ATRAC9,\r\n  'AF87FBA7022DFB42A4D405CD93843BDD': AVCodecID.AV_CODEC_ID_EAC3,\r\n  '2B806DE046DBCF11B4D100805F6CBBEA': AVCodecID.AV_CODEC_ID_MP2,\r\n  '82EC1F6ACADB1945BDE756D3B3EF981D': AVCodecID.AV_CODEC_ID_ADPCM_AGM,\r\n  '3AC1FA38811D4361A40DCE53CA607CD1': AVCodecID.AV_CODEC_ID_DFPWM\r\n}\r\n\r\nexport const RiffInfo: Record<string, string> = {\r\n  'IART': AVStreamMetadataKey.ARTIST,\r\n  'ICMT': AVStreamMetadataKey.COMMENT,\r\n  'ICOP': AVStreamMetadataKey.COPYRIGHT,\r\n  'ICRD': AVStreamMetadataKey.DATE,\r\n  'IGNR': AVStreamMetadataKey.GENRE,\r\n  'ILNG': AVStreamMetadataKey.LANGUAGE,\r\n  'INAM': AVStreamMetadataKey.LANGUAGE,\r\n  'IPRD': AVStreamMetadataKey.ALBUM,\r\n  'IPRT': AVStreamMetadataKey.TRACK,\r\n  'ITRK': AVStreamMetadataKey.TRACK,\r\n  'ISFT': AVStreamMetadataKey.ENCODER,\r\n  'ISMP': AVStreamMetadataKey.TIME_CODE,\r\n  'ITCH': AVStreamMetadataKey.VENDOR\r\n}\r\n","/*\r\n * libmedia string tag to uint32 in litten end\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as logger from 'common/util/logger'\r\n\r\nexport default function mktagle(tag: string): number {\r\n  if (tag.length !== 4) {\r\n    logger.warn(`tag length is not 4, tag: ${tag}`)\r\n  }\r\n\r\n  let value = 0\r\n  for (let i = 3; i >= 0; i--) {\r\n    value = (value << 8) | tag.charCodeAt(i)\r\n  }\r\n\r\n  return value\r\n}\r\n","/*\r\n * libmedia pcm util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVCodecID } from '../codec'\r\n\r\nexport function getPcmCodecId(bps: int32, flt: boolean, be: boolean, flags: int32) {\r\n  if (bps <= 0 || bps > 64) {\r\n    return AVCodecID.AV_CODEC_ID_NONE\r\n  }\r\n\r\n  if (flt) {\r\n    switch (bps) {\r\n      case 32:\r\n        return be ? AVCodecID.AV_CODEC_ID_PCM_F32BE : AVCodecID.AV_CODEC_ID_PCM_F32LE\r\n      case 64:\r\n        return be ? AVCodecID.AV_CODEC_ID_PCM_F64BE : AVCodecID.AV_CODEC_ID_PCM_F64LE\r\n      default:\r\n        return AVCodecID.AV_CODEC_ID_NONE\r\n    }\r\n  }\r\n  else {\r\n    bps += 7\r\n    bps >>>= 3\r\n\r\n    if (flags & (1 << (bps - 1))) {\r\n      switch (bps) {\r\n        case 1:\r\n          return AVCodecID.AV_CODEC_ID_PCM_S8\r\n        case 2:\r\n          return be ? AVCodecID.AV_CODEC_ID_PCM_S16BE : AVCodecID.AV_CODEC_ID_PCM_S16LE\r\n        case 3:\r\n          return be ? AVCodecID.AV_CODEC_ID_PCM_S24BE : AVCodecID.AV_CODEC_ID_PCM_S24LE\r\n        case 4:\r\n          return be ? AVCodecID.AV_CODEC_ID_PCM_S32BE : AVCodecID.AV_CODEC_ID_PCM_S32LE\r\n        case 8:\r\n          return be ? AVCodecID.AV_CODEC_ID_PCM_S64BE : AVCodecID.AV_CODEC_ID_PCM_S64LE\r\n        default:\r\n          return AVCodecID.AV_CODEC_ID_NONE\r\n      }\r\n    }\r\n    else {\r\n      switch (bps) {\r\n        case 1:\r\n          return AVCodecID.AV_CODEC_ID_PCM_U8\r\n        case 2:\r\n          return be ? AVCodecID.AV_CODEC_ID_PCM_U16BE : AVCodecID.AV_CODEC_ID_PCM_U16LE\r\n        case 3:\r\n          return be ? AVCodecID.AV_CODEC_ID_PCM_U24BE : AVCodecID.AV_CODEC_ID_PCM_U24LE\r\n        case 4:\r\n          return be ? AVCodecID.AV_CODEC_ID_PCM_U32BE : AVCodecID.AV_CODEC_ID_PCM_U32LE\r\n        default:\r\n          return AVCodecID.AV_CODEC_ID_NONE\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function getExactBitsPerSample(codecId: AVCodecID) {\r\n  switch (codecId) {\r\n    case AVCodecID.AV_CODEC_ID_8SVX_EXP:\r\n    case AVCodecID.AV_CODEC_ID_8SVX_FIB:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_ARGO:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_CT:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_IMA_ALP:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_IMA_AMV:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_IMA_APC:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_IMA_APM:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_IMA_EA_SEAD:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_IMA_OKI:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_IMA_WS:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_IMA_SSI:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_G722:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_YAMAHA:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_AICA:\r\n      return 4\r\n    case AVCodecID.AV_CODEC_ID_DSD_LSBF:\r\n    case AVCodecID.AV_CODEC_ID_DSD_MSBF:\r\n    case AVCodecID.AV_CODEC_ID_DSD_LSBF_PLANAR:\r\n    case AVCodecID.AV_CODEC_ID_DSD_MSBF_PLANAR:\r\n    case AVCodecID.AV_CODEC_ID_PCM_ALAW:\r\n    case AVCodecID.AV_CODEC_ID_PCM_MULAW:\r\n    case AVCodecID.AV_CODEC_ID_PCM_VIDC:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S8:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S8_PLANAR:\r\n    case AVCodecID.AV_CODEC_ID_PCM_SGA:\r\n    case AVCodecID.AV_CODEC_ID_PCM_U8:\r\n    case AVCodecID.AV_CODEC_ID_SDX2_DPCM:\r\n    case AVCodecID.AV_CODEC_ID_DERF_DPCM:\r\n      return 8\r\n    case AVCodecID.AV_CODEC_ID_PCM_S16BE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S16BE_PLANAR:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S16LE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S16LE_PLANAR:\r\n    case AVCodecID.AV_CODEC_ID_PCM_U16BE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_U16LE:\r\n      return 16\r\n    case AVCodecID.AV_CODEC_ID_PCM_S24DAUD:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S24BE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S24LE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S24LE_PLANAR:\r\n    case AVCodecID.AV_CODEC_ID_PCM_U24BE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_U24LE:\r\n      return 24\r\n    case AVCodecID.AV_CODEC_ID_PCM_S32BE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S32LE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S32LE_PLANAR:\r\n    case AVCodecID.AV_CODEC_ID_PCM_U32BE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_U32LE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_F32BE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_F32LE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_F24LE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_F16LE:\r\n      return 32\r\n    case AVCodecID.AV_CODEC_ID_PCM_F64BE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_F64LE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S64BE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S64LE:\r\n      return 64\r\n    default:\r\n      return 0\r\n  }\r\n}\r\n\r\nexport function getBitsPerSample(codecId: AVCodecID) {\r\n  switch (codecId) {\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_SBPRO_2:\r\n      return 2\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_SBPRO_3:\r\n      return 3\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_SBPRO_4:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_IMA_WAV:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_IMA_QT:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_SWF:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_MS:\r\n      return 4\r\n    default:\r\n      return getExactBitsPerSample(codecId)\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}