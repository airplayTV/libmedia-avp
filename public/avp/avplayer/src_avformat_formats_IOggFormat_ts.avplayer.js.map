{"version":3,"file":"src_avformat_formats_IOggFormat_ts.avplayer.js","mappings":"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","sources":["webpack://AVPlayer/./src/avformat/formats/IFormat.ts","webpack://AVPlayer/./src/avformat/formats/IOggFormat.ts","webpack://AVPlayer/./src/avformat/formats/ogg/OggPage.ts","webpack://AVPlayer/./src/avformat/formats/ogg/opus.ts","webpack://AVPlayer/./src/avformat/formats/ogg/vorbis.ts","webpack://AVPlayer/./src/avformat/function/getBytesByDuration.ts","webpack://AVPlayer/./src/avformat/function/seekInBytes.ts","webpack://AVPlayer/./src/common/io/IOReaderSync.ts","webpack://AVPlayer/./src/common/io/IOWriterSync.ts"],"sourcesContent":["/*\r\n * libmedia abstract format decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport { AVFormat } from 'avutil/avformat'\r\n\r\nexport default abstract class IFormat {\r\n\r\n  public type: AVFormat = AVFormat.UNKNOWN\r\n\r\n  public onStreamAdd: (stream: Stream) => void\r\n\r\n  public abstract init(formatContext: AVIFormatContext): void\r\n\r\n  public async destroy(formatContext: AVIFormatContext): Promise<void> {}\r\n\r\n  public abstract getAnalyzeStreamsCount(): number\r\n  public abstract readHeader(formatContext: AVIFormatContext): Promise<number>\r\n  public abstract readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number>\r\n\r\n  /**\r\n   * seek\r\n   * \r\n   * @param context \r\n   * @param stream \r\n   * @param timestamp 毫秒时间戳\r\n   * @param flags \r\n   * \r\n   * @returns 返回 seek 之前的下一个 avpacket pos（若不知道返回 0n 方便之后可以再 seek 回来）返回负数表示 seek 失败\r\n   */\r\n  public abstract seek(\r\n    formatContext: AVIFormatContext,\r\n    stream: Stream,\r\n    timestamp: int64,\r\n    flags: int32\r\n  ): Promise<int64>\r\n}\r\n","/*\r\n * libmedia oggs decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVStream from 'avutil/AVStream'\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport { OggPage, OggsCommentPage, PagePayload } from './ogg/OggPage'\r\nimport { AVCodecID, AVMediaType } from 'avutil/codec'\r\nimport * as logger from 'common/util/logger'\r\nimport { OpusOggsIdPage, OpusOggsCommentPage } from './ogg/opus'\r\nimport { VorbisOggsIdPage, VorbisOggsCommentPage, parseVorbisComment } from './ogg/vorbis'\r\nimport * as errorType from 'avutil/error'\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\nimport IFormat from './IFormat'\r\nimport { AVFormat, AVSeekFlags } from 'avutil/avformat'\r\nimport { mapUint8Array, memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport { addAVPacketData } from 'avutil/util/avpacket'\r\nimport { IOError } from 'common/io/error'\r\nimport IOReaderSync from 'common/io/IOReaderSync'\r\nimport IOWriterSync from 'common/io/IOWriterSync'\r\nimport { AV_MILLI_TIME_BASE_Q, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport seekInBytes from '../function/seekInBytes'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport * as array from 'common/util/array'\r\nimport SafeUint8Array from 'cheap/std/buffer/SafeUint8Array'\r\nimport * as bigint from 'common/util/bigint'\r\nimport { AVStreamMetadataKey } from 'avutil/AVStream'\r\n\r\ninterface IOggFormatPrivateData {\r\n  serialNumber: number\r\n}\r\n\r\nexport default class IOggFormat extends IFormat {\r\n\r\n  public type: AVFormat = AVFormat.OGG\r\n\r\n  public headerPagesPayload: PagePayload[]\r\n\r\n  private page: OggPage\r\n\r\n  private curSegIndex: number\r\n  private curSegStart: number\r\n\r\n  private segCount: number\r\n  private segIndex: number\r\n\r\n  private currentPts: int64\r\n  private firstPos: int64\r\n\r\n  private firstGranulePosition: int64\r\n  private paddingPayload: Uint8Array\r\n\r\n  constructor() {\r\n    super()\r\n    this.page = new OggPage()\r\n    this.headerPagesPayload = []\r\n  }\r\n\r\n  public init(formatContext: AVIFormatContext): void {\r\n\r\n    if (formatContext.ioReader) {\r\n      formatContext.ioReader.setEndian(false)\r\n    }\r\n    if (formatContext.ioReader) {\r\n      formatContext.ioReader.setEndian(false)\r\n    }\r\n\r\n    this.curSegIndex = -1\r\n    this.curSegStart = 0\r\n    this.currentPts = 0n\r\n    this.segCount = 0\r\n    this.segIndex = 0\r\n\r\n    this.firstGranulePosition = 0n\r\n  }\r\n\r\n  private async estimateTotalBlock(formatContext: AVIFormatContext) {\r\n    let duration = 0n\r\n    const now = formatContext.ioReader.getPos()\r\n\r\n    const pts = this.currentPts\r\n\r\n    const fileSize = await formatContext.ioReader.fileSize()\r\n    await formatContext.ioReader.seek(bigint.max(fileSize - 195072n, 0n))\r\n    await this.syncPage(formatContext)\r\n\r\n    while (true) {\r\n      try {\r\n        this.page.reset()\r\n        await this.page.read(formatContext.ioReader)\r\n        duration = this.page.granulePosition\r\n      }\r\n      catch (error) {\r\n        break\r\n      }\r\n    }\r\n\r\n    await formatContext.ioReader.seek(now)\r\n\r\n    this.currentPts = pts\r\n\r\n    return duration\r\n  }\r\n\r\n  private async getNextSegment(formatContext: AVIFormatContext) {\r\n    if (this.curSegIndex < 0) {\r\n      if (this.page.granulePosition > 0n) {\r\n        this.currentPts = this.page.granulePosition\r\n      }\r\n      this.page.reset()\r\n      await this.page.read(formatContext.ioReader)\r\n      this.curSegIndex = 0\r\n      this.curSegStart = 0\r\n      this.segIndex = -1\r\n\r\n      this.segCount = 0\r\n      for (let i = 0; i < this.page.segmentTable.length; i++) {\r\n        if (this.page.segmentTable[i] !== 255) {\r\n          this.segCount++\r\n        }\r\n      }\r\n      // 全是 0xff 的情况\r\n      if (!this.segCount) {\r\n        this.segCount = 1\r\n      }\r\n    }\r\n\r\n    let len = 0\r\n    while (this.curSegIndex < this.page.segmentTable.length) {\r\n      const next = this.page.segmentTable[this.curSegIndex++]\r\n      len += next\r\n      if (next !== 255) {\r\n        break\r\n      }\r\n    }\r\n    const start = this.curSegStart\r\n    this.curSegStart += len\r\n    this.segIndex++\r\n    if (this.curSegIndex === this.page.segmentTable.length) {\r\n      this.curSegIndex = -1\r\n    }\r\n    return this.page.payload.subarray(start, start + len)\r\n  }\r\n\r\n  private addComment(comments: OggsCommentPage, stream: AVStream) {\r\n    if (comments.vendorString) {\r\n      stream.metadata[AVStreamMetadataKey.VENDOR] = comments.vendorString\r\n    }\r\n    parseVorbisComment(comments.comments.list, stream.metadata)\r\n  }\r\n\r\n  private async createStream(formatContext: AVIFormatContext, payload: Uint8Array) {\r\n\r\n    if (payload.length < 8) {\r\n      return 0\r\n    }\r\n\r\n    let ioReader = new IOReaderSync(payload.length, false)\r\n    ioReader.appendBuffer(payload)\r\n\r\n    const signature = ioReader.peekString(8)\r\n\r\n    if (signature === 'OpusHead') {\r\n      const idPage = new OpusOggsIdPage()\r\n      idPage.read(ioReader)\r\n\r\n      const stream = formatContext.createStream()\r\n      stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_AUDIO\r\n      stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_OPUS\r\n\r\n      stream.codecpar.sampleRate = idPage.sampleRate\r\n      stream.codecpar.chLayout.nbChannels = idPage.channels\r\n      stream.timeBase.den = stream.codecpar.sampleRate\r\n      stream.timeBase.num = 1\r\n      stream.codecpar.extradata = avMalloc(payload.length)\r\n      stream.codecpar.extradataSize = payload.length\r\n      stream.codecpar.initialPadding = idPage.preSkip\r\n      memcpyFromUint8Array(stream.codecpar.extradata, payload.length, payload)\r\n\r\n      const commentPage = new OpusOggsCommentPage()\r\n\r\n      payload = await this.getNextSegment(formatContext)\r\n\r\n      ioReader = new IOReaderSync(payload.length, false)\r\n      ioReader.appendBuffer(payload)\r\n      commentPage.read(ioReader)\r\n\r\n      this.headerPagesPayload = [\r\n        idPage,\r\n        commentPage\r\n      ]\r\n\r\n      stream.privData = {\r\n        serialNumber: this.page.serialNumber\r\n      }\r\n      this.addComment(commentPage, stream)\r\n\r\n      stream.duration = await this.estimateTotalBlock(formatContext)\r\n    }\r\n    else if (signature.slice(1, 7) === 'vorbis') {\r\n\r\n      const buffers: Uint8Array[] = [payload]\r\n\r\n      const idPage = new VorbisOggsIdPage()\r\n      idPage.read(ioReader)\r\n\r\n      const commentPage = new VorbisOggsCommentPage()\r\n\r\n      payload = await this.getNextSegment(formatContext)\r\n\r\n      ioReader = new IOReaderSync(payload.length, false)\r\n      ioReader.appendBuffer(payload)\r\n      commentPage.read(ioReader)\r\n\r\n      buffers.push(payload)\r\n\r\n      this.headerPagesPayload = [\r\n        idPage,\r\n        commentPage\r\n      ]\r\n\r\n      const stream = formatContext.createStream()\r\n      stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_AUDIO\r\n      stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_VORBIS\r\n\r\n      stream.codecpar.sampleRate = idPage.sampleRate\r\n      stream.codecpar.chLayout.nbChannels = idPage.channels\r\n      stream.timeBase.den = stream.codecpar.sampleRate\r\n      stream.timeBase.num = 1\r\n      stream.privData = {\r\n        serialNumber: this.page.serialNumber\r\n      }\r\n\r\n      this.addComment(commentPage, stream)\r\n\r\n      // setup header\r\n      buffers.push(await this.getNextSegment(formatContext))\r\n\r\n      const extradataSize = buffers.reduce((pre, buffer) => {\r\n        return pre + 2 + buffer.length\r\n      }, 0)\r\n\r\n      const data: pointer<uint8> = avMalloc(extradataSize)\r\n\r\n      const ioWriter = new IOWriterSync(extradataSize, true, new SafeUint8Array(data, extradataSize))\r\n      buffers.forEach((buffer) => {\r\n        ioWriter.writeUint16(buffer.length)\r\n        ioWriter.writeBuffer(buffer)\r\n      })\r\n\r\n      stream.codecpar.extradata = data\r\n      stream.codecpar.extradataSize = extradataSize\r\n\r\n      stream.duration = await this.estimateTotalBlock(formatContext)\r\n    }\r\n    else if (signature.slice(1, 5) === 'FLAC') {\r\n\r\n      ioReader.setEndian(true)\r\n\r\n      // 0x7f\r\n      ioReader.skip(1)\r\n      // FLAC\r\n      ioReader.skip(4)\r\n      // major version\r\n      ioReader.skip(1)\r\n      // minor version\r\n      ioReader.skip(1)\r\n      // headers packets without this one\r\n      ioReader.readUint16()\r\n      // fLaC\r\n      ioReader.skip(4)\r\n\r\n      const type = ioReader.readUint8()\r\n      const len = ioReader.readUint24()\r\n\r\n      if (type === 0) {\r\n        const stream = formatContext.createStream()\r\n        stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_AUDIO\r\n        stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_FLAC\r\n\r\n        const data: pointer<uint8> = avMalloc(len)\r\n\r\n        ioReader.peekBuffer(len, mapUint8Array(data, len))\r\n\r\n        ioReader.skip(10)\r\n        const sampleRate = ioReader.readUint24()\r\n        stream.codecpar.sampleRate = (sampleRate >> 4)\r\n        stream.codecpar.chLayout.nbChannels = ((sampleRate & 0x0f) >>> 1) + 1\r\n        stream.timeBase.den = stream.codecpar.sampleRate\r\n        stream.timeBase.num = 1\r\n        stream.privData = {\r\n          serialNumber: this.page.serialNumber\r\n        }\r\n\r\n        stream.codecpar.extradata = data\r\n        stream.codecpar.extradataSize = len\r\n\r\n        const commentPage = new OggsCommentPage()\r\n\r\n        payload = await this.getNextSegment(formatContext)\r\n\r\n        ioReader = new IOReaderSync(payload.length - 4, false)\r\n        ioReader.appendBuffer(payload.subarray(4))\r\n        commentPage.read(ioReader)\r\n        stream.duration = await this.estimateTotalBlock(formatContext)\r\n\r\n        this.addComment(commentPage, stream)\r\n\r\n        this.headerPagesPayload = [\r\n          commentPage\r\n        ]\r\n      }\r\n      else {\r\n        return errorType.DATA_INVALID\r\n      }\r\n    }\r\n    else if (signature.slice(0, 5) === 'Speex') {\r\n      const stream = formatContext.createStream()\r\n      stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_AUDIO\r\n      stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_SPEEX\r\n\r\n      const data: pointer<uint8> = avMalloc(payload.length)\r\n      memcpyFromUint8Array(data, payload.length, payload)\r\n      stream.codecpar.extradata = data\r\n      stream.codecpar.extradataSize = payload.length\r\n\r\n      ioReader.seek(36n)\r\n      stream.codecpar.sampleRate = ioReader.readUint32()\r\n      ioReader.seek(48n)\r\n      stream.codecpar.chLayout.nbChannels = ioReader.readUint32()\r\n      stream.timeBase.den = stream.codecpar.sampleRate\r\n      stream.timeBase.num = 1\r\n      stream.privData = {\r\n        serialNumber: this.page.serialNumber\r\n      }\r\n\r\n      const commentPage = new OggsCommentPage()\r\n\r\n      payload = await this.getNextSegment(formatContext)\r\n\r\n      ioReader = new IOReaderSync(payload.length, false)\r\n      ioReader.appendBuffer(payload)\r\n      commentPage.read(ioReader)\r\n      stream.duration = await this.estimateTotalBlock(formatContext)\r\n\r\n      this.addComment(commentPage, stream)\r\n\r\n      this.headerPagesPayload = [\r\n        commentPage\r\n      ]\r\n    }\r\n    else {\r\n      return 0\r\n    }\r\n    return 1\r\n  }\r\n\r\n  public async readHeader(formatContext: AVIFormatContext): Promise<number> {\r\n    try {\r\n\r\n      let signature = await formatContext.ioReader.peekString(4)\r\n      if (signature !== 'OggS') {\r\n        logger.error('the file format is not oggs')\r\n        return errorType.DATA_INVALID\r\n      }\r\n\r\n      while (true) {\r\n        let payload = this.paddingPayload || await this.getNextSegment(formatContext)\r\n        if (this.paddingPayload) {\r\n          this.paddingPayload = null\r\n        }\r\n        const ret = await this.createStream(formatContext, payload)\r\n        if (ret < 0) {\r\n          return ret\r\n        }\r\n        if (!ret) {\r\n          this.paddingPayload = payload\r\n          break\r\n        }\r\n      }\r\n      this.firstPos = this.paddingPayload ? this.page.pos : formatContext.ioReader.getPos()\r\n      return 0\r\n    }\r\n    catch (error) {\r\n      logger.error(error.message)\r\n      return formatContext.ioReader.error\r\n    }\r\n  }\r\n\r\n  public async readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number> {\r\n\r\n    avpacket.pos = formatContext.ioReader.getPos()\r\n\r\n    try {\r\n      const payload = this.paddingPayload || await this.getNextSegment(formatContext)\r\n      if (this.paddingPayload) {\r\n        this.paddingPayload = null\r\n      }\r\n\r\n      let pts = this.currentPts + ((this.page.granulePosition - this.currentPts) / static_cast<int64>(this.segCount) * static_cast<int64>(this.segIndex))\r\n\r\n      avpacket.dts = avpacket.pts = pts\r\n\r\n      if (!this.firstGranulePosition) {\r\n        this.firstGranulePosition = this.page.granulePosition\r\n      }\r\n\r\n      const stream: AVStream = formatContext.streams.find((stream) => {\r\n        return stream.privData && (stream.privData as IOggFormatPrivateData).serialNumber === this.page.serialNumber\r\n      })\r\n\r\n      if (stream) {\r\n        avpacket.streamIndex = stream.index\r\n        avpacket.timeBase.den = stream.timeBase.den\r\n        avpacket.timeBase.num = stream.timeBase.num\r\n        if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_AUDIO) {\r\n          avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n        }\r\n      }\r\n      else {\r\n        await this.createStream(formatContext, payload)\r\n        return this.readAVPacket(formatContext, avpacket)\r\n      }\r\n\r\n      const buffers: Uint8Array[] = [payload]\r\n\r\n      while (this.curSegIndex < 0) {\r\n        try {\r\n          let next = await formatContext.ioReader.peekBuffer(6)\r\n          // 下一页是同一个 packet\r\n          if (next[5] & 0x01) {\r\n            buffers.push(await this.getNextSegment(formatContext))\r\n          }\r\n          else {\r\n            break\r\n          }\r\n        }\r\n        catch (error) {\r\n          break\r\n        }\r\n      }\r\n\r\n      const buffer = concatTypeArray(Uint8Array, buffers)\r\n\r\n      const len = buffer.length\r\n      const data: pointer<uint8> = avMalloc(len)\r\n      memcpyFromUint8Array(data, len, buffer)\r\n      addAVPacketData(avpacket, data, len)\r\n\r\n      return 0\r\n    }\r\n    catch (error) {\r\n      if (formatContext.ioReader.error !== IOError.END\r\n        && formatContext.ioReader.error !== IOError.ABORT\r\n      ) {\r\n        logger.error(`read packet error, ${error}`)\r\n        return errorType.DATA_INVALID\r\n      }\r\n      return formatContext.ioReader.error\r\n    }\r\n  }\r\n\r\n  private async syncPage(formatContext: AVIFormatContext) {\r\n    let pos: int64 = NOPTS_VALUE_BIGINT\r\n\r\n    const analyzeCount = 3\r\n    let lastGranulePosition = 0n\r\n\r\n    while (true) {\r\n      try {\r\n        const word = await formatContext.ioReader.peekString(4)\r\n        if (word === 'OggS') {\r\n          pos = formatContext.ioReader.getPos()\r\n\r\n          this.page.reset()\r\n          await this.page.read(formatContext.ioReader)\r\n          lastGranulePosition = this.page.granulePosition\r\n          let count = 0\r\n\r\n          while (true) {\r\n            if (count === analyzeCount) {\r\n              break\r\n            }\r\n            const word = await formatContext.ioReader.peekString(4)\r\n            if (word === 'OggS') {\r\n              count++\r\n              this.page.reset()\r\n              await this.page.read(formatContext.ioReader)\r\n            }\r\n            else {\r\n              break\r\n            }\r\n          }\r\n          if (count === analyzeCount) {\r\n            break\r\n          }\r\n        }\r\n        await formatContext.ioReader.skip(1)\r\n      }\r\n      catch (error) {\r\n        break\r\n      }\r\n    }\r\n\r\n    if (pos !== NOPTS_VALUE_BIGINT) {\r\n      await formatContext.ioReader.seek(pos)\r\n      while (true) {\r\n        let next = await formatContext.ioReader.peekBuffer(6)\r\n        // 找 packet 的开始 page\r\n        if (!(next[5] & 0x01)) {\r\n          break\r\n        }\r\n        this.page.reset()\r\n        await this.page.read(formatContext.ioReader)\r\n        lastGranulePosition = this.page.granulePosition\r\n      }\r\n      this.currentPts = lastGranulePosition - this.firstGranulePosition\r\n      this.curSegIndex = -1\r\n    }\r\n  }\r\n\r\n  public async seek(formatContext: AVIFormatContext, stream: AVStream, timestamp: int64, flags: int32): Promise<int64> {\r\n    const now = formatContext.ioReader.getPos()\r\n    if (flags & AVSeekFlags.BYTE) {\r\n      const size = await formatContext.ioReader.fileSize()\r\n\r\n      if (size <= 0n) {\r\n        return static_cast<int64>(errorType.FORMAT_NOT_SUPPORT)\r\n      }\r\n\r\n      if (timestamp < 0n) {\r\n        timestamp = 0n\r\n      }\r\n      else if (timestamp > size) {\r\n        timestamp = size\r\n      }\r\n      await formatContext.ioReader.seek(timestamp)\r\n\r\n      if (!(flags & AVSeekFlags.ANY)) {\r\n        await this.syncPage(formatContext)\r\n      }\r\n      return now\r\n    }\r\n    else {\r\n      const pointPts = avRescaleQ(timestamp, stream.timeBase, AV_MILLI_TIME_BASE_Q)\r\n      // 头十秒直接回到开始位置\r\n      if (pointPts < 10000n) {\r\n        logger.debug(`seek pts is earlier then 10s, seek to first packet pos(${this.firstPos}) directly`)\r\n        await formatContext.ioReader.seek(this.firstPos)\r\n        this.currentPts = 0n\r\n        return now\r\n      }\r\n\r\n      return seekInBytes(\r\n        formatContext,\r\n        stream,\r\n        timestamp,\r\n        this.firstPos,\r\n        this.readAVPacket.bind(this),\r\n        this.syncPage.bind(this)\r\n      )\r\n    }\r\n  }\r\n\r\n  public getAnalyzeStreamsCount(): number {\r\n    return 1\r\n  }\r\n}\r\n","/*\r\n * libmedia oggs page parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport IOReaderSync from 'common/io/IOReaderSync'\r\nimport { NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport * as text from 'common/util/text'\r\n\r\nexport interface PagePayload {\r\n  signature: string\r\n  read(ioReader: IOReaderSync): void\r\n  write(ioWriter: IOWriter): void\r\n  setCodec(codecpar: AVCodecParameters): void\r\n  streamIndex: number\r\n}\r\n\r\nclass UserComment {\r\n\r\n  public list: string[]\r\n\r\n  constructor() {\r\n    this.list = []\r\n  }\r\n\r\n  public read(ioReader: IOReaderSync, count: number) {\r\n    for (let i = 0; i < count; i++) {\r\n      const length = ioReader.readUint32()\r\n      this.list.push(ioReader.readString(length))\r\n    }\r\n  }\r\n\r\n  public write(ioWriter: IOWriter) {\r\n    for (let i = 0; i < this.list.length; i++) {\r\n      const buffer = text.encode(this.list[i])\r\n      ioWriter.writeUint32(buffer.length)\r\n      ioWriter.writeBuffer(buffer)\r\n    }\r\n  }\r\n\r\n  public addComment(comment: string) {\r\n    this.list.push(comment)\r\n  }\r\n}\r\n\r\nexport class OggPage {\r\n  /**\r\n   * 4 bytes 页标识， OggS ASCII 字符\r\n   */\r\n  public capturePattern: string\r\n\r\n  /**\r\n   * 1 bytes 版本 id, 目前为 0\r\n   */\r\n  public streamStructureVersion: number\r\n\r\n  /**\r\n   * 1 bytes 类型标识， 表示该页为逻辑流的第一页\r\n   * \r\n   * - 0x01：本页媒体编码数据与前一页属于同一个逻辑流的同一个 packet，若此位没有设，表示本页是以一个新的 packet 开始的；\r\n   * - 0x02：表示该页为逻辑流的第一页，bos 标识，如果此位未设置，那表示不是第一页；\r\n   * - 0x04：表示该页为逻辑流的最后一页，eos 标识，如果此位未设置，那表示本页不是最后一页；\r\n   */\r\n  public headerTypeFlag: number\r\n\r\n  /**\r\n   * 8 bytes 媒体编码相关的参数信息\r\n   * \r\n   * 对于音频流来说，它存储着到本页为止逻辑流在 PCM 输出中采样码的数目，可以由它来算得时间戳\r\n   * 对于视频流来说，它存储着到本页为止视频帧编码的数目\r\n   * 若此值为 -1，那表示截止到本页，逻辑流的 packet 未结束\r\n   */\r\n  public granulePosition: bigint\r\n\r\n  /**\r\n   * 4 bytes 当前页中的流的 id，它是区分本页所属逻辑流与其他逻辑流的序号，我们可以通过这个值来划分流\r\n   */\r\n  public serialNumber: number\r\n\r\n  /**\r\n   * 4 bytes 本页在逻辑流的序号\r\n   */\r\n  public pageSequenceNumber: number\r\n\r\n  /**\r\n   * 4 bytes 循环冗余效验码效验， 用来效验每页的有效性\r\n   */\r\n  public crcCheckSum: number\r\n\r\n  /**\r\n   * 1 bytes 给定本页在 segment_table 域中出现的 segment 个数\r\n   */\r\n  public numberPageSegments: number\r\n\r\n  /**\r\n   * segment 长度表\r\n   * \r\n   * 表示着每个 segment 的长度，取值范围是 0~255\r\n   * 由 segment（1 个 segment 就是 1 个字节）可以得到 packet 的值，每个 packet 的大小是以最后一个不等于 255 的 segment 结束的\r\n   */\r\n  public segmentTable: number[]\r\n\r\n  public payload: Uint8Array\r\n\r\n  public pos: int64\r\n\r\n  constructor() {\r\n    this.reset()\r\n  }\r\n\r\n  public reset() {\r\n    this.capturePattern = 'OggS'\r\n    this.streamStructureVersion = 0\r\n    this.headerTypeFlag = 0\r\n    this.granulePosition = NOPTS_VALUE_BIGINT\r\n    this.serialNumber = 0\r\n    this.pageSequenceNumber = 0\r\n    this.crcCheckSum = 0\r\n    this.numberPageSegments = 0\r\n    this.segmentTable = []\r\n    this.pos = 0n\r\n  }\r\n\r\n  public async read(ioReader: IOReader) {\r\n    this.pos = ioReader.getPos()\r\n    await this.readPageHeader(ioReader)\r\n\r\n    const length = this.segmentTable.reduce((prev, len) => {\r\n      return prev + len\r\n    }, 0)\r\n\r\n    if (length) {\r\n      this.payload = await ioReader.readBuffer(length)\r\n    }\r\n  }\r\n\r\n  public async readPageHeader(ioReader: IOReader) {\r\n    this.capturePattern = await ioReader.readString(4)\r\n    this.streamStructureVersion = await ioReader.readUint8()\r\n    this.headerTypeFlag = await ioReader.readUint8()\r\n    this.granulePosition = await ioReader.readUint64()\r\n    this.serialNumber = await ioReader.readUint32()\r\n    this.pageSequenceNumber = await ioReader.readUint32()\r\n    this.crcCheckSum = await ioReader.readUint32()\r\n    this.numberPageSegments = await ioReader.readUint8()\r\n\r\n    if (this.numberPageSegments) {\r\n      for (let i = 0; i < this.numberPageSegments; i++) {\r\n        const len = await ioReader.readUint8()\r\n        this.segmentTable.push(len)\r\n      }\r\n    }\r\n  }\r\n\r\n  public write(ioWriter: IOWriter) {\r\n    this.pos = ioWriter.getPos()\r\n    ioWriter.writeString(this.capturePattern)\r\n    ioWriter.writeUint8(this.streamStructureVersion)\r\n    ioWriter.writeUint8(this.headerTypeFlag)\r\n    ioWriter.writeUint64(this.granulePosition)\r\n    ioWriter.writeUint32(this.serialNumber)\r\n    ioWriter.writeUint32(this.pageSequenceNumber)\r\n    ioWriter.writeUint32(this.crcCheckSum)\r\n\r\n    if (this.payload) {\r\n      this.numberPageSegments = Math.floor(this.payload.length / 255) + 1\r\n      const last = this.payload.length % 255\r\n\r\n      ioWriter.writeUint8(this.numberPageSegments)\r\n\r\n      for (let i = 0; i < this.numberPageSegments - 1; i++) {\r\n        ioWriter.writeUint8(255)\r\n      }\r\n      ioWriter.writeUint8(last)\r\n      ioWriter.writeBuffer(this.payload)\r\n    }\r\n    else {\r\n      ioWriter.writeUint8(0)\r\n    }\r\n  }\r\n}\r\n\r\nexport class OggsCommentPage implements PagePayload {\r\n\r\n  public streamIndex: number\r\n\r\n  /**\r\n   * 8 bytes Magic Signature: OpusTags\r\n   */\r\n  public signature: string\r\n\r\n  /**\r\n   * 4 bytes unsigned\r\n   */\r\n  public vendorStringLength: number\r\n\r\n  /**\r\n   * 长度由 Vendor String Length 指定， utf-8 编码\r\n   */\r\n  public vendorString: string\r\n\r\n  /**\r\n   * 4 bytes unsigned, 该字段指示用户提供的注释数。它可能表示用户提供的评论为零，在这种情况下数据包中没有其他字段。\r\n   * 一定不要表示评论太多，以至于评论字符串长度将需要比其余的可用数据更多的数据数据包\r\n   */\r\n  public userCommentListLength: number\r\n\r\n  public comments: UserComment\r\n\r\n  constructor() {\r\n    this.vendorString = defined(VERSION)\r\n    this.vendorStringLength = this.vendorString.length\r\n    this.userCommentListLength = 0\r\n    this.comments = new UserComment()\r\n  }\r\n\r\n  public read(ioReader: IOReaderSync) {\r\n    this.vendorStringLength = ioReader.readUint32()\r\n    this.vendorString = ioReader.readString(this.vendorStringLength)\r\n    this.userCommentListLength = ioReader.readUint32()\r\n    if (this.userCommentListLength) {\r\n      this.comments.read(ioReader, this.userCommentListLength)\r\n    }\r\n  }\r\n\r\n  public write(ioWriter: IOWriter) {\r\n    const buffer = text.encode(this.vendorString)\r\n    ioWriter.writeUint32(buffer.length)\r\n    ioWriter.writeBuffer(buffer)\r\n\r\n    ioWriter.writeUint32(this.comments.list.length)\r\n    this.comments.write(ioWriter)\r\n  }\r\n\r\n  public addComment(comment: string) {\r\n    this.comments.addComment(comment)\r\n  }\r\n\r\n  public setCodec(codecpar: AVCodecParameters) {\r\n  }\r\n}\r\n","/*\r\n * libmedia oggs opus page parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\n/**\r\n * oggs opus IDPage 和 commentPage\r\n * \r\n * https://datatracker.ietf.org/doc/html/rfc7845\r\n */\r\n\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { OggsCommentPage, PagePayload } from './OggPage'\r\nimport IOReaderSync from 'common/io/IOReaderSync'\r\nimport * as text from 'common/util/text'\r\n\r\nclass ChannelMapping {\r\n\r\n  /**\r\n   * 1 bytes, unsigned ogg packet 里面编码了多少路 stream\r\n   * \r\n   */\r\n  public streamCount: number\r\n\r\n  /**\r\n   * 1 bytes, unsigned 标识有多少路流是双声声道，必须小于 streamCount\r\n   * opus 要支持超过 2 个声道是使用单声道流和双声道流组合而成\r\n   * 一个 opus 流只能是单声道或双声道\r\n   * \r\n   */\r\n  public coupledStreamCount: number\r\n\r\n  /**\r\n   * C bytes, C 为总输出声道数 coupledStreamCount + streamCount\r\n   */\r\n  public mapping: Uint8Array\r\n\r\n  constructor() {\r\n    this.streamCount = 1\r\n    this.coupledStreamCount = 0\r\n    this.mapping = new Uint8Array(1)\r\n  }\r\n\r\n  public read(ioReader: IOReaderSync) {\r\n    this.streamCount = ioReader.readUint8()\r\n    this.coupledStreamCount = ioReader.readUint8()\r\n    this.mapping = ioReader.readBuffer(this.streamCount + this.coupledStreamCount)\r\n  }\r\n\r\n  public write(ioWriter: IOWriter) {\r\n    ioWriter.writeUint8(this.streamCount)\r\n    ioWriter.writeUint8(this.coupledStreamCount)\r\n    ioWriter.writeBuffer(this.mapping)\r\n  }\r\n\r\n}\r\n\r\nexport class OpusOggsIdPage implements PagePayload {\r\n\r\n  public streamIndex: number\r\n\r\n  /**\r\n   * 8 bytes Magic Signature: OpusHead\r\n   */\r\n  public signature: string\r\n\r\n  /**\r\n   * 1 bytes unsigned, 对应值 0x01\r\n   */\r\n  public version: number\r\n\r\n  /**\r\n   * 1 bytes unsigned, 声道数， 它可能和编码声道数不一致， 它可能被修改成 packet-by-packet, 对应值 0x01\r\n   */\r\n  public channels: number\r\n\r\n  /**\r\n   * 2 bytes unsigned, 这是要从开始播放时的解码器输出， 从页面的颗粒位置减去以计算其 PCM 样本位置。\r\n   */\r\n  public preSkip: number\r\n\r\n  /**\r\n   * 4 bytes unsigned, 原始输入采样率\r\n   */\r\n  public sampleRate: number\r\n\r\n  /**\r\n   * 2 bytes signed, 这是解码时要应用的增益， 20 * log10 缩放解码器输出以实现所需的播放音量\r\n   */\r\n  public outputGain: number\r\n\r\n  /**\r\n   * 1 bytes unsigned, 指示输出渠道的顺序和语音含义。该八位位组的每个当前指定的值表示一个映射系列，它定义了一组允许的通道数，以及每个允许的通道数的通道名称的有序集合\r\n   */\r\n  public channelMappingFamily: number\r\n\r\n  /**\r\n   * 可选， 当 Channel Mapping Family 为 0 时被省略。\r\n   */\r\n  public channelMappingTable: ChannelMapping\r\n\r\n  constructor() {\r\n    this.signature = 'OpusHead'\r\n    this.version = 0x01\r\n    this.channels = 1\r\n    this.preSkip = 0\r\n    this.sampleRate = 48000\r\n    this.outputGain = 0\r\n    this.channelMappingFamily = 0\r\n    this.channelMappingTable = new ChannelMapping()\r\n  }\r\n\r\n  public read(ioReader: IOReaderSync) {\r\n    this.signature = ioReader.readString(8)\r\n    this.version = ioReader.readUint8()\r\n    this.channels = ioReader.readUint8()\r\n    this.preSkip = ioReader.readUint16()\r\n    this.sampleRate = ioReader.readUint32()\r\n    this.outputGain = ioReader.readInt16()\r\n    this.channelMappingFamily = ioReader.readUint8()\r\n\r\n    if (this.channelMappingFamily !== 0) {\r\n      this.channelMappingTable.read(ioReader)\r\n    }\r\n  }\r\n\r\n  public write(ioWriter: IOWriter) {\r\n    ioWriter.writeString(this.signature)\r\n    ioWriter.writeUint8(this.version)\r\n    ioWriter.writeUint8(this.channels)\r\n    ioWriter.writeUint16(this.preSkip)\r\n    ioWriter.writeUint32(this.sampleRate)\r\n    ioWriter.writeInt16(this.outputGain)\r\n    ioWriter.writeUint8(this.channelMappingFamily)\r\n    if (this.channelMappingFamily !== 0) {\r\n      this.channelMappingTable.write(ioWriter)\r\n    }\r\n  }\r\n\r\n  public setCodec(codecpar: AVCodecParameters) {\r\n    this.sampleRate = codecpar.sampleRate\r\n    this.channels = codecpar.chLayout.nbChannels\r\n    this.channelMappingFamily = codecpar.format\r\n  }\r\n\r\n}\r\n\r\nexport class OpusOggsCommentPage extends OggsCommentPage {\r\n\r\n  constructor() {\r\n    super()\r\n    this.signature = 'OpusTags'\r\n  }\r\n\r\n  public read(ioReader: IOReaderSync) {\r\n    this.signature = ioReader.readString(8)\r\n    super.read(ioReader)\r\n  }\r\n\r\n  public write(ioWriter: IOWriter) {\r\n    ioWriter.writeString(this.signature)\r\n    super.write(ioWriter)\r\n  }\r\n\r\n  public addComment(comment: string) {\r\n    this.comments.addComment(comment)\r\n  }\r\n\r\n  public setCodec(codecpar: AVCodecParameters) {\r\n  }\r\n}\r\n","/*\r\n * libmedia oggs vorbis page parser\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\n/**\r\n * oggs vorbis IDPage 和 commentPage\r\n * \r\n * https://datatracker.ietf.org/doc/html/rfc7845\r\n */\r\n\r\nimport IOWriter from 'common/io/IOWriterSync'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { OggsCommentPage, PagePayload } from './OggPage'\r\nimport IOReaderSync from 'common/io/IOReaderSync'\r\nimport { Data } from 'common/types/type'\r\nimport { AVStreamMetadataKey } from 'avutil/AVStream'\r\nimport * as object from 'common/util/object'\r\nimport isDef from 'common/function/isDef'\r\n\r\nconst CommentKeyMap = {\r\n  'album': AVStreamMetadataKey.ALBUM,\r\n  'artist': AVStreamMetadataKey.ARTIST,\r\n  'description': AVStreamMetadataKey.DESCRIPTION,\r\n  'encoder': AVStreamMetadataKey.ENCODER,\r\n  'title': AVStreamMetadataKey.TITLE,\r\n  'tracknumber': AVStreamMetadataKey.TRACK,\r\n  'date': AVStreamMetadataKey.DATE,\r\n  'genre': AVStreamMetadataKey.GENRE,\r\n  'comment': AVStreamMetadataKey.COMMENT,\r\n  'albumartist': AVStreamMetadataKey.ALBUM_ARTIST,\r\n  'composer': AVStreamMetadataKey.COMPOSER,\r\n  'performer': AVStreamMetadataKey.PERFORMER,\r\n  'discnumber': AVStreamMetadataKey.DISC,\r\n  'organization': AVStreamMetadataKey.VENDOR,\r\n  'copyright': AVStreamMetadataKey.COPYRIGHT,\r\n  'license': AVStreamMetadataKey.LICENSE,\r\n  'isrc': AVStreamMetadataKey.ISRC,\r\n  'lyrics': AVStreamMetadataKey.LYRICS,\r\n  'language': AVStreamMetadataKey.LANGUAGE,\r\n  'label': AVStreamMetadataKey.VENDOR,\r\n  'script': AVStreamMetadataKey.LYRICS,\r\n  'encoded_by': AVStreamMetadataKey.VENDOR\r\n}\r\n\r\nexport function parseVorbisComment(list: string[], metadata: Data) {\r\n  if (!list) {\r\n    return\r\n  }\r\n  list.forEach((value) => {\r\n    const l = value.split('=')\r\n    if (l.length === 2) {\r\n      const k = l[0].trim().toLowerCase()\r\n      const v = l[1].trim()\r\n      if (CommentKeyMap[k]) {\r\n        metadata[CommentKeyMap[k]] = v\r\n      }\r\n      else {\r\n        metadata[k.toLowerCase()] = v\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\nexport function addVorbisComment(metadata: Data) {\r\n  const list: string[] = []\r\n  object.each(CommentKeyMap, (value, key) => {\r\n    if (isDef(metadata[value])) {\r\n      list.push(`${key.toUpperCase()}=${metadata[value]}`)\r\n    }\r\n  })\r\n  return list\r\n}\r\n\r\nexport class VorbisOggsIdPage implements PagePayload {\r\n\r\n  public streamIndex: number\r\n\r\n  /**\r\n   * 8 bits packet_type \r\n   */\r\n  public packetType: number\r\n\r\n  /**\r\n   * 6 bytes Magic Signature: vorbis\r\n   */\r\n  public signature: string\r\n\r\n  /**\r\n   * 4 bytes unsigned, 对应值 0x01\r\n   */\r\n  public version: number\r\n\r\n  /**\r\n   * 1 bytes unsigned, 声道数\r\n   */\r\n  public channels: number\r\n\r\n  /**\r\n   * 4 bytes unsigned, 原始输入采样率\r\n   */\r\n  public sampleRate: number\r\n\r\n  /**\r\n   * 4 bytes \r\n   */\r\n  public bitrateMaximum: number\r\n\r\n  /**\r\n   * 4 bytes \r\n   */\r\n  public bitrateNominal: number\r\n\r\n  /**\r\n   * 4 bytes \r\n   */\r\n  public bitrateMinimum: number\r\n\r\n  /**\r\n   * 4 bits\r\n   */\r\n  public blocksize0: number\r\n\r\n  /**\r\n   * 4 bits\r\n   */\r\n  public blocksize1: number\r\n\r\n  /**\r\n   * 1 bit\r\n   */\r\n  public framingFlag: number\r\n\r\n  constructor(signature: string = 'vorbis') {\r\n    this.signature = signature\r\n    this.version = 0\r\n    this.channels = 1\r\n    this.sampleRate = 48000\r\n    this.bitrateMaximum = 0\r\n    this.bitrateNominal = 0\r\n    this.bitrateMinimum = 0\r\n    this.blocksize0 = 2048\r\n    this.blocksize1 = 256\r\n  }\r\n\r\n  public read(ioReader: IOReaderSync) {\r\n    this.packetType = ioReader.readUint8()\r\n    this.signature = ioReader.readString(6)\r\n    this.version = ioReader.readUint32()\r\n    this.channels = ioReader.readUint8()\r\n    this.sampleRate = ioReader.readInt32()\r\n    this.bitrateMaximum = ioReader.readInt32()\r\n    this.bitrateNominal = ioReader.readInt32()\r\n    this.bitrateMinimum = ioReader.readInt32()\r\n\r\n    const block = ioReader.readUint8() & 0xff\r\n\r\n    this.blocksize0 = Math.pow(2, block >>> 4)\r\n    this.blocksize1 = Math.pow(2, block & 0x0f)\r\n\r\n    this.framingFlag = ioReader.readUint8()\r\n  }\r\n\r\n  public write(ioWriter: IOWriter) {\r\n    ioWriter.writeUint8(0x01)\r\n    ioWriter.writeString(this.signature)\r\n    ioWriter.writeUint32(this.version)\r\n    ioWriter.writeUint8(this.channels)\r\n    ioWriter.writeInt32(this.sampleRate)\r\n    ioWriter.writeInt32(this.bitrateMaximum)\r\n    ioWriter.writeInt32(this.bitrateNominal)\r\n    ioWriter.writeInt32(this.bitrateMinimum)\r\n\r\n    ioWriter.writeUint8((Math.log2(this.blocksize0) << 4) | Math.log2(this.blocksize1))\r\n\r\n    ioWriter.writeUint8(0x01)\r\n  }\r\n\r\n  public setCodec(codecpar: AVCodecParameters) {\r\n    this.sampleRate = codecpar.sampleRate\r\n    this.channels = codecpar.chLayout.nbChannels\r\n  }\r\n}\r\n\r\nexport class VorbisOggsCommentPage extends OggsCommentPage {\r\n  /**\r\n   * 8 bits packet_type \r\n   */\r\n  public packetType: number\r\n\r\n  /**\r\n   * 1 bit\r\n   */\r\n  public framingFlag: number\r\n\r\n  constructor(signature: string = 'vorbis') {\r\n    super()\r\n    this.signature = signature\r\n    this.packetType = 0x01\r\n    this.framingFlag = 0x01\r\n  }\r\n\r\n  public read(ioReader: IOReaderSync) {\r\n    this.packetType = ioReader.readUint8()\r\n    this.signature = ioReader.readString(6)\r\n    super.read(ioReader)\r\n    if (this.signature === 'vorbis') {\r\n      this.framingFlag = ioReader.readUint8()\r\n    }\r\n  }\r\n\r\n  public write(ioWriter: IOWriter) {\r\n    ioWriter.writeUint8(this.packetType)\r\n    ioWriter.writeString(this.signature)\r\n    super.write(ioWriter)\r\n    if (this.signature === 'vorbis') {\r\n      ioWriter.writeUint8(this.framingFlag)\r\n    }\r\n  }\r\n\r\n  public addComment(comment: string) {\r\n    this.comments.addComment(comment)\r\n  }\r\n\r\n  public setCodec(codecpar: AVCodecParameters) {\r\n  }\r\n}\r\n","/*\r\n * libmedia get bytes by duration\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport AVStream from 'avutil/AVStream'\r\nimport * as array from 'common/util/array'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport { AV_MILLI_TIME_BASE_Q } from 'avutil/constant'\r\n\r\nexport function getBytesByDuration(streams: AVStream[], duration: int64, timeBase: Rational) {\r\n  let bytes = 0n\r\n  array.each(streams, (st) => {\r\n    bytes += st.codecpar.bitrate * avRescaleQ(duration, timeBase, AV_MILLI_TIME_BASE_Q) / 8000n\r\n  })\r\n  return bytes\r\n}\r\n","/*\r\n * libmedia seek in bytes with timestamp\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVStream from 'avutil/AVStream'\r\nimport { AV_MILLI_TIME_BASE_Q, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport { avRescaleQ, avRescaleQ2 } from 'avutil/util/rational'\r\nimport { getBytesByDuration } from './getBytesByDuration'\r\nimport { createAVPacket, destroyAVPacket, unrefAVPacket } from 'avutil/util/avpacket'\r\nimport * as errorType from 'avutil/error'\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport * as logger from 'common/util/logger'\r\nimport { IOFlags } from 'avutil/avformat'\r\nimport { IOError } from 'common/io/error'\r\n\r\nexport default async function seekInBytes(\r\n  context: AVIFormatContext,\r\n  stream: AVStream,\r\n  timestamp: int64,\r\n  firstPacketPos: int64,\r\n  readAVPacket: (context: AVIFormatContext, avpacket: pointer<AVPacket>) => Promise<int32>,\r\n  syncAVPacket: (context: AVIFormatContext) => Promise<void>\r\n) {\r\n\r\n  const now = context.ioReader.getPos()\r\n\r\n  const fileSize = await context.ioReader.fileSize()\r\n  let pos: int64 = NOPTS_VALUE_BIGINT\r\n  let duration = timestamp\r\n  if (stream.startTime !== NOPTS_VALUE_BIGINT) {\r\n    duration -= stream.startTime\r\n  }\r\n  else {\r\n    duration -= stream.firstDTS\r\n  }\r\n\r\n  const pointPts = avRescaleQ(timestamp, stream.timeBase, AV_MILLI_TIME_BASE_Q)\r\n\r\n  // 头十秒直接回到开始位置\r\n  if (pointPts < 10000n) {\r\n    logger.debug(`seek pts is earlier then 10s, seek to first packet pos(${firstPacketPos}) directly`)\r\n    await context.ioReader.seek(firstPacketPos)\r\n    return now\r\n  }\r\n\r\n  let bytes = getBytesByDuration(context.streams, duration, stream.timeBase)\r\n  // 最大到结尾往前 10 秒\r\n  const max = fileSize - getBytesByDuration(context.streams, 10000n, AV_MILLI_TIME_BASE_Q)\r\n  const length = getBytesByDuration(context.streams, 10000n, AV_MILLI_TIME_BASE_Q)\r\n  if (bytes > max) {\r\n    bytes = max\r\n  }\r\n  if (bytes < firstPacketPos) {\r\n    await context.ioReader.seek(firstPacketPos)\r\n    return now\r\n  }\r\n  const avpacket = createAVPacket()\r\n  let seekMax = fileSize\r\n  let seekMin = 0n\r\n\r\n  failed: while (true) {\r\n    if (seekMax - seekMin < length) {\r\n      bytes = seekMin\r\n    }\r\n    await context.ioReader.seek(bytes)\r\n    await syncAVPacket(context)\r\n    if (context.ioReader.flags & IOFlags.ABORT) {\r\n      break\r\n    }\r\n\r\n    let ret = await readAVPacket(context, avpacket)\r\n    let now = avpacket.pos\r\n\r\n    if (ret >= 0) {\r\n      const currentPts = avRescaleQ2(avpacket.pts, addressof(avpacket.timeBase), AV_MILLI_TIME_BASE_Q)\r\n      let diff = currentPts - pointPts\r\n\r\n      logger.debug(`try to seek to pos: ${bytes}, got packet pts: ${avpacket.pts}(${currentPts}ms), diff: ${diff}ms`)\r\n\r\n      // seek 时间戳的前面 10 秒内\r\n      if (diff <= 0n && -diff < 10000n || seekMax - seekMin < length) {\r\n        // 查找最近的关键帧\r\n        const keyPos: int64[] = [now]\r\n        while (diff <= 0) {\r\n          if (avpacket.streamIndex === stream.index && (avpacket.flags & AVPacketFlags.AV_PKT_FLAG_KEY)) {\r\n            keyPos.push(now)\r\n          }\r\n          unrefAVPacket(avpacket)\r\n          ret = await readAVPacket(context, avpacket)\r\n          if (ret < 0) {\r\n            if (ret === IOError.END) {\r\n              break\r\n            }\r\n            else if (ret === IOError.AGAIN) {\r\n              continue\r\n            }\r\n            // 失败了重新 seek 回原来的位置\r\n            else {\r\n              pos = NOPTS_VALUE_BIGINT\r\n              break failed\r\n            }\r\n          }\r\n          now = avpacket.pos\r\n          diff = avRescaleQ2(avpacket.pts, addressof(avpacket.timeBase), AV_MILLI_TIME_BASE_Q) - pointPts\r\n        }\r\n        pos = keyPos.pop()\r\n        break\r\n      }\r\n      // seek 后面\r\n      else if (diff > 0n) {\r\n        seekMax = bytes\r\n        bytes = (seekMin + seekMax) >> 1n\r\n      }\r\n      // seek 前面 10 秒外\r\n      else {\r\n        seekMin = bytes\r\n        bytes = (seekMin + seekMax) >> 1n\r\n      }\r\n    }\r\n    else {\r\n      // 失败了重新 seek 回原来的位置\r\n      pos = NOPTS_VALUE_BIGINT\r\n      break\r\n    }\r\n    if (context.ioReader.flags & IOFlags.ABORT) {\r\n      break\r\n    }\r\n  }\r\n\r\n  destroyAVPacket(avpacket)\r\n\r\n  if (pos !== NOPTS_VALUE_BIGINT) {\r\n    logger.debug(`finally seek to pos ${pos}`)\r\n\r\n    await context.ioReader.seek(pos)\r\n    await syncAVPacket(context)\r\n    return now\r\n  }\r\n  else {\r\n    await context.ioReader.seek(now)\r\n    if (context.ioReader.flags & IOFlags.ABORT) {\r\n      return static_cast<int64>(errorType.EOF)\r\n    }\r\n  }\r\n\r\n  return static_cast<int64>(errorType.FORMAT_NOT_SUPPORT)\r\n}\r\n","/**\r\n * 读字节流工具\r\n */\r\n\r\nimport * as logger from '../util/logger'\r\nimport IOWriter from './IOWriterSync'\r\nimport * as text from '../util/text'\r\nimport { Uint8ArrayInterface, BytesReaderSync } from './interface'\r\nimport { IOError } from './error'\r\n\r\nexport default class IOReaderSync implements BytesReaderSync {\r\n\r\n  private data: DataView\r\n\r\n  private buffer: Uint8ArrayInterface\r\n\r\n  private pointer: number\r\n\r\n  private endPointer: number\r\n\r\n  private pos: bigint\r\n\r\n  private size: number\r\n\r\n  private littleEndian: boolean\r\n\r\n  private fileSize_: bigint\r\n\r\n  public error: number\r\n\r\n  public onFlush: (buffer: Uint8Array) => number\r\n\r\n  public onSeek: (seek: bigint) => number\r\n\r\n  public onSize: () => bigint\r\n\r\n  public flags: number\r\n\r\n  /**\r\n   * @param data 待读取的字节\r\n   * @param bigEndian 是否按大端字节序读取，默认大端字节序（网络字节序）\r\n   */\r\n  constructor(size: number = 1 * 1024 * 1024, bigEndian: boolean = true, map?: Uint8ArrayInterface) {\r\n    this.pos = 0n\r\n    this.pointer = 0\r\n    this.error = 0\r\n\r\n    this.endPointer = 0\r\n    this.littleEndian = !bigEndian\r\n    this.flags = 0\r\n\r\n    if (map && map.view) {\r\n      this.size = map.length\r\n      this.buffer = map\r\n      this.data = map.view\r\n    }\r\n    else if (map && !map.byteOffset) {\r\n      this.size = map.length\r\n      this.buffer = map\r\n      this.data = new DataView(this.buffer.buffer)\r\n    }\r\n    else {\r\n\r\n      if (map) {\r\n        throw new Error('not support subarray of ArrayBuffer')\r\n      }\r\n\r\n      this.size = Math.max(size, 100 * 1024)\r\n      this.buffer = new Uint8Array(this.size)\r\n      this.data = new DataView(this.buffer.buffer)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 读取 8 位无符号整数\r\n   * \r\n   * @returns \r\n   */\r\n  public readUint8() {\r\n    if (this.remainingLength() < 1) {\r\n      this.flush(1)\r\n    }\r\n    const value = this.data.getUint8(this.pointer)\r\n    this.pointer++\r\n    this.pos++\r\n    return value\r\n  }\r\n  /**\r\n   * 读取 8 位无符号整数（不会移动读取指针位置）\r\n   * \r\n   * @returns \r\n   */\r\n  public peekUint8() {\r\n    if (this.remainingLength() < 1) {\r\n      this.flush(1)\r\n    }\r\n    return this.data.getUint8(this.pointer)\r\n  }\r\n\r\n  /**\r\n   * 读取 16 位无符号整数\r\n   * \r\n   * @returns \r\n   */\r\n  public readUint16() {\r\n    if (this.remainingLength() < 2) {\r\n      this.flush(2)\r\n    }\r\n    const value = this.data.getUint16(this.pointer, this.littleEndian)\r\n    this.pointer += 2\r\n    this.pos += 2n\r\n    return value\r\n  }\r\n  /**\r\n   * 读取 16 位无符号整数（不会移动读取指针位置）\r\n   * \r\n   * @returns \r\n   */\r\n  public peekUint16() {\r\n    if (this.remainingLength() < 2) {\r\n      this.flush(2)\r\n    }\r\n    return this.data.getUint16(this.pointer, this.littleEndian)\r\n  }\r\n\r\n  /**\r\n   * 读取 24 位无符号整数\r\n   * \r\n   * @returns \r\n   */\r\n  public readUint24() {\r\n    if (this.remainingLength() < 3) {\r\n      this.flush(3)\r\n    }\r\n    const high = this.readUint16()\r\n    const low = this.readUint8()\r\n    return this.littleEndian ? (low << 16 | high) : (high << 8 | low)\r\n  }\r\n  /**\r\n   * 读取 24 位无符号整数（不会移动读取指针位置）\r\n   * \r\n   * @returns \r\n   */\r\n  public peekUint24() {\r\n    if (this.remainingLength() < 3) {\r\n      this.flush(3)\r\n    }\r\n    const pointer = this.pointer\r\n    const pos = this.pos\r\n\r\n    const high = this.readUint16()\r\n    const low = this.readUint8()\r\n    const value = this.littleEndian ? (low << 16 | high) : (high << 8 | low)\r\n\r\n    this.pointer = pointer\r\n    this.pos = pos\r\n\r\n    return value\r\n  }\r\n\r\n  /**\r\n   * 读取 32 位无符号整数\r\n   * \r\n   * @returns \r\n   */\r\n  public readUint32() {\r\n    if (this.remainingLength() < 4) {\r\n      this.flush(4)\r\n    }\r\n    const value = this.data.getUint32(this.pointer, this.littleEndian)\r\n    this.pointer += 4\r\n    this.pos += 4n\r\n    return value\r\n  }\r\n  /**\r\n   * 读取 32 位无符号整数（不会移动读取指针位置）\r\n   * \r\n   * @returns \r\n   */\r\n  public peekUint32() {\r\n    if (this.remainingLength() < 4) {\r\n      this.flush(4)\r\n    }\r\n    return this.data.getUint32(this.pointer, this.littleEndian)\r\n  }\r\n\r\n  /**\r\n   * 读取 64 位无符号整数\r\n   * \r\n   * @returns \r\n   */\r\n  public readUint64() {\r\n    if (this.remainingLength() < 8) {\r\n      this.flush(8)\r\n    }\r\n    const value = this.data.getBigUint64(this.pointer, this.littleEndian)\r\n    this.pointer += 8\r\n    this.pos += 8n\r\n    return value\r\n  }\r\n  /**\r\n   * 读取 64 位无符号整数（不会移动读取指针位置）\r\n   * \r\n   * @returns \r\n   */\r\n  public peekUint64() {\r\n    if (this.remainingLength() < 8) {\r\n      this.flush(8)\r\n    }\r\n    return this.data.getBigUint64(this.pointer, this.littleEndian)\r\n  }\r\n\r\n  /**\r\n   * 读取 8 位有符号整数\r\n   * \r\n   * @returns \r\n   */\r\n  public readInt8() {\r\n    if (this.remainingLength() < 1) {\r\n      this.flush(1)\r\n    }\r\n    const value = this.data.getInt8(this.pointer)\r\n    this.pointer++\r\n    this.pos++\r\n    return value\r\n  }\r\n  /**\r\n   * 读取 8 位有符号整数（不会移动读取指针位置）\r\n   * \r\n   * @returns \r\n   */\r\n  public peekInt8() {\r\n    if (this.remainingLength() < 1) {\r\n      this.flush(1)\r\n    }\r\n    return this.data.getInt8(this.pointer)\r\n  }\r\n\r\n  /**\r\n   * 读取 16 位有符号整数\r\n   * \r\n   * @returns \r\n   */\r\n  public readInt16() {\r\n    if (this.remainingLength() < 2) {\r\n      this.flush(2)\r\n    }\r\n    const value = this.data.getInt16(this.pointer, this.littleEndian)\r\n    this.pointer += 2\r\n    this.pos += 2n\r\n    return value\r\n  }\r\n  /**\r\n   * 读取 16 位有符号整数（不会移动读取指针位置）\r\n   * \r\n   * @returns \r\n   */\r\n  public peekInt16() {\r\n    if (this.remainingLength() < 2) {\r\n      this.flush(2)\r\n    }\r\n    return this.data.getInt16(this.pointer, this.littleEndian)\r\n  }\r\n\r\n  /**\r\n   * 读取 24 位有符号整数\r\n   * \r\n   * @returns \r\n   */\r\n  public readInt24() {\r\n    const value = this.readUint24()\r\n    return (value & 0x800000) ? (value - 0x1000000) : value\r\n  }\r\n  /**\r\n   * 读取 24 位有符号整数（不会移动读取指针位置）\r\n   * \r\n   * @returns \r\n   */\r\n  public peekInt24() {\r\n    const value = this.peekUint24()\r\n    return (value & 0x800000) ? (value - 0x1000000) : value\r\n  }\r\n\r\n  /**\r\n   * 读取 32 位有符号整数\r\n   * \r\n   * @returns \r\n   */\r\n  public readInt32() {\r\n    if (this.remainingLength() < 4) {\r\n      this.flush(4)\r\n    }\r\n    const value = this.data.getInt32(this.pointer, this.littleEndian)\r\n    this.pointer += 4\r\n    this.pos += 4n\r\n    return value\r\n  }\r\n  /**\r\n   * 读取 32 位有符号整数（不会移动读取指针位置）\r\n   * \r\n   * @returns \r\n   */\r\n  public peekInt32() {\r\n    if (this.remainingLength() < 4) {\r\n      this.flush(4)\r\n    }\r\n    return this.data.getInt32(this.pointer, this.littleEndian)\r\n  }\r\n\r\n  /**\r\n   * 读取 64 位有符号整数\r\n   * \r\n   * @returns \r\n   */\r\n  public readInt64() {\r\n    if (this.remainingLength() < 8) {\r\n      this.flush(8)\r\n    }\r\n    const value = this.data.getBigInt64(this.pointer, this.littleEndian)\r\n    this.pointer += 8\r\n    this.pos += 8n\r\n    return value\r\n  }\r\n  /**\r\n   * 读取 64 位有符号整数（不会移动读取指针位置）\r\n   * \r\n   * @returns \r\n   */\r\n  public peekInt64() {\r\n    if (this.remainingLength() < 8) {\r\n      this.flush(8)\r\n    }\r\n    return this.data.getBigInt64(this.pointer, this.littleEndian)\r\n  }\r\n\r\n  /**\r\n   * 读取单精度浮点数\r\n   * \r\n   * @returns \r\n   */\r\n  public readFloat() {\r\n    if (this.remainingLength() < 4) {\r\n      this.flush(4)\r\n    }\r\n    const value = this.data.getFloat32(this.pointer, this.littleEndian)\r\n    this.pointer += 4\r\n    this.pos += 4n\r\n    return value\r\n  }\r\n  /**\r\n   * 读取单精度浮点数（不会移动读取指针位置）\r\n   * \r\n   * @returns \r\n   */\r\n  public peekFloat() {\r\n    if (this.remainingLength() < 4) {\r\n      this.flush(4)\r\n    }\r\n    return this.data.getFloat32(this.pointer, this.littleEndian)\r\n  }\r\n\r\n  /**\r\n   * 读取双精度浮点数\r\n   * \r\n   * @returns \r\n   */\r\n  public readDouble() {\r\n    if (this.remainingLength() < 8) {\r\n      this.flush(8)\r\n    }\r\n    const value = this.data.getFloat64(this.pointer, this.littleEndian)\r\n    this.pointer += 8\r\n    this.pos += 8n\r\n    return value\r\n  }\r\n  /**\r\n   * 读取双精度浮点数（不会移动读取指针位置）\r\n   * \r\n   * @returns \r\n   */\r\n  public peekDouble() {\r\n    if (this.remainingLength() < 8) {\r\n      this.flush(8)\r\n    }\r\n    return this.data.getFloat64(this.pointer, this.littleEndian)\r\n  }\r\n\r\n  /**\r\n   * 读取指定长度的字节，并以 16 进制字符串返回\r\n   * \r\n   * @param length 默认 1\r\n   * @returns \r\n   */\r\n  public readHex(length: number = 1) {\r\n    let hexStr = ''\r\n    for (let i = 0; i < length; i++) {\r\n      const hex = this.readUint8().toString(16)\r\n      hexStr += (hex.length === 1 ? '0' + hex : hex)\r\n    }\r\n    return hexStr\r\n  }\r\n  /**\r\n   * 读取指定长度的字节，并以 16 进制字符串返回（不会移动读取指针位置）\r\n   * \r\n   * @param length 默认 1\r\n   * @returns \r\n   */\r\n  public peekHex(length: number = 1) {\r\n\r\n    if (length > this.size) {\r\n      this.error = IOError.INVALID_OPERATION\r\n      logger.fatal('peekHex, length too large')\r\n    }\r\n\r\n    if (this.remainingLength() < length) {\r\n      this.flush(length)\r\n    }\r\n\r\n    const pointer = this.pointer\r\n    const pos = this.pos\r\n\r\n    let hexStr = ''\r\n    for (let i = 0; i < length; i++) {\r\n      const hex = this.readUint8().toString(16)\r\n      hexStr += (hex.length === 1 ? '0' + hex : hex)\r\n    }\r\n\r\n    this.pointer = pointer\r\n    this.pos = pos\r\n\r\n    return hexStr\r\n  }\r\n\r\n  /**\r\n   * 读取指定长度的二进制数据，不够抛错\r\n   * \r\n   * 第二个参数可传入预先分配的 buffer\r\n   * \r\n   * 返回读取的 Uint8Array\r\n   * \r\n   * @param length \r\n   * @returns \r\n   */\r\n  public readBuffer(length: number): Uint8Array\r\n  public readBuffer<T extends Uint8ArrayInterface>(length: number, buffer: T): T\r\n  public readBuffer(length: number, buffer?: Uint8ArrayInterface): Uint8ArrayInterface {\r\n\r\n    if (!length) {\r\n      return new Uint8Array(0)\r\n    }\r\n\r\n    if (!buffer) {\r\n      buffer = new Uint8Array(length)\r\n    }\r\n\r\n    if (this.remainingLength() < length) {\r\n      let index = 0\r\n\r\n      if (this.remainingLength() > 0) {\r\n        const len = this.remainingLength()\r\n        buffer.set(this.buffer.subarray(this.pointer, this.pointer + len), index)\r\n        index += len\r\n        this.pointer += len\r\n        this.pos += BigInt(len)\r\n        length -= len\r\n      }\r\n\r\n      while (length > 0) {\r\n        this.flush()\r\n\r\n        const len = Math.min(this.endPointer - this.pointer, length)\r\n\r\n        buffer.set(this.buffer.subarray(this.pointer, this.pointer + len), index)\r\n\r\n        index += len\r\n        this.pointer += len\r\n        this.pos += BigInt(len)\r\n        length -= len\r\n      }\r\n    }\r\n    else {\r\n      buffer.set(this.buffer.subarray(this.pointer, this.pointer + length), 0)\r\n      this.pointer += length\r\n      this.pos += BigInt(length)\r\n    }\r\n\r\n    return buffer\r\n  }\r\n  /**\r\n   * 读取指定长度的二进制 buffer 数据（不会移动读取指针位置）\r\n   * \r\n   * @param length \r\n   * @returns \r\n   */\r\n  public peekBuffer(length: number): Uint8Array\r\n  public peekBuffer<T extends Uint8ArrayInterface>(length: number, buffer: T): T\r\n  public peekBuffer(length: number, buffer?: Uint8ArrayInterface): Uint8ArrayInterface {\r\n\r\n    if (!length) {\r\n      return new Uint8Array(0)\r\n    }\r\n\r\n    if (length > this.size) {\r\n      this.error = IOError.INVALID_OPERATION\r\n      logger.fatal('peekBuffer, length too large')\r\n    }\r\n\r\n    if (this.remainingLength() < length) {\r\n      this.flush(length)\r\n    }\r\n\r\n    if (!buffer) {\r\n      buffer = new Uint8Array(length)\r\n    }\r\n\r\n    buffer.set(this.buffer.subarray(this.pointer, this.pointer + length), 0)\r\n\r\n    return buffer\r\n  }\r\n\r\n  /**\r\n   * 读取最多 length 字节的数据到指定 buffer，返回已写入的字节长度\r\n   * \r\n   * @param length \r\n   * @param buffer \r\n   * @returns \r\n   */\r\n  public readToBuffer(length: number, buffer: Uint8ArrayInterface): number {\r\n    if (this.remainingLength() < length) {\r\n      let index = 0\r\n\r\n      if (this.remainingLength() > 0) {\r\n        const len = this.remainingLength()\r\n        buffer.set(this.buffer.subarray(this.pointer, this.pointer + len), index)\r\n        index += len\r\n        this.pointer += len\r\n        this.pos += BigInt(len)\r\n        length -= len\r\n      }\r\n\r\n      while (length > 0) {\r\n        try {\r\n          this.flush()\r\n        }\r\n        catch (error) {\r\n          if (this.error === IOError.END && index) {\r\n            return index\r\n          }\r\n          else {\r\n            throw error\r\n          }\r\n        }\r\n\r\n        const len = Math.min(this.endPointer - this.pointer, length)\r\n\r\n        buffer.set(this.buffer.subarray(this.pointer, this.pointer + len), index)\r\n\r\n        index += len\r\n        this.pointer += len\r\n        this.pos += BigInt(len)\r\n        length -= len\r\n      }\r\n      return index\r\n    }\r\n    else {\r\n      buffer.set(this.buffer.subarray(this.pointer, this.pointer + length), 0)\r\n      this.pointer += length\r\n      this.pos += BigInt(length)\r\n      return length\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 读取指定长度的字符串\r\n   * \r\n   * @param length 默认 1\r\n   * @returns \r\n   */\r\n  public readString(length: number = 1) {\r\n    const buffer = this.readBuffer(length)\r\n    return text.decode(buffer)\r\n  }\r\n  /**\r\n   * 读取指定长度的字符串\r\n   * \r\n   * @param length 默认 1\r\n   * @returns \r\n   */\r\n  public peekString(length: number = 1) {\r\n    const buffer = this.peekBuffer(length)\r\n    return text.decode(buffer)\r\n  }\r\n\r\n  /**\r\n   * 读取一行字符\r\n   */\r\n  public readLine() {\r\n    let str = ''\r\n\r\n    while (true) {\r\n      let got = false\r\n      for (let i = this.pointer; i < this.endPointer; i++) {\r\n        if (this.buffer[i] === 0x0a || this.buffer[i] === 0x0d) {\r\n          if (i !== this.pointer) {\r\n            str += this.readString(i - this.pointer)\r\n          }\r\n          got = true\r\n          break\r\n        }\r\n      }\r\n\r\n      if (!got) {\r\n        str += this.readString(this.remainingLength())\r\n        this.flush()\r\n      }\r\n      else {\r\n        break\r\n      }\r\n    }\r\n\r\n    let next = this.peekUint8()\r\n    if (next === 0x0a || next === 0x0d) {\r\n      this.pointer++\r\n      if (next === 0x0d) {\r\n        next = this.peekUint8()\r\n        // \\r\\n\r\n        if (next === 0x0a) {\r\n          this.pointer++\r\n        }\r\n      }\r\n    }\r\n\r\n    return str\r\n  }\r\n  /**\r\n   * 读取一行字符\r\n   */\r\n  public peekLine() {\r\n    if (this.remainingLength() < this.size) {\r\n      this.flush()\r\n    }\r\n\r\n    let str = ''\r\n\r\n    let got = false\r\n    for (let i = this.pointer; i < this.endPointer; i++) {\r\n      if (this.buffer[i] === 0x0a || this.buffer[i] === 0x0d) {\r\n        str += this.peekString(i - this.pointer)\r\n        got = true\r\n        break\r\n      }\r\n    }\r\n\r\n    if (!got) {\r\n      this.error = IOError.INVALID_OPERATION\r\n      logger.fatal('peekLine, out of buffer')\r\n    }\r\n    return str\r\n  }\r\n\r\n  /**\r\n   * 获取当前读取指针\r\n   * \r\n   * @returns \r\n   */\r\n  public getPointer() {\r\n    return this.pointer\r\n  }\r\n\r\n  /**\r\n   * 获取已读字节偏移\r\n   * \r\n   * @returns \r\n   */\r\n  public getPos() {\r\n    return this.pos\r\n  }\r\n\r\n  /**\r\n   * 跳过指定字节长度\r\n   * \r\n   * @param length \r\n   */\r\n  public skip(length: number) {\r\n\r\n    const backup = length\r\n\r\n    while (this.remainingLength() < length) {\r\n      length -= this.remainingLength()\r\n      this.pointer = this.endPointer\r\n      this.flush()\r\n    }\r\n\r\n    if (this.remainingLength() >= length) {\r\n      this.pointer += length\r\n    }\r\n\r\n    this.pos += BigInt(backup)\r\n  }\r\n\r\n  /**\r\n   * 获取剩余可读字节数\r\n   * \r\n   * @returns \r\n   */\r\n  public remainingLength() {\r\n    return this.endPointer - this.pointer\r\n  }\r\n\r\n  /**\r\n   * 重新填充剩余缓冲区\r\n   * \r\n   * @param need \r\n   * @returns \r\n   */\r\n  public flush(need: number = 0) {\r\n\r\n    if (!this.onFlush) {\r\n      this.error = IOError.INVALID_OPERATION\r\n      logger.fatal('IOReader error, flush failed because of no flush callback')\r\n    }\r\n\r\n    if (this.size - this.remainingLength() <= 0) {\r\n      return\r\n    }\r\n\r\n    need = Math.min(need, this.size)\r\n\r\n    if (this.pointer < this.endPointer) {\r\n      this.buffer.set(this.buffer.subarray(this.pointer, this.endPointer), 0)\r\n      this.endPointer = this.endPointer - this.pointer\r\n    }\r\n    else {\r\n      this.endPointer = 0\r\n    }\r\n    this.pointer = 0\r\n\r\n    if (need) {\r\n      while (this.remainingLength() < need) {\r\n        const len = this.onFlush(this.buffer.subarray(this.endPointer))\r\n        if (len < 0) {\r\n          this.error = len\r\n          throw new Error(`IOReader error, flush ${len === IOError.END ? 'ended' : 'failed'}, ret: ${len}`)\r\n        }\r\n        this.endPointer += len\r\n      }\r\n    }\r\n    else {\r\n      const len = this.onFlush(this.buffer.subarray(this.endPointer))\r\n      if (len < 0) {\r\n        this.error = len\r\n        throw new Error(`IOReader error, flush ${len === IOError.END ? 'ended' : 'failed'}, ret: ${len}`)\r\n      }\r\n      this.endPointer += len\r\n    }\r\n    this.error = 0\r\n  }\r\n\r\n  /**\r\n   * \r\n   * seek 到指定位置\r\n   * \r\n   * @param pos \r\n   * @param force false 时可以在目前的缓冲区内 seek，否则丢弃缓冲区内容重新填充指定位置的数据，默认 false\r\n   * @param flush 指定 seek 之后是否马上填充数据，否则只 seek 到目标位置，默认 true\r\n   * @returns \r\n   */\r\n  public seek(pos: bigint, force: boolean = false, flush: boolean = true) {\r\n    if (!force) {\r\n      const len = Number(pos - this.pos)\r\n      // 可以往回 seek\r\n      if (len < 0 && Math.abs(len) < this.pointer) {\r\n        this.pointer += len\r\n        this.pos = pos\r\n        return\r\n      }\r\n      // 可以直接往后 seek\r\n      else if (len > 0 && this.pointer + len < this.endPointer) {\r\n        this.pointer += len\r\n        this.pos = pos\r\n        return\r\n      }\r\n      else if (len === 0) {\r\n        return\r\n      }\r\n    }\r\n\r\n    if (!this.onSeek) {\r\n      this.error = IOError.INVALID_OPERATION\r\n      logger.fatal('IOReader error, seek failed because of no seek callback')\r\n    }\r\n\r\n    this.pointer = this.endPointer = 0\r\n    this.pos = pos\r\n    const ret = this.onSeek(pos)\r\n\r\n    if (ret !== 0) {\r\n      this.error = ret\r\n      logger.fatal('IOReader error, seek failed')\r\n    }\r\n\r\n    if (flush) {\r\n      this.flush()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 获取缓冲区\r\n   */\r\n  public getBuffer() {\r\n    return this.buffer\r\n  }\r\n\r\n  /**\r\n   * 写入数据到缓冲区\r\n   * \r\n   * @param buffer \r\n   */\r\n  public appendBuffer(buffer: Uint8ArrayInterface) {\r\n    if (this.size - this.endPointer >= buffer.length) {\r\n      this.buffer.set(buffer, this.endPointer)\r\n      this.endPointer += buffer.length\r\n    }\r\n    else {\r\n      this.buffer.set(this.buffer.subarray(this.pointer, this.endPointer), 0)\r\n      this.endPointer = this.endPointer - this.pointer\r\n      this.pointer = 0\r\n\r\n      if (this.size - this.endPointer >= buffer.length) {\r\n        this.buffer.set(buffer, this.endPointer)\r\n        this.endPointer += buffer.length\r\n      }\r\n      else {\r\n        const len = Math.min(this.size - this.endPointer, buffer.length)\r\n        this.buffer.set(buffer.subarray(0, len), this.endPointer)\r\n        this.endPointer += len\r\n\r\n        logger.warn('IOReader, call appendBuffer but the buffer\\'s size is lagger then the remaining size')\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 重置 reader\r\n   */\r\n  public reset() {\r\n    this.pointer = this.endPointer = 0\r\n    this.pos = 0n\r\n    this.error = 0\r\n  }\r\n\r\n  /**\r\n   * 设置读取是小端还是大端\r\n   * \r\n   * @param bigEndian \r\n   */\r\n  public setEndian(bigEndian: boolean) {\r\n    this.littleEndian = !bigEndian\r\n  }\r\n\r\n  /**\r\n   * 当前读取模式是否是大端\r\n   * \r\n   * @returns \r\n   */\r\n  public isBigEndian() {\r\n    return !this.littleEndian\r\n  }\r\n\r\n  /**\r\n   * 获取源总字节长度\r\n   * \r\n   * @returns \r\n   */\r\n  public fileSize() {\r\n    if (this.fileSize_) {\r\n      return this.fileSize_\r\n    }\r\n    if (!this.onSize) {\r\n      logger.warn('IOReader error, fileSize failed because of no onSize callback')\r\n      return 0n\r\n    }\r\n    try {\r\n      this.fileSize_ = this.onSize()\r\n    }\r\n    catch (error) {\r\n      logger.warn(`IOReader error, call fileSize failed: ${error}`)\r\n      this.fileSize_ = 0n\r\n    }\r\n    return this.fileSize_\r\n  }\r\n\r\n  /**\r\n   * 获取缓冲区长度\r\n   * \r\n   * @returns \r\n   */\r\n  public getBufferSize() {\r\n    return this.size\r\n  }\r\n\r\n  /**\r\n   * 连接到 ioWriter\r\n   * \r\n   * @param ioWriter \r\n   * @param length \r\n   */\r\n  public pipe(ioWriter: IOWriter, length?: number) {\r\n    if (length) {\r\n      if (this.remainingLength() < length) {\r\n        if (this.remainingLength() > 0) {\r\n          const len = this.remainingLength()\r\n          ioWriter.writeBuffer(this.buffer.subarray(this.pointer, this.pointer + len))\r\n          this.pointer += len\r\n          this.pos += BigInt(len)\r\n          length -= len\r\n        }\r\n\r\n        while (length > 0) {\r\n          this.flush()\r\n          const len = Math.min(this.endPointer - this.pointer, length)\r\n          ioWriter.writeBuffer(this.buffer.subarray(this.pointer, this.pointer + len))\r\n          this.pointer += len\r\n          this.pos += BigInt(len)\r\n          length -= len\r\n        }\r\n      }\r\n      else {\r\n        ioWriter.writeBuffer(this.buffer.subarray(this.pointer, this.pointer + length))\r\n        this.pointer += length\r\n        this.pos += BigInt(length)\r\n      }\r\n    }\r\n    else {\r\n      if (this.remainingLength() > 0) {\r\n        const len = this.remainingLength()\r\n        ioWriter.writeBuffer(this.buffer.subarray(this.pointer, this.pointer + len))\r\n        this.pointer += len\r\n        this.pos += BigInt(len)\r\n      }\r\n\r\n      while (this.onFlush(this.buffer.subarray(0)) > 0) {\r\n        const len = this.remainingLength()\r\n        ioWriter.writeBuffer(this.buffer.subarray(this.pointer, this.pointer + len))\r\n        this.pointer += len\r\n        this.pos += BigInt(len)\r\n      }\r\n    }\r\n  }\r\n}\r\n","/**\r\n * 写字节流工具\r\n */\r\n\r\nimport { IOError } from './error'\r\nimport * as text from '../util/text'\r\nimport { Uint8ArrayInterface, BytesWriterSync } from './interface'\r\n\r\nexport default class IOWriterSync implements BytesWriterSync {\r\n\r\n  private data: DataView\r\n\r\n  private buffer: Uint8ArrayInterface\r\n\r\n  private pointer: number\r\n\r\n  private pos: bigint\r\n\r\n  private size: number\r\n\r\n  private littleEndian: boolean\r\n\r\n  public error: number\r\n\r\n  public onFlush: (data: Uint8Array, pos?: bigint) => number\r\n  public onSeek: (seek: bigint) => number\r\n\r\n  /**\r\n   * @param data 待写的 Uint8Array\r\n   * @param bigEndian 是否按大端字节序写，默认大端字节序（网络字节序）\r\n   */\r\n  constructor(size: number = 1 * 1024 * 1024, bigEndian: boolean = true, map?: Uint8ArrayInterface) {\r\n    this.pointer = 0\r\n    this.pos = 0n\r\n    this.size = size\r\n    this.littleEndian = !bigEndian\r\n    this.error = 0\r\n\r\n    if (map && map.view) {\r\n      this.size = map.length\r\n      this.buffer = map\r\n      this.data = map.view\r\n    }\r\n    else if (map && !map.byteOffset) {\r\n      this.size = map.length\r\n      this.buffer = map\r\n      this.data = new DataView(this.buffer.buffer)\r\n    }\r\n    else {\r\n\r\n      if (map) {\r\n        throw new Error('not support subarray of ArrayBuffer')\r\n      }\r\n\r\n      this.buffer = new Uint8Array(this.size)\r\n      this.data = new DataView(this.buffer.buffer)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 写 8 位无符号整数\r\n   */\r\n  public writeUint8(value: number) {\r\n    if (this.remainingLength() < 1) {\r\n      this.flush()\r\n    }\r\n    this.data.setUint8(this.pointer, value)\r\n    this.pointer++\r\n    this.pos++\r\n  }\r\n\r\n  /**\r\n   * 读取 16 位无符号整数\r\n   */\r\n  public writeUint16(value: number) {\r\n    if (this.remainingLength() < 2) {\r\n      this.flush()\r\n    }\r\n    this.data.setUint16(this.pointer, value, this.littleEndian)\r\n    this.pointer += 2\r\n    this.pos += 2n\r\n  }\r\n\r\n  /**\r\n   * 写 24 位无符号整数\r\n   */\r\n  public writeUint24(value: number) {\r\n    if (this.remainingLength() < 3) {\r\n      this.flush()\r\n    }\r\n    const high = (value & 0xff0000) >> 16\r\n    const middle = (value & 0x00ff00) >> 8\r\n    const low = value & 0x0000ff\r\n    if (this.littleEndian) {\r\n      this.writeUint8(low)\r\n      this.writeUint8(middle)\r\n      this.writeUint8(high)\r\n    }\r\n    else {\r\n      this.writeUint8(high)\r\n      this.writeUint8(middle)\r\n      this.writeUint8(low)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 写 32 位无符号整数\r\n   */\r\n  public writeUint32(value: number) {\r\n    if (this.remainingLength() < 4) {\r\n      this.flush()\r\n    }\r\n    this.data.setUint32(this.pointer, value, this.littleEndian)\r\n    this.pointer += 4\r\n    this.pos += 4n\r\n  }\r\n\r\n  /**\r\n   * 写 64 位无符号整数\r\n   */\r\n  public writeUint64(value: bigint) {\r\n    if (this.remainingLength() < 8) {\r\n      this.flush()\r\n    }\r\n    this.data.setBigUint64(this.pointer, value, this.littleEndian)\r\n    this.pointer += 8\r\n    this.pos += 8n\r\n  }\r\n\r\n  /**\r\n   * 写 8 位有符号整数\r\n   * \r\n   * @returns \r\n   */\r\n  public writeInt8(value: number) {\r\n    if (this.remainingLength() < 1) {\r\n      this.flush()\r\n    }\r\n    this.data.setInt8(this.pointer, value)\r\n    this.pointer++\r\n    this.pos++\r\n  }\r\n\r\n  /**\r\n   * 写 16 位有符号整数\r\n   */\r\n  public writeInt16(value: number) {\r\n    if (this.remainingLength() < 2) {\r\n      this.flush()\r\n    }\r\n    this.data.setInt16(this.pointer, value, this.littleEndian)\r\n    this.pointer += 2\r\n    this.pos += 2n\r\n  }\r\n\r\n  /**\r\n   * 写 24 位有符号整数\r\n   */\r\n  public writeInt24(value: number) {\r\n    this.writeUint24(value < 0 ? (value + 0x1000000) : value)\r\n  }\r\n\r\n  /**\r\n   * 写 32 位有符号整数\r\n   */\r\n  public writeInt32(value: number) {\r\n    if (this.remainingLength() < 4) {\r\n      this.flush()\r\n    }\r\n    this.data.setInt32(this.pointer, value, this.littleEndian)\r\n    this.pointer += 4\r\n    this.pos += 4n\r\n  }\r\n\r\n  /**\r\n   * 写 64 位有符号整数\r\n   */\r\n  public writeInt64(value: bigint) {\r\n    if (this.remainingLength() < 8) {\r\n      this.flush()\r\n    }\r\n    this.data.setBigInt64(this.pointer, value, this.littleEndian)\r\n    this.pointer += 8\r\n    this.pos += 8n\r\n  }\r\n\r\n  /**\r\n   * 写单精度浮点数\r\n   * \r\n   * @returns \r\n   */\r\n  public writeFloat(value: number) {\r\n    if (this.remainingLength() < 4) {\r\n      this.flush()\r\n    }\r\n    this.data.setFloat32(this.pointer, value, this.littleEndian)\r\n    this.pointer += 4\r\n    this.pos += 4n\r\n  }\r\n\r\n  /**\r\n   * 写双精度浮点数\r\n   */\r\n  public writeDouble(value: number) {\r\n    if (this.remainingLength() < 8) {\r\n      this.flush()\r\n    }\r\n    this.data.setFloat64(this.pointer, value, this.littleEndian)\r\n    this.pointer += 8\r\n    this.pos += 8n\r\n  }\r\n\r\n  /**\r\n   * 获取当前写指针\r\n   * \r\n   * @returns \r\n   */\r\n  public getPointer() {\r\n    return this.pointer\r\n  }\r\n\r\n  public getPos() {\r\n    return this.pos\r\n  }\r\n\r\n  /**\r\n   * 获取剩余可写节数\r\n   * \r\n   * @returns \r\n   */\r\n  public remainingLength() {\r\n    return this.size - this.pointer\r\n  }\r\n\r\n  /**\r\n   * 写指定长度的二进制 buffer 数据\r\n   * \r\n   * @param length \r\n   * @returns \r\n   */\r\n  public writeBuffer(buffer: Uint8ArrayInterface) {\r\n\r\n    if (!buffer.length) {\r\n      return\r\n    }\r\n\r\n    let length = buffer.length\r\n    if (this.remainingLength() < length) {\r\n      let index = 0\r\n      while (length > 0) {\r\n        this.flush()\r\n        const len = Math.min(this.size, length)\r\n        this.buffer.set(buffer.subarray(index, index + len), this.pointer)\r\n\r\n        this.pointer += len\r\n        this.pos += BigInt(len)\r\n        index += len\r\n        length -= len\r\n      }\r\n    }\r\n    else {\r\n      this.buffer.set(buffer, this.pointer)\r\n      this.pointer += length\r\n      this.pos += BigInt(length)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 写一个字符串\r\n   */\r\n  public writeString(str: string) {\r\n    const buffer = text.encode(str)\r\n    this.writeBuffer(buffer)\r\n    return buffer.length\r\n  }\r\n\r\n  /**\r\n   * 将缓冲区中数据写出\r\n   */\r\n  public flush() {\r\n    if (!this.onFlush) {\r\n      this.error = IOError.INVALID_OPERATION\r\n      throw Error('IOWriter error, flush failed because of no flush callback')\r\n    }\r\n\r\n    if (this.pointer) {\r\n      const ret = this.onFlush(this.buffer.subarray(0, this.pointer))\r\n      if (ret !== 0) {\r\n        this.error = ret\r\n        throw Error('IOWriter error, flush failed')\r\n      }\r\n    }\r\n    this.pointer = 0\r\n  }\r\n\r\n  /**\r\n   * 将缓冲区中数据写出到指定位置\r\n   * \r\n   * @param pos \r\n   */\r\n  public flushToPos(pos: bigint) {\r\n    if (!this.onFlush) {\r\n      this.error = IOError.INVALID_OPERATION\r\n      throw Error('IOWriter error, flush failed because of no flush callback')\r\n    }\r\n    if (this.pointer) {\r\n      const ret = this.onFlush(this.buffer.subarray(0, this.pointer), pos)\r\n      if (ret !== 0) {\r\n        this.error = ret\r\n        throw Error('IOWriter error, flush failed')\r\n      }\r\n    }\r\n    this.pointer = 0\r\n  }\r\n\r\n  /**\r\n   * seek 到指定位置\r\n   * \r\n   * @param pos \r\n   */\r\n  public seek(pos: bigint) {\r\n    if (!this.onSeek) {\r\n      this.error = IOError.INVALID_OPERATION\r\n      throw Error('IOWriter error, seek failed because of no seek callback')\r\n    }\r\n\r\n    this.flush()\r\n\r\n    const ret = this.onSeek(pos)\r\n\r\n    if (ret !== 0) {\r\n      this.error = ret\r\n      throw Error('IOWriter error, seek failed')\r\n    }\r\n\r\n    this.pos = pos\r\n  }\r\n\r\n  /**\r\n   * 在当前缓冲区映射区间内 seek\r\n   * \r\n   * @param pos \r\n   */\r\n  public seekInline(pos: number) {\r\n    const pointer = this.pointer\r\n    this.pointer = Math.max(0, Math.min(this.size, pos))\r\n    this.pos += BigInt(this.pointer - pointer)\r\n  }\r\n\r\n  /**\r\n   * 跳过指定长度\r\n   * \r\n   * @param length \r\n   */\r\n  public skip(length: number) {\r\n    const pointer = this.pointer\r\n    this.pointer = Math.min(this.size, this.pointer + length)\r\n    this.pos += BigInt(this.pointer - pointer)\r\n  }\r\n\r\n  /**\r\n   * 回退指定长度，不能大于 pointer 大小\r\n   * \r\n   * @param length \r\n   */\r\n  public back(length: number) {\r\n    const pointer = this.pointer\r\n    this.pointer = Math.max(0, this.pointer - length)\r\n    this.pos += BigInt(this.pointer - pointer)\r\n  }\r\n\r\n  /**\r\n   * 获取缓冲区\r\n   * \r\n   * @returns \r\n   */\r\n  public getBuffer() {\r\n    return this.buffer.subarray(0, this.pointer)\r\n  }\r\n\r\n  /**\r\n   * 设置读取是小端还是大端\r\n   * \r\n   * @param bigEndian \r\n   */\r\n  public setEndian(bigEndian: boolean) {\r\n    this.littleEndian = !bigEndian\r\n  }\r\n\r\n  /**\r\n   * 重置 writer\r\n   */\r\n  public reset() {\r\n    this.pointer = 0\r\n    this.pos = 0n\r\n    this.error = 0\r\n  }\r\n\r\n  /**\r\n   * 获取缓冲区长度\r\n   * \r\n   * @returns \r\n   */\r\n  public getBufferSize() {\r\n    return this.size\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}