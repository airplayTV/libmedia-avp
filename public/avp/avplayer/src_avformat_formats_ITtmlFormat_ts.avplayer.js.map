{"version":3,"file":"src_avformat_formats_ITtmlFormat_ts.avplayer.js","mappings":"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","sources":["webpack://AVPlayer/./src/avformat/formats/IFormat.ts","webpack://AVPlayer/./src/avformat/formats/ITtmlFormat.ts","webpack://AVPlayer/./src/avutil/codecs/ttml.ts","webpack://AVPlayer/./src/common/util/time.ts","webpack://AVPlayer/./src/common/util/xml2Json.ts"],"sourcesContent":["/*\r\n * libmedia abstract format decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport { AVFormat } from 'avutil/avformat'\r\n\r\nexport default abstract class IFormat {\r\n\r\n  public type: AVFormat = AVFormat.UNKNOWN\r\n\r\n  public onStreamAdd: (stream: Stream) => void\r\n\r\n  public abstract init(formatContext: AVIFormatContext): void\r\n\r\n  public async destroy(formatContext: AVIFormatContext): Promise<void> {}\r\n\r\n  public abstract getAnalyzeStreamsCount(): number\r\n  public abstract readHeader(formatContext: AVIFormatContext): Promise<number>\r\n  public abstract readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number>\r\n\r\n  /**\r\n   * seek\r\n   * \r\n   * @param context \r\n   * @param stream \r\n   * @param timestamp 毫秒时间戳\r\n   * @param flags \r\n   * \r\n   * @returns 返回 seek 之前的下一个 avpacket pos（若不知道返回 0n 方便之后可以再 seek 回来）返回负数表示 seek 失败\r\n   */\r\n  public abstract seek(\r\n    formatContext: AVIFormatContext,\r\n    stream: Stream,\r\n    timestamp: int64,\r\n    flags: int32\r\n  ): Promise<int64>\r\n}\r\n","/*\r\n * libmedia subrip decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVStream from 'avutil/AVStream'\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport { AVCodecID, AVMediaType } from 'avutil/codec'\r\nimport * as logger from 'common/util/logger'\r\nimport * as errorType from 'avutil/error'\r\nimport IFormat from './IFormat'\r\nimport { AVFormat, AVSeekFlags } from 'avutil/avformat'\r\nimport { memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport { addAVPacketData } from 'avutil/util/avpacket'\r\nimport { IOError } from 'common/io/error'\r\nimport * as array from 'common/util/array'\r\nimport * as text from 'common/util/text'\r\nimport * as ittml from 'avutil/codecs/ttml'\r\nimport { IOFlags } from 'avutil/avformat'\r\n\r\nexport default class ITtmlFormat extends IFormat {\r\n\r\n  public type: AVFormat = AVFormat.TTML\r\n\r\n  private queue: {\r\n    pts: int64\r\n    duration: int64\r\n    context: string\r\n    region: string\r\n  }[]\r\n  private index: int32\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  public init(formatContext: AVIFormatContext): void {\r\n    this.queue = []\r\n  }\r\n\r\n  public async readHeader(formatContext: AVIFormatContext): Promise<number> {\r\n    const stream = formatContext.createStream()\r\n    stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_TTML\r\n    stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_SUBTITLE\r\n    stream.timeBase.den = 1000\r\n    stream.timeBase.num = 1\r\n\r\n    let xml = ''\r\n\r\n    if (formatContext.ioReader.flags & IOFlags.SEEKABLE) {\r\n      const fileSize = await formatContext.ioReader.fileSize()\r\n      xml = await formatContext.ioReader.readString(static_cast<int32>(fileSize))\r\n    }\r\n    else {\r\n      try {\r\n        xml += await formatContext.ioReader.readLine() + '\\n'\r\n      }\r\n      catch (e) {}\r\n    }\r\n\r\n    if (text) {\r\n      const result = ittml.parse(xml)\r\n      this.queue = result.queue\r\n      if (result.head) {\r\n        const header = JSON.stringify(result.head)\r\n        const data = text.encode(header)\r\n        stream.codecpar.extradata = avMalloc(data.length)\r\n        memcpyFromUint8Array(stream.codecpar.extradata, data.length, data)\r\n        stream.codecpar.extradataSize = data.length\r\n      }\r\n    }\r\n    this.index = 0\r\n    return 0\r\n  }\r\n\r\n  public async readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number> {\r\n\r\n    if (!this.queue.length) {\r\n      return errorType.DATA_INVALID\r\n    }\r\n    if (this.index >= this.queue.length) {\r\n      return IOError.END\r\n    }\r\n\r\n    const stream = formatContext.streams.find((stream) => {\r\n      return stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_SUBTITLE\r\n    })\r\n\r\n    const cue = this.queue[this.index++]\r\n\r\n    avpacket.streamIndex = stream.index\r\n    avpacket.timeBase.den = stream.timeBase.den\r\n    avpacket.timeBase.num = stream.timeBase.num\r\n\r\n    avpacket.dts = avpacket.pts = cue.pts\r\n    avpacket.duration = cue.duration\r\n\r\n    const buffer = text.encode(cue.context)\r\n    const data: pointer<uint8> = avMalloc(buffer.length)\r\n    memcpyFromUint8Array(data, buffer.length, buffer)\r\n    addAVPacketData(avpacket, data, buffer.length)\r\n\r\n    return 0\r\n  }\r\n\r\n  public async seek(formatContext: AVIFormatContext, stream: AVStream, timestamp: int64, flags: int32): Promise<int64> {\r\n    if (flags & AVSeekFlags.BYTE) {\r\n      return static_cast<int64>(errorType.FORMAT_NOT_SUPPORT)\r\n    }\r\n    if (timestamp <= 0n) {\r\n      this.index = 0\r\n      return 0n\r\n    }\r\n    const index = array.binarySearch(this.queue, (item) => {\r\n      if (item.pts > timestamp) {\r\n        return -1\r\n      }\r\n      return 1\r\n    })\r\n    if (index >= 0) {\r\n      logger.debug(`seek in cues, found index: ${index}, pts: ${this.queue[index].pts}`)\r\n      this.index = Math.max(index - 1, 0)\r\n      while (this.index > 0) {\r\n        if (this.queue[this.index - 1].pts === this.queue[this.index].pts\r\n          || (this.queue[this.index - 1].pts + this.queue[this.index - 1].duration) > timestamp\r\n        ) {\r\n          this.index--\r\n        }\r\n        else {\r\n          break\r\n        }\r\n      }\r\n      return 0n\r\n    }\r\n    return static_cast<int64>(errorType.DATA_INVALID)\r\n  }\r\n\r\n  public getAnalyzeStreamsCount(): number {\r\n    return 1\r\n  }\r\n}\r\n","\r\nimport xml2Json from 'common/util/xml2Json'\r\nimport * as is from 'common/util/is'\r\nimport * as array from 'common/util/array'\r\nimport { hhColonDDColonSSDotMill2Int64 } from 'common/util/time'\r\n\r\ninterface Span {\r\n  context: string | (string | { tagName: string, context?: string } )[]\r\n  region?: string\r\n  begin: string\r\n  end?: string\r\n  br?: string\r\n}\r\n\r\ninterface P {\r\n  begin: string\r\n  end?: string\r\n  dur?: string\r\n  context: string | (string | { tagName: string, context?: string } )[]\r\n  region?: string\r\n  span?: Span | Span[]\r\n}\r\n\r\nexport function parse(text: string) {\r\n  const xml = xml2Json(text, {\r\n    aloneValueName: 'context'\r\n  })\r\n\r\n  if (!xml.tt) {\r\n    return {\r\n      queue: [],\r\n      head: {}\r\n    }\r\n  }\r\n\r\n  const queue: {\r\n    pts: int64\r\n    duration: int64\r\n    context: string\r\n    region: string\r\n  }[] = []\r\n\r\n  function formatContext(list: (string | { tagName: string, context?: string } )[]) {\r\n    let context = ''\r\n    array.each(list, ((c) => {\r\n      if (is.string(c)) {\r\n        context += c\r\n      }\r\n      else {\r\n        if (c.context) {\r\n          context += `<${c.tagName}>${c.context}</${c.tagName}>`\r\n        }\r\n        else {\r\n          context += `<${c.tagName}/>`\r\n        }\r\n      }\r\n    }))\r\n    return context\r\n  }\r\n\r\n  function add(p: P, start: string, end: string) {\r\n    let pts = hhColonDDColonSSDotMill2Int64(start || p.begin)\r\n\r\n    let context = p.context || ''\r\n    let region = p.region || 'Default'\r\n    let spanEnd = ''\r\n\r\n    if (is.array(context)) {\r\n      context = formatContext(context)\r\n    }\r\n    if (is.array(p.span)) {\r\n      array.each(p.span, (span) => {\r\n        if (span.context) {\r\n          if (pts === -1n && span.begin) {\r\n            pts = hhColonDDColonSSDotMill2Int64(span.begin)\r\n          }\r\n          if (!region && span.region) {\r\n            region = span.region\r\n          }\r\n          if (is.string(span.context)) {\r\n            context += span.context\r\n            if (span.br) {\r\n              context += '<br>'\r\n            }\r\n          }\r\n          else {\r\n            context += formatContext(span.context)\r\n            if (span.br) {\r\n              context += '<br>'\r\n            }\r\n          }\r\n        }\r\n        if (span.end) {\r\n          spanEnd = span.end\r\n        }\r\n      })\r\n    }\r\n    else if (p.span) {\r\n      if (p.span.context) {\r\n        if (pts === -1n && p.span.begin) {\r\n          pts = hhColonDDColonSSDotMill2Int64(p.span.begin)\r\n        }\r\n        if (!region && p.span.region) {\r\n          region = p.span.region\r\n        }\r\n        if (is.string(p.span.context)) {\r\n          context += p.span.context\r\n        }\r\n        else {\r\n          context += formatContext(p.span.context)\r\n        }\r\n      }\r\n      if (p.span.end) {\r\n        spanEnd = p.span.end\r\n      }\r\n    }\r\n    queue.push({\r\n      context,\r\n      pts,\r\n      region: region,\r\n      duration: p.dur ? hhColonDDColonSSDotMill2Int64(p.dur) : (hhColonDDColonSSDotMill2Int64(end || p.end || spanEnd) - pts)\r\n    })\r\n  }\r\n\r\n  function praseP(p: P | P[], start: string, end: string) {\r\n    if (is.array(p)) {\r\n      array.each(p, (_) => {\r\n        add(_, start, end)\r\n      })\r\n    }\r\n    else {\r\n      add(p, start, end)\r\n    }\r\n  }\r\n\r\n  if (xml.tt.body) {\r\n    if (xml.tt.body.div) {\r\n      if (is.array(xml.tt.body.div)) {\r\n        array.each(xml.tt.body.div, (div: any) => {\r\n          if (div.p) {\r\n            praseP(div.p, div.begin, div.end)\r\n          }\r\n        })\r\n      }\r\n      else {\r\n        if (xml.tt.body.div.p) {\r\n          praseP(xml.tt.body.div.p, xml.tt.body.div.begin, xml.tt.body.end)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return {\r\n    queue,\r\n    head: xml.tt.head || {}\r\n  }\r\n}\r\n","\r\nexport function hhColonDDColonSSDotMill2Int64(time: string) {\r\n  if (!time) {\r\n    return -1n\r\n  }\r\n\r\n  time = time.trim()\r\n\r\n  let list = time.split(':')\r\n\r\n  let ts = 0n\r\n\r\n  if (list.length === 3) {\r\n    ts += BigInt(+(list.shift().trim())) * 3600000n\r\n  }\r\n  ts += BigInt(+(list.shift().trim())) * 60000n\r\n\r\n  list = list.shift().trim().split('.')\r\n  ts += BigInt(+(list.shift().trim())) * 1000n\r\n  if (list.length) {\r\n    ts += BigInt(+(list.shift().trim()))\r\n  }\r\n\r\n  return ts\r\n}\r\n\r\nexport function hhColonDDColonSSCommaMill2Int64(time: string) {\r\n  if (!time) {\r\n    return -1n\r\n  }\r\n\r\n  time = time.trim()\r\n\r\n  let list = time.split(':')\r\n\r\n  let ts = 0n\r\n\r\n  if (list.length === 3) {\r\n    ts += BigInt(+(list.shift().trim())) * 3600000n\r\n  }\r\n  ts += BigInt(+(list.shift().trim())) * 60000n\r\n\r\n  list = list.shift().trim().split(',')\r\n  ts += BigInt(+(list.shift().trim())) * 1000n\r\n  if (list.length) {\r\n    ts += BigInt(+(list.shift().trim()))\r\n  }\r\n\r\n  return ts\r\n}\r\n","import * as array from './array'\r\n\r\ntype Options = {\r\n  aloneValueName?: string\r\n}\r\n\r\nconst defaultOptions: Options = {\r\n  aloneValueName: '_@attribute'\r\n}\r\n\r\ninterface StackItem {\r\n  obj: Record<string, any>\r\n  tag: string\r\n  start: number\r\n}\r\n\r\nconst splitChar = [' ', '/', '\"', '\\'', '<', '>']\r\n\r\nexport default function xml2Json(xmlStr: string, options = defaultOptions) {\r\n  // remove commented lines\r\n  xmlStr = xmlStr.replace(/<!--[\\s\\S]*?-->/g, '')\r\n  // replace special characters\r\n  xmlStr = xmlStr.replace(/[\\n\\t\\r]/g, '')\r\n  // replace leading spaces and tabs between elements\r\n  xmlStr = xmlStr.replace(/>[ \\t]+</g, '><')\r\n  // delete docType tags\r\n  xmlStr = xmlStr.replace(/<\\?[^>]*\\?>/g, '')\r\n\r\n  const stack: StackItem[] = []\r\n  let pos = 0\r\n\r\n  function addData(key: string, value: any) {\r\n    const item = stack[stack.length - 1]\r\n\r\n    if (!item) {\r\n      return\r\n    }\r\n\r\n    if (key === options.aloneValueName && item.obj[options.aloneValueName] != null) {\r\n      item.obj[options.aloneValueName] = [item.obj[options.aloneValueName], {\r\n        tagName: key,\r\n        ...value\r\n      }]\r\n      return\r\n    }\r\n    if (item.obj[key] == null) {\r\n      item.obj[key] = value\r\n    }\r\n    else if (Array.isArray(item.obj[key])) {\r\n      item.obj[key].push(value)\r\n    }\r\n    else {\r\n      item.obj[key] = [item.obj[key], value]\r\n    }\r\n  }\r\n\r\n  function gotoToken(token: string) {\r\n    while (pos < xmlStr.length) {\r\n      if (xmlStr[pos] === token) {\r\n        return true\r\n      }\r\n      pos++\r\n    }\r\n    return false\r\n  }\r\n\r\n  function readIdentity() {\r\n    skipSpace()\r\n    let key = ''\r\n    while (pos < xmlStr.length) {\r\n      if (array.has(splitChar, xmlStr[pos])) {\r\n        break\r\n      }\r\n      key += xmlStr[pos]\r\n      pos++\r\n    }\r\n    return key\r\n  }\r\n\r\n  function skipSpace() {\r\n    while (pos < xmlStr.length) {\r\n      if (!/\\s|\\r|\\n/.test(xmlStr[pos])) {\r\n        break\r\n      }\r\n      pos++\r\n    }\r\n  }\r\n\r\n  const emptyEndReg = /\\s/\r\n  const singleQuotation = /'/\r\n  const doubleQuotation = /\"/\r\n\r\n  function readAttrValue() {\r\n    if (pos >= xmlStr.length) {\r\n      return true\r\n    }\r\n    skipSpace()\r\n    // 默认属性值结束符为空格\r\n    let end = emptyEndReg\r\n    if (xmlStr[pos] === '\"' || xmlStr[pos] == '\\'') {\r\n      // 属性值是引号开始则结束符也是引号\r\n      end = xmlStr[pos] === '\"' ? doubleQuotation : singleQuotation\r\n      pos++\r\n    }\r\n    let value = ''\r\n    while (pos < xmlStr.length) {\r\n      if (end.test(xmlStr[pos])) {\r\n        pos++\r\n        break\r\n      }\r\n      value += xmlStr[pos]\r\n      pos++\r\n    }\r\n    return value\r\n  }\r\n\r\n  function readAttr() {\r\n    while (true) {\r\n      skipSpace()\r\n      // 判断标签属性结束\r\n      if (xmlStr[pos] === '>' || xmlStr[pos] === '/') {\r\n        break\r\n      }\r\n      let key = readIdentity()\r\n      if (!key) {\r\n        break\r\n      }\r\n      if (key[key.length - 1] === '=') {\r\n        key = key.substring(0, key.length - 1)\r\n      }\r\n      else {\r\n        gotoToken('=')\r\n        pos++\r\n      }\r\n      const value = readAttrValue()\r\n      addData(key, value)\r\n    }\r\n  }\r\n\r\n  // innerText 当前位置到 < 之前\r\n  function readText() {\r\n    skipSpace()\r\n    let text = ''\r\n    while (pos < xmlStr.length) {\r\n      if (xmlStr[pos] === '<') {\r\n        break\r\n      }\r\n      text += xmlStr[pos]\r\n      pos++\r\n    }\r\n    return text\r\n  }\r\n\r\n\r\n  function pop() {\r\n    // 处理 </> 跳出当前 tag\r\n    // 若是 <xx 则是子标签，进入下一次处理 \r\n    while (xmlStr[pos] === '<') {\r\n      const now = pos\r\n      pos++\r\n      skipSpace()\r\n      if (xmlStr[pos] === '/') {\r\n        pos++\r\n        const tag = readIdentity()\r\n        if (tag === stack[stack.length - 1].tag) {\r\n          if (stack.length > 1) {\r\n            const item = stack.pop()\r\n            addData(item.tag, item.obj)\r\n          }\r\n          gotoToken('>')\r\n          pos++\r\n          skipSpace()\r\n        }\r\n        else {\r\n          stack.pop()\r\n          gotoToken('>')\r\n          pos++\r\n          skipSpace()\r\n        }\r\n      }\r\n      else {\r\n        pos = now\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  function readTag() {\r\n    if (pos >= xmlStr.length) {\r\n      return\r\n    }\r\n\r\n    let start = pos\r\n    skipSpace()\r\n    // innerText 的后面部分，中间被标签分割出现这种情况，将其加入 context 中\r\n    if (xmlStr[pos] !== '<') {\r\n      pos = start\r\n      addData(options.aloneValueName, readText())\r\n      pop()\r\n      return readTag()\r\n    }\r\n\r\n    let has = gotoToken('<')\r\n    if (!has) {\r\n      return\r\n    }\r\n\r\n    start = pos\r\n    pos++\r\n\r\n    const tag = readIdentity()\r\n    stack.push({\r\n      obj: {},\r\n      tag,\r\n      start\r\n    })\r\n\r\n    readAttr()\r\n    skipSpace()\r\n    // 自闭合 tag\r\n    if (xmlStr[pos] === '/') {\r\n      pos++\r\n      if (stack.length > 1) {\r\n        const item = stack.pop()\r\n        addData(item.tag, item.obj)\r\n      }\r\n      gotoToken('>')\r\n      pos++\r\n      pop()\r\n      return readTag()\r\n    }\r\n\r\n    has = gotoToken('>')\r\n    if (!has) {\r\n      return\r\n    }\r\n    pos++\r\n\r\n    skipSpace()\r\n    // 检查有 innerText 内容\r\n    if (xmlStr[pos] !== '<') {\r\n      addData(options.aloneValueName, readText())\r\n      skipSpace()\r\n    }\r\n    pop()\r\n    readTag()\r\n  }\r\n\r\n  readTag()\r\n\r\n  return {\r\n    [stack[0].tag]: stack[0].obj\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}