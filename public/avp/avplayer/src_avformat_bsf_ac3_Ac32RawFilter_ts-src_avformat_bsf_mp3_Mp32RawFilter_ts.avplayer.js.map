{"version":3,"file":"src_avformat_bsf_ac3_Ac32RawFilter_ts-src_avformat_bsf_mp3_Mp32RawFilter_ts.avplayer.js","mappings":"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","sources":["webpack://AVPlayer/./src/avformat/bsf/ac3/Ac32RawFilter.ts","webpack://AVPlayer/./src/avformat/bsf/mp3/Mp32RawFilter.ts","webpack://AVPlayer/./src/avformat/formats/mp3/frameHeader.ts"],"sourcesContent":["/*\r\n * libmedia Ac32RawFilter\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport AVBSFilter from '../AVBSFilter'\r\nimport { mapUint8Array, memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport * as logger from 'common/util/logger'\r\nimport * as errorType from 'avutil/error'\r\nimport { AV_TIME_BASE, AV_TIME_BASE_Q, NOPTS_VALUE, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport { addAVPacketData, unrefAVPacket } from 'avutil/util/avpacket'\r\nimport * as ac3 from 'avutil/codecs/ac3'\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\nimport * as is from 'common/util/is'\r\n\r\nexport default class Ac32RawFilter extends AVBSFilter {\r\n\r\n  private caches: {\r\n    duration: number\r\n    dts: bigint\r\n    buffer: Uint8Array\r\n    pos: int64\r\n  }[]\r\n\r\n  private cache: Uint8Array\r\n  private lastDts: int64\r\n\r\n  public init(codecpar: pointer<AVCodecParameters>, timeBase: pointer<Rational>): number {\r\n    super.init(codecpar, timeBase)\r\n\r\n    this.caches = []\r\n\r\n    return 0\r\n  }\r\n\r\n  public sendAVPacket(avpacket: pointer<AVPacket>): number {\r\n    let i = 0\r\n\r\n    let lastDts = this.lastDts || (avpacket.dts !== NOPTS_VALUE_BIGINT ? avpacket.dts : avpacket.pts)\r\n    let buffer: Uint8Array<ArrayBufferLike> = mapUint8Array(avpacket.data, reinterpret_cast<size>(avpacket.size)).slice()\r\n    let firstGot = false\r\n    let hasCache = !!this.cache\r\n\r\n    if (hasCache) {\r\n      buffer = concatTypeArray(Uint8Array, [this.cache, buffer])\r\n      this.cache = null\r\n    }\r\n\r\n    while (i < buffer.length) {\r\n\r\n      if (i > buffer.length - 10) {\r\n        this.cache = buffer.subarray(i)\r\n        this.lastDts = lastDts\r\n        return 0\r\n      }\r\n\r\n      const info = ac3.parseHeader(buffer.subarray(i))\r\n\r\n      if (is.number(info)) {\r\n        let j = i + 1\r\n        for (; j < buffer.length - 1; j++) {\r\n          const syncWord = (buffer[j] << 8) | buffer[j + 1]\r\n          if (syncWord === 0x0B77) {\r\n            i = j\r\n            break\r\n          }\r\n        }\r\n        if (j < buffer.length - 1) {\r\n          continue\r\n        }\r\n\r\n        logger.error('parse ac3 header failed')\r\n        return errorType.DATA_INVALID\r\n      }\r\n\r\n      const item = {\r\n        dts: lastDts,\r\n        buffer: null,\r\n        duration: NOPTS_VALUE,\r\n        pos: avpacket.pos\r\n      }\r\n\r\n      let frameLength = info.frameSize\r\n\r\n      item.buffer = buffer.subarray(i, i + frameLength)\r\n\r\n      if (i + frameLength > buffer.length) {\r\n        this.cache = buffer.subarray(i)\r\n        this.lastDts = lastDts\r\n        return 0\r\n      }\r\n\r\n      const duration = avRescaleQ(\r\n        static_cast<int64>(1536 / info.sampleRate * AV_TIME_BASE),\r\n        AV_TIME_BASE_Q,\r\n        this.inTimeBase\r\n      )\r\n\r\n      item.duration = Number(duration)\r\n\r\n      this.caches.push(item)\r\n\r\n      i += frameLength\r\n      lastDts += duration\r\n\r\n      if (!firstGot && hasCache) {\r\n        firstGot = true\r\n        lastDts = avpacket.dts || avpacket.pts\r\n      }\r\n    }\r\n    this.lastDts = 0n\r\n\r\n    return 0\r\n  }\r\n\r\n  public receiveAVPacket(avpacket: pointer<AVPacket>): number {\r\n    if (this.caches.length) {\r\n\r\n      unrefAVPacket(avpacket)\r\n\r\n      const item = this.caches.shift()\r\n\r\n      const data: pointer<uint8> = avMalloc(item.buffer.length)\r\n      memcpyFromUint8Array(data, item.buffer.length, item.buffer)\r\n      addAVPacketData(avpacket, data, item.buffer.length)\r\n\r\n      avpacket.dts = avpacket.pts = item.dts\r\n      avpacket.pos = item.pos\r\n      avpacket.duration = static_cast<int64>(item.duration)\r\n      avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n      return 0\r\n    }\r\n    else {\r\n      return errorType.EOF\r\n    }\r\n  }\r\n\r\n  public reset(): number {\r\n    this.cache = null\r\n    this.lastDts = 0n\r\n    this.caches.length = 0\r\n    return 0\r\n  }\r\n}\r\n","/*\r\n * libmedia Mp32RawFilter\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport AVBSFilter from '../AVBSFilter'\r\nimport { mapUint8Array, memcpyFromUint8Array } from 'cheap/std/memory'\r\nimport * as logger from 'common/util/logger'\r\nimport * as errorType from 'avutil/error'\r\nimport { AV_TIME_BASE, AV_TIME_BASE_Q, NOPTS_VALUE, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport { avMalloc } from 'avutil/util/mem'\r\nimport AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport { addAVPacketData, unrefAVPacket } from 'avutil/util/avpacket'\r\nimport * as frameHeader from '../../formats/mp3/frameHeader'\r\nimport * as mp3 from 'avutil/codecs/mp3'\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\n\r\nexport default class Mp32RawFilter extends AVBSFilter {\r\n\r\n  private frameHeader: frameHeader.FrameHeader\r\n\r\n  private caches: {\r\n    duration: number\r\n    dts: bigint\r\n    buffer: Uint8Array\r\n    extradata: Uint8Array\r\n    pos: int64\r\n  }[]\r\n\r\n  private cache: Uint8Array\r\n  private lastDts: int64\r\n\r\n  public init(codecpar: pointer<AVCodecParameters>, timeBase: pointer<Rational>): number {\r\n    super.init(codecpar, timeBase)\r\n\r\n    this.caches = []\r\n    this.frameHeader = new frameHeader.FrameHeader()\r\n\r\n    return 0\r\n  }\r\n\r\n  public sendAVPacket(avpacket: pointer<AVPacket>): number {\r\n    let i = 0\r\n\r\n    let lastDts = this.lastDts || (avpacket.dts !== NOPTS_VALUE_BIGINT ? avpacket.dts : avpacket.pts)\r\n    let buffer: Uint8Array<ArrayBufferLike> = mapUint8Array(avpacket.data, reinterpret_cast<size>(avpacket.size)).slice()\r\n    let firstGot = false\r\n    let hasCache = !!this.cache\r\n\r\n    if (hasCache) {\r\n      buffer = concatTypeArray(Uint8Array, [this.cache, buffer])\r\n      this.cache = null\r\n    }\r\n\r\n    while (i < buffer.length) {\r\n\r\n      const syncWord = (buffer[i] << 4) | ((buffer[i + 1] >> 4) & 0x0e)\r\n\r\n      if (syncWord !== 0xFFE) {\r\n        let j = i + 1\r\n        for (; j < buffer.length - 1; j++) {\r\n          const syncWord = (buffer[j] << 4) | ((buffer[j + 1] >> 4) & 0x0e)\r\n          if (syncWord === 0xFFE) {\r\n            i = j\r\n            break\r\n          }\r\n        }\r\n        if (j < buffer.length - 1) {\r\n          continue\r\n        }\r\n        logger.error(`found syncWord not 0xFFE, got: 0x${syncWord.toString(16)}`)\r\n        return errorType.DATA_INVALID\r\n      }\r\n\r\n      const ver = (buffer[1] >>> 3) & 0x03\r\n      // const bitrateIndex = (buffer[2] & 0xF0) >>> 4\r\n      const samplingFreqIndex = (buffer[2] & 0x0C) >>> 2\r\n\r\n      const item = {\r\n        dts: lastDts,\r\n        buffer: null,\r\n        extradata: null,\r\n        duration: NOPTS_VALUE,\r\n        pos: avpacket.pos\r\n      }\r\n\r\n      const sampleRate = mp3.getSampleRateByVersionIndex(ver, samplingFreqIndex)\r\n\r\n      frameHeader.parse(this.frameHeader, (buffer[i] << 24) | (buffer[i + 1] << 16) | (buffer[i + 2] << 8) | buffer[i + 3])\r\n\r\n      let frameLength = frameHeader.getFrameLength(this.frameHeader, sampleRate)\r\n\r\n      item.buffer = buffer.subarray(i, i + frameLength)\r\n\r\n      if (i + frameLength > buffer.length) {\r\n        this.cache = buffer.subarray(i)\r\n        this.lastDts = lastDts\r\n        break\r\n      }\r\n\r\n      const duration = avRescaleQ(\r\n        static_cast<int64>(frameLength / sampleRate * AV_TIME_BASE),\r\n        AV_TIME_BASE_Q,\r\n        this.inTimeBase\r\n      )\r\n\r\n      item.duration = Number(duration)\r\n\r\n      this.caches.push(item)\r\n\r\n      i += frameLength\r\n      lastDts += duration\r\n\r\n      if (!firstGot && hasCache) {\r\n        firstGot = true\r\n        lastDts = avpacket.dts || avpacket.pts\r\n      }\r\n    }\r\n    this.lastDts = 0n\r\n\r\n    return 0\r\n  }\r\n\r\n  public receiveAVPacket(avpacket: pointer<AVPacket>): number {\r\n    if (this.caches.length) {\r\n\r\n      unrefAVPacket(avpacket)\r\n\r\n      const item = this.caches.shift()\r\n\r\n      const data: pointer<uint8> = avMalloc(item.buffer.length)\r\n      memcpyFromUint8Array(data, item.buffer.length, item.buffer)\r\n      addAVPacketData(avpacket, data, item.buffer.length)\r\n\r\n      avpacket.dts = avpacket.pts = item.dts\r\n      avpacket.pos = item.pos\r\n      avpacket.duration = static_cast<int64>(item.duration)\r\n      avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n      return 0\r\n    }\r\n    else {\r\n      return errorType.EOF\r\n    }\r\n  }\r\n\r\n  public reset(): number {\r\n    this.cache = null\r\n    this.lastDts = 0n\r\n    this.caches.length = 0\r\n    return 0\r\n  }\r\n}\r\n","/*\r\n * libmedia mp3 FrameHeader utils\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as mp3 from 'avutil/codecs/mp3'\r\n\r\nexport class FrameHeader {\r\n  version: uint32\r\n  layer: uint32\r\n  protection: uint32\r\n  bitrateIndex: uint32\r\n  samplingFrequency: uint32\r\n  padding: uint32\r\n  private: uint32\r\n  mode: uint32\r\n  modeExtension: uint32\r\n  copyright: uint32\r\n  original: uint32\r\n  emphasis: uint32\r\n}\r\n\r\nexport function parse(header: FrameHeader, value: uint32) {\r\n  header.version = (value >> 19) & 3\r\n  header.layer = (value >> 17) & 3\r\n  header.protection = (value >> 16) & 1\r\n  header.bitrateIndex = (value >> 12) & 0x0f\r\n  header.samplingFrequency = (value >> 10) & 3\r\n  header.padding = (value >> 9) & 1\r\n  header.mode = (value >> 6) & 3\r\n  header.modeExtension = (value >> 4) & 3\r\n  header.copyright = (value >> 3) & 1\r\n  header.original = (value >> 2) & 1\r\n  header.emphasis = value & 3\r\n}\r\n\r\nexport function getFrameLength(header: FrameHeader, sampleRate: int32) {\r\n\r\n  let frameSize = mp3.getBitRateByVersionLayerIndex(\r\n    header.version,\r\n    header.layer,\r\n    header.bitrateIndex\r\n  )\r\n\r\n  switch (header.layer) {\r\n    case 1:\r\n    default:\r\n      // Layer 3\r\n      frameSize = ((frameSize * 144000) / (sampleRate << ((header.version === 3) ? 0 : 1))) >>> 0\r\n      frameSize += header.padding\r\n      break\r\n    case 2:\r\n      // Layer 2\r\n      frameSize = ((frameSize * 144000) / sampleRate) >>> 0\r\n      frameSize += header.padding\r\n      break\r\n    case 3:\r\n      // Layer 1\r\n      frameSize = ((frameSize * 12000) / sampleRate) >>> 0\r\n      frameSize = (frameSize + header.padding) * 4\r\n      break\r\n  }\r\n\r\n  return frameSize\r\n}\r\n"],"names":[],"sourceRoot":""}