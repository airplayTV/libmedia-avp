{"version":3,"file":"src_avformat_formats_IFlvFormat_ts.avplayer.js","mappings":"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AG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,GAAG,CAAG;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,IAAI,CAAE;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,IAAI,CAAE;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,IAAI,CAAE;IACpB,CAAE,GAAG,EAAG,GAAG,EAAG,IAAI,CAAE;IACpB,CAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAE;IACpB,CAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAE;IACpB,CAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAE;IACpB,CAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAE;IACpB,CAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAE;IACpB,CAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAA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","sources":["webpack://AVPlayer/./src/avformat/formats/IFlvFormat.ts","webpack://AVPlayer/./src/avformat/formats/IFormat.ts","webpack://AVPlayer/./src/avformat/formats/flv/FlvHeader.ts","webpack://AVPlayer/./src/avformat/formats/flv/FlvScriptTag.ts","webpack://AVPlayer/./src/avformat/formats/flv/flv.ts","webpack://AVPlayer/./src/avformat/formats/flv/oflv.ts","webpack://AVPlayer/./src/avformat/function/getBytesByDuration.ts","webpack://AVPlayer/./src/avformat/function/mktag.ts","webpack://AVPlayer/./src/avformat/function/seekInBytes.ts","webpack://AVPlayer/./src/avutil/codecs/aac.ts","webpack://AVPlayer/./src/avutil/codecs/ac3.ts","webpack://AVPlayer/./src/avutil/codecs/av1.ts","webpack://AVPlayer/./src/avutil/codecs/flac.ts","webpack://AVPlayer/./src/avutil/codecs/mp3.ts","webpack://AVPlayer/./src/avutil/codecs/opus.ts","webpack://AVPlayer/./src/avutil/codecs/vp8.ts","webpack://AVPlayer/./src/avutil/codecs/vp9.ts","webpack://AVPlayer/./src/avutil/util/amf.ts","webpack://AVPlayer/./src/avutil/util/av1syntax.ts","webpack://AVPlayer/./src/common/io/IOWriterSync.ts"],"sourcesContent":["/*\r\n * libmedia flv decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport FlvHeader from './flv/FlvHeader'\r\nimport FlvScriptTag from './flv/FlvScriptTag'\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport * as logger from 'common/util/logger'\r\nimport { AVPacketSideDataType, AVCodecID, AVMediaType } from 'avutil/codec'\r\nimport { FlvAudioCodecType2AVCodecID,\r\n  FlvVideoCodecType2AVCodecID, FlvTag,\r\n  AVCPacketType,\r\n  VideoPacketType,\r\n  VideoFrameType,\r\n  VideoPacketModExType,\r\n  AVMultiTrackType,\r\n  AudioPacketType,\r\n  AudioChannelOrder,\r\n  AudioPacketModExType,\r\n  AACPacketType\r\n} from './flv/flv'\r\n\r\nimport * as h264 from 'avutil/codecs/h264'\r\nimport * as aac from 'avutil/codecs/aac'\r\nimport * as hevc from 'avutil/codecs/hevc'\r\nimport * as vvc from 'avutil/codecs/vvc'\r\nimport * as av1 from 'avutil/codecs/av1'\r\nimport * as vp9 from 'avutil/codecs/vp9'\r\nimport * as vp8 from 'avutil/codecs/vp8'\r\nimport * as flac from 'avutil/codecs/flac'\r\nimport * as opus from 'avutil/codecs/opus'\r\nimport * as ac3 from 'avutil/codecs/ac3'\r\nimport * as mp3 from 'avutil/codecs/mp3'\r\n\r\nimport * as errorType from 'avutil/error'\r\nimport { IOError } from 'common/io/error'\r\nimport AVStream, { AVDisposition, AVStreamMetadataKey } from 'avutil/AVStream'\r\nimport IFormat from './IFormat'\r\nimport { AVFormat, AVSeekFlags, IOFlags } from 'avutil/avformat'\r\nimport { mapSafeUint8Array, mapUint8Array } from 'cheap/std/memory'\r\nimport { avMalloc, avMallocz } from 'avutil/util/mem'\r\nimport { addAVPacketData, addAVPacketSideData, addSideData, createAVPacket, getAVPacketData, hasAVPacketSideData, hasSideData } from 'avutil/util/avpacket'\r\nimport mktag from '../function/mktag'\r\nimport { avD2Q, avRescaleQ, avRescaleQ3 } from 'avutil/util/rational'\r\nimport { AV_MILLI_TIME_BASE, AV_MILLI_TIME_BASE_Q, AV_NANO_TIME_BASE, AV_NANO_TIME_BASE_Q, INT32_MAX, NOPTS_VALUE, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport * as array from 'common/util/array'\r\nimport seekInBytes from '../function/seekInBytes'\r\nimport isDef from 'common/function/isDef'\r\nimport { FlvColorInfo, FlvStreamContext } from './flv/type'\r\nimport * as amf from 'avutil/util/amf'\r\nimport { AVColorPrimaries, AVColorSpace, AVColorTransferCharacteristic } from 'avutil/pixfmt'\r\nimport { AVContentLightMetadata, AVMasteringDisplayMetadata } from 'avutil/struct/avframe'\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport { initCustomChannelLayout, setChannelLayoutFromMask, unInitChannelLayout } from 'avutil/util/channel'\r\nimport { AVChannel } from 'avutil/audiosamplefmt'\r\nimport * as is from 'common/util/is'\r\n\r\nexport interface IFlvFormatOptions {\r\n  useNanoTimestamp?: boolean\r\n}\r\n\r\nexport default class IFlvFormat extends IFormat {\r\n\r\n  public type: AVFormat = AVFormat.FLV\r\n\r\n  public header: FlvHeader\r\n\r\n  public script: FlvScriptTag\r\n\r\n  public options: IFlvFormatOptions\r\n\r\n  private firstTagPos: int64\r\n\r\n  constructor(options: IFlvFormatOptions = {}) {\r\n    super()\r\n\r\n    this.header = new FlvHeader()\r\n    this.script = new FlvScriptTag()\r\n\r\n    this.options = options\r\n  }\r\n\r\n  public init(formatContext: AVIFormatContext): void {\r\n    if (formatContext.ioReader) {\r\n      formatContext.ioReader.setEndian(true)\r\n    }\r\n  }\r\n\r\n  public async readHeader(formatContext: AVIFormatContext): Promise<number> {\r\n    try {\r\n      const signature = await formatContext.ioReader.peekString(3)\r\n      if (signature !== 'FLV') {\r\n        logger.error('the file format is not flv')\r\n        return errorType.DATA_INVALID\r\n      }\r\n\r\n      await this.header.read(formatContext.ioReader)\r\n      const prev = await formatContext.ioReader.readUint32()\r\n      if (prev !== 0) {\r\n        logger.warn('the previousTagSize0 is not 0')\r\n      }\r\n\r\n      let ret = 0\r\n\r\n      const type = await formatContext.ioReader.peekUint8()\r\n      if (type === FlvTag.SCRIPT) {\r\n        await formatContext.ioReader.skip(1)\r\n        const size = await formatContext.ioReader.readUint24()\r\n        await formatContext.ioReader.skip(7)\r\n        ret = await this.script.read(formatContext.ioReader, size)\r\n      }\r\n      if (ret >= 0) {\r\n        this.firstTagPos = formatContext.ioReader.getPos()\r\n      }\r\n      return ret\r\n    }\r\n    catch (error) {\r\n      logger.error(error.message)\r\n      return formatContext.ioReader.error\r\n    }\r\n  }\r\n\r\n  private async readModEx(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>, mediaType: AVMediaType) {\r\n    let exSize = await formatContext.ioReader.readUint8() + 1\r\n    if (exSize === 256) {\r\n      exSize = await formatContext.ioReader.readUint16() + 1\r\n    }\r\n    const exBuffer = await formatContext.ioReader.readBuffer(exSize)\r\n    const type = await formatContext.ioReader.readUint8()\r\n\r\n    const exType = type & 0xf0\r\n\r\n    if (exType === VideoPacketModExType.TimestampOffsetNano\r\n      && mediaType === AVMediaType.AVMEDIA_TYPE_VIDEO\r\n      || exType === AudioPacketModExType.TimestampOffsetNano\r\n      && mediaType === AVMediaType.AVMEDIA_TYPE_AUDIO\r\n    ) {\r\n      let nanoOffset = 0\r\n      if (exBuffer.length === 3) {\r\n        nanoOffset = (exBuffer[0] << 16) | (exBuffer[1] << 8) | exBuffer[2]\r\n        if (this.options.useNanoTimestamp) {\r\n          avpacket.dts += BigInt(nanoOffset)\r\n        }\r\n        else {\r\n          // 还是使用毫秒时间精度\r\n          avpacket.dts += BigInt(nanoOffset) / 1000000n\r\n        }\r\n        avpacket.pts = avpacket.dts\r\n      }\r\n      else {\r\n        logger.warn(`Invalid ModEx size for Type TimestampOffsetNano!, need 3 but got ${exBuffer.length}`)\r\n      }\r\n    }\r\n    else {\r\n      logger.warn(`unknown ModEx type: ${exType}`)\r\n    }\r\n    return type & 0x0f\r\n  }\r\n\r\n  private async readCodecConfigurationRecord(formatContext: AVIFormatContext, stream: AVStream, avpacket: pointer<AVPacket>, len: int32) {\r\n    const data: pointer<uint8> = avMalloc(reinterpret_cast<size>(len))\r\n    if (stream.codecpar.extradata) {\r\n      addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA, data, reinterpret_cast<size>(len))\r\n      await formatContext.ioReader.readBuffer(len, mapSafeUint8Array(data, reinterpret_cast<size>(len)))\r\n    }\r\n    else {\r\n      stream.codecpar.extradata = data\r\n      stream.codecpar.extradataSize = len\r\n      await formatContext.ioReader.readBuffer(len, mapSafeUint8Array(data, reinterpret_cast<size>(len)))\r\n\r\n      stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA] = mapUint8Array(data, reinterpret_cast<size>(len)).slice()\r\n\r\n      if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264) {\r\n        h264.parseAVCodecParameters(stream)\r\n      }\r\n      else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC) {\r\n        hevc.parseAVCodecParameters(stream)\r\n      }\r\n      else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC) {\r\n        vvc.parseAVCodecParameters(stream)\r\n      }\r\n      else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AV1) {\r\n        av1.parseAVCodecParameters(stream)\r\n      }\r\n      else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VP9) {\r\n        vp9.parseAVCodecParameters(stream)\r\n      }\r\n      else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VP8) {\r\n        vp8.parseAVCodecParameters(stream)\r\n      }\r\n      else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC) {\r\n        aac.parseAVCodecParameters(stream)\r\n      }\r\n      else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_FLAC) {\r\n        flac.parseAVCodecParameters(stream)\r\n      }\r\n      else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_OPUS) {\r\n        opus.parseAVCodecParameters(stream)\r\n      }\r\n    }\r\n  }\r\n\r\n  private async readAVPacketData(formatContext: AVIFormatContext, stream: AVStream, avpacket: pointer<AVPacket>, len: int32) {\r\n    const data: pointer<uint8> = avMalloc(reinterpret_cast<size>(len))\r\n    addAVPacketData(avpacket, data, len)\r\n    await formatContext.ioReader.readBuffer(len, mapSafeUint8Array(data, reinterpret_cast<size>(len)))\r\n  }\r\n\r\n  private parseColorInfo(stream: AVStream, avpacket: pointer<AVPacket>, info: FlvColorInfo) {\r\n    let hasMasteringPrimaries = false\r\n    let hasMasteringLuminance = false\r\n    if (info.hdrMdcv) {\r\n      hasMasteringPrimaries = info.hdrMdcv.redX > 0\r\n        && info.hdrMdcv.redY > 0\r\n        && info.hdrMdcv.blueX > 0\r\n        && info.hdrMdcv.blueY > 0\r\n        && info.hdrMdcv.greenX > 0\r\n        && info.hdrMdcv.greenY > 0\r\n        && info.hdrMdcv.whitePointX > 0\r\n        && info.hdrMdcv.whitePointY > 0\r\n\r\n      hasMasteringLuminance = info.hdrMdcv.maxLuminance > 0 && info.hdrMdcv.minLuminance > 0\r\n    }\r\n    if (info.colorConfig.matrixCoefficients !== AVColorSpace.AVCOL_SPC_RESERVED) {\r\n      stream.codecpar.colorSpace = info.colorConfig.matrixCoefficients\r\n    }\r\n    if (info.colorConfig.colorPrimaries !== AVColorPrimaries.AVCOL_PRI_RESERVED\r\n      && info.colorConfig.colorPrimaries !== AVColorPrimaries.AVCOL_PRI_RESERVED0\r\n    ) {\r\n      stream.codecpar.colorPrimaries = info.colorConfig.colorPrimaries\r\n    }\r\n    if (info.colorConfig.transferCharacteristics !== AVColorTransferCharacteristic.AVCOL_TRC_RESERVED\r\n      && info.colorConfig.transferCharacteristics !== AVColorTransferCharacteristic.AVCOL_TRC_RESERVED0\r\n    ) {\r\n      stream.codecpar.colorTrc = info.colorConfig.transferCharacteristics\r\n    }\r\n    if (info.hdrCll && info.hdrCll.maxCLL && info.hdrCll.maxFall) {\r\n      const metadata: pointer<AVContentLightMetadata> = avMallocz(sizeof(AVContentLightMetadata))\r\n      metadata.maxCLL = info.hdrCll.maxCLL as uint32\r\n      metadata.maxFALL = info.hdrCll.maxFall as uint32\r\n      if (hasSideData(addressof(stream.codecpar.codedSideData), addressof(stream.codecpar.nbCodedSideData), AVPacketSideDataType.AV_PKT_DATA_CONTENT_LIGHT_LEVEL)) {\r\n        addAVPacketSideData(\r\n          avpacket,\r\n          AVPacketSideDataType.AV_PKT_DATA_CONTENT_LIGHT_LEVEL,\r\n          metadata,\r\n          sizeof(AVContentLightMetadata)\r\n        )\r\n      }\r\n      else {\r\n        addSideData(\r\n          addressof(stream.codecpar.codedSideData),\r\n          addressof(stream.codecpar.nbCodedSideData),\r\n          AVPacketSideDataType.AV_PKT_DATA_CONTENT_LIGHT_LEVEL,\r\n          metadata,\r\n          sizeof(AVContentLightMetadata)\r\n        )\r\n      }\r\n    }\r\n    if (hasMasteringLuminance || hasMasteringPrimaries) {\r\n      const metadata: pointer<AVMasteringDisplayMetadata> = avMallocz(sizeof(AVMasteringDisplayMetadata))\r\n\r\n      function setQ(q: pointer<Rational>, d: double) {\r\n        const s = avD2Q(d, INT32_MAX)\r\n        q.den = s.den\r\n        q.num = s.num\r\n      }\r\n\r\n      if (hasMasteringLuminance) {\r\n        metadata.hasLuminance = 1\r\n        setQ(addressof(metadata.maxLuminance), info.hdrMdcv.maxLuminance)\r\n        setQ(addressof(metadata.minLuminance), info.hdrMdcv.minLuminance)\r\n      }\r\n      if (hasMasteringPrimaries) {\r\n        metadata.hasPrimaries = 1\r\n        setQ(addressof(metadata.displayPrimaries[0][0]), info.hdrMdcv.redX)\r\n        setQ(addressof(metadata.displayPrimaries[0][1]), info.hdrMdcv.redY)\r\n        setQ(addressof(metadata.displayPrimaries[1][0]), info.hdrMdcv.greenX)\r\n        setQ(addressof(metadata.displayPrimaries[1][1]), info.hdrMdcv.greenY)\r\n        setQ(addressof(metadata.displayPrimaries[2][0]), info.hdrMdcv.blueX)\r\n        setQ(addressof(metadata.displayPrimaries[2][1]), info.hdrMdcv.blueY)\r\n      }\r\n\r\n      if (hasSideData(addressof(stream.codecpar.codedSideData), addressof(stream.codecpar.nbCodedSideData), AVPacketSideDataType.AV_PKT_DATA_MASTERING_DISPLAY_METADATA)) {\r\n        addAVPacketSideData(\r\n          avpacket,\r\n          AVPacketSideDataType.AV_PKT_DATA_MASTERING_DISPLAY_METADATA,\r\n          metadata,\r\n          sizeof(AVMasteringDisplayMetadata)\r\n        )\r\n      }\r\n      else {\r\n        addSideData(\r\n          addressof(stream.codecpar.codedSideData),\r\n          addressof(stream.codecpar.nbCodedSideData),\r\n          AVPacketSideDataType.AV_PKT_DATA_MASTERING_DISPLAY_METADATA,\r\n          metadata,\r\n          sizeof(AVMasteringDisplayMetadata)\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  private findStream(formatContext: AVIFormatContext, mediaType: AVMediaType, trackId: uint8) {\r\n    for (let i = 0; i < formatContext.streams.length; i++) {\r\n      if (formatContext.streams[i].codecpar.codecType === mediaType) {\r\n        const streamContext = formatContext.streams[i].privData as FlvStreamContext\r\n        if (streamContext && streamContext.trackId === trackId) {\r\n          return formatContext.streams[i]\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private createStream(formatContext: AVIFormatContext, mediaType: AVMediaType, avpacket: pointer<AVPacket>, trackId: uint8) {\r\n    const stream = formatContext.createStream()\r\n    stream.codecpar.codecType = mediaType\r\n    stream.timeBase.den = this.options.useNanoTimestamp ? AV_NANO_TIME_BASE : AV_MILLI_TIME_BASE\r\n    stream.timeBase.num = 1\r\n    stream.startTime = avpacket.pts\r\n    const streamContext: FlvStreamContext = {\r\n      trackId\r\n    }\r\n    stream.privData = streamContext\r\n    if (this.script.onMetaData?.duration) {\r\n      stream.duration = avRescaleQ(\r\n        static_cast<int64>(this.script.onMetaData.duration * 1000),\r\n        AV_MILLI_TIME_BASE_Q,\r\n        stream.timeBase\r\n      )\r\n    }\r\n    if (mediaType === AVMediaType.AVMEDIA_TYPE_VIDEO) {\r\n      if (this.script.onMetaData?.width > 0) {\r\n        stream.codecpar.width = this.script.onMetaData.width\r\n      }\r\n      if (this.script.onMetaData?.height > 0) {\r\n        stream.codecpar.height = this.script.onMetaData.height\r\n      }\r\n      if (this.script.onMetaData?.videoTrackIdInfoMap?.[trackId]) {\r\n        if (this.script.onMetaData.videoTrackIdInfoMap[trackId].title) {\r\n          stream.metadata[AVStreamMetadataKey.TITLE] = this.script.onMetaData.videoTrackIdInfoMap[trackId].title\r\n        }\r\n        if (this.script.onMetaData.videoTrackIdInfoMap[trackId].lang) {\r\n          stream.metadata[AVStreamMetadataKey.LANGUAGE] = this.script.onMetaData.videoTrackIdInfoMap[trackId].lang\r\n        }\r\n        if (this.script.onMetaData.videoTrackIdInfoMap[trackId].width > 0) {\r\n          stream.codecpar.width = this.script.onMetaData.videoTrackIdInfoMap[trackId].width\r\n        }\r\n        if (this.script.onMetaData.videoTrackIdInfoMap[trackId].height > 0) {\r\n          stream.codecpar.height = this.script.onMetaData.videoTrackIdInfoMap[trackId].height\r\n        }\r\n        if (this.script.onMetaData.videoTrackIdInfoMap[trackId].duration > 0) {\r\n          stream.duration = avRescaleQ(\r\n            static_cast<int64>(this.script.onMetaData.videoTrackIdInfoMap[trackId].duration * 1000),\r\n            AV_MILLI_TIME_BASE_Q,\r\n            stream.timeBase\r\n          )\r\n        }\r\n      }\r\n    }\r\n    else if (mediaType === AVMediaType.AVMEDIA_TYPE_AUDIO) {\r\n      if (this.script.onMetaData?.audioTrackIdInfoMap?.[trackId]) {\r\n        if (this.script.onMetaData.audioTrackIdInfoMap[trackId].title) {\r\n          stream.metadata[AVStreamMetadataKey.TITLE] = this.script.onMetaData.audioTrackIdInfoMap[trackId].title\r\n        }\r\n        if (this.script.onMetaData.audioTrackIdInfoMap[trackId].lang) {\r\n          stream.metadata[AVStreamMetadataKey.LANGUAGE] = this.script.onMetaData.audioTrackIdInfoMap[trackId].lang\r\n        }\r\n        if (this.script.onMetaData.audioTrackIdInfoMap[trackId].duration > 0) {\r\n          stream.duration = avRescaleQ(\r\n            static_cast<int64>(this.script.onMetaData.audioTrackIdInfoMap[trackId].duration * 1000),\r\n            AV_MILLI_TIME_BASE_Q,\r\n            stream.timeBase\r\n          )\r\n        }\r\n      }\r\n    }\r\n    if (this.onStreamAdd) {\r\n      this.onStreamAdd(stream)\r\n    }\r\n    return stream\r\n  }\r\n\r\n  private async readAVPacket_(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number> {\r\n\r\n    const now = formatContext.ioReader.getPos()\r\n\r\n    avpacket.pos = now\r\n\r\n    let needRedo = false\r\n    const type = (await formatContext.ioReader.readUint8()) & 0x1f\r\n    let size = await formatContext.ioReader.readUint24()\r\n    let timestamp = await formatContext.ioReader.readUint24()\r\n    const timestampExt = await formatContext.ioReader.readUint8()\r\n    if (timestampExt) {\r\n      timestamp = (timestampExt << 24) | timestamp\r\n    }\r\n    avpacket.dts = this.options.useNanoTimestamp\r\n      ? avRescaleQ(static_cast<int64>(timestamp), AV_MILLI_TIME_BASE_Q, AV_NANO_TIME_BASE_Q)\r\n      : static_cast<int64>(timestamp)\r\n    avpacket.pts = avpacket.dts\r\n    // streamId 总是 0\r\n    await formatContext.ioReader.skip(3)\r\n\r\n    if (type === FlvTag.AUDIO) {\r\n\r\n      avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n\r\n      const audioHeader = await formatContext.ioReader.readUint8()\r\n      size--\r\n      const flvAudioCodecId = (audioHeader & 0xf0) >> 4\r\n      // new, used to signal FOURCC mode\r\n      if (flvAudioCodecId === 9) {\r\n        let isAudioMultiTrack = false\r\n        let audioPacketType = audioHeader & 0x0f\r\n        while (audioPacketType === AudioPacketType.ModEx) {\r\n          let now = formatContext.ioReader.getPos()\r\n          audioPacketType = await this.readModEx(formatContext, avpacket, AVMediaType.AVMEDIA_TYPE_AUDIO)\r\n          size -= static_cast<int32>(formatContext.ioReader.getPos() - now)\r\n        }\r\n        let tag: uint32 = 0\r\n        let audioMultiTrackType = 0\r\n\r\n        if (audioPacketType === AudioPacketType.MultiTrack) {\r\n          isAudioMultiTrack = true\r\n          const type = await formatContext.ioReader.readUint8()\r\n          size--\r\n          audioMultiTrackType = (type & 0xf0) >> 4\r\n          audioPacketType = type & 0x0f\r\n\r\n          if (audioMultiTrackType !== AVMultiTrackType.ManyTracksManyCodecs) {\r\n            tag = await formatContext.ioReader.readUint32()\r\n            size -= 4\r\n          }\r\n        }\r\n        else {\r\n          tag = await formatContext.ioReader.readUint32()\r\n          size -= 4\r\n        }\r\n\r\n        let nextAVPacket = avpacket\r\n\r\n        while (true) {\r\n          let trackSize = size\r\n          let trackId: uint8 = 0\r\n          if (isAudioMultiTrack) {\r\n            if (audioMultiTrackType === AVMultiTrackType.ManyTracksManyCodecs) {\r\n              tag = await formatContext.ioReader.readUint32()\r\n              size -= 4\r\n            }\r\n            trackId = await formatContext.ioReader.readUint8()\r\n            size--\r\n            if (audioMultiTrackType !== AVMultiTrackType.OneTrack) {\r\n              trackSize = await formatContext.ioReader.readUint24()\r\n              size -= 3\r\n            }\r\n            else {\r\n              trackSize = size\r\n            }\r\n          }\r\n\r\n          let stream = this.findStream(formatContext, AVMediaType.AVMEDIA_TYPE_AUDIO, trackId)\r\n          if (!stream) {\r\n            stream = this.createStream(formatContext, AVMediaType.AVMEDIA_TYPE_AUDIO, nextAVPacket, trackId)\r\n            if (tag === mktag('ac-3')) {\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_AC3\r\n            }\r\n            else if (tag === mktag('ec-3')) {\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_EAC3\r\n            }\r\n            else if (tag === mktag('Opus')) {\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_OPUS\r\n              stream.codecpar.sampleRate = 48000\r\n            }\r\n            else if (tag === mktag('.mp3')) {\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_MP3\r\n            }\r\n            else if (tag === mktag('fLaC')) {\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_FLAC\r\n            }\r\n            else if (tag === mktag('mp4a')) {\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_AAC\r\n            }\r\n            else {\r\n              logger.warn(`unknown codec fourcc(${tag.toString(16)})`)\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_NONE\r\n            }\r\n          }\r\n          nextAVPacket.streamIndex = stream.index\r\n          size -= trackSize\r\n\r\n          if (audioPacketType === AudioPacketType.MultichannelConfig) {\r\n            const channelOrder = await formatContext.ioReader.readUint8()\r\n            const channelCount = await formatContext.ioReader.readUint8()\r\n            trackSize -= 2\r\n            unInitChannelLayout(addressof(stream.codecpar.chLayout))\r\n\r\n            if (channelOrder === AudioChannelOrder.Custom) {\r\n              initCustomChannelLayout(addressof(stream.codecpar.chLayout), channelCount)\r\n              for (let i = 0; i < channelCount; i++) {\r\n                const id = await formatContext.ioReader.readUint8()\r\n                trackSize--\r\n                if (id < 18) {\r\n                  stream.codecpar.chLayout.u.map[i].id = id\r\n                }\r\n                else if (id >= 18 && id <= 23) {\r\n                  stream.codecpar.chLayout.u.map[i].id = id - 18 + AVChannel.AV_CHANNEL_LOW_FREQUENCY_2\r\n                }\r\n                else if (id === 0xFE) {\r\n                  stream.codecpar.chLayout.u.map[i].id = AVChannel.AV_CHANNEL_UNUSED\r\n                }\r\n                else {\r\n                  stream.codecpar.chLayout.u.map[i].id = AVChannel.AV_CHANNEL_UNKNOWN\r\n                }\r\n              }\r\n            }\r\n            else if (channelOrder === AudioChannelOrder.Native) {\r\n              let mask = static_cast<uint64>((await formatContext.ioReader.readUint32()) as uint32)\r\n              trackSize -= 4\r\n              mask = (mask & 0x3FFFFn) | ((mask & 0xFC0000n) << (BigInt(AVChannel.AV_CHANNEL_LOW_FREQUENCY_2) - 18n))\r\n              setChannelLayoutFromMask(addressof(stream.codecpar.chLayout), mask)\r\n            }\r\n            needRedo = true\r\n          }\r\n          else if (audioPacketType === AudioPacketType.SequenceStart) {\r\n            if (trackSize) {\r\n              await this.readCodecConfigurationRecord(formatContext, stream, nextAVPacket, trackSize)\r\n              trackSize = 0\r\n              needRedo = false\r\n              if (!hasAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA)) {\r\n                needRedo = true\r\n              }\r\n            }\r\n            else {\r\n              needRedo = true\r\n            }\r\n          }\r\n          else if (audioPacketType === AudioPacketType.SequenceEnd) {\r\n            nextAVPacket.flags |= AVPacketFlags.AV_PKT_FLAG_END\r\n            needRedo = false\r\n          }\r\n          else if (audioPacketType === AudioPacketType.CodedFrames) {\r\n            await this.readAVPacketData(formatContext, stream, nextAVPacket, trackSize)\r\n            if ((stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AC3\r\n              || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_EAC3\r\n              || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MP3)\r\n              && stream.codecpar.sampleRate === NOPTS_VALUE\r\n            ) {\r\n              if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AC3\r\n                || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_EAC3\r\n              ) {\r\n                const info = ac3.parseHeader(getAVPacketData(nextAVPacket))\r\n                if (!is.number(info)) {\r\n                  stream.codecpar.sampleRate = reinterpret_cast<int32>(info.sampleRate)\r\n                  stream.codecpar.chLayout.nbChannels = reinterpret_cast<int32>(info.channels)\r\n                  stream.codecpar.bitrate = static_cast<int64>(info.bitrate)\r\n                }\r\n              }\r\n              else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MP3) {\r\n                mp3.parseAVCodecParameters(stream, getAVPacketData(nextAVPacket))\r\n              }\r\n            }\r\n            needRedo = false\r\n            trackSize = 0\r\n          }\r\n          else {\r\n            logger.warn(`invalid audioPacketType ${audioPacketType}`)\r\n          }\r\n          if (trackSize) {\r\n            await formatContext.ioReader.skip(trackSize)\r\n          }\r\n\r\n          if (nextAVPacket !== avpacket && !needRedo) {\r\n            formatContext.interval.packetBuffer.push(nextAVPacket)\r\n          }\r\n\r\n          if (isAudioMultiTrack\r\n            && audioMultiTrackType !== AVMultiTrackType.OneTrack\r\n            && size\r\n          ) {\r\n            nextAVPacket = createAVPacket()\r\n            nextAVPacket.pos = now\r\n            nextAVPacket.timeBase = avpacket.timeBase\r\n            nextAVPacket.dts = avpacket.dts\r\n            nextAVPacket.pts = avpacket.pts\r\n            nextAVPacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n            continue\r\n          }\r\n          break\r\n        }\r\n      }\r\n      else {\r\n        let stream = this.findStream(formatContext, AVMediaType.AVMEDIA_TYPE_AUDIO, 0)\r\n        if (!stream) {\r\n          stream = this.createStream(formatContext, AVMediaType.AVMEDIA_TYPE_AUDIO, avpacket, 0)\r\n          stream.disposition |= AVDisposition.DEFAULT\r\n          stream.codecpar.chLayout.nbChannels = (audioHeader & 0x01) === 1 ? 2 : 1\r\n          stream.codecpar.sampleRate = 44100 << ((audioHeader & 0x0c) >>> 2) >> 3\r\n          stream.codecpar.bitsPerCodedSample = (audioHeader & 0x02) ? 16 : 8\r\n          // FLV_CODECID_PCM\r\n          if (flvAudioCodecId === 0) {\r\n            stream.codecpar.codecId = stream.codecpar.bitsPerCodedSample === 8 ? AVCodecID.AV_CODEC_ID_PCM_U8 : AVCodecID.AV_CODEC_ID_PCM_S16LE\r\n          }\r\n          // FLV_CODECID_PCM_LE\r\n          else if (flvAudioCodecId === 3) {\r\n            stream.codecpar.codecId = stream.codecpar.bitsPerCodedSample === 8 ? AVCodecID.AV_CODEC_ID_PCM_U8 : AVCodecID.AV_CODEC_ID_PCM_S16LE\r\n          }\r\n          else {\r\n            stream.codecpar.codecId = FlvAudioCodecType2AVCodecID[flvAudioCodecId] ?? AVCodecID.AV_CODEC_ID_NONE\r\n          }\r\n          if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_SPEEX) {\r\n            stream.codecpar.sampleRate = 16000\r\n            stream.codecpar.chLayout.nbChannels = 1\r\n          }\r\n          else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_ALAW\r\n            || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_PCM_MULAW\r\n          ) {\r\n            stream.codecpar.sampleRate = 8000\r\n          }\r\n        }\r\n        avpacket.streamIndex = stream.index\r\n\r\n        if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC) {\r\n          const packetType = await formatContext.ioReader.readUint8()\r\n          size--\r\n          if (packetType === AACPacketType.AAC_SEQUENCE_HEADER) {\r\n            this.readCodecConfigurationRecord(formatContext, stream, avpacket, size)\r\n            size = 0\r\n            if (!hasAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA)) {\r\n              needRedo = true\r\n            }\r\n          }\r\n        }\r\n        if (size) {\r\n          await this.readAVPacketData(formatContext, stream, avpacket, size)\r\n          size = 0\r\n        }\r\n      }\r\n    }\r\n    else if (type === FlvTag.VIDEO) {\r\n\r\n      const videoHeader = await formatContext.ioReader.readUint8()\r\n      const isExVideoHeader = videoHeader & 0x80\r\n      const videoFrameType = (videoHeader & 0x70) >> 4\r\n      size--\r\n\r\n      if (videoFrameType === VideoFrameType.KeyFrame) {\r\n        avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n      }\r\n\r\n      if (isExVideoHeader) {\r\n\r\n        let processVideoBody = true\r\n        let isVideoMultiTrack = false\r\n\r\n        let videoPacketType = videoHeader & 0x0f\r\n\r\n        while (videoPacketType === VideoPacketType.ModEx) {\r\n          let now = formatContext.ioReader.getPos()\r\n          videoPacketType = await this.readModEx(formatContext, avpacket, AVMediaType.AVMEDIA_TYPE_VIDEO)\r\n          size -= static_cast<int32>(formatContext.ioReader.getPos() - now)\r\n        }\r\n\r\n        let tag: uint32 = 0\r\n        let videoMultiTrackType = 0\r\n\r\n        if (videoPacketType !== VideoPacketType.Metadata\r\n          && videoFrameType === VideoFrameType.Command\r\n        ) {\r\n          processVideoBody = false\r\n          needRedo = true\r\n        }\r\n        else if (videoPacketType === VideoPacketType.MultiTrack) {\r\n          isVideoMultiTrack = true\r\n          const type = await formatContext.ioReader.readUint8()\r\n          size--\r\n          videoMultiTrackType = (type & 0xf0) >> 4\r\n          videoPacketType = type & 0x0f\r\n\r\n          if (videoMultiTrackType !== AVMultiTrackType.ManyTracksManyCodecs) {\r\n            tag = await formatContext.ioReader.readUint32()\r\n            size -= 4\r\n          }\r\n        }\r\n        else {\r\n          tag = await formatContext.ioReader.readUint32()\r\n          size -= 4\r\n        }\r\n\r\n        let nextAVPacket = avpacket\r\n\r\n        while (processVideoBody) {\r\n          let trackSize = size\r\n          let trackId: uint8 = 0\r\n          if (isVideoMultiTrack) {\r\n            if (videoMultiTrackType === AVMultiTrackType.ManyTracksManyCodecs) {\r\n              tag = await formatContext.ioReader.readUint32()\r\n              size -= 4\r\n            }\r\n            trackId = await formatContext.ioReader.readUint8()\r\n            size--\r\n            if (videoMultiTrackType !== AVMultiTrackType.OneTrack) {\r\n              trackSize = await formatContext.ioReader.readUint24()\r\n              size -= 3\r\n            }\r\n            else {\r\n              trackSize = size\r\n            }\r\n          }\r\n\r\n          let stream = this.findStream(formatContext, AVMediaType.AVMEDIA_TYPE_VIDEO, trackId)\r\n          if (!stream) {\r\n            stream = this.createStream(formatContext, AVMediaType.AVMEDIA_TYPE_VIDEO, nextAVPacket, trackId)\r\n            if (tag === mktag('avc1')) {\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_H264\r\n            }\r\n            else if (tag === mktag('hvc1')) {\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_HEVC\r\n            }\r\n            else if (tag === mktag('vvc1')) {\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_VVC\r\n            }\r\n            else if (tag === mktag('av01')) {\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_AV1\r\n            }\r\n            else if (tag === mktag('vp09')) {\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_VP9\r\n            }\r\n            else if (tag === mktag('vp08')) {\r\n              stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_VP8\r\n            }\r\n          }\r\n          nextAVPacket.streamIndex = stream.index\r\n          size -= trackSize\r\n          if (videoPacketType === VideoPacketType.Metadata) {\r\n            const now = formatContext.ioReader.getPos()\r\n            const endPos = now + static_cast<int64>(trackSize)\r\n            const key = await amf.parseValue(formatContext.ioReader, endPos)\r\n            const value = await amf.parseValue(formatContext.ioReader, endPos)\r\n            if (key === 'colorInfo') {\r\n              this.parseColorInfo(stream, nextAVPacket, value)\r\n            }\r\n            else {\r\n              logger.warn(`unknown metadata key ${key}`)\r\n            }\r\n            if (formatContext.ioReader.getPos() < endPos) {\r\n              await formatContext.ioReader.seek(endPos)\r\n            }\r\n            needRedo = true\r\n            trackSize = 0\r\n          }\r\n          else if (videoPacketType === VideoPacketType.SequenceStart) {\r\n            if (trackSize) {\r\n              await this.readCodecConfigurationRecord(formatContext, stream, nextAVPacket, trackSize)\r\n              trackSize = 0\r\n              needRedo = false\r\n              if (!hasAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA)) {\r\n                needRedo = true\r\n              }\r\n            }\r\n            else {\r\n              needRedo = true\r\n            }\r\n          }\r\n          else if (videoPacketType === VideoPacketType.SequenceEnd) {\r\n            nextAVPacket.flags |= AVPacketFlags.AV_PKT_FLAG_END\r\n            needRedo = false\r\n          }\r\n          else if (videoPacketType === VideoPacketType.MPEG2TSSequenceStart) {\r\n            if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AV1) {\r\n              // descriptor_tag + descriptor_length\r\n              await this.readCodecConfigurationRecord(formatContext, stream, nextAVPacket, trackSize - 2)\r\n              needRedo = false\r\n              trackSize = 0\r\n              if (!hasAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA)) {\r\n                needRedo = true\r\n              }\r\n            }\r\n            else {\r\n              needRedo = true\r\n            }\r\n          }\r\n          else if (videoPacketType === VideoPacketType.CodedFrames || videoPacketType === VideoPacketType.CodedFramesX) {\r\n            if (videoPacketType === VideoPacketType.CodedFrames\r\n              && (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n                || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n                || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n              )\r\n            ) {\r\n              const ct: int32 = await formatContext.ioReader.readInt24()\r\n              nextAVPacket.pts = nextAVPacket.dts + (\r\n                this.options.useNanoTimestamp\r\n                  ? avRescaleQ3(static_cast<int64>(ct), AV_MILLI_TIME_BASE_Q, addressof(avpacket.timeBase))\r\n                  : static_cast<int64>(ct)\r\n              )\r\n              trackSize -= 3\r\n            }\r\n            await this.readAVPacketData(formatContext, stream, nextAVPacket, trackSize)\r\n            trackSize = 0\r\n            needRedo = false\r\n          }\r\n          else {\r\n            logger.warn(`invalid videoPacketType ${videoPacketType}`)\r\n          }\r\n          if (trackSize) {\r\n            await formatContext.ioReader.skip(trackSize)\r\n          }\r\n\r\n          if (!needRedo && nextAVPacket !== avpacket) {\r\n            formatContext.interval.packetBuffer.push(nextAVPacket)\r\n          }\r\n\r\n          if (isVideoMultiTrack\r\n            && videoMultiTrackType !== AVMultiTrackType.OneTrack\r\n            && size\r\n          ) {\r\n            nextAVPacket = createAVPacket()\r\n            nextAVPacket.pos = now\r\n            nextAVPacket.timeBase = avpacket.timeBase\r\n            nextAVPacket.dts = avpacket.dts\r\n            nextAVPacket.pts = avpacket.pts\r\n            if (videoFrameType === VideoFrameType.KeyFrame) {\r\n              nextAVPacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n            }\r\n            continue\r\n          }\r\n          break\r\n        }\r\n      }\r\n      else {\r\n        if (videoFrameType !== VideoFrameType.Command) {\r\n          let stream = this.findStream(formatContext, AVMediaType.AVMEDIA_TYPE_VIDEO, 0)\r\n          if (!stream) {\r\n            stream = this.createStream(formatContext, AVMediaType.AVMEDIA_TYPE_VIDEO, avpacket, 0)\r\n            stream.disposition |= AVDisposition.DEFAULT\r\n            stream.codecpar.codecId = FlvVideoCodecType2AVCodecID[videoHeader & 0x0f] ?? AVCodecID.AV_CODEC_ID_NONE\r\n          }\r\n          avpacket.streamIndex = stream.index\r\n\r\n          if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n            || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n            || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n            || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MPEG4\r\n          ) {\r\n            const packetType = await formatContext.ioReader.readUint8()\r\n            const ct: int32 = await formatContext.ioReader.readInt24()\r\n            size -= 4\r\n\r\n            avpacket.pts = avpacket.dts + (\r\n              this.options.useNanoTimestamp\r\n                ? avRescaleQ3(static_cast<int64>(ct), AV_MILLI_TIME_BASE_Q, addressof(avpacket.timeBase))\r\n                : static_cast<int64>(ct)\r\n            )\r\n\r\n            if (packetType === AVCPacketType.AVC_SEQUENCE_HEADER) {\r\n              await this.readCodecConfigurationRecord(formatContext, stream, avpacket, size)\r\n              if (!hasAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA)) {\r\n                needRedo = true\r\n              }\r\n            }\r\n            else if (packetType === AVCPacketType.AVC_END_OF_ENQUENCE) {\r\n              avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_END\r\n            }\r\n            else {\r\n              await this.readAVPacketData(formatContext, stream, avpacket, size)\r\n            }\r\n          }\r\n          else {\r\n            await this.readAVPacketData(formatContext, stream, avpacket, size)\r\n          }\r\n          size = 0\r\n        }\r\n        else {\r\n          needRedo = true\r\n        }\r\n      }\r\n    }\r\n    else if (type === FlvTag.SCRIPT) {\r\n      let ret = await this.script.read(formatContext.ioReader, size)\r\n      if (ret < 0) {\r\n        return ret\r\n      }\r\n      return await this.readAVPacket_(formatContext, avpacket)\r\n    }\r\n    else if (type === FlvTag.SCRIPT_AMF3) {\r\n      logger.warn('not support script tag encoded by amf3, ignore it')\r\n    }\r\n    else {\r\n      logger.warn(`invalid tag type: ${type}, try to sync to next tag`)\r\n      await this.syncTag(formatContext)\r\n      return this.readAVPacket_(formatContext, avpacket)\r\n    }\r\n\r\n    if (size) {\r\n      await formatContext.ioReader.skip(size)\r\n    }\r\n\r\n    const tagSize = formatContext.ioReader.getPos() - now\r\n    const prev = static_cast<int64>(await formatContext.ioReader.readUint32())\r\n\r\n    if (tagSize !== prev) {\r\n      logger.warn(`tag ${type} size not match, size: ${tagSize}, previousTagSize: ${prev}`)\r\n      // 数据不合法，返回错误\r\n      return errorType.DATA_INVALID\r\n    }\r\n    if (needRedo) {\r\n      return this.readAVPacket_(formatContext, avpacket)\r\n    }\r\n    return 0\r\n  }\r\n\r\n  public async readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number> {\r\n    try {\r\n      avpacket.timeBase.den = this.options.useNanoTimestamp ? AV_NANO_TIME_BASE : AV_MILLI_TIME_BASE\r\n      avpacket.timeBase.num = 1\r\n      return await this.readAVPacket_(formatContext, avpacket)\r\n    }\r\n    catch (error) {\r\n      if (formatContext.ioReader.error !== IOError.END\r\n        && formatContext.ioReader.error !== IOError.ABORT\r\n      ) {\r\n        logger.error(`read packet error, ${error}`)\r\n        return errorType.DATA_INVALID\r\n      }\r\n      return formatContext.ioReader.error\r\n    }\r\n  }\r\n\r\n  public async syncTag(formatContext: AVIFormatContext) {\r\n    let pos: int64 = NOPTS_VALUE_BIGINT\r\n\r\n    const analyzeCount = 3\r\n\r\n    while (true) {\r\n      try {\r\n        if (formatContext.ioReader.flags & IOFlags.ABORT) {\r\n          break\r\n        }\r\n        const byte = await formatContext.ioReader.readUint8()\r\n        if (byte === FlvTag.AUDIO || byte === FlvTag.VIDEO) {\r\n          pos = formatContext.ioReader.getPos() - 1n\r\n          const size = await formatContext.ioReader.readUint24()\r\n\r\n          if (size > 10 * 1024 * 1024) {\r\n            await formatContext.ioReader.seek(pos + 1n)\r\n            continue\r\n          }\r\n\r\n          await formatContext.ioReader.skip(4)\r\n          const streamId = await formatContext.ioReader.readUint24()\r\n          if (streamId !== 0) {\r\n            await formatContext.ioReader.seek(pos + 1n)\r\n            continue\r\n          }\r\n          await formatContext.ioReader.skip(size)\r\n          const tagSize = formatContext.ioReader.getPos() - pos\r\n          const prev = static_cast<int64>(await formatContext.ioReader.readUint32())\r\n\r\n          if (tagSize === prev) {\r\n            let count = 0\r\n            while (count <= analyzeCount) {\r\n              const now = formatContext.ioReader.getPos()\r\n              const type = await formatContext.ioReader.readUint8()\r\n              if (type === FlvTag.AUDIO || type === FlvTag.VIDEO || type === FlvTag.SCRIPT) {\r\n                const size = await formatContext.ioReader.readUint24()\r\n                await formatContext.ioReader.skip(7 + size)\r\n                const tagSize = formatContext.ioReader.getPos() - now\r\n                const prev = static_cast<int64>(await formatContext.ioReader.readUint32())\r\n\r\n                if (tagSize === prev) {\r\n                  count++\r\n                }\r\n                else {\r\n                  break\r\n                }\r\n              }\r\n              else {\r\n                break\r\n              }\r\n            }\r\n            if (count < analyzeCount) {\r\n              await formatContext.ioReader.seek(pos + 1n)\r\n              pos = NOPTS_VALUE_BIGINT\r\n            }\r\n            else {\r\n              break\r\n            }\r\n          }\r\n          else {\r\n            await formatContext.ioReader.seek(pos + 1n)\r\n            pos = NOPTS_VALUE_BIGINT\r\n            continue\r\n          }\r\n        }\r\n      }\r\n      catch (error) {\r\n        break\r\n      }\r\n    }\r\n\r\n    if (pos !== NOPTS_VALUE_BIGINT) {\r\n      await formatContext.ioReader.seek(pos)\r\n    }\r\n  }\r\n\r\n  public async seek(\r\n    formatContext: AVIFormatContext,\r\n    stream: AVStream,\r\n    timestamp: int64,\r\n    flags: int32\r\n  ): Promise<int64> {\r\n    const now = formatContext.ioReader.getPos()\r\n    if (flags & AVSeekFlags.BYTE) {\r\n      await formatContext.ioReader.seek(timestamp)\r\n      if (!(flags & AVSeekFlags.ANY)) {\r\n        await this.syncTag(formatContext)\r\n      }\r\n      return now\r\n    }\r\n    else {\r\n      if (stream && stream.sampleIndexes.length) {\r\n        let index = array.binarySearch(stream.sampleIndexes, (item) => {\r\n          if (item.pts > timestamp) {\r\n            return -1\r\n          }\r\n          return 1\r\n        })\r\n        if (index > 0 && avRescaleQ(timestamp - stream.sampleIndexes[index - 1].pts, stream.timeBase, AV_MILLI_TIME_BASE_Q) < 10000n) {\r\n          logger.debug(`seek in sampleIndexes, found index: ${index}, pts: ${stream.sampleIndexes[index - 1].pts}, pos: ${stream.sampleIndexes[index - 1].pos}`)\r\n          await formatContext.ioReader.seek(stream.sampleIndexes[index - 1].pos)\r\n          return now\r\n        }\r\n      }\r\n\r\n      if (this.script.canSeek()) {\r\n        const { pos, dts } = this.script.dts2Position(Number(avRescaleQ(timestamp, stream.timeBase, AV_MILLI_TIME_BASE_Q) / 1000n))\r\n        if (pos > 0) {\r\n          logger.debug(`seek in filepositions, found pts: ${dts}, pos: ${pos}`)\r\n          await formatContext.ioReader.seek(static_cast<int64>(pos))\r\n\r\n          const nextTag = await formatContext.ioReader.peekUint8()\r\n          if (nextTag !== FlvTag.AUDIO && nextTag !== FlvTag.VIDEO && nextTag !== FlvTag.SCRIPT) {\r\n            await this.syncTag(formatContext)\r\n          }\r\n          return now\r\n        }\r\n      }\r\n      logger.debug('not found any keyframe index, try to seek in bytes')\r\n      return seekInBytes(\r\n        formatContext,\r\n        stream,\r\n        timestamp,\r\n        this.firstTagPos,\r\n        this.readAVPacket.bind(this),\r\n        this.syncTag.bind(this)\r\n      )\r\n    }\r\n  }\r\n\r\n  public getAnalyzeStreamsCount(): number {\r\n    let count = 0\r\n    if (this.header.hasAudio || isDef(this.script.onMetaData.audiocodecid)) {\r\n      count++\r\n    }\r\n    if (this.header.hasVideo || isDef(this.script.onMetaData.videocodecid)) {\r\n      count++\r\n    }\r\n\r\n    return count\r\n  }\r\n}\r\n","/*\r\n * libmedia abstract format decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport { AVFormat } from 'avutil/avformat'\r\n\r\nexport default abstract class IFormat {\r\n\r\n  public type: AVFormat = AVFormat.UNKNOWN\r\n\r\n  public onStreamAdd: (stream: Stream) => void\r\n\r\n  public abstract init(formatContext: AVIFormatContext): void\r\n\r\n  public async destroy(formatContext: AVIFormatContext): Promise<void> {}\r\n\r\n  public abstract getAnalyzeStreamsCount(): number\r\n  public abstract readHeader(formatContext: AVIFormatContext): Promise<number>\r\n  public abstract readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number>\r\n\r\n  /**\r\n   * seek\r\n   * \r\n   * @param context \r\n   * @param stream \r\n   * @param timestamp 毫秒时间戳\r\n   * @param flags \r\n   * \r\n   * @returns 返回 seek 之前的下一个 avpacket pos（若不知道返回 0n 方便之后可以再 seek 回来）返回负数表示 seek 失败\r\n   */\r\n  public abstract seek(\r\n    formatContext: AVIFormatContext,\r\n    stream: Stream,\r\n    timestamp: int64,\r\n    flags: int32\r\n  ): Promise<int64>\r\n}\r\n","/*\r\n * libmedia flv header format\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\n\r\nexport default class FlvHeader {\r\n  /**\r\n   * 3 bytes 签名\r\n   */\r\n  public signature: string\r\n\r\n  /**\r\n   * 1 bytes 版本，比如 0x01 表示 FLV 版本 1\r\n   */\r\n  public version: number\r\n\r\n  /**\r\n   * 1 bytes 第一位标记是否有视频，第 4 位标记是否有音频，其余位保留\r\n   */\r\n  public flags: number\r\n\r\n  /**\r\n   * 4 bytes FLV header 的大小，单位是字节，目前是 9\r\n   */\r\n  public dataOffset: number\r\n\r\n  /**\r\n   * 是否有视频\r\n   */\r\n  public hasVideo: boolean\r\n\r\n  /**\r\n   * 是否有音频\r\n   */\r\n  public hasAudio: boolean\r\n\r\n  constructor() {\r\n\r\n    this.signature = 'FLV'\r\n    this.version = 1\r\n    this.flags = 0\r\n    this.dataOffset = 9\r\n\r\n    this.hasAudio = false\r\n    this.hasVideo = false\r\n  }\r\n\r\n  public async read(ioReader: IOReader) {\r\n    this.signature = await ioReader.readString(3)\r\n    this.version = await ioReader.readUint8()\r\n    this.flags = await ioReader.readUint8()\r\n    this.dataOffset = await ioReader.readUint32()\r\n\r\n    this.hasAudio = !!(this.flags & 0x04)\r\n    this.hasVideo = !!(this.flags & 0x01)\r\n  }\r\n\r\n  public write(ioWriter: IOWriter) {\r\n    this.flags = 0\r\n    if (this.hasAudio) {\r\n      this.flags |= 0x04\r\n    }\r\n    if (this.hasVideo) {\r\n      this.flags |= 0x01\r\n    }\r\n\r\n    ioWriter.writeString(this.signature)\r\n    ioWriter.writeUint8(this.version)\r\n    ioWriter.writeUint8(this.flags)\r\n    ioWriter.writeUint32(this.dataOffset)\r\n  }\r\n}\r\n","/*\r\n * libmedia flv script tag format\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport IOWriterSync from 'common/io/IOWriterSync'\r\n\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\nimport * as logger from 'common/util/logger'\r\nimport { FlvMetaData } from './type'\r\nimport { FlvTag } from './flv'\r\n\r\nimport * as flv from './oflv'\r\nimport * as errorType from 'avutil/error'\r\nimport { parseValue, writeValue } from 'avutil/util/amf'\r\n\r\nexport default class FlvScriptTag {\r\n\r\n  public onMetaData: Partial<FlvMetaData>\r\n\r\n  constructor() {\r\n    this.onMetaData = {\r\n      canSeekToEnd: false\r\n    }\r\n  }\r\n\r\n  public async read(ioReader: IOReader, size: number) {\r\n    const now = ioReader.getPos()\r\n    const endPos = now + static_cast<int64>(size)\r\n    const key = await parseValue(ioReader, endPos)\r\n    const value = await parseValue(ioReader, endPos)\r\n    this[key] = value\r\n\r\n    if (endPos > ioReader.getPos()) {\r\n      await ioReader.skip(static_cast<int32>(endPos - ioReader.getPos()))\r\n    }\r\n\r\n    const tagSize = Number(ioReader.getPos() - now)\r\n    const prev = await ioReader.readUint32()\r\n\r\n    if (tagSize + 11 !== prev) {\r\n      logger.warn(`script size not match, size: ${tagSize + 11}, previousTagSize: ${prev}`)\r\n\r\n      return errorType.DATA_INVALID\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  public computeSize() {\r\n    const cache = []\r\n    const cacheWriter = new IOWriterSync()\r\n    cacheWriter.onFlush = (data) => {\r\n      cache.push(data.slice())\r\n      return 0\r\n    }\r\n    writeValue(cacheWriter, 'onMetaData')\r\n    writeValue(cacheWriter, this.onMetaData)\r\n\r\n    cacheWriter.flush()\r\n\r\n    const buffer = concatTypeArray(Uint8Array, cache)\r\n\r\n    return buffer.length\r\n  }\r\n\r\n  public write(ioWriter: IOWriterSync) {\r\n    if (this.onMetaData) {\r\n      const cache = []\r\n      const cacheWriter = new IOWriterSync()\r\n      cacheWriter.onFlush = (data) => {\r\n        cache.push(data.slice())\r\n        return 0\r\n      }\r\n\r\n      writeValue(cacheWriter, 'onMetaData')\r\n      writeValue(cacheWriter, this.onMetaData)\r\n\r\n      cacheWriter.flush()\r\n\r\n      const buffer = concatTypeArray(Uint8Array, cache)\r\n      flv.writeTag(ioWriter, FlvTag.SCRIPT, 0n, undefined, buffer)\r\n    }\r\n  }\r\n\r\n  public dts2Position(dts: number) {\r\n    if (this.canSeek()) {\r\n      let index = -1\r\n      const times = this.onMetaData.keyframes.times\r\n      const position = this.onMetaData.keyframes.filepositions\r\n\r\n      let i: number\r\n      for (i = 0; i < times.length; i++) {\r\n        if (times[i] === dts) {\r\n          index = i\r\n          break\r\n        }\r\n        else if (times[i] > dts) {\r\n          index = Math.max(i - 1, 0)\r\n          break\r\n        }\r\n      }\r\n      if (i && i === times.length) {\r\n        index = times.length - 1\r\n      }\r\n      return {\r\n        pos: position[index],\r\n        dts: times[index]\r\n      }\r\n    }\r\n\r\n    return {\r\n      pos: -1,\r\n      dts: -1\r\n    }\r\n  }\r\n\r\n  public position2DTS(pos: number) {\r\n    if (this.canSeek()) {\r\n      let index = -1\r\n      const times = this.onMetaData.keyframes.times\r\n      const position = this.onMetaData.keyframes.filepositions\r\n      let i = 0\r\n      for (i = 0; i < position.length; i++) {\r\n        if (position[i] > pos) {\r\n          index = i\r\n          break\r\n        }\r\n      }\r\n      if (i === position.length) {\r\n        return this.onMetaData.duration ?? times[times.length - 1]\r\n      }\r\n      return times[index]\r\n    }\r\n    return -1\r\n  }\r\n\r\n  public canSeek(): boolean {\r\n    return !!(this.onMetaData.keyframes\r\n      && this.onMetaData.keyframes.filepositions\r\n      && this.onMetaData.keyframes.filepositions.length)\r\n  }\r\n}\r\n","/*\r\n * libmedia flv defined\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVCodecID } from 'avutil/codec'\r\n\r\nexport const enum FlvTag {\r\n  AUDIO = 8,\r\n  VIDEO = 9,\r\n  SCRIPT = 18,\r\n  SCRIPT_AMF3 = 15\r\n}\r\n\r\nexport const enum VideoFrameType {\r\n  // a seekable frame\r\n  KeyFrame = 1,\r\n  // a non - seekable frame\r\n  InterFrame = 2,\r\n  // H.263 only\r\n  DisposableInterFrame = 3,\r\n  // reserved for server use only\r\n  GeneratedKeyFrame = 4,\r\n  // If videoFrameType is not ignored and is set to VideoFrameType.Command,\r\n  // the payload will not contain video data. Instead, (Ex)VideoTagHeader\r\n  // will be followed by a UI8, representing the following meanings:\r\n  //\r\n  // 0 = Start of client-side seeking video frame sequence\r\n  // 1 = End of client-side seeking video frame sequence\r\n  //\r\n  // frameType is ignored if videoPacketType is VideoPacketType.MetaData\r\n  Command = 5\r\n}\r\n\r\nexport const enum VideoCommand {\r\n  StartSeek = 0,\r\n  EndSeek = 1\r\n}\r\n\r\nexport const enum VideoPacketType {\r\n  SequenceStart = 0,\r\n  CodedFrames = 1,\r\n  SequenceEnd = 2,\r\n  // CompositionTime Offset is implicitly set to zero. This optimization\r\n  // avoids transmitting an SI24 composition time value of zero over the wire.\r\n  // See the ExVideoTagBody section below for corresponding pseudocode.\r\n  CodedFramesX = 3,\r\n  // ExVideoTagBody does not contain video data. Instead, it contains\r\n  // an AMF-encoded metadata. Refer to the Metadata Frame section for\r\n  // an illustration of its usage. For example, the metadata might include\r\n  // HDR information. This also enables future possibilities for expressing\r\n  // additional metadata meant for subsequent video sequences.\r\n  //\r\n  // If VideoPacketType.Metadata is present, the FrameType flags\r\n  // at the top of this table should be ignored.\r\n  Metadata = 4,\r\n  // Carriage of bitstream in MPEG-2 TS format\r\n  //\r\n  // PacketTypeSequenceStart and PacketTypeMPEG2TSSequenceStart\r\n  // are mutually exclusive\r\n  MPEG2TSSequenceStart = 5,\r\n  // Turns on video multiTrack mode\r\n  MultiTrack = 6,\r\n  // ModEx is a special signal within the VideoPacketType enum that\r\n  // serves to both modify and extend the behavior of the current packet.\r\n  // When this signal is encountered, it indicates the presence of\r\n  // additional modifiers or extensions, requiring further processing to\r\n  // adjust or augment the packet's functionality. ModEx can be used to\r\n  // introduce new capabilities or modify existing ones, such as\r\n  // enabling support for high-precision timestamps or other advanced\r\n  // features that enhance the base packet structure.\r\n  ModEx = 7\r\n}\r\n\r\nexport const enum AudioPacketType {\r\n  SequenceStart = 0,\r\n  CodedFrames = 1,\r\n  SequenceEnd = 2,\r\n  MultichannelConfig = 4,\r\n  MultiTrack = 5,\r\n  ModEx = 7\r\n}\r\n\r\nexport const enum VideoPacketModExType {\r\n  TimestampOffsetNano = 0\r\n}\r\n\r\nexport const enum AudioPacketModExType {\r\n  TimestampOffsetNano = 0\r\n}\r\n\r\nexport const enum AVMultiTrackType {\r\n  OneTrack = 0,\r\n  ManyTracks,\r\n  ManyTracksManyCodecs\r\n}\r\n\r\nexport const enum AVCPacketType {\r\n  AVC_SEQUENCE_HEADER,\r\n  AVC_NALU,\r\n  AVC_END_OF_ENQUENCE\r\n}\r\n\r\nexport const enum AACPacketType {\r\n  AAC_SEQUENCE_HEADER,\r\n  AAC_RAW\r\n}\r\n\r\nexport const enum AudioChannelOrder {\r\n  Unspecified = 0,\r\n  Native = 1,\r\n  Custom = 2\r\n}\r\n\r\nexport const AVCodecID2FlvCodecType = {\r\n  [AVCodecID.AV_CODEC_ID_PCM_U8]: 0,\r\n  [AVCodecID.AV_CODEC_ID_PCM_S16LE]: 3,\r\n  [AVCodecID.AV_CODEC_ID_AAC]: 10,\r\n  [AVCodecID.AV_CODEC_ID_MP3]: 2,\r\n  [AVCodecID.AV_CODEC_ID_SPEEX]: 11,\r\n  [AVCodecID.AV_CODEC_ID_ADPCM_SWF]: 1,\r\n  [AVCodecID.AV_CODEC_ID_NELLYMOSER]: 6,\r\n  [AVCodecID.AV_CODEC_ID_PCM_ALAW]: 7,\r\n  [AVCodecID.AV_CODEC_ID_PCM_MULAW]: 8,\r\n\r\n  [AVCodecID.AV_CODEC_ID_H264]: 7,\r\n  [AVCodecID.AV_CODEC_ID_HEVC]: 12,\r\n  // [AVCodecID.AV_CODEC_ID_VVC]: 13,\r\n  [AVCodecID.AV_CODEC_ID_MPEG4]: 9,\r\n  [AVCodecID.AV_CODEC_ID_H263]: 2,\r\n  [AVCodecID.AV_CODEC_ID_FLASHSV]: 3,\r\n  [AVCodecID.AV_CODEC_ID_VP6F]: 4,\r\n  [AVCodecID.AV_CODEC_ID_VP6A]: 5,\r\n  [AVCodecID.AV_CODEC_ID_FLASHSV2]: 6\r\n}\r\n\r\nexport const FlvAudioCodecType2AVCodecID = {\r\n  10: AVCodecID.AV_CODEC_ID_AAC,\r\n  2: AVCodecID.AV_CODEC_ID_MP3,\r\n  11: AVCodecID.AV_CODEC_ID_SPEEX,\r\n\r\n  1: AVCodecID.AV_CODEC_ID_ADPCM_SWF,\r\n  4: AVCodecID.AV_CODEC_ID_NELLYMOSER,\r\n  5: AVCodecID.AV_CODEC_ID_NELLYMOSER,\r\n  6: AVCodecID.AV_CODEC_ID_NELLYMOSER,\r\n  7: AVCodecID.AV_CODEC_ID_PCM_ALAW,\r\n  8: AVCodecID.AV_CODEC_ID_PCM_MULAW\r\n}\r\n\r\nexport const FlvVideoCodecType2AVCodecID = {\r\n  7: AVCodecID.AV_CODEC_ID_H264,\r\n  12: AVCodecID.AV_CODEC_ID_HEVC,\r\n  // 13: AVCodecID.AV_CODEC_ID_VVC,\r\n  9: AVCodecID.AV_CODEC_ID_MPEG4,\r\n\r\n  2: AVCodecID.AV_CODEC_ID_H263,\r\n  3: AVCodecID.AV_CODEC_ID_FLASHSV,\r\n  4: AVCodecID.AV_CODEC_ID_VP6F,\r\n  5: AVCodecID.AV_CODEC_ID_VP6A,\r\n  6: AVCodecID.AV_CODEC_ID_FLASHSV2\r\n}\r\n\r\nexport const AVCodecID2FlvCodecTag = {\r\n  [AVCodecID.AV_CODEC_ID_H264]: 'avc1',\r\n  [AVCodecID.AV_CODEC_ID_HEVC]: 'hvc1',\r\n  [AVCodecID.AV_CODEC_ID_VVC]: 'vvc1',\r\n  [AVCodecID.AV_CODEC_ID_VP8]: 'vp08',\r\n  [AVCodecID.AV_CODEC_ID_VP9]: 'vp09',\r\n  [AVCodecID.AV_CODEC_ID_AV1]: 'av01',\r\n\r\n  [AVCodecID.AV_CODEC_ID_AC3]: 'ac-3',\r\n  [AVCodecID.AV_CODEC_ID_EAC3]: 'ec-3',\r\n  [AVCodecID.AV_CODEC_ID_OPUS]: 'Opus',\r\n  [AVCodecID.AV_CODEC_ID_FLAC]: 'fLaC',\r\n  [AVCodecID.AV_CODEC_ID_MP3]: '.mp3',\r\n  [AVCodecID.AV_CODEC_ID_AAC]: 'mp4a'\r\n}\r\n","/*\r\n * libmedia flv encode\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVCodecID } from 'avutil/codec'\r\nimport { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport IOWriterSync from 'common/io/IOWriterSync'\r\nimport { AudioPacketModExType, AudioPacketType, AVCodecID2FlvCodecTag, AVCodecID2FlvCodecType, AVMultiTrackType, FlvTag, VideoFrameType, VideoPacketModExType, VideoPacketType } from './flv'\r\nimport { FlvContext, FlvStreamContext } from './type'\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport { avRescaleQ2 } from 'avutil/util/rational'\r\nimport { AV_MILLI_TIME_BASE_Q, AV_NANO_TIME_BASE_Q } from 'avutil/constant'\r\nimport mktag from '../../function/mktag'\r\nimport * as is from 'common/util/is'\r\nimport AVStream from 'avutil/AVStream'\r\n\r\nexport function updateSize(ioWriter: IOWriterSync, pos: int64, size: int32) {\r\n  const now = ioWriter.getPos()\r\n  const pointer = ioWriter.getPointer()\r\n  const minPos = now - static_cast<int64>(pointer)\r\n  if (pos < now && pos >= minPos) {\r\n    ioWriter.seekInline(pointer + Number(pos - now))\r\n    ioWriter.writeUint24(size)\r\n    ioWriter.seekInline(pointer)\r\n  }\r\n  else {\r\n    ioWriter.seek(pos)\r\n    ioWriter.writeUint24(size)\r\n    ioWriter.seek(now)\r\n  }\r\n}\r\n\r\nexport function writeTag(\r\n  ioWriter: IOWriterSync,\r\n  type: FlvTag,\r\n  timestamp: int64,\r\n  dataHeader?: (ioWriter: IOWriterSync) => void,\r\n  data?: Uint8Array | ((ioWriter: IOWriterSync) => void),\r\n  previousTagSizeCallback?: (previousTagSize: int32) => void\r\n) {\r\n  ioWriter.flush()\r\n  // tagType\r\n  ioWriter.writeUint8(type)\r\n  const sizePos = ioWriter.getPos()\r\n  // size\r\n  ioWriter.writeUint24(0)\r\n  // timestamp\r\n  ioWriter.writeUint24(Number(timestamp & 0xffffffn))\r\n  // timestampExtended\r\n  ioWriter.writeUint8(Number((timestamp >> 24n) & 0xffn))\r\n  // streamId always 0\r\n  ioWriter.writeUint24(0)\r\n\r\n  const dataPos = ioWriter.getPos()\r\n  if (dataHeader) {\r\n    dataHeader(ioWriter)\r\n  }\r\n  if (is.func(data)) {\r\n    data(ioWriter)\r\n    updateSize(ioWriter, sizePos, Number(ioWriter.getPos() - dataPos))\r\n  }\r\n  else if (data) {\r\n    updateSize(ioWriter, sizePos, data.length + Number(ioWriter.getPos() - dataPos))\r\n    ioWriter.writeBuffer(data)\r\n  }\r\n  const previousTagSize = Number(ioWriter.getPos() - sizePos) + 1\r\n  if (previousTagSizeCallback) {\r\n    previousTagSizeCallback(previousTagSize)\r\n  }\r\n  ioWriter.writeUint32(previousTagSize)\r\n}\r\n\r\nexport function isEnhancedCodecId(codecId: AVCodecID) {\r\n  if (codecId === AVCodecID.AV_CODEC_ID_AAC\r\n    || codecId === AVCodecID.AV_CODEC_ID_H264\r\n    || codecId === AVCodecID.AV_CODEC_ID_MP3\r\n    || codecId === AVCodecID.AV_CODEC_ID_MPEG4\r\n  ) {\r\n    return false\r\n  }\r\n  return !!AVCodecID2FlvCodecTag[codecId]\r\n}\r\n\r\nexport function writeVideoHeader(\r\n  ioWriter: IOWriterSync,\r\n  stream: AVStream,\r\n  context: FlvContext,\r\n  enhanced: boolean,\r\n  type: uint8,\r\n  flags: AVPacketFlags,\r\n  timestamp: int64,\r\n  timeBase: pointer<Rational>,\r\n  ct: int32 = 0\r\n) {\r\n\r\n  const streamContext = stream.privData as FlvStreamContext\r\n\r\n  let header = enhanced ? 0x80 : 0\r\n  header |= ((flags & AVPacketFlags.AV_PKT_FLAG_KEY) ? VideoFrameType.KeyFrame : VideoFrameType.InterFrame) << 4\r\n\r\n  if (enhanced) {\r\n    if (context.enableNanoTimestamp && timeBase) {\r\n      const nano = avRescaleQ2(timestamp, timeBase, AV_NANO_TIME_BASE_Q)\r\n      const mill = avRescaleQ2(timestamp, timeBase, AV_MILLI_TIME_BASE_Q)\r\n      const offset = nano - mill * 1000000n\r\n      if (offset) {\r\n        header |= VideoPacketType.ModEx\r\n        ioWriter.writeUint8(header)\r\n        // modExSize - 1\r\n        ioWriter.writeUint8(2)\r\n        ioWriter.writeUint24(static_cast<int32>(offset))\r\n        header = VideoPacketModExType.TimestampOffsetNano << 4\r\n      }\r\n    }\r\n    if (context.multiVideoTracks) {\r\n      header |= VideoPacketType.MultiTrack\r\n      ioWriter.writeUint8(header)\r\n      header = AVMultiTrackType.OneTrack << 4\r\n    }\r\n    header |= type\r\n    ioWriter.writeUint8(header)\r\n    ioWriter.writeUint32(mktag(AVCodecID2FlvCodecTag[stream.codecpar.codecId]))\r\n    if (context.multiVideoTracks) {\r\n      ioWriter.writeUint8(streamContext.trackId)\r\n    }\r\n    if (type === VideoPacketType.CodedFrames) {\r\n      ioWriter.writeInt24(ct)\r\n    }\r\n  }\r\n  else {\r\n    header |= AVCodecID2FlvCodecType[stream.codecpar.codecId] & 0x0f\r\n    ioWriter.writeUint8(header)\r\n    if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n      || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n      || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n      || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MPEG4\r\n    ) {\r\n      ioWriter.writeUint8(type)\r\n      ioWriter.writeInt24(ct)\r\n    }\r\n  }\r\n}\r\n\r\nexport function writeAudioHeader(\r\n  ioWriter: IOWriterSync,\r\n  stream: AVStream,\r\n  context: FlvContext,\r\n  enhanced: boolean,\r\n  type: uint8,\r\n  timestamp: int64,\r\n  timeBase: pointer<Rational>\r\n) {\r\n  const streamContext = stream.privData as FlvStreamContext\r\n\r\n  let header = (enhanced ? 9 : (AVCodecID2FlvCodecType[stream.codecpar.codecId] & 0x0f)) << 4\r\n\r\n  if (enhanced) {\r\n    if (context.enableNanoTimestamp) {\r\n      const nano = avRescaleQ2(timestamp, timeBase, AV_NANO_TIME_BASE_Q)\r\n      const mill = avRescaleQ2(timestamp, timeBase, AV_MILLI_TIME_BASE_Q)\r\n      const offset = nano - mill * 1000000n\r\n      if (offset) {\r\n        header |= AudioPacketType.ModEx\r\n        ioWriter.writeUint8(header)\r\n        // modExSize - 1\r\n        ioWriter.writeUint8(2)\r\n        ioWriter.writeUint24(static_cast<int32>(offset))\r\n        header = AudioPacketModExType.TimestampOffsetNano << 4\r\n      }\r\n    }\r\n    if (context.multiVideoTracks) {\r\n      header |= AudioPacketType.MultiTrack\r\n      ioWriter.writeUint8(header)\r\n      header = AVMultiTrackType.OneTrack << 4\r\n    }\r\n    header |= type\r\n    ioWriter.writeUint8(header)\r\n    ioWriter.writeUint32(mktag(AVCodecID2FlvCodecTag[stream.codecpar.codecId]))\r\n    if (context.multiVideoTracks) {\r\n      ioWriter.writeUint8(streamContext.trackId)\r\n    }\r\n  }\r\n  else {\r\n    /**\r\n     * SoundType 声道类型，对 Nellymoser 来说，永远是单声道；对 AAC 来说，永远是双声道\r\n     * - 0 sndMono 单声道\r\n     * - 1 sndStereo 双声道\r\n     */\r\n    if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC || stream.codecpar.chLayout.nbChannels > 1) {\r\n      header |= 0x01\r\n    }\r\n    /**\r\n     * SoundSize 采样精度，对于压缩过的音频，永远是 16 位\r\n     * - 0 snd8Bit\r\n     * - 1 snd16Bit\r\n     */\r\n    if (stream.codecpar.codecId !== AVCodecID.AV_CODEC_ID_PCM_U8) {\r\n      header |= 0x02\r\n    }\r\n    /**\r\n     * SoundRate 采样率，对 AAC 来说，永远等于 3\r\n     * - 0 5.5-kHz\r\n     * - 1 1-kHz\r\n     * - 2 22-kHz\r\n     * - 3 44-kHz\r\n     */\r\n    if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC || stream.codecpar.sampleRate >= 44000) {\r\n      header |= 0x0c\r\n    }\r\n    else if (stream.codecpar.sampleRate >= 22000) {\r\n      header |= 0x08\r\n    }\r\n    else if (stream.codecpar.sampleRate >= 11000) {\r\n      header |= 0x04\r\n    }\r\n    ioWriter.writeUint8(header)\r\n    if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC) {\r\n      ioWriter.writeUint8(type)\r\n    }\r\n  }\r\n}\r\n","/*\r\n * libmedia get bytes by duration\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport AVStream from 'avutil/AVStream'\r\nimport * as array from 'common/util/array'\r\nimport { avRescaleQ } from 'avutil/util/rational'\r\nimport { AV_MILLI_TIME_BASE_Q } from 'avutil/constant'\r\n\r\nexport function getBytesByDuration(streams: AVStream[], duration: int64, timeBase: Rational) {\r\n  let bytes = 0n\r\n  array.each(streams, (st) => {\r\n    bytes += st.codecpar.bitrate * avRescaleQ(duration, timeBase, AV_MILLI_TIME_BASE_Q) / 8000n\r\n  })\r\n  return bytes\r\n}\r\n","/*\r\n * libmedia string tag to uint32 in big end\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as logger from 'common/util/logger'\r\n\r\nexport default function mktag(tag: string): number {\r\n  if (tag.length !== 4) {\r\n    logger.warn(`tag length is not 4, tag: ${tag}`)\r\n  }\r\n\r\n  let value = 0\r\n  for (let i = 0; i < 4; i++) {\r\n    value = (value << 8) | tag.charCodeAt(i)\r\n  }\r\n\r\n  return value\r\n}\r\n","/*\r\n * libmedia seek in bytes with timestamp\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVStream from 'avutil/AVStream'\r\nimport { AV_MILLI_TIME_BASE_Q, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport { avRescaleQ, avRescaleQ2 } from 'avutil/util/rational'\r\nimport { getBytesByDuration } from './getBytesByDuration'\r\nimport { createAVPacket, destroyAVPacket } from 'avutil/util/avpacket'\r\nimport * as errorType from 'avutil/error'\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport * as logger from 'common/util/logger'\r\nimport { IOFlags } from 'avutil/avformat'\r\n\r\nexport default async function seekInBytes(\r\n  context: AVIFormatContext,\r\n  stream: AVStream,\r\n  timestamp: int64,\r\n  firstPacketPos: int64,\r\n  readAVPacket: (context: AVIFormatContext, avpacket: pointer<AVPacket>) => Promise<int32>,\r\n  syncAVPacket: (context: AVIFormatContext) => Promise<void>\r\n) {\r\n\r\n  const now = context.ioReader.getPos()\r\n\r\n  const fileSize = await context.ioReader.fileSize()\r\n  let pos: int64 = NOPTS_VALUE_BIGINT\r\n  let duration = timestamp\r\n  if (stream.startTime !== NOPTS_VALUE_BIGINT) {\r\n    duration -= stream.startTime\r\n  }\r\n  else {\r\n    duration -= stream.firstDTS\r\n  }\r\n\r\n  const pointPts = avRescaleQ(timestamp, stream.timeBase, AV_MILLI_TIME_BASE_Q)\r\n\r\n  // 头十秒直接回到开始位置\r\n  if (pointPts < 10000n) {\r\n    logger.debug(`seek pts is earlier then 10s, seek to first packet pos(${firstPacketPos}) directly`)\r\n    await context.ioReader.seek(firstPacketPos)\r\n    return now\r\n  }\r\n\r\n  let bytes = getBytesByDuration(context.streams, duration, stream.timeBase)\r\n  // 最大到结尾往前 10 秒\r\n  const max = fileSize - getBytesByDuration(context.streams, 10000n, AV_MILLI_TIME_BASE_Q)\r\n  const length = getBytesByDuration(context.streams, 10000n, AV_MILLI_TIME_BASE_Q)\r\n  if (bytes > max) {\r\n    bytes = max\r\n  }\r\n  if (bytes < firstPacketPos) {\r\n    await context.ioReader.seek(firstPacketPos)\r\n    return now\r\n  }\r\n  const avpacket = createAVPacket()\r\n  let seekMax = fileSize\r\n  let seekMin = 0n\r\n\r\n  while (true) {\r\n    if (seekMax - seekMin < length) {\r\n      pos = seekMin\r\n      break\r\n    }\r\n    await context.ioReader.seek(bytes)\r\n    await syncAVPacket(context)\r\n    if (context.ioReader.flags & IOFlags.ABORT) {\r\n      break\r\n    }\r\n    const now = context.ioReader.getPos()\r\n\r\n    let ret = await readAVPacket(context, avpacket)\r\n\r\n    if (ret >= 0) {\r\n      const currentPts = avRescaleQ2(avpacket.pts, addressof(avpacket.timeBase), AV_MILLI_TIME_BASE_Q)\r\n      const diff = currentPts - pointPts\r\n\r\n      logger.debug(`try to seek to pos: ${bytes}, got packet pts: ${avpacket.pts}(${currentPts}ms), diff: ${diff}ms`)\r\n\r\n      // seek 时间戳的前面 10 秒内\r\n      if (diff <= 0n && -diff < 10000n) {\r\n        pos = now\r\n        break\r\n      }\r\n      // seek 后面\r\n      else if (diff > 0n) {\r\n        seekMax = bytes\r\n        bytes = (seekMin + seekMax) >> 1n\r\n      }\r\n      // seek 前面 10 秒外\r\n      else {\r\n        seekMin = bytes\r\n        bytes = (seekMin + seekMax) >> 1n\r\n      }\r\n    }\r\n    else {\r\n      // 失败了重新 seek 回原来的位置\r\n      pos = NOPTS_VALUE_BIGINT\r\n      break\r\n    }\r\n    if (context.ioReader.flags & IOFlags.ABORT) {\r\n      break\r\n    }\r\n  }\r\n\r\n  destroyAVPacket(avpacket)\r\n\r\n  if (pos !== NOPTS_VALUE_BIGINT) {\r\n    logger.debug(`finally seek to pos ${pos}`)\r\n\r\n    await context.ioReader.seek(pos)\r\n    await syncAVPacket(context)\r\n    return now\r\n  }\r\n  else {\r\n    await context.ioReader.seek(now)\r\n    if (context.ioReader.flags & IOFlags.ABORT) {\r\n      return static_cast<int64>(errorType.EOF)\r\n    }\r\n  }\r\n\r\n  return static_cast<int64>(errorType.FORMAT_NOT_SUPPORT)\r\n}\r\n","/*\r\n * libmedia aac util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVSampleFormat } from '../audiosamplefmt'\r\nimport Stream from '../AVStream'\r\nimport { AVPacketSideDataType } from '../codec'\r\nimport { NOPTS_VALUE } from '../constant'\r\nimport AVCodecParameters from '../struct/avcodecparameters'\r\nimport BitReader from 'common/io/BitReader'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport const enum MPEG4AudioObjectTypes {\r\n  NULL = 0,\r\n  /**\r\n   * Main-AAC\r\n   */\r\n  AAC_MAIN,\r\n  /**\r\n   * LC-AAC\r\n   */\r\n  AAC_LC,\r\n  AAC_SSR,\r\n  AAC_LTP,\r\n  /**\r\n   * HE-AAC\r\n   */\r\n  AAC_SBR,\r\n  AAC_SCALABLE,\r\n\r\n  AAC_LD = 23,\r\n\r\n  AAC_PS = 29,\r\n\r\n  LAYER1 = 32,\r\n  LAYER2,\r\n  /**\r\n   * MP3\r\n   */\r\n  LAYER3,\r\n\r\n  AAC_ELD = 39\r\n}\r\n\r\nexport const AACProfile2Name: Partial<Record<MPEG4AudioObjectTypes, string>> = {\r\n  [MPEG4AudioObjectTypes.AAC_MAIN]: 'Main',\r\n  [MPEG4AudioObjectTypes.AAC_LC]: 'LC',\r\n  [MPEG4AudioObjectTypes.AAC_SSR]: 'SSR',\r\n  [MPEG4AudioObjectTypes.AAC_LTP]: 'LTP',\r\n  [MPEG4AudioObjectTypes.AAC_SBR]: 'HE',\r\n  [MPEG4AudioObjectTypes.AAC_SCALABLE]: 'SCALABLE',\r\n  [MPEG4AudioObjectTypes.AAC_PS]: 'HEv2',\r\n  [MPEG4AudioObjectTypes.AAC_LD]: 'LD',\r\n  [MPEG4AudioObjectTypes.AAC_ELD]: 'ELD'\r\n}\r\n\r\nexport const MPEG4SamplingFrequencyIndex = {\r\n  96000: 0,\r\n  88200: 1,\r\n  64000: 2,\r\n  48000: 3,\r\n  44100: 4,\r\n  32000: 5,\r\n  24000: 6,\r\n  22050: 7,\r\n  16000: 8,\r\n  12000: 9,\r\n  11025: 10,\r\n  8000: 11,\r\n  7350: 12\r\n}\r\n\r\nexport const MPEG4SamplingFrequencies = [\r\n  96000,\r\n  88200,\r\n  64000,\r\n  48000,\r\n  44100,\r\n  32000,\r\n  24000,\r\n  22050,\r\n  16000,\r\n  12000,\r\n  11025,\r\n  8000,\r\n  7350,\r\n  NOPTS_VALUE,\r\n  NOPTS_VALUE,\r\n  NOPTS_VALUE\r\n]\r\n\r\nexport const MPEG4Channels = [\r\n  NOPTS_VALUE,\r\n  1,\r\n  2,\r\n  3,\r\n  4,\r\n  5,\r\n  6,\r\n  7\r\n]\r\n\r\n/**\r\n * 解析 AAC AudioSpecificConfig\r\n *    \r\n *             frequency\r\n *              44100Hz        fill bit\r\n *               4 bit          3 bit\r\n *              -------         -----\r\n *    0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 0\r\n *    ---------         -------\r\n *      5 bit            4 bit\r\n *     AAC LC           fl, fr\r\n *    profile           channel\r\n * \r\n * url: https://wiki.multimedia.cx/index.php/MPEG-4_Audio#Audio_Specific_Config\r\n * \r\n */\r\n\r\nexport function getAVCodecParameters(extradata: Uint8ArrayInterface) {\r\n  let profile = NOPTS_VALUE\r\n  let sampleRate = NOPTS_VALUE\r\n  let channels = NOPTS_VALUE\r\n  if (extradata.length >= 2) {\r\n    profile = (extradata[0] >> 3) & 0x1f\r\n    sampleRate = MPEG4SamplingFrequencies[((extradata[0] & 0x07) << 1)\r\n      | (extradata[1] >> 7)]\r\n\r\n    channels = MPEG4Channels[(extradata[1] >> 3) & 0x0f]\r\n  }\r\n\r\n  return {\r\n    profile,\r\n    sampleRate,\r\n    channels\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: Stream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata) {\r\n    const { profile, sampleRate, channels } = getAVCodecParameters(extradata)\r\n    stream.codecpar.profile = profile\r\n    stream.codecpar.sampleRate = sampleRate\r\n    stream.codecpar.chLayout.nbChannels = channels\r\n    stream.codecpar.frameSize = profile ===  MPEG4AudioObjectTypes.AAC_SBR ? 2048 : 1024\r\n    stream.codecpar.format = AVSampleFormat.AV_SAMPLE_FMT_FLTP\r\n  }\r\n}\r\n\r\nexport function avCodecParameters2Extradata(codecpar: AVCodecParameters) {\r\n  const samplingFreqIndex = MPEG4SamplingFrequencyIndex[codecpar.sampleRate]\r\n  const channelConfig = codecpar.chLayout.nbChannels\r\n  const profile = codecpar.profile === NOPTS_VALUE ? MPEG4AudioObjectTypes.AAC_LC : codecpar.profile\r\n\r\n  const extradata = new Uint8Array(2)\r\n  extradata[0] = ((profile & 0x1f) << 3) | ((samplingFreqIndex & 0x0e) >> 1)\r\n  extradata[1] = ((samplingFreqIndex & 0x01) << 7) | ((channelConfig & 0x0f) << 3)\r\n\r\n  return extradata\r\n}\r\n\r\nexport interface AACADTSHeader {\r\n  syncWord: number\r\n  profile: number\r\n  sampleRate: number\r\n  channels: number\r\n  aacFrameLength: number\r\n  numberOfRawDataBlocksInFrame: number\r\n  headerLength: number\r\n  framePayloadLength: number\r\n}\r\n\r\nexport interface AACLATMHeader {\r\n  syncWord: number\r\n  profile: number\r\n  sampleRate: number\r\n  channels: number\r\n  useSameStreamMux: boolean\r\n  headerLength: number\r\n  framePayloadLength: number\r\n  muxLengthBytes: number\r\n}\r\n\r\n/**\r\n * \r\n * adts 封装转 raw\r\n * \r\n * bits    \r\n * - 12  syncword\r\n * - 1   ID (MPEG 标识位，固定为 1)\r\n * - 2   Layer ( 固定为 0)\r\n * - 1   Protection Absent ( 指示是否有 CRC 校验，1 表示没有校验）\r\n * - 2   Profile\r\n * - 4   Sampling Frequency Index ( 采样率的索引）\r\n * - 1   Private Bit ( 保留位，一般设置为 0)\r\n * - 3   Channel Configuration ( 音频通道数）\r\n * - 1   Original Copy ( 原始拷贝标志位，一般设置为 0)\r\n * - 1   Home ( 保留位，一般设置为 0)\r\n * - 1   Copyright Identification Bit（置 0）\r\n * - 1   Copyright Identification Start（置 0）\r\n * - 13  Frame Length ( 帧长度，包括 ADTS 头和音频帧数据的长度）\r\n * - 11  Buffer Fullness ( 缓冲区满度，可用于音频流的同步）\r\n * - 2   Number of Raw Data Blocks in Frame ( 帧中原始数据块的数量）\r\n * - 16  CRC (Protection Absent 控制）\r\n * - N  raw aac data\r\n * \r\n */\r\nexport function parseADTSHeader(buffer: Uint8ArrayInterface): AACADTSHeader | number {\r\n\r\n  if (buffer.length < 7) {\r\n    return -1\r\n  }\r\n\r\n  const syncWord = (buffer[0] << 4) | (buffer[0 + 1] >> 4)\r\n\r\n  if (syncWord !== 0xFFF) {\r\n    return -1\r\n  }\r\n\r\n  /*\r\n    * const id = (buffer[1] & 0x08) >>> 3\r\n    * const layer = (buffer[1] & 0x06) >>> 1\r\n    */\r\n  const protectionAbsent = buffer[1] & 0x01\r\n  const profile = (buffer[2] & 0xC0) >>> 6\r\n  const samplingFrequencyIndex = (buffer[2] & 0x3C) >>> 2\r\n  const channelConfiguration = ((buffer[2] & 0x01) << 2) | ((buffer[3] & 0xC0) >>> 6)\r\n\r\n  // adts_variable_header()\r\n  const aacFrameLength = ((buffer[3] & 0x03) << 11)\r\n    | (buffer[4] << 3)\r\n    | ((buffer[5] & 0xE0) >>> 5)\r\n\r\n  const numberOfRawDataBlocksInFrame = buffer[6] & 0x03\r\n\r\n  let headerLength = protectionAbsent === 1 ? 7 : 9\r\n  let framePayloadLength = aacFrameLength - headerLength\r\n\r\n  return {\r\n    syncWord,\r\n    profile: profile + 1,\r\n    sampleRate: MPEG4SamplingFrequencies[samplingFrequencyIndex],\r\n    channels: MPEG4Channels[channelConfiguration],\r\n    aacFrameLength,\r\n    numberOfRawDataBlocksInFrame,\r\n    headerLength,\r\n    framePayloadLength\r\n  }\r\n}\r\n\r\nexport function parseLATMHeader(buffer: Uint8ArrayInterface, bitReader?: BitReader) {\r\n  if (!bitReader) {\r\n    bitReader = new BitReader()\r\n    bitReader.appendBuffer(buffer)\r\n  }\r\n\r\n  function getLATMValue() {\r\n    const bytesForValue = bitReader.readU(2)\r\n    let value = 0\r\n\r\n    for (let i = 0; i <= bytesForValue; i++) {\r\n      value = value << 8\r\n      value = value | bitReader.readU(8)\r\n    }\r\n    return value\r\n  }\r\n\r\n  const now = bitReader.getPointer()\r\n\r\n  const info: AACLATMHeader = {\r\n    syncWord: 0,\r\n    profile: 0,\r\n    sampleRate: 0,\r\n    channels: 0,\r\n    useSameStreamMux: false,\r\n    headerLength: 0,\r\n    framePayloadLength: 0,\r\n    muxLengthBytes: 0\r\n  }\r\n\r\n  const syncWord = bitReader.readU(11)\r\n\r\n  if (syncWord !== 0x2B7) {\r\n    return -1\r\n  }\r\n\r\n  info.syncWord = syncWord\r\n\r\n  info.muxLengthBytes = bitReader.readU(13)\r\n\r\n  const useSameStreamMux = bitReader.readU1() === 0x01\r\n\r\n  info.useSameStreamMux = useSameStreamMux\r\n\r\n  if (!useSameStreamMux) {\r\n    const audioMuxVersion = bitReader.readU1() === 0x01\r\n    const audioMuxVersionA = audioMuxVersion && bitReader.readU1() === 0x01\r\n    if (audioMuxVersionA) {\r\n      return -1\r\n    }\r\n    if (audioMuxVersion) {\r\n      getLATMValue()\r\n    }\r\n    const allStreamsSameTimeFraming = bitReader.readU1() === 0x01\r\n    if (!allStreamsSameTimeFraming) {\r\n      return -1\r\n    }\r\n    const numSubFrames = bitReader.readU(6)\r\n    if (numSubFrames !== 0) {\r\n      return -1\r\n    }\r\n\r\n    const numProgram = bitReader.readU(4)\r\n    if (numProgram !== 0) {\r\n      return -1\r\n    }\r\n\r\n    const numLayer = bitReader.readU(3)\r\n    if (numLayer !== 0) {\r\n      return -1\r\n    }\r\n\r\n    let fillBits = audioMuxVersion ? getLATMValue() : 0\r\n\r\n    const audioObjectType = bitReader.readU(5)\r\n    fillBits -= 5\r\n\r\n    const samplingFreqIndex = bitReader.readU(4)\r\n    fillBits -= 4\r\n\r\n    const channelConfig = bitReader.readU(4)\r\n    fillBits -= 4\r\n\r\n    bitReader.readU(3)\r\n    fillBits -= 3\r\n\r\n    if (fillBits > 0) {\r\n      bitReader.readU(fillBits)\r\n    }\r\n\r\n    const frameLengthType = bitReader.readU(3)\r\n    if (frameLengthType === 0) {\r\n      bitReader.readU(8)\r\n    }\r\n    else {\r\n      return -1\r\n    }\r\n\r\n    const otherDataPresent = bitReader.readU1() === 0x01\r\n    if (otherDataPresent) {\r\n      if (audioMuxVersion) {\r\n        getLATMValue()\r\n      }\r\n      else {\r\n        let otherDataLenBits = 0\r\n        while (true) {\r\n          otherDataLenBits = otherDataLenBits << 8\r\n          const otherDataLenEsc = bitReader.readU1() === 0x01\r\n          const otherDataLenTmp = bitReader.readU(8)\r\n          otherDataLenBits += otherDataLenTmp\r\n          if (!otherDataLenEsc) {\r\n            break\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const crcCheckPresent = bitReader.readU1() === 0x01\r\n    if (crcCheckPresent) {\r\n      bitReader.readU(8)\r\n    }\r\n\r\n    info.profile = audioObjectType + 1\r\n    info.sampleRate = MPEG4SamplingFrequencies[samplingFreqIndex]\r\n    info.channels = MPEG4Channels[channelConfig]\r\n  }\r\n\r\n  let length = 0\r\n  while (true) {\r\n    const tmp = bitReader.readU(8)\r\n    length += tmp\r\n    if (tmp !== 0xff) {\r\n      break\r\n    }\r\n  }\r\n\r\n  info.framePayloadLength = length\r\n  info.headerLength = bitReader.getPointer() - now + (bitReader.getBitLeft() === 8 ? 0 : 1)\r\n\r\n  return info\r\n}\r\n","/*\r\n * libmedia ac3 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVChannelLayout } from '../audiosamplefmt'\r\nimport BitReader from 'common/io/BitReader'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport const enum AC3DeltaStrategy {\r\n  DBA_REUSE = 0,\r\n  DBA_NEW,\r\n  DBA_NONE,\r\n  DBA_RESERVED\r\n}\r\n\r\nexport const enum AC3ChannelMode {\r\n  AC3_CHMODE_DUALMONO = 0,\r\n  AC3_CHMODE_MONO,\r\n  AC3_CHMODE_STEREO,\r\n  AC3_CHMODE_3F,\r\n  AC3_CHMODE_2F1R,\r\n  AC3_CHMODE_3F1R,\r\n  AC3_CHMODE_2F2R,\r\n  AC3_CHMODE_3F2R\r\n}\r\n\r\nexport const enum AC3DolbySurroundMode {\r\n  AC3_DSURMOD_NOTINDICATED = 0,\r\n  AC3_DSURMOD_OFF,\r\n  AC3_DSURMOD_ON,\r\n  AC3_DSURMOD_RESERVED\r\n}\r\n\r\nexport const enum AC3DolbySurroundEXMode {\r\n  AC3_DSUREXMOD_NOTINDICATED = 0,\r\n  AC3_DSUREXMOD_OFF,\r\n  AC3_DSUREXMOD_ON,\r\n  AC3_DSUREXMOD_PLIIZ\r\n}\r\n\r\nexport const enum AC3DolbyHeadphoneMode {\r\n  AC3_DHEADPHONMOD_NOTINDICATED = 0,\r\n  AC3_DHEADPHONMOD_OFF,\r\n  AC3_DHEADPHONMOD_ON,\r\n  AC3_DHEADPHONMOD_RESERVED\r\n}\r\n\r\nexport const enum AC3PreferredStereoDownmixMode {\r\n  AC3_DMIXMOD_NOTINDICATED = 0,\r\n  AC3_DMIXMOD_LTRT,\r\n  AC3_DMIXMOD_LORO,\r\n  // reserved value in A/52, but used by encoders to indicate DPL2\r\n  AC3_DMIXMOD_DPLII\r\n}\r\n\r\nexport const enum EAC3FrameType {\r\n  EAC3_FRAME_TYPE_INDEPENDENT = 0,\r\n  EAC3_FRAME_TYPE_DEPENDENT,\r\n  EAC3_FRAME_TYPE_AC3_CONVERT,\r\n  EAC3_FRAME_TYPE_RESERVED\r\n}\r\n\r\nexport const AC3ChannelLayout: uint32[] = [\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_STEREO,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_MONO,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_STEREO,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_SURROUND,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_2_1,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_4POINT0,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_2_2,\r\n  AVChannelLayout.AV_CHANNEL_LAYOUT_5POINT0\r\n]\r\n\r\nexport interface AC3HeaderInfo {\r\n  syncWord: uint16\r\n  crc1: uint16\r\n  srCode: uint8\r\n  bitstreamId: uint8\r\n  bitstreamMode: uint8\r\n  channelMode: uint8\r\n  lfeOn: uint8\r\n  frameType: uint8\r\n  substreamId: int32\r\n  centerMixLevel: int32\r\n  surroundMixLevel: int32\r\n  channelMap: uint16\r\n  numBlocks: int32\r\n  dolbySurroundMode: int32\r\n  srShift: uint8\r\n  sampleRate: uint16\r\n  bitrate: uint32\r\n  channels: uint8\r\n  frameSize: uint16\r\n  channelLayout: uint64\r\n  ac3BitrateCode: int8\r\n}\r\n\r\nconst AC3FrameSizeTab = [\r\n  [ 64,   69,   96   ],\r\n  [ 64,   70,   96   ],\r\n  [ 80,   87,   120  ],\r\n  [ 80,   88,   120  ],\r\n  [ 96,   104,  144  ],\r\n  [ 96,   105,  144  ],\r\n  [ 112,  121,  168  ],\r\n  [ 112,  122,  168  ],\r\n  [ 128,  139,  192  ],\r\n  [ 128,  140,  192  ],\r\n  [ 160,  174,  240  ],\r\n  [ 160,  175,  240  ],\r\n  [ 192,  208,  288  ],\r\n  [ 192,  209,  288  ],\r\n  [ 224,  243,  336  ],\r\n  [ 224,  244,  336  ],\r\n  [ 256,  278,  384  ],\r\n  [ 256,  279,  384  ],\r\n  [ 320,  348,  480  ],\r\n  [ 320,  349,  480  ],\r\n  [ 384,  417,  576  ],\r\n  [ 384,  418,  576  ],\r\n  [ 448,  487,  672  ],\r\n  [ 448,  488,  672  ],\r\n  [ 512,  557,  768  ],\r\n  [ 512,  558,  768  ],\r\n  [ 640,  696,  960  ],\r\n  [ 640,  697,  960  ],\r\n  [ 768,  835,  1152 ],\r\n  [ 768,  836,  1152 ],\r\n  [ 896,  975,  1344 ],\r\n  [ 896,  976,  1344 ],\r\n  [ 1024, 1114, 1536 ],\r\n  [ 1024, 1115, 1536 ],\r\n  [ 1152, 1253, 1728 ],\r\n  [ 1152, 1254, 1728 ],\r\n  [ 1280, 1393, 1920 ],\r\n  [ 1280, 1394, 1920 ],\r\n]\r\n\r\nconst CenterLevelsTab = [4, 5, 6, 5]\r\nconst SurroundLevelsTab = [4, 6, 7, 6]\r\nconst AC3SampleRateTab = [48000, 44100, 32000, 0]\r\nconst AC3BitrateTab = [\r\n  32, 40, 48, 56, 64, 80, 96, 112, 128,\r\n  160, 192, 224, 256, 320, 384, 448, 512, 576, 640\r\n]\r\nconst AC3ChannelsTab = [\r\n  2, 1, 2, 3, 3, 4, 4, 5\r\n]\r\n\r\nconst EAC3Blocks = [\r\n  1, 2, 3, 6\r\n]\r\n\r\nconst AC3_HEADER_SIZE = 7\r\n\r\nexport function parseHeader(buf: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader(buf.length)\r\n  bitReader.appendBuffer(buf)\r\n\r\n  const info: AC3HeaderInfo = {\r\n    syncWord: 0,\r\n    crc1: 0,\r\n    srCode: 0,\r\n    bitstreamId: 0,\r\n    bitstreamMode: 0,\r\n    channelMode: 0,\r\n    lfeOn: 0,\r\n    frameType: 0,\r\n    substreamId: 0,\r\n    centerMixLevel: 0,\r\n    surroundMixLevel: 0,\r\n    channelMap: 0,\r\n    numBlocks: 0,\r\n    dolbySurroundMode: 0,\r\n    srShift: 0,\r\n    sampleRate: 0,\r\n    bitrate: 0,\r\n    channels: 0,\r\n    frameSize: 0,\r\n    channelLayout: 0n,\r\n    ac3BitrateCode: 0\r\n  }\r\n\r\n  info.syncWord = bitReader.readU(16)\r\n\r\n  if (info.syncWord !== 0x0B77) {\r\n    return -1\r\n  }\r\n\r\n  info.bitstreamId = bitReader.peekU(29) & 0x1f\r\n\r\n  if (info.bitstreamId > 16) {\r\n    return -2\r\n  }\r\n\r\n  info.numBlocks = 6\r\n  info.ac3BitrateCode = -1\r\n  info.centerMixLevel = 5\r\n  info.surroundMixLevel = 6\r\n\r\n  info.dolbySurroundMode = AC3DolbySurroundMode.AC3_DSURMOD_NOTINDICATED\r\n\r\n  if (info.bitstreamId <= 10) {\r\n    info.crc1 = bitReader.readU(16)\r\n    info.srCode = bitReader.readU(2)\r\n\r\n    if (info.srCode === 3) {\r\n      return -3\r\n    }\r\n\r\n    const frameSizeCode = bitReader.readU(6)\r\n    if (frameSizeCode > 37) {\r\n      return -4\r\n    }\r\n\r\n    info.ac3BitrateCode = (frameSizeCode >> 1)\r\n\r\n    bitReader.readU(5)\r\n\r\n    info.bitstreamMode = bitReader.readU(3)\r\n    info.channelMode = bitReader.readU(3)\r\n\r\n    if (info.channelMode == AC3ChannelMode.AC3_CHMODE_STEREO) {\r\n      info.dolbySurroundMode = bitReader.readU(2)\r\n    }\r\n    else {\r\n      if ((info.channelMode & 1) && info.channelMode != AC3ChannelMode.AC3_CHMODE_MONO) {\r\n        info.centerMixLevel = CenterLevelsTab[bitReader.readU(2)]\r\n      }\r\n      if (info.channelMode & 4) {\r\n        info.surroundMixLevel = SurroundLevelsTab[bitReader.readU(2)]\r\n      }\r\n    }\r\n    info.lfeOn = bitReader.readU(1)\r\n\r\n    info.srShift = Math.max(info.bitstreamId, 8) - 8\r\n    info.sampleRate = AC3SampleRateTab[info.srCode] >> info.srShift\r\n    info.bitrate = (AC3BitrateTab[info.ac3BitrateCode] * 1000) >> info.srShift\r\n    info.channels = AC3ChannelsTab[info.channelMode] + info.lfeOn\r\n    info.frameSize = AC3FrameSizeTab[frameSizeCode][info.srCode] * 2\r\n    info.frameType = EAC3FrameType.EAC3_FRAME_TYPE_AC3_CONVERT\r\n    info.substreamId = 0\r\n  }\r\n  else {\r\n    /* Enhanced AC-3 */\r\n    info.crc1 = 0\r\n    info.frameType = bitReader.readU(2)\r\n    if (info.frameType == EAC3FrameType.EAC3_FRAME_TYPE_RESERVED) {\r\n      return -5\r\n    }\r\n    info.substreamId = bitReader.readU(3)\r\n\r\n    info.frameSize = (bitReader.readU(11) + 1) << 1\r\n    if (info.frameSize < AC3_HEADER_SIZE) {\r\n      return -6\r\n    }\r\n\r\n    info.srCode = bitReader.readU(2)\r\n    if (info.srCode == 3) {\r\n      const srCode2 = bitReader.readU(2)\r\n      if (srCode2 == 3) {\r\n        return -7\r\n      }\r\n      info.sampleRate = AC3SampleRateTab[srCode2] / 2\r\n      info.srShift = 1\r\n    }\r\n    else {\r\n      info.numBlocks = EAC3Blocks[bitReader.readU(2)]\r\n      info.sampleRate = AC3SampleRateTab[info.srCode]\r\n      info.srShift = 0\r\n    }\r\n\r\n    info.channelMode = bitReader.readU(3)\r\n    info.lfeOn = bitReader.readU(1)\r\n\r\n    info.bitrate = 8 * info.frameSize * info.sampleRate / (info.numBlocks * 256)\r\n    info.channels = AC3ChannelsTab[info.channelMode] + info.lfeOn\r\n  }\r\n  info.channelLayout = static_cast<uint64>(AC3ChannelLayout[info.channelMode])\r\n  if (info.lfeOn) {\r\n    info.channelLayout |= static_cast<uint64>(AVChannelLayout.AV_CHANNEL_LAYOUT_LOW_FREQUENCY as uint32)\r\n  }\r\n\r\n  return info\r\n}\r\n","/*\r\n * libmedia av1 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVStream from '../AVStream'\r\nimport { AVPacketSideDataType } from '../codec'\r\nimport BitReader from 'common/io/BitReader'\r\nimport * as av1syntax from '../util/av1syntax'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport AVCodecParameters from '../struct/avcodecparameters'\r\nimport BitWriter from 'common/io/BitWriter'\r\nimport { getAVPixelFormatDescriptor } from '../pixelFormatDescriptor'\r\nimport { AVPixelFormat } from '../pixfmt'\r\n\r\nexport const enum AV1Profile {\r\n  Main,\r\n  High,\r\n  Professional\r\n}\r\n\r\nexport const enum OBUType {\r\n  Reserved,\r\n  SEQUENCE_HEADER,\r\n  TEMPORAL_DELIMITER,\r\n  FRAME_HEADER,\r\n  TILE_GROUP,\r\n  METADATA,\r\n  FRAME,\r\n  REDUNDANT_FRAME_HEADER,\r\n  TILE_LIST,\r\n  PADDING = 15\r\n}\r\n\r\nexport const AV1Profile2Name: Record<AV1Profile, string> = {\r\n  [AV1Profile.Main]: 'Main',\r\n  [AV1Profile.High]: 'High',\r\n  [AV1Profile.Professional]: 'Professional'\r\n}\r\n\r\nexport const LevelCapabilities = [\r\n  { level: 20, maxResolution: 2048 * 1152 },\r\n  { level: 21, maxResolution: 2816 * 1584 },\r\n  { level: 30, maxResolution: 4352 * 2448 },\r\n  { level: 31, maxResolution: 5504 * 3096 },\r\n  { level: 40, maxResolution: 6144 * 3456 },\r\n  { level: 41, maxResolution: 6144 * 3456 },\r\n  { level: 50, maxResolution: 8192 * 4352 },\r\n  { level: 51, maxResolution: 8192 * 4352 },\r\n  { level: 52, maxResolution: 8192 * 4352 },\r\n  { level: 53, maxResolution: 8192 * 4352 },\r\n  { level: 60, maxResolution: 16384 * 8704 },\r\n  { level: 61, maxResolution: 16384 * 8704 },\r\n  { level: 62, maxResolution: 16384 * 8704 },\r\n  { level: 63, maxResolution: 16384 * 8704 }\r\n]\r\n\r\nexport const AV1LevelIdx = [20, 21, 22, 23, 30, 31, 32, 33, 40, 41, 42, 43, 50, 51, 52, 53, 60, 61, 62, 63, 70, 71, 72, 73]\r\n\r\nexport function getLevelByResolution(width: number, height: number, fps: number) {\r\n  const resolution = width * height\r\n  for (const level of LevelCapabilities) {\r\n    if (resolution <= level.maxResolution) {\r\n      return level.level\r\n    }\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 4) {\r\n    const params = parseExtraData(extradata)\r\n\r\n    stream.codecpar.profile = params.profile\r\n    stream.codecpar.level = params.level\r\n  }\r\n}\r\n\r\n/**\r\n * - 1 bit marker\r\n * - 7 bit version\r\n * - 3 bit profile\r\n * - 5 bit level\r\n * - 1 bit tier\r\n * - 1 bit bitdepth > 8\r\n * - 1 bit bitdepth == 12\r\n * - 1 bit monochrome\r\n * - 1 bit chroma_subsampling_x\r\n * - 1 bit chroma_subsampling_y\r\n * - 2 bit chroma_sample_position\r\n * - 8 bit padding\r\n * \r\n * @param header \r\n */\r\nexport function parseExtraData(extradata: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader(extradata.length)\r\n  bitReader.appendBuffer(extradata)\r\n  // marker\r\n  bitReader.readU1()\r\n  // version\r\n  bitReader.readU(7)\r\n\r\n  const profile = bitReader.readU(3)\r\n  const level = bitReader.readU(5)\r\n  const tier = bitReader.readU1()\r\n  let bitDepth = bitReader.readU1() ? 10 : 8\r\n  if (bitReader.readU1()) {\r\n    bitDepth = 12\r\n  }\r\n  const monochrome = bitReader.readU1()\r\n  const chromaSubsamplingX = bitReader.readU1()\r\n  const chromaSubsamplingY = bitReader.readU1()\r\n  const chromaSamplePosition = bitReader.readU(2)\r\n\r\n  return {\r\n    profile,\r\n    level,\r\n    tier,\r\n    bitDepth,\r\n    monochrome,\r\n    chromaSubsamplingX,\r\n    chromaSubsamplingY,\r\n    chromaSamplePosition\r\n  }\r\n}\r\n\r\n/* eslint-disable camelcase */\r\nexport function parseSequenceHeader(header: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader(header.length)\r\n  bitReader.appendBuffer(header)\r\n\r\n  bitReader.readU1()\r\n  bitReader.readU(4)\r\n  const extensionFlag = bitReader.readU1()\r\n  const hasSizeFlag = bitReader.readU1()\r\n  // obu_reserved_1bit\r\n  bitReader.readU1()\r\n  if (extensionFlag) {\r\n    bitReader.readU(8)\r\n  }\r\n  if (hasSizeFlag) {\r\n    av1syntax.leb128(bitReader)\r\n  }\r\n\r\n  const seq_profile =\tav1syntax.f(bitReader, 3)\r\n  const still_picture =\tav1syntax.f(bitReader, 1)\r\n  const reduced_still_picture_header = av1syntax.f(bitReader, 1)\r\n\r\n  let timing_info_present_flag = 0\r\n  let decoder_model_info_present_flag = 0\r\n  let initial_display_delay_present_flag = 0\r\n  let operating_points_cnt_minus_1 = 0\r\n  let operating_point_idc: number[] = [0]\r\n  let seq_level_idx: number[] = [0]\r\n  let seq_tier: number[] = [0]\r\n  let decoder_model_present_for_this_op: number[] = [0]\r\n  let initial_display_delay_present_for_this_op: number[] = [0]\r\n  let initial_display_delay_minus_1: number[] = [0]\r\n  let buffer_delay_length_minus_1 = 0\r\n  let decoder_buffer_delay: number[] = [0]\r\n  let encoder_buffer_delay: number[] = [0]\r\n  let low_delay_mode_flag: number[] = [0]\r\n\r\n  if (reduced_still_picture_header) {\r\n    seq_level_idx[0] = av1syntax.f(bitReader, 5)\r\n  }\r\n  else {\r\n    timing_info_present_flag = av1syntax.f(bitReader, 1)\r\n    if (timing_info_present_flag) {\r\n\r\n      let num_units_in_display_tick =\tav1syntax.f(bitReader, 32)\r\n      let time_scale = av1syntax.f(bitReader, 32)\r\n      let equal_picture_interval = av1syntax.f(bitReader, 1)\r\n      if (equal_picture_interval) {\r\n        let num_ticks_per_picture_minus_1 = av1syntax.uvlc(bitReader)\r\n      }\r\n\r\n      let decoder_model_info_present_flag =\tav1syntax.f(bitReader, 1)\r\n      if (decoder_model_info_present_flag) {\r\n        buffer_delay_length_minus_1 =\tav1syntax.f(bitReader, 5)\r\n        let num_units_in_decoding_tick = av1syntax.f(bitReader, 32)\r\n        let buffer_removal_time_length_minus_1 = av1syntax.f(bitReader, 5)\r\n        let frame_presentation_time_length_minus_1 = av1syntax.f(bitReader, 5)\r\n      }\r\n    }\r\n    else {\r\n      decoder_model_info_present_flag = 0\r\n    }\r\n    let initial_display_delay_present_flag = av1syntax.f(bitReader, 1)\r\n    let operating_points_cnt_minus_1 = av1syntax.f(bitReader, 5)\r\n    for (let i = 0; i <= operating_points_cnt_minus_1; i++ ) {\r\n      operating_point_idc[i] = av1syntax.f(bitReader, 12)\r\n      seq_level_idx[i] = av1syntax.f(bitReader, 5)\r\n      if (seq_level_idx[i] > 7) {\r\n        seq_tier[i] = av1syntax.f(bitReader, 1)\r\n      }\r\n      else {\r\n        seq_tier[i] = 0\r\n      }\r\n      if (decoder_model_info_present_flag) {\r\n        decoder_model_present_for_this_op[i] = av1syntax.f(bitReader, 1)\r\n        if (decoder_model_present_for_this_op[i]) {\r\n          let n = buffer_delay_length_minus_1 + 1\r\n          decoder_buffer_delay[i] =\tav1syntax.f(bitReader, n)\r\n          encoder_buffer_delay[i] =\tav1syntax.f(bitReader, n)\r\n          low_delay_mode_flag[i] = av1syntax.f(bitReader, 1)\r\n        }\r\n      }\r\n      else {\r\n        decoder_model_present_for_this_op[i] = 0\r\n      }\r\n      if (initial_display_delay_present_flag) {\r\n        initial_display_delay_present_for_this_op[i] = av1syntax.f(bitReader, 1)\r\n        if ( initial_display_delay_present_for_this_op[i] ) {\r\n          initial_display_delay_minus_1[i] = av1syntax.f(bitReader, 4)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  let frame_width_bits_minus_1 = av1syntax.f(bitReader, 4)\r\n  let frame_height_bits_minus_1 =\tav1syntax.f(bitReader, 4)\r\n  let n = frame_width_bits_minus_1 + 1\r\n  let max_frame_width_minus_1 =\tav1syntax.f(bitReader, n)\r\n  n = frame_height_bits_minus_1 + 1\r\n  let max_frame_height_minus_1 = av1syntax.f(bitReader, n)\r\n  let frame_id_numbers_present_flag = 0\r\n  let delta_frame_id_length_minus_2 = 0\r\n  let additional_frame_id_length_minus_1 = 0\r\n  if (reduced_still_picture_header ) {\r\n    frame_id_numbers_present_flag = 0\r\n  }\r\n  else {\r\n    frame_id_numbers_present_flag =\tav1syntax.f(bitReader, 1)\r\n  }\r\n  if ( frame_id_numbers_present_flag ) {\r\n    delta_frame_id_length_minus_2 =\tav1syntax.f(bitReader, 4)\r\n    additional_frame_id_length_minus_1 = av1syntax.f(bitReader, 3)\r\n  }\r\n  let use_128x128_superblock = av1syntax.f(bitReader, 1)\r\n  let enable_filter_intra =\tav1syntax.f(bitReader, 1)\r\n  let enable_intra_edge_filter = av1syntax.f(bitReader, 1)\r\n  let enable_interintra_compound = 0\r\n  let enable_masked_compound = 0\r\n  let enable_warped_motion = 0\r\n  let enable_dual_filter = 0\r\n  let enable_order_hint = 0\r\n  let enable_jnt_comp = 0\r\n  let enable_ref_frame_mvs = 0\r\n  let seq_force_screen_content_tools = 2\r\n  let seq_force_integer_mv = 2\r\n  let OrderHintBits = 0\r\n  if (!reduced_still_picture_header) {\r\n    let enable_interintra_compound = av1syntax.f(bitReader, 1)\r\n    enable_masked_compound = av1syntax.f(bitReader, 1)\r\n    enable_warped_motion = av1syntax.f(bitReader, 1)\r\n    enable_dual_filter = av1syntax.f(bitReader, 1)\r\n    enable_order_hint = av1syntax.f(bitReader, 1)\r\n    if (enable_order_hint) {\r\n      enable_jnt_comp = av1syntax.f(bitReader, 1)\r\n      enable_ref_frame_mvs = av1syntax.f(bitReader, 1)\r\n    }\r\n    else {\r\n      enable_jnt_comp = 0\r\n      enable_ref_frame_mvs = 0\r\n    }\r\n    let seq_choose_screen_content_tools =\tav1syntax.f(bitReader, 1)\r\n    if (seq_choose_screen_content_tools) {\r\n      seq_force_screen_content_tools = 2\r\n    }\r\n    else {\r\n      seq_force_screen_content_tools = av1syntax.f(bitReader, 1)\r\n    }\r\n\r\n    if (seq_force_screen_content_tools > 0) {\r\n      let seq_choose_integer_mv =\tav1syntax.f(bitReader, 1)\r\n      if (seq_choose_integer_mv) {\r\n        seq_force_integer_mv = 2\r\n      }\r\n      else {\r\n        seq_force_integer_mv = av1syntax.f(bitReader, 1)\r\n      }\r\n    }\r\n    else {\r\n      seq_force_integer_mv = 2\r\n    }\r\n    if (enable_order_hint) {\r\n      const order_hint_bits_minus_1 =\tav1syntax.f(bitReader, 3)\r\n      OrderHintBits = order_hint_bits_minus_1 + 1\r\n    }\r\n    else {\r\n      OrderHintBits = 0\r\n    }\r\n  }\r\n  let enable_superres =\tav1syntax.f(bitReader, 1)\r\n  let enable_cdef =\tav1syntax.f(bitReader, 1)\r\n  let enable_restoration = av1syntax.f(bitReader, 1)\r\n\r\n  let high_bitdepth =\tav1syntax.f(bitReader, 1)\r\n  let twelve_bit = 0\r\n  let bit_depth = 0\r\n  let mono_chrome = 0\r\n  if (seq_profile == 2 && high_bitdepth ) {\r\n    twelve_bit = av1syntax.f(bitReader, 1)\r\n    bit_depth = twelve_bit ? 12 : 10\r\n  }\r\n  else if (seq_profile <= 2) {\r\n    bit_depth = high_bitdepth ? 10 : 8\r\n  }\r\n  if ( seq_profile == 1 ) {\r\n    mono_chrome = 0\r\n  }\r\n  else {\r\n    mono_chrome = av1syntax.f(bitReader, 1)\r\n  }\r\n  const color_description_present_flag = av1syntax.f(bitReader, 1)\r\n  let color_primaries = 0\r\n  let transfer_characteristics = 0\r\n  let matrix_coefficients = 0\r\n  if (color_description_present_flag ) {\r\n    color_primaries =\tav1syntax.f(bitReader, 8)\r\n    transfer_characteristics = av1syntax.f(bitReader, 8)\r\n    matrix_coefficients = av1syntax.f(bitReader, 8)\r\n  }\r\n  else {\r\n    color_primaries = 2\r\n    transfer_characteristics = 2\r\n    matrix_coefficients = 2\r\n  }\r\n  let color_range = 0\r\n  let subsampling_x = 0\r\n  let subsampling_y = 0\r\n  let chroma_sample_position = 0\r\n  let separate_uv_delta_q = 0\r\n  if (mono_chrome) {\r\n    color_range =\tav1syntax.f(bitReader, 1)\r\n    subsampling_x = 1\r\n    subsampling_y = 1\r\n    chroma_sample_position = 0\r\n    separate_uv_delta_q = 0\r\n  }\r\n  else if (color_primaries == 1\r\n    && transfer_characteristics == 13\r\n    && matrix_coefficients == 0\r\n  ) {\r\n    color_range = 1\r\n    subsampling_x = 0\r\n    subsampling_y = 0\r\n    separate_uv_delta_q = av1syntax.f(bitReader, 1)\r\n  }\r\n  else {\r\n    color_range =\tav1syntax.f(bitReader, 1)\r\n    if (seq_profile == 0) {\r\n      subsampling_x = 1\r\n      subsampling_y = 1\r\n    }\r\n    else if ( seq_profile == 1 ) {\r\n      subsampling_x = 0\r\n      subsampling_y = 0\r\n    }\r\n    else {\r\n      if (bit_depth == 12) {\r\n        subsampling_x\t= av1syntax.f(bitReader, 1)\r\n        if (subsampling_x) {\r\n          subsampling_y =\tav1syntax.f(bitReader, 1)\r\n        }\r\n        else {\r\n          subsampling_y = 0\r\n        }\r\n      }\r\n      else {\r\n        subsampling_x = 1\r\n        subsampling_y = 0\r\n      }\r\n    }\r\n    if (subsampling_x && subsampling_y) {\r\n      chroma_sample_position = av1syntax.f(bitReader, 2)\r\n    }\r\n    separate_uv_delta_q = av1syntax.f(bitReader, 1)\r\n  }\r\n\r\n  let film_grain_params_present\t= av1syntax.f(bitReader, 1)\r\n\r\n  return {\r\n    width: max_frame_width_minus_1 + 1,\r\n    height: max_frame_height_minus_1 + 1,\r\n    profile: seq_profile,\r\n    level: AV1LevelIdx[seq_level_idx[0]],\r\n    tier: seq_tier[0],\r\n    bitDepth: bit_depth,\r\n    monoChrome: mono_chrome,\r\n    colorRange: color_range,\r\n    colorPrimaries: color_primaries,\r\n    transferCharacteristics: transfer_characteristics,\r\n    matrixCoefficients: matrix_coefficients,\r\n    subsamplingX: subsampling_x,\r\n    subsamplingY: subsampling_y,\r\n    chromaSamplePosition: chroma_sample_position\r\n  }\r\n}\r\n\r\nexport function splitOBU(buffer: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader()\r\n\r\n  bitReader.appendBuffer(buffer)\r\n\r\n  const list: Uint8ArrayInterface[] = []\r\n\r\n  while (bitReader.remainingLength()) {\r\n    const now = bitReader.getPointer()\r\n    // obu_forbidden_bit\r\n    bitReader.readU1()\r\n    const type = bitReader.readU(4)\r\n    const extensionFlag = bitReader.readU1()\r\n    const hasSizeFlag = bitReader.readU1()\r\n    // obu_reserved_1bit\r\n    bitReader.readU1()\r\n\r\n    if (extensionFlag) {\r\n      bitReader.readU(8)\r\n    }\r\n\r\n    const size = hasSizeFlag ? av1syntax.leb128(bitReader) : buffer.length - 1 - extensionFlag\r\n\r\n    const headerSize = bitReader.getPointer() - now\r\n\r\n    list.push(buffer.subarray(now, now + headerSize + size))\r\n\r\n    bitReader.skip(size * 8)\r\n  }\r\n\r\n  return list\r\n}\r\n\r\nexport function generateExtradata(codecpar: pointer<AVCodecParameters>, buffer: Uint8ArrayInterface) {\r\n  const bitWriter = new BitWriter(4)\r\n  // marker\r\n  bitWriter.writeU1(1)\r\n  // version\r\n  bitWriter.writeU(7, 1)\r\n\r\n  const header = splitOBU(buffer).find((buffer) => {\r\n    return ((buffer[0] >>> 3) & 0x0f) === OBUType.SEQUENCE_HEADER\r\n  })\r\n\r\n  if (header) {\r\n    const params = parseSequenceHeader(header)\r\n    bitWriter.writeU(3, params.profile)\r\n    bitWriter.writeU(5, params.level)\r\n    bitWriter.writeU(1, params.tier)\r\n    bitWriter.writeU(1, params.bitDepth > 8 ? 1 : 0)\r\n    bitWriter.writeU(1, params.bitDepth === 12 ? 1 : 0)\r\n    bitWriter.writeU(1, params.monoChrome)\r\n    bitWriter.writeU(1, params.subsamplingX)\r\n    bitWriter.writeU(1, params.subsamplingY)\r\n    bitWriter.writeU(1, params.chromaSamplePosition)\r\n  }\r\n  else {\r\n    const desc = getAVPixelFormatDescriptor(codecpar.format as AVPixelFormat)\r\n    bitWriter.writeU(3, codecpar.profile)\r\n    bitWriter.writeU(5, codecpar.level)\r\n    bitWriter.writeU(1, 0)\r\n    bitWriter.writeU(1, desc.comp[0].depth > 8 ? 1 : 0)\r\n    bitWriter.writeU(1, desc.comp[0].depth === 12 ? 1 : 0)\r\n    bitWriter.writeU(1, 0)\r\n    bitWriter.writeU(1, 1)\r\n    bitWriter.writeU(1, 1)\r\n    bitWriter.writeU(1, 0)\r\n  }\r\n  // padding\r\n  bitWriter.writeU(8, 0)\r\n  bitWriter.padding()\r\n  return bitWriter.getBuffer()\r\n}\r\n","/*\r\n * libmedia flac util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport Stream from '../AVStream'\r\nimport { AVPacketSideDataType } from '../codec'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport const enum MetaDataBlockType {\r\n  STREAMINFO,\r\n  PADDING,\r\n  APPLICATION,\r\n  SEEKTABLE,\r\n  VORBIS_COMMENT,\r\n  CUESHEET,\r\n  PICTURE\r\n}\r\n\r\nexport const enum FlacCHMode {\r\n  INDEPENDENT = 0,\r\n  LEFT_SIDE = 1,\r\n  RIGHT_SIDE = 2,\r\n  MID_SIDE = 3\r\n}\r\n\r\nexport const FLAC_STREAMINFO_SIZE = 34\r\nexport const FLAC_MAX_CHANNELS = 8\r\nexport const FLAC_MIN_BLOCKSIZE = 16\r\nexport const FLAC_MAX_BLOCKSIZE = 65535\r\nexport const FLAC_MIN_FRAME_SIZE = 10\r\n\r\nexport const SampleSizeTable: number[] = [0, 8, 12, 0, 16, 20, 24, 32]\r\n\r\nexport const SampleRateTable: number[] = [\r\n  0, 88200, 176400, 192000, 8000, 16000, 22050,\r\n  24000, 32000, 44100, 48000, 96000,\r\n  0, 0, 0, 0\r\n]\r\n\r\nexport const BlockSizeTable: number[] = [\r\n  0, 192, 576 << 0, 576 << 1, 576 << 2, 576 << 3, 0, 0,\r\n  256 << 0, 256 << 1, 256 << 2, 256 << 3, 256 << 4, 256 << 5, 256 << 6, 256 << 7\r\n]\r\n\r\nexport const enum FlacChmode {\r\n  FLAC_CHMODE_INDEPENDENT = 0,\r\n  FLAC_CHMODE_LEFT_SIDE   = 1,\r\n  FLAC_CHMODE_RIGHT_SIDE  = 2,\r\n  FLAC_CHMODE_MID_SIDE    = 3,\r\n}\r\n\r\nexport const enum FlacMetadataType {\r\n  FLAC_METADATA_TYPE_STREAMINFO = 0,\r\n  FLAC_METADATA_TYPE_PADDING,\r\n  FLAC_METADATA_TYPE_APPLICATION,\r\n  FLAC_METADATA_TYPE_SEEKTABLE,\r\n  FLAC_METADATA_TYPE_VORBIS_COMMENT,\r\n  FLAC_METADATA_TYPE_CUESHEET,\r\n  FLAC_METADATA_TYPE_PICTURE,\r\n  FLAC_METADATA_TYPE_INVALID = 127\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: Stream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length === FLAC_STREAMINFO_SIZE) {\r\n    const { bitsPerRawSample, sampleRate, channels } = getAVCodecParameters(extradata)\r\n    stream.codecpar.bitsPerRawSample = bitsPerRawSample\r\n    stream.codecpar.sampleRate = sampleRate\r\n    stream.codecpar.chLayout.nbChannels = channels\r\n  }\r\n}\r\n\r\nfunction getAVCodecParameters(extradata: Uint8ArrayInterface) {\r\n  const bufferReader = new BufferReader(extradata)\r\n  bufferReader.skip(10)\r\n  const value = bufferReader.readUint24()\r\n  const sampleRate = (value >> 4)\r\n  const channels = ((value & 0x0f) >>> 1) + 1\r\n  const bitPerSample = bufferReader.readUint8()\r\n  return {\r\n    sampleRate,\r\n    channels,\r\n    bitsPerRawSample: (((value & 0x01) << 4) | ((bitPerSample & 0xf0) >>> 4)) + 1\r\n  }\r\n}\r\n","/*\r\n * libmedia mp3 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport AVStream from '../AVStream'\r\nimport { NOPTS_VALUE } from '../constant'\r\n\r\nconst MpegAudioV10SampleRateTable = [44100, 48000, 32000, 0]\r\n\r\nconst MpegAudioV20SampleRateTable = [22050, 24000, 16000, 0]\r\n\r\nconst MpegAudioV25SampleRateTable = [11025, 12000, 8000, 0]\r\n\r\nconst MpegAudioV10FrameSizeTable = [0, 1152, 1152, 384]\r\n\r\nconst MpegAudioV20FrameSizeTable = [0, 576, 1152, 384]\r\n\r\nconst MpegAudioV25FrameSizeTable = [0, 576, 1152, 384]\r\n\r\nconst MpegAudioV1L1BitRateTable = [0, 32, 64, 96, 128, 160, 192, 224, 256, 288, 320, 352, 384, 416, 448, -1]\r\n\r\nconst MpegAudioV1L2BitRateTable = [0, 32, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, 384, -1]\r\n\r\nconst MpegAudioV1L3BitRateTable = [0, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256, 320, -1]\r\n\r\nconst MpegAudioV2L1BitRateTable = [0, 32, 48, 56, 64, 80, 96, 112, 128, 144, 160, 176, 192, 224, 256, -1]\r\n\r\nconst MpegAudioV2L2L3BitRateTable = [0, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160, -1]\r\n\r\nexport function getSampleRateByVersionIndex(version: number, samplingFreqIndex: number) {\r\n  switch (version) {\r\n    case 0:\r\n      // MPEG 2.5\r\n      return MpegAudioV25SampleRateTable[samplingFreqIndex]\r\n    case 2:\r\n      // MPEG 2\r\n      return MpegAudioV20SampleRateTable[samplingFreqIndex]\r\n    case 3:\r\n      // MPEG 1\r\n      return MpegAudioV10SampleRateTable[samplingFreqIndex]\r\n  }\r\n  return NOPTS_VALUE\r\n}\r\n\r\nexport function getFrameSizeByVersionLayer(version: number, layer: number) {\r\n  switch (version) {\r\n    case 0:\r\n      // MPEG 2.5\r\n      return MpegAudioV25FrameSizeTable[layer]\r\n    case 2:\r\n      // MPEG 2\r\n      return MpegAudioV20FrameSizeTable[layer]\r\n    case 3:\r\n      // MPEG 1\r\n      return MpegAudioV10FrameSizeTable[layer]\r\n  }\r\n  return NOPTS_VALUE\r\n}\r\n\r\nexport function getBitRateByVersionLayerIndex(version: number, layer: number, index: number) {\r\n\r\n  switch (layer) {\r\n    // layer3\r\n    case 1:\r\n      switch (version) {\r\n        case 0:\r\n        case 2:\r\n          return MpegAudioV2L2L3BitRateTable[index]\r\n        case 3:\r\n          return MpegAudioV1L3BitRateTable[index]\r\n      }\r\n      break\r\n    // layer2\r\n    case 2:\r\n      switch (version) {\r\n        case 0:\r\n        case 2:\r\n          return MpegAudioV2L2L3BitRateTable[index]\r\n        case 3:\r\n          return MpegAudioV1L2BitRateTable[index]\r\n      }\r\n    // layer1\r\n    case 3:\r\n      switch (version) {\r\n        case 0:\r\n        case 2:\r\n          return MpegAudioV2L1BitRateTable[index]\r\n        case 3:\r\n          return MpegAudioV1L1BitRateTable[index]\r\n      }\r\n  }\r\n  return NOPTS_VALUE\r\n}\r\n\r\nexport function getProfileByLayer(layer: number) {\r\n  switch (layer) {\r\n    case 1:\r\n      // Layer 3\r\n      return 34\r\n    case 2:\r\n      // Layer 2\r\n      return 33\r\n    case 3:\r\n      // Layer 1\r\n      return 32\r\n  }\r\n  return NOPTS_VALUE\r\n}\r\n\r\nexport const enum MP3Profile {\r\n  Layer1 = 32,\r\n  Layer2 = 33,\r\n  Layer3 = 34\r\n}\r\n\r\nexport const MP3Profile2Name: Record<MP3Profile, string> = {\r\n  [MP3Profile.Layer1]: 'Layer1',\r\n  [MP3Profile.Layer2]: 'Layer2',\r\n  [MP3Profile.Layer3]: 'Layer3'\r\n}\r\n\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, buffer: Uint8ArrayInterface) {\r\n  if (buffer && buffer.length >= 4) {\r\n    const ver = (buffer[1] >>> 3) & 0x03\r\n    const layer = (buffer[1] & 0x06) >> 1\r\n    // const bitrateIndex = (buffer[2] & 0xF0) >>> 4\r\n    const samplingFreqIndex = (buffer[2] & 0x0C) >>> 2\r\n\r\n    const channelMode = (buffer[3] >>> 6) & 0x03\r\n\r\n    const channelCount = channelMode !== 3 ? 2 : 1\r\n    const profile = getProfileByLayer(layer)\r\n    const sampleRate = getSampleRateByVersionIndex(ver, samplingFreqIndex)\r\n\r\n    stream.codecpar.profile = profile\r\n    stream.codecpar.sampleRate = sampleRate\r\n    stream.codecpar.chLayout.nbChannels = channelCount\r\n  }\r\n}\r\n","/*\r\n * libmedia opus util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVPacketSideDataType } from '../codec'\r\nimport AVStream from '../AVStream'\r\nimport AVCodecParameters from '../struct/avcodecparameters'\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport { avRescaleQ } from '../util/rational'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport const durations = [\r\n  /* Silk NB */\r\n  480, 960, 1920, 2880,\r\n  /* Silk MB */\r\n  480, 960, 1920, 2880,\r\n  /* Silk WB */\r\n  480, 960, 1920, 2880,\r\n  /* Hybrid SWB */\r\n  480, 960,\r\n  /* Hybrid FB */\r\n  480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960\r\n]\r\n\r\n\r\nexport function getBufferSamples(buffer: Uint8Array) {\r\n  let toc = 0, frameDuration = 0, nframes = 0\r\n\r\n  if (buffer.length < 1) {\r\n    return 0\r\n  }\r\n\r\n  toc = buffer[0]\r\n\r\n  frameDuration = durations[toc >> 3]\r\n\r\n  switch (toc & 3) {\r\n    case 0:\r\n      nframes = 1\r\n      break\r\n    case 1:\r\n      nframes = 2\r\n      break\r\n    case 2:\r\n      nframes = 2\r\n      break\r\n    case 3:\r\n      if (buffer.length < 2) {\r\n        return 0\r\n      }\r\n      nframes = buffer[1] & 63\r\n      break\r\n  }\r\n  return nframes * frameDuration\r\n}\r\n\r\n/**\r\n * opus extradata\r\n * \r\n * - 8 bytes Magic Signature: OpusHead\r\n * - 1 bytes unsigned, 对应值 0x01 version\r\n * - 1 bytes unsigned, channels 它可能和编码声道数不一致， 它可能被修改成 packet-by-packet, 对应值 0x01\r\n * - 2 bytes unsigned, preSkip 这是要从开始播放时的解码器输出， 从页面的颗粒位置减去以计算其 PCM 样本位置。\r\n * - 4 bytes unsigned, sampleRate 原始输入采样率\r\n * - 2 bytes signed, outputGain 这是解码时要应用的增益， 20 * log10 缩放解码器输出以实现所需的播放音量\r\n * - 1 bytes unsigned, channelMappingFamily 指示输出渠道的顺序和语音含义。该八位位组的每个当前指定的值表示一个映射系列，它定义了一组允许的通道数，以及每个允许的通道数的通道名称的有序集合\r\n * - channelMappingTable 可选， 当 Channel Mapping Family 为 0 时被省略。\r\n *  - 1 bytes, streamCount, unsigned ogg packet 里面编码了多少路 stream\r\n *  - 1 bytes, coupledStreamCount, unsigned 标识有多少路流是双声声道，必须小于 streamCount\r\n *  - C bytes, C 为总输出声道数 coupledStreamCount + streamCount\r\n * \r\n */\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 19) {\r\n    const reader = new BufferReader(extradata, false)\r\n    reader.skip(9)\r\n    stream.codecpar.chLayout.nbChannels = reader.readUint8()\r\n    stream.codecpar.initialPadding = reader.readUint16()\r\n    stream.codecpar.sampleRate = reader.readUint32()\r\n\r\n    stream.codecpar.seekPreroll = Number(avRescaleQ(\r\n      80n,\r\n      {\r\n        den: 1000,\r\n        num: 1\r\n      },\r\n      {\r\n        den: 48000,\r\n        num: 1\r\n      }\r\n    ))\r\n  }\r\n}\r\n\r\nexport function avCodecParameters2Extradata(codecpar: AVCodecParameters) {\r\n  const extradata = new Uint8Array(19)\r\n\r\n  const writer = new BufferWriter(extradata, false)\r\n\r\n  writer.writeString('OpusHead')\r\n  writer.writeUint8(0x01)\r\n  writer.writeUint8(codecpar.chLayout.nbChannels)\r\n  writer.writeUint16(codecpar.initialPadding)\r\n  writer.writeUint32(codecpar.sampleRate)\r\n\r\n  return extradata\r\n}\r\n","/*\r\n * libmedia vp8 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVStream from '../AVStream'\r\nimport { AVPacketSideDataType } from '../codec'\r\nimport AVPacket from '../struct/avpacket'\r\nimport BitReader from 'common/io/BitReader'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 6) {\r\n    const params = parseExtraData(extradata)\r\n    stream.codecpar.profile = params.profile\r\n    stream.codecpar.level = params.level\r\n  }\r\n}\r\n\r\n/**\r\n * - 1 byte profile\r\n * - 1 byte level\r\n * - 4 bit bitdepth\r\n * - 3 bit chroma_subsampling\r\n * - 1 bit full_range_flag\r\n * - 1 byte color_primaries\r\n * - 1 byte color_trc\r\n * - 1 byte color_space\r\n * \r\n * @param extradata \r\n */\r\nexport function parseExtraData(extradata: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader(extradata.length)\r\n  bitReader.appendBuffer(extradata.subarray(4))\r\n  const profile = bitReader.readU(8)\r\n  const level = bitReader.readU(8)\r\n  let bitDepth = bitReader.readU(4)\r\n  const chromaSubsampling = bitReader.readU(3)\r\n  const fullRangeFlag = bitReader.readU1()\r\n  const colorPrimaries = bitReader.readU(8)\r\n  const colorTrc = bitReader.readU(8)\r\n  const colorSpace = bitReader.readU(8)\r\n\r\n  return {\r\n    profile,\r\n    level,\r\n    bitDepth,\r\n    chromaSubsampling,\r\n    fullRangeFlag,\r\n    colorPrimaries,\r\n    colorTrc,\r\n    colorSpace\r\n  }\r\n}\r\n\r\nexport function isIDR(avpacket: pointer<AVPacket>) {\r\n  const first = accessof(avpacket.data)\r\n  return !(first >>> 7)\r\n}\r\n","/*\r\n * libmedia vp9 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVStream from '../AVStream'\r\nimport { AVPacketSideDataType } from '../codec'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport BitReader from 'common/io/BitReader'\r\nimport AVCodecParameters from '../struct/avcodecparameters'\r\nimport { NOPTS_VALUE } from '../constant'\r\nimport { getAVPixelFormatDescriptor } from '../pixelFormatDescriptor'\r\nimport { avQ2D } from '../util/rational'\r\nimport { AVChromaLocation, AVColorRange, AVPixelFormat } from '../pixfmt'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport AVPacket from '../struct/avpacket'\r\n\r\nexport const enum VP9Profile {\r\n  Profile0,\r\n  Profile1,\r\n  Profile2,\r\n  Profile3\r\n}\r\n\r\nexport const VP9Profile2Name: Record<VP9Profile, string> = {\r\n  [VP9Profile.Profile0]: 'Profile0',\r\n  [VP9Profile.Profile1]: 'Profile1',\r\n  [VP9Profile.Profile2]: 'Profile2',\r\n  [VP9Profile.Profile3]: 'Profile3'\r\n}\r\n\r\nexport const LevelCapabilities = [\r\n  { level: 10, maxResolution: 512 * 384, maxFrameRate: 30 },\r\n  { level: 11, maxResolution: 512 * 384, maxFrameRate: 60 },\r\n  { level: 20, maxResolution: 960 * 540, maxFrameRate: 30 },\r\n  { level: 21, maxResolution: 960 * 540, maxFrameRate: 60 },\r\n  { level: 30, maxResolution: 1920 * 1080, maxFrameRate: 30 },\r\n  { level: 31, maxResolution: 1920 * 1080, maxFrameRate: 60 },\r\n  { level: 40, maxResolution: 2560 * 1440, maxFrameRate: 30 },\r\n  { level: 41, maxResolution: 2560 * 1440, maxFrameRate: 60 },\r\n  { level: 50, maxResolution: 3840 * 2160, maxFrameRate: 30 },\r\n  { level: 51, maxResolution: 3840 * 2160, maxFrameRate: 60 },\r\n  { level: 60, maxResolution: 4096 * 2160, maxFrameRate: 30 },\r\n  { level: 61, maxResolution: 4096 * 2160, maxFrameRate: 60 },\r\n  { level: 70, maxResolution: 8192 * 4320, maxFrameRate: 30 },\r\n  { level: 71, maxResolution: 8192 * 4320, maxFrameRate: 60 }\r\n]\r\n\r\nexport function getLevelByResolution(width: number, height: number, fps: number) {\r\n  const resolution = width * height\r\n  for (const level of LevelCapabilities) {\r\n    if (resolution <= level.maxResolution && fps <= level.maxFrameRate) {\r\n      return level.level\r\n    }\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 6) {\r\n    const params = parseExtraData(extradata)\r\n    stream.codecpar.profile = params.profile\r\n    stream.codecpar.level = params.level\r\n  }\r\n}\r\n\r\n/**\r\n * - 1 byte profile\r\n * - 1 byte level\r\n * - 4 bit bitdepth\r\n * - 3 bit chroma_subsampling\r\n * - 1 bit full_range_flag\r\n * - 1 byte color_primaries\r\n * - 1 byte color_trc\r\n * - 1 byte color_space\r\n * \r\n * @param extradata \r\n */\r\nexport function parseExtraData(extradata: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader(extradata.length)\r\n  bitReader.appendBuffer(extradata)\r\n  const profile = bitReader.readU(8)\r\n  const level = bitReader.readU(8)\r\n  let bitDepth = bitReader.readU(4)\r\n  const chromaSubsampling = bitReader.readU(3)\r\n  const fullRangeFlag = bitReader.readU1()\r\n  const colorPrimaries = bitReader.readU(8)\r\n  const colorTrc = bitReader.readU(8)\r\n  const colorSpace = bitReader.readU(8)\r\n\r\n  return {\r\n    profile,\r\n    level,\r\n    bitDepth,\r\n    chromaSubsampling,\r\n    fullRangeFlag,\r\n    colorPrimaries,\r\n    colorTrc,\r\n    colorSpace\r\n  }\r\n}\r\n\r\nconst enum VPX_CHROMA_SUBSAMPLING {\r\n  VPX_SUBSAMPLING_420_VERTICAL = 0,\r\n  VPX_SUBSAMPLING_420_COLLOCATED_WITH_LUMA = 1,\r\n  VPX_SUBSAMPLING_422 = 2,\r\n  VPX_SUBSAMPLING_444 = 3\r\n}\r\n\r\nfunction getVpccFeature(codecpar: pointer<AVCodecParameters>) {\r\n  let profile = codecpar.profile\r\n  let level = codecpar.level\r\n  if (level === NOPTS_VALUE) {\r\n    level = getLevelByResolution(codecpar.width, codecpar.height, avQ2D(codecpar.framerate))\r\n  }\r\n  const desc = getAVPixelFormatDescriptor(codecpar.format as AVPixelFormat)\r\n\r\n  let bitDepth = codecpar.bitsPerCodedSample\r\n  let chromaSubsampling = VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_420_COLLOCATED_WITH_LUMA\r\n  if (desc) {\r\n    bitDepth = desc.comp[0].depth\r\n    if (desc.log2ChromaW === 1 && desc.log2ChromaH === 1) {\r\n      if (codecpar.chromaLocation === AVChromaLocation.AVCHROMA_LOC_LEFT) {\r\n        chromaSubsampling = VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_420_VERTICAL\r\n      }\r\n    }\r\n    else if (desc.log2ChromaW === 1 && desc.log2ChromaH === 0) {\r\n      chromaSubsampling = VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_422\r\n    }\r\n    else if (desc.log2ChromaW === 0 && desc.log2ChromaH === 0) {\r\n      chromaSubsampling = VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_444\r\n    }\r\n  }\r\n  const fullRange = codecpar.colorRange === AVColorRange.AVCOL_RANGE_JPEG ? 1 : 0\r\n\r\n  if (profile === NOPTS_VALUE && bitDepth) {\r\n    if (chromaSubsampling == VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_420_VERTICAL\r\n      || chromaSubsampling == VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_420_COLLOCATED_WITH_LUMA\r\n    ) {\r\n      profile = (bitDepth == 8) ? VP9Profile.Profile0 : VP9Profile.Profile2\r\n    }\r\n    else {\r\n      profile = (bitDepth == 8) ? VP9Profile.Profile1 : VP9Profile.Profile3\r\n    }\r\n  }\r\n  return {\r\n    profile,\r\n    level,\r\n    bitDepth,\r\n    chromaSubsampling,\r\n    fullRange\r\n  }\r\n}\r\n\r\nexport function generateExtradata(codecpar: pointer<AVCodecParameters>) {\r\n  const ioWriter = new BufferWriter(new Uint8Array(8))\r\n  const vpcc = getVpccFeature(codecpar)\r\n  ioWriter.writeUint8(vpcc.profile)\r\n  ioWriter.writeUint8(vpcc.level)\r\n  ioWriter.writeUint8((vpcc.bitDepth << 4) | (vpcc.chromaSubsampling << 1) | vpcc.fullRange)\r\n  ioWriter.writeUint8(codecpar.colorPrimaries)\r\n  ioWriter.writeUint8(codecpar.colorTrc)\r\n  ioWriter.writeUint8(codecpar.colorSpace)\r\n  ioWriter.writeUint16(0)\r\n  return ioWriter.getWroteBuffer()\r\n}\r\n\r\nexport function isIDR(avpacket: pointer<AVPacket>) {\r\n  const first = accessof(avpacket.data)\r\n\r\n  const version = (first >>> 5) & 0x01\r\n  const high = (first >>> 4) & 0x01\r\n  const profile = (high << 1) + version\r\n\r\n  const showExistingFrame = (first >>> (profile === VP9Profile.Profile3 ? 2 : 3)) & 0x01\r\n\r\n  if (showExistingFrame) {\r\n    return false\r\n  }\r\n\r\n  return !((first >>> (profile === VP9Profile.Profile3 ? 1 : 2)) & 0x01)\r\n}\r\n","/*\r\n * libmedia flv amf\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport IOReader from 'common/io/IOReader'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport IOWriterSync from 'common/io/IOWriterSync'\r\nimport * as is from 'common/util/is'\r\nimport * as array from 'common/util/array'\r\nimport * as object from 'common/util/object'\r\n\r\nexport async function parseObject(ioReader: IOReader | BufferReader, endPos: bigint) {\r\n  const key = await ioReader.readString(await ioReader.readUint16())\r\n  const value = await parseValue(ioReader, endPos)\r\n  return {\r\n    key,\r\n    value\r\n  }\r\n}\r\n\r\nexport async function parseValue(ioReader: IOReader | BufferReader, endPos: bigint) {\r\n  const type = await ioReader.readUint8()\r\n  let value: any\r\n\r\n  switch (type) {\r\n    // double\r\n    case 0:\r\n      value = await ioReader.readDouble()\r\n      break\r\n      // boolean\r\n    case 1:\r\n      value = await ioReader.readUint8() ? true : false\r\n      break\r\n      // string\r\n    case 2:\r\n      value = await ioReader.readString(await ioReader.readUint16())\r\n      break\r\n      // object\r\n    case 3:\r\n      value = {}\r\n      while (ioReader.getPos() < endPos) {\r\n        const { key, value: val } = await parseObject(ioReader, endPos)\r\n        value[key] = val\r\n        if (((await ioReader.peekUint24()) & 0x00FFFFFF) === 9) {\r\n          await ioReader.skip(3)\r\n          break\r\n        }\r\n      }\r\n      break\r\n      // ECMA array type (Mixed array)\r\n    case 8:\r\n      value = {}\r\n      // skip ECMAArrayLength(UI32)\r\n      await ioReader.skip(4)\r\n      while (ioReader.getPos() < endPos) {\r\n        const { key, value: val } = await parseObject(ioReader, endPos)\r\n        value[key] = val\r\n        if (((await ioReader.peekUint24()) & 0x00FFFFFF) === 9) {\r\n          await ioReader.skip(3)\r\n          break\r\n        }\r\n      }\r\n      break\r\n      // ScriptDataObjectEnd\r\n    case 9:\r\n    case 5:\r\n      value = null\r\n      break\r\n    // Strict array type\r\n    case 10:\r\n      value = []\r\n      const length = await ioReader.readUint32()\r\n      for (let i = 0; i < length; i++) {\r\n        value.push(await parseValue(ioReader, endPos))\r\n      }\r\n      break\r\n    // Date\r\n    case 11:\r\n      const timestamp = await ioReader.readDouble()\r\n      const localTimeOffset = await ioReader.readInt16()\r\n      value = new Date(timestamp + localTimeOffset * 60 * 1000)\r\n      break\r\n    // Long string type\r\n    case 12:\r\n      value = await ioReader.readString(await ioReader.readUint32())\r\n      break\r\n    default:\r\n\r\n  }\r\n\r\n  return value\r\n}\r\n\r\nexport function writeValue(ioWriter: IOWriterSync | BufferWriter, value: any) {\r\n  // double\r\n  if (is.number(value)) {\r\n    ioWriter.writeUint8(0)\r\n    ioWriter.writeDouble(value)\r\n  }\r\n  else if (is.bigint(value)) {\r\n    ioWriter.writeUint8(0)\r\n    ioWriter.writeDouble(Number(value))\r\n  }\r\n  // boolean\r\n  else if (is.boolean(value)) {\r\n    ioWriter.writeUint8(1)\r\n    ioWriter.writeUint8(value ? 1 : 0)\r\n  }\r\n  // string\r\n  else if (is.string(value)) {\r\n    // long string\r\n    if (value.length >= 65536) {\r\n      ioWriter.writeUint8(12)\r\n      ioWriter.writeUint32(value.length)\r\n      ioWriter.writeString(value)\r\n    }\r\n    // string\r\n    else {\r\n      ioWriter.writeUint8(2)\r\n      ioWriter.writeUint16(value.length)\r\n      ioWriter.writeString(value)\r\n    }\r\n  }\r\n  // array type\r\n  else if (is.array(value)) {\r\n    ioWriter.writeUint8(10)\r\n    ioWriter.writeUint32(value.length)\r\n    array.each(value, (value) => {\r\n      writeValue(ioWriter, value)\r\n    })\r\n  }\r\n  // object\r\n  else if (is.object(value)) {\r\n    ioWriter.writeUint8(3)\r\n    object.each(value, (item, key) => {\r\n      ioWriter.writeUint16(key.length)\r\n      ioWriter.writeString(key)\r\n      writeValue(ioWriter, item)\r\n    })\r\n    // object end flag\r\n    ioWriter.writeUint24(9)\r\n  }\r\n  else if (value instanceof Date) {\r\n    ioWriter.writeUint8(11)\r\n    ioWriter.writeDouble(value.getTime())\r\n    ioWriter.writeInt16(0)\r\n  }\r\n  else if (value == null) {\r\n    ioWriter.writeUint8(5)\r\n  }\r\n}\r\n","/*\r\n * libmedia av1 syntax util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport BitReader from 'common/io/BitReader'\r\n\r\nexport function f(bitReader: BitReader, n: number) {\r\n  let x = 0\r\n  for (let i = 0; i < n; i++ ) {\r\n    x = 2 * x + bitReader.readU1()\r\n  }\r\n  return x\r\n}\r\n\r\nexport function uvlc(bitReader: BitReader) {\r\n  let leadingZeros = 0\r\n  while (true) {\r\n    let done = f(bitReader, 1)\r\n    if (done) {\r\n      break\r\n    }\r\n    leadingZeros++\r\n  }\r\n  if (leadingZeros >= 32) {\r\n    return (1 << 32) - 1\r\n  }\r\n  const value =\tf(bitReader, leadingZeros)\r\n  return value + (1 << leadingZeros) - 1\r\n}\r\n\r\nexport function le(bitReader: BitReader, n: number) {\r\n  let t = 0\r\n  for (let i = 0; i < n; i++) {\r\n    let byte = f(bitReader, 8)\r\n    t += (byte << (i * 8))\r\n  }\r\n  return t\r\n}\r\n\r\nexport function leb128(bitReader: BitReader) {\r\n  let value = 0\r\n  for (let i = 0; i < 8; i++ ) {\r\n    let next = f(bitReader, 8)\r\n    value |= ((next & 0x7f) << (i * 7))\r\n    if (!(next & 0x80)) {\r\n      break\r\n    }\r\n  }\r\n  return value\r\n}\r\n\r\nexport function su(bitReader: BitReader, n: number) {\r\n  let value = f(bitReader, n)\r\n  let signMask = 1 << (n - 1)\r\n  if (value & signMask) {\r\n    value = value - 2 * signMask\r\n  }\r\n  return value\r\n}\r\n\r\nexport function ns(bitReader: BitReader, n: number) {\r\n  let w = Math.floor(Math.log2(n)) + 1\r\n  let m = (1 << w) - n\r\n  let v =\tf(bitReader, w - 1)\r\n  if (v < m) {\r\n    return v\r\n  }\r\n  let extraBit =\tf(bitReader, 1)\r\n  return (v << 1) - m + extraBit\r\n}\r\n\r\nexport function L(bitReader: BitReader, n: number) {\r\n  let x = 0\r\n  for (let i = 0 ; i < n; i++ ) {\r\n    x = 2 * x + bitReader.readU1()\r\n  }\r\n  return x\r\n}\r\n\r\nexport function NS(bitReader: BitReader, n: number) {\r\n  let w = Math.floor(Math.log2(n)) + 1\r\n  let m = (1 << w) - n\r\n  let v =\tL(bitReader, w - 1)\r\n  if (v < m) {\r\n    return v\r\n  }\r\n  let extraBit = L(bitReader, 1)\r\n  return (v << 1) - m + extraBit\r\n}\r\n","/**\r\n * 写字节流工具\r\n */\r\n\r\nimport { IOError } from './error'\r\nimport * as text from '../util/text'\r\nimport { Uint8ArrayInterface, BytesWriterSync } from './interface'\r\n\r\nexport default class IOWriterSync implements BytesWriterSync {\r\n\r\n  private data: DataView\r\n\r\n  private buffer: Uint8ArrayInterface\r\n\r\n  private pointer: number\r\n\r\n  private pos: bigint\r\n\r\n  private size: number\r\n\r\n  private littleEndian: boolean\r\n\r\n  public error: number\r\n\r\n  public onFlush: (data: Uint8Array, pos?: bigint) => number\r\n  public onSeek: (seek: bigint) => number\r\n\r\n  /**\r\n   * @param data 待写的 Uint8Array\r\n   * @param bigEndian 是否按大端字节序写，默认大端字节序（网络字节序）\r\n   */\r\n  constructor(size: number = 1 * 1024 * 1024, bigEndian: boolean = true, map?: Uint8ArrayInterface) {\r\n    this.pointer = 0\r\n    this.pos = 0n\r\n    this.size = size\r\n    this.littleEndian = !bigEndian\r\n    this.error = 0\r\n\r\n    if (map && map.view) {\r\n      this.size = map.length\r\n      this.buffer = map\r\n      this.data = map.view\r\n    }\r\n    else if (map && !map.byteOffset) {\r\n      this.size = map.length\r\n      this.buffer = map\r\n      this.data = new DataView(this.buffer.buffer)\r\n    }\r\n    else {\r\n\r\n      if (map) {\r\n        throw new Error('not support subarray of ArrayBuffer')\r\n      }\r\n\r\n      this.buffer = new Uint8Array(this.size)\r\n      this.data = new DataView(this.buffer.buffer)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 写 8 位无符号整数\r\n   */\r\n  public writeUint8(value: number) {\r\n    if (this.remainingLength() < 1) {\r\n      this.flush()\r\n    }\r\n    this.data.setUint8(this.pointer, value)\r\n    this.pointer++\r\n    this.pos++\r\n  }\r\n\r\n  /**\r\n   * 读取 16 位无符号整数\r\n   */\r\n  public writeUint16(value: number) {\r\n    if (this.remainingLength() < 2) {\r\n      this.flush()\r\n    }\r\n    this.data.setUint16(this.pointer, value, this.littleEndian)\r\n    this.pointer += 2\r\n    this.pos += 2n\r\n  }\r\n\r\n  /**\r\n   * 写 24 位无符号整数\r\n   */\r\n  public writeUint24(value: number) {\r\n    if (this.remainingLength() < 3) {\r\n      this.flush()\r\n    }\r\n    const high = (value & 0xff0000) >> 16\r\n    const middle = (value & 0x00ff00) >> 8\r\n    const low = value & 0x0000ff\r\n    if (this.littleEndian) {\r\n      this.writeUint8(low)\r\n      this.writeUint8(middle)\r\n      this.writeUint8(high)\r\n    }\r\n    else {\r\n      this.writeUint8(high)\r\n      this.writeUint8(middle)\r\n      this.writeUint8(low)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 写 32 位无符号整数\r\n   */\r\n  public writeUint32(value: number) {\r\n    if (this.remainingLength() < 4) {\r\n      this.flush()\r\n    }\r\n    this.data.setUint32(this.pointer, value, this.littleEndian)\r\n    this.pointer += 4\r\n    this.pos += 4n\r\n  }\r\n\r\n  /**\r\n   * 写 64 位无符号整数\r\n   */\r\n  public writeUint64(value: bigint) {\r\n    if (this.remainingLength() < 8) {\r\n      this.flush()\r\n    }\r\n    this.data.setBigUint64(this.pointer, value, this.littleEndian)\r\n    this.pointer += 8\r\n    this.pos += 8n\r\n  }\r\n\r\n  /**\r\n   * 写 8 位有符号整数\r\n   * \r\n   * @returns \r\n   */\r\n  public writeInt8(value: number) {\r\n    if (this.remainingLength() < 1) {\r\n      this.flush()\r\n    }\r\n    this.data.setInt8(this.pointer, value)\r\n    this.pointer++\r\n    this.pos++\r\n  }\r\n\r\n  /**\r\n   * 写 16 位有符号整数\r\n   */\r\n  public writeInt16(value: number) {\r\n    if (this.remainingLength() < 2) {\r\n      this.flush()\r\n    }\r\n    this.data.setInt16(this.pointer, value, this.littleEndian)\r\n    this.pointer += 2\r\n    this.pos += 2n\r\n  }\r\n\r\n  /**\r\n   * 写 24 位有符号整数\r\n   */\r\n  public writeInt24(value: number) {\r\n    this.writeUint24(value < 0 ? (value + 0x1000000) : value)\r\n  }\r\n\r\n  /**\r\n   * 写 32 位有符号整数\r\n   */\r\n  public writeInt32(value: number) {\r\n    if (this.remainingLength() < 4) {\r\n      this.flush()\r\n    }\r\n    this.data.setInt32(this.pointer, value, this.littleEndian)\r\n    this.pointer += 4\r\n    this.pos += 4n\r\n  }\r\n\r\n  /**\r\n   * 写 64 位有符号整数\r\n   */\r\n  public writeInt64(value: bigint) {\r\n    if (this.remainingLength() < 8) {\r\n      this.flush()\r\n    }\r\n    this.data.setBigInt64(this.pointer, value, this.littleEndian)\r\n    this.pointer += 8\r\n    this.pos += 8n\r\n  }\r\n\r\n  /**\r\n   * 写单精度浮点数\r\n   * \r\n   * @returns \r\n   */\r\n  public writeFloat(value: number) {\r\n    if (this.remainingLength() < 4) {\r\n      this.flush()\r\n    }\r\n    this.data.setFloat32(this.pointer, value, this.littleEndian)\r\n    this.pointer += 4\r\n    this.pos += 4n\r\n  }\r\n\r\n  /**\r\n   * 写双精度浮点数\r\n   */\r\n  public writeDouble(value: number) {\r\n    if (this.remainingLength() < 8) {\r\n      this.flush()\r\n    }\r\n    this.data.setFloat64(this.pointer, value, this.littleEndian)\r\n    this.pointer += 8\r\n    this.pos += 8n\r\n  }\r\n\r\n  /**\r\n   * 获取当前写指针\r\n   * \r\n   * @returns \r\n   */\r\n  public getPointer() {\r\n    return this.pointer\r\n  }\r\n\r\n  public getPos() {\r\n    return this.pos\r\n  }\r\n\r\n  /**\r\n   * 获取剩余可写节数\r\n   * \r\n   * @returns \r\n   */\r\n  public remainingLength() {\r\n    return this.size - this.pointer\r\n  }\r\n\r\n  /**\r\n   * 写指定长度的二进制 buffer 数据\r\n   * \r\n   * @param length \r\n   * @returns \r\n   */\r\n  public writeBuffer(buffer: Uint8ArrayInterface) {\r\n\r\n    if (!buffer.length) {\r\n      return\r\n    }\r\n\r\n    let length = buffer.length\r\n    if (this.remainingLength() < length) {\r\n      let index = 0\r\n      while (length > 0) {\r\n        this.flush()\r\n        const len = Math.min(this.size, length)\r\n        this.buffer.set(buffer.subarray(index, index + len), this.pointer)\r\n\r\n        this.pointer += len\r\n        this.pos += BigInt(len)\r\n        index += len\r\n        length -= len\r\n      }\r\n    }\r\n    else {\r\n      this.buffer.set(buffer, this.pointer)\r\n      this.pointer += length\r\n      this.pos += BigInt(length)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 写一个字符串\r\n   */\r\n  public writeString(str: string) {\r\n    const buffer = text.encode(str)\r\n    this.writeBuffer(buffer)\r\n    return buffer.length\r\n  }\r\n\r\n  /**\r\n   * 将缓冲区中数据写出\r\n   */\r\n  public flush() {\r\n    if (!this.onFlush) {\r\n      this.error = IOError.INVALID_OPERATION\r\n      throw Error('IOWriter error, flush failed because of no flush callback')\r\n    }\r\n\r\n    if (this.pointer) {\r\n      const ret = this.onFlush(this.buffer.subarray(0, this.pointer))\r\n      if (ret !== 0) {\r\n        this.error = ret\r\n        throw Error('IOWriter error, flush failed')\r\n      }\r\n    }\r\n    this.pointer = 0\r\n  }\r\n\r\n  /**\r\n   * 将缓冲区中数据写出到指定位置\r\n   * \r\n   * @param pos \r\n   */\r\n  public flushToPos(pos: bigint) {\r\n    if (!this.onFlush) {\r\n      this.error = IOError.INVALID_OPERATION\r\n      throw Error('IOWriter error, flush failed because of no flush callback')\r\n    }\r\n    if (this.pointer) {\r\n      const ret = this.onFlush(this.buffer.subarray(0, this.pointer), pos)\r\n      if (ret !== 0) {\r\n        this.error = ret\r\n        throw Error('IOWriter error, flush failed')\r\n      }\r\n    }\r\n    this.pointer = 0\r\n  }\r\n\r\n  /**\r\n   * seek 到指定位置\r\n   * \r\n   * @param pos \r\n   */\r\n  public seek(pos: bigint) {\r\n    if (!this.onSeek) {\r\n      this.error = IOError.INVALID_OPERATION\r\n      throw Error('IOWriter error, seek failed because of no seek callback')\r\n    }\r\n\r\n    this.flush()\r\n\r\n    const ret = this.onSeek(pos)\r\n\r\n    if (ret !== 0) {\r\n      this.error = ret\r\n      throw Error('IOWriter error, seek failed')\r\n    }\r\n\r\n    this.pos = pos\r\n  }\r\n\r\n  /**\r\n   * 在当前缓冲区映射区间内 seek\r\n   * \r\n   * @param pos \r\n   */\r\n  public seekInline(pos: number) {\r\n    const pointer = this.pointer\r\n    this.pointer = Math.max(0, Math.min(this.size, pos))\r\n    this.pos += BigInt(this.pointer - pointer)\r\n  }\r\n\r\n  /**\r\n   * 跳过指定长度\r\n   * \r\n   * @param length \r\n   */\r\n  public skip(length: number) {\r\n    const pointer = this.pointer\r\n    this.pointer = Math.min(this.size, this.pointer + length)\r\n    this.pos += BigInt(this.pointer - pointer)\r\n  }\r\n\r\n  /**\r\n   * 回退指定长度，不能大于 pointer 大小\r\n   * \r\n   * @param length \r\n   */\r\n  public back(length: number) {\r\n    const pointer = this.pointer\r\n    this.pointer = Math.max(0, this.pointer - length)\r\n    this.pos += BigInt(this.pointer - pointer)\r\n  }\r\n\r\n  /**\r\n   * 获取缓冲区\r\n   * \r\n   * @returns \r\n   */\r\n  public getBuffer() {\r\n    return this.buffer.subarray(0, this.pointer)\r\n  }\r\n\r\n  /**\r\n   * 设置读取是小端还是大端\r\n   * \r\n   * @param bigEndian \r\n   */\r\n  public setEndian(bigEndian: boolean) {\r\n    this.littleEndian = !bigEndian\r\n  }\r\n\r\n  /**\r\n   * 重置 writer\r\n   */\r\n  public reset() {\r\n    this.pointer = 0\r\n    this.pos = 0n\r\n    this.error = 0\r\n  }\r\n\r\n  /**\r\n   * 获取缓冲区长度\r\n   * \r\n   * @returns \r\n   */\r\n  public getBufferSize() {\r\n    return this.size\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}