{"version":3,"file":"src_avformat_formats_isom_tags_ts-src_avutil_codecs_opus_ts.avplayer.js","mappings":"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","sources":["webpack://AVPlayer/./src/avformat/formats/isom/tags.ts","webpack://AVPlayer/./src/avutil/codecs/opus.ts"],"sourcesContent":["/*\r\n * libmedia isom tag defined\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport mktagle from '../../function/mktagle'\r\nimport { AVCodecID } from 'avutil/codec'\r\n\r\nexport const codecMovVideoTags: Record<uint32, AVCodecID> = {\r\n  [mktagle('mp4v')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DIVX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('XVID')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('3IV2')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('vvc1')]: AVCodecID.AV_CODEC_ID_VVC,\r\n  [mktagle('vvi1')]: AVCodecID.AV_CODEC_ID_VVC,\r\n  [mktagle('hev1')]: AVCodecID.AV_CODEC_ID_HEVC,\r\n  [mktagle('hvc1')]: AVCodecID.AV_CODEC_ID_HEVC,\r\n  [mktagle('dvhe')]: AVCodecID.AV_CODEC_ID_HEVC,\r\n  [mktagle('hev1')]: AVCodecID.AV_CODEC_ID_HEVC,\r\n\r\n  [mktagle('avc1')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('avc2')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('avc3')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('avc4')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai5p')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai5q')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai52')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai53')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai55')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai56')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai1p')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai1q')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai12')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai13')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai15')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('ai16')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('AVin')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('aivx')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('rv64')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('xalg')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('avlg')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('dva1')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('dvav')]: AVCodecID.AV_CODEC_ID_H264,\r\n\r\n  [mktagle('vp08')]: AVCodecID.AV_CODEC_ID_VP8,\r\n  [mktagle('vp09')]: AVCodecID.AV_CODEC_ID_VP9,\r\n  [mktagle('av01')]: AVCodecID.AV_CODEC_ID_AV1,\r\n}\r\n\r\nexport const codecMovAudioTags: Record<uint32, AVCodecID> = {\r\n  [mktagle('mp4a')]: AVCodecID.AV_CODEC_ID_AAC,\r\n  [mktagle('ac-3')]: AVCodecID.AV_CODEC_ID_AC3,\r\n  [mktagle('sac3')]: AVCodecID.AV_CODEC_ID_AC3,\r\n  [mktagle('ac-4')]: AVCodecID.AV_CODEC_ID_AC4,\r\n\r\n  [mktagle('dtsc')]: AVCodecID.AV_CODEC_ID_DTS,\r\n  [mktagle('dtsh')]: AVCodecID.AV_CODEC_ID_DTS,\r\n  [mktagle('dtsl')]: AVCodecID.AV_CODEC_ID_DTS,\r\n  [mktagle('dtse')]: AVCodecID.AV_CODEC_ID_DTS,\r\n  [mktagle('DTS ')]: AVCodecID.AV_CODEC_ID_DTS,\r\n  [mktagle('ec-3')]: AVCodecID.AV_CODEC_ID_EAC3,\r\n\r\n  [mktagle('.mp3')]: AVCodecID.AV_CODEC_ID_MP3,\r\n  [mktagle('mp3 ')]: AVCodecID.AV_CODEC_ID_MP3,\r\n  [0x6D730055 as int32]: AVCodecID.AV_CODEC_ID_MP3,\r\n\r\n  [mktagle('spex')]: AVCodecID.AV_CODEC_ID_SPEEX,\r\n  [mktagle('SPXN')]: AVCodecID.AV_CODEC_ID_SPEEX,\r\n  [mktagle('fLaC')]: AVCodecID.AV_CODEC_ID_FLAC,\r\n  [mktagle('Opus')]: AVCodecID.AV_CODEC_ID_OPUS,\r\n\r\n  [mktagle('alaw')]: AVCodecID.AV_CODEC_ID_PCM_ALAW,\r\n  [mktagle('ulaw')]: AVCodecID.AV_CODEC_ID_PCM_MULAW,\r\n  [mktagle('fl32')]: AVCodecID.AV_CODEC_ID_PCM_F32LE,\r\n  [mktagle('fl64')]: AVCodecID.AV_CODEC_ID_PCM_F64LE,\r\n  [mktagle('twos')]: AVCodecID.AV_CODEC_ID_PCM_S16BE,\r\n  [mktagle('lpcm')]: AVCodecID.AV_CODEC_ID_PCM_S16LE,\r\n  [mktagle('sowt')]: AVCodecID.AV_CODEC_ID_PCM_S16LE,\r\n  [mktagle('in24')]: AVCodecID.AV_CODEC_ID_PCM_S24LE,\r\n  [mktagle('in32')]: AVCodecID.AV_CODEC_ID_PCM_S32LE,\r\n  [mktagle('sowt')]: AVCodecID.AV_CODEC_ID_PCM_S8,\r\n  [mktagle('raw ')]: AVCodecID.AV_CODEC_ID_PCM_U8,\r\n  [mktagle('NONE')]: AVCodecID.AV_CODEC_ID_PCM_U8\r\n}\r\n\r\nexport const codecMovSubtiteTags:  Record<uint32, AVCodecID> = {\r\n  [mktagle('text')]: AVCodecID.AV_CODEC_ID_MOV_TEXT,\r\n  [mktagle('tx3g')]: AVCodecID.AV_CODEC_ID_MOV_TEXT,\r\n  [mktagle('c608')]: AVCodecID.AV_CODEC_ID_EIA_608\r\n}\r\n","/*\r\n * libmedia opus util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVPacketSideDataType } from '../codec'\r\nimport AVStream from '../AVStream'\r\nimport AVCodecParameters from '../struct/avcodecparameters'\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport { avRescaleQ } from '../util/rational'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport const durations = [\r\n  /* Silk NB */\r\n  480, 960, 1920, 2880,\r\n  /* Silk MB */\r\n  480, 960, 1920, 2880,\r\n  /* Silk WB */\r\n  480, 960, 1920, 2880,\r\n  /* Hybrid SWB */\r\n  480, 960,\r\n  /* Hybrid FB */\r\n  480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960\r\n]\r\n\r\n\r\nexport function getBufferSamples(buffer: Uint8Array) {\r\n  let toc = 0, frameDuration = 0, nframes = 0\r\n\r\n  if (buffer.length < 1) {\r\n    return 0\r\n  }\r\n\r\n  toc = buffer[0]\r\n\r\n  frameDuration = durations[toc >> 3]\r\n\r\n  switch (toc & 3) {\r\n    case 0:\r\n      nframes = 1\r\n      break\r\n    case 1:\r\n      nframes = 2\r\n      break\r\n    case 2:\r\n      nframes = 2\r\n      break\r\n    case 3:\r\n      if (buffer.length < 2) {\r\n        return 0\r\n      }\r\n      nframes = buffer[1] & 63\r\n      break\r\n  }\r\n  return nframes * frameDuration\r\n}\r\n\r\n/**\r\n * opus extradata\r\n * \r\n * - 8 bytes Magic Signature: OpusHead\r\n * - 1 bytes unsigned, 对应值 0x01 version\r\n * - 1 bytes unsigned, channels 它可能和编码声道数不一致， 它可能被修改成 packet-by-packet, 对应值 0x01\r\n * - 2 bytes unsigned, preSkip 这是要从开始播放时的解码器输出， 从页面的颗粒位置减去以计算其 PCM 样本位置。\r\n * - 4 bytes unsigned, sampleRate 原始输入采样率\r\n * - 2 bytes signed, outputGain 这是解码时要应用的增益， 20 * log10 缩放解码器输出以实现所需的播放音量\r\n * - 1 bytes unsigned, channelMappingFamily 指示输出渠道的顺序和语音含义。该八位位组的每个当前指定的值表示一个映射系列，它定义了一组允许的通道数，以及每个允许的通道数的通道名称的有序集合\r\n * - channelMappingTable 可选， 当 Channel Mapping Family 为 0 时被省略。\r\n *  - 1 bytes, streamCount, unsigned ogg packet 里面编码了多少路 stream\r\n *  - 1 bytes, coupledStreamCount, unsigned 标识有多少路流是双声声道，必须小于 streamCount\r\n *  - C bytes, C 为总输出声道数 coupledStreamCount + streamCount\r\n * \r\n */\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 19) {\r\n    const reader = new BufferReader(extradata, false)\r\n    reader.skip(9)\r\n    stream.codecpar.chLayout.nbChannels = reader.readUint8()\r\n    stream.codecpar.initialPadding = reader.readUint16()\r\n    stream.codecpar.sampleRate = reader.readUint32()\r\n\r\n    stream.codecpar.seekPreroll = Number(avRescaleQ(\r\n      80n,\r\n      {\r\n        den: 1000,\r\n        num: 1\r\n      },\r\n      {\r\n        den: 48000,\r\n        num: 1\r\n      }\r\n    ))\r\n  }\r\n}\r\n\r\nexport function avCodecParameters2Extradata(codecpar: AVCodecParameters) {\r\n  const extradata = new Uint8Array(19)\r\n\r\n  const writer = new BufferWriter(extradata, false)\r\n\r\n  writer.writeString('OpusHead')\r\n  writer.writeUint8(0x01)\r\n  writer.writeUint8(codecpar.chLayout.nbChannels)\r\n  writer.writeUint16(codecpar.initialPadding)\r\n  writer.writeUint32(codecpar.sampleRate)\r\n\r\n  return extradata\r\n}\r\n"],"names":[],"sourceRoot":""}