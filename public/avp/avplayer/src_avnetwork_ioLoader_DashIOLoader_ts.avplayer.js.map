{"version":3,"file":"src_avnetwork_ioLoader_DashIOLoader_ts.avplayer.js","mappings":"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","sources":["webpack://AVPlayer/./src/avnetwork/ioLoader/DashIOLoader.ts","webpack://AVPlayer/./src/avprotocol/dash/parser.ts","webpack://AVPlayer/./src/common/util/xml2Json.ts"],"sourcesContent":["/*\r\n * libmedia dash loader\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Sleep from 'common/timer/Sleep'\r\nimport IOLoader, { IOLoaderAudioStreamInfo, IOLoaderStatus,\r\n  IOLoaderSubtitleStreamInfo, IOLoaderVideoStreamInfo\r\n} from './IOLoader'\r\nimport * as object from 'common/util/object'\r\nimport { IOError } from 'common/io/error'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport * as logger from 'common/util/logger'\r\n\r\nimport dashParser from 'avprotocol/dash/parser'\r\nimport FetchIOLoader, { FetchInfo } from './FetchIOLoader'\r\nimport { MPDMediaList, Segment } from 'avprotocol/dash/type'\r\nimport getTimestamp from 'common/function/getTimestamp'\r\nimport * as errorType from 'avutil/error'\r\nimport { Data } from 'common/types/type'\r\nimport { AVMediaType } from 'avutil/codec'\r\n\r\nconst FETCHED_HISTORY_LIST_MAX = 100\r\n\r\ninterface Resource {\r\n  type: AVMediaType\r\n  fetchedMap: Map<string, boolean>\r\n  fetchedHistoryListMax: number\r\n  fetchedHistoryList: string[]\r\n  loader: FetchIOLoader\r\n  segmentIndex: number\r\n  currentUri: string\r\n  selectedIndex: number\r\n  segments: { url: string, pending?: boolean, duration?: number}[]\r\n  initSegmentPadding: string\r\n  initedSegment: string\r\n  sleep: Sleep\r\n\r\n  lastPendingSegmentFetchTs: number\r\n  lastPendingSegmentDuration: number\r\n}\r\n\r\nexport default class DashIOLoader extends IOLoader {\r\n\r\n  private info: FetchInfo\r\n\r\n  private mediaPlayList: MPDMediaList\r\n\r\n  private fetchMediaPlayListPromise: Promise<void>\r\n\r\n  private minBuffer: number\r\n\r\n  private audioResource: Resource\r\n  private videoResource: Resource\r\n  private subtitleResource: Resource\r\n\r\n  private aborted: boolean\r\n  private signal: AbortController\r\n\r\n  private createResource(type: AVMediaType): Resource {\r\n    return {\r\n      type,\r\n      fetchedMap: new Map(),\r\n      fetchedHistoryListMax: FETCHED_HISTORY_LIST_MAX,\r\n      fetchedHistoryList: [],\r\n      loader: null,\r\n      segmentIndex: 0,\r\n      currentUri: '',\r\n      selectedIndex: 0,\r\n      segments: [],\r\n      initSegmentPadding: '',\r\n      initedSegment: '',\r\n      sleep: null,\r\n\r\n      lastPendingSegmentFetchTs: 0,\r\n      lastPendingSegmentDuration: 0\r\n    }\r\n  }\r\n\r\n  private addHistory(resource: Resource, segments: Segment[], index: number) {\r\n    resource.fetchedMap.clear()\r\n    resource.fetchedHistoryList.length = 0\r\n    for (let i = 0; i < index; i++) {\r\n      resource.fetchedMap.set(segments[i].url, true)\r\n      resource.fetchedHistoryList.push(segments[i].url)\r\n    }\r\n    while (resource.fetchedHistoryList.length >= resource.fetchedHistoryListMax) {\r\n      resource.fetchedMap.delete(resource.fetchedHistoryList.shift())\r\n    }\r\n  }\r\n\r\n  private async fetchMediaPlayList(resolve?: () => void) {\r\n    if (!resolve) {\r\n      if (this.fetchMediaPlayListPromise) {\r\n        return\r\n      }\r\n      this.fetchMediaPlayListPromise = new Promise((r) => {\r\n        resolve = r\r\n      })\r\n    }\r\n\r\n    const params: Data = {\r\n      method: 'GET',\r\n      headers: {},\r\n      mode: 'cors',\r\n      cache: 'default',\r\n      referrerPolicy: 'no-referrer-when-downgrade'\r\n    }\r\n    if (this.info.httpOptions?.headers) {\r\n      object.each(this.info.httpOptions.headers, (value, key) => {\r\n        params.headers[key] = value\r\n      })\r\n    }\r\n\r\n    if (this.info.httpOptions?.credentials) {\r\n      params.credentials = this.info.httpOptions.credentials\r\n    }\r\n\r\n    if (this.info.httpOptions?.referrerPolicy) {\r\n      params.referrerPolicy = this.info.httpOptions.referrerPolicy\r\n    }\r\n\r\n    try {\r\n      if (typeof AbortController === 'function') {\r\n        this.signal = new AbortController()\r\n      }\r\n      const res = await fetch(this.info.url, {\r\n        ...params,\r\n        signal: this.signal?.signal\r\n      })\r\n      this.signal = null\r\n      const text = await res.text()\r\n      this.mediaPlayList = dashParser(text, this.info.url)\r\n      this.minBuffer = this.mediaPlayList.minBufferTime\r\n\r\n      if (this.mediaPlayList.type === 'vod') {\r\n        this.options.isLive = false\r\n      }\r\n      else {\r\n        this.options.isLive = true\r\n      }\r\n\r\n      const addIgnoreSegment = (resource: Resource, segments: Segment[], minBuffer: number) => {\r\n        let index = 0\r\n        let cache = 0\r\n        for (let i = segments.length - 2; i >= 0; i--) {\r\n          if (segments[i].pending !== true) {\r\n            cache += segments[i].segmentDuration\r\n            if (cache >= minBuffer) {\r\n              index = i\r\n              break\r\n            }\r\n          }\r\n        }\r\n        resource.lastPendingSegmentFetchTs = this.mediaPlayList.maxSegmentDuration\r\n        resource.lastPendingSegmentDuration = this.mediaPlayList.maxSegmentDuration\r\n        resource.fetchedHistoryListMax = Math.max(resource.fetchedHistoryListMax, segments.length + 1)\r\n        this.addHistory(resource, segments, index)\r\n      }\r\n\r\n      if (this.mediaPlayList.mediaList.audio.length) {\r\n        const media = this.mediaPlayList.mediaList.audio[this.audioResource.selectedIndex]\r\n        if (media.file) {\r\n          this.audioResource.segments = [{\r\n            url: media.file\r\n          }]\r\n        }\r\n        else {\r\n          if (this.options.isLive && this.audioResource.initedSegment === media.initSegment) {\r\n            this.audioResource.segments = media.mediaSegments.map((s) => {\r\n              return {\r\n                url: s.url,\r\n                pending: s.pending,\r\n                duration: s.segmentDuration\r\n              }\r\n            })\r\n            this.audioResource.lastPendingSegmentFetchTs = this.mediaPlayList.timestamp\r\n            this.audioResource.lastPendingSegmentDuration = this.mediaPlayList.maxSegmentDuration\r\n          }\r\n          else {\r\n            if (this.options.isLive) {\r\n              addIgnoreSegment(this.audioResource, media.mediaSegments, this.minBuffer)\r\n            }\r\n            this.audioResource.segments = [{url: media.initSegment}].concat(media.mediaSegments.map((s) => {\r\n              return {\r\n                url: s.url,\r\n                pending: s.pending,\r\n                duration: s.segmentDuration\r\n              }\r\n            }))\r\n            this.audioResource.initedSegment = media.initSegment\r\n          }\r\n        }\r\n      }\r\n      if (this.mediaPlayList.mediaList.video.length) {\r\n        const media = this.mediaPlayList.mediaList.video[this.videoResource.selectedIndex]\r\n        if (media.file) {\r\n          this.videoResource.segments = [{\r\n            url: media.file\r\n          }]\r\n        }\r\n        else {\r\n          if (this.options.isLive && this.videoResource.initedSegment === media.initSegment) {\r\n            this.videoResource.segments = media.mediaSegments.map((s) => {\r\n              return {\r\n                url: s.url,\r\n                pending: s.pending,\r\n                duration: s.segmentDuration\r\n              }\r\n            })\r\n            this.videoResource.lastPendingSegmentFetchTs = this.mediaPlayList.maxSegmentDuration\r\n            this.videoResource.lastPendingSegmentDuration = this.mediaPlayList.maxSegmentDuration\r\n          }\r\n          else {\r\n            if (this.options.isLive) {\r\n              addIgnoreSegment(this.videoResource, media.mediaSegments, this.minBuffer)\r\n            }\r\n            this.videoResource.segments = [{url: media.initSegment}].concat(media.mediaSegments.map((s) => {\r\n              return {\r\n                url: s.url,\r\n                pending: s.pending,\r\n                duration: s.segmentDuration\r\n              }\r\n            }))\r\n            this.videoResource.initedSegment = media.initSegment\r\n          }\r\n        }\r\n      }\r\n      if (this.mediaPlayList.mediaList.subtitle.length) {\r\n        const media = this.mediaPlayList.mediaList.subtitle[this.subtitleResource.selectedIndex]\r\n        if (media.file) {\r\n          this.subtitleResource.segments = [{\r\n            url: media.file\r\n          }]\r\n        }\r\n        else {\r\n          if (this.options.isLive && this.subtitleResource.initedSegment === media.initSegment) {\r\n            this.subtitleResource.segments = media.mediaSegments.map((s) => {\r\n              return {\r\n                url: s.url,\r\n                pending: s.pending,\r\n                duration: s.segmentDuration\r\n              }\r\n            })\r\n            this.subtitleResource.lastPendingSegmentFetchTs = this.mediaPlayList.maxSegmentDuration\r\n            this.subtitleResource.lastPendingSegmentDuration = this.mediaPlayList.maxSegmentDuration\r\n          }\r\n          else {\r\n            if (this.options.isLive) {\r\n              addIgnoreSegment(this.subtitleResource, media.mediaSegments, this.minBuffer)\r\n            }\r\n            this.subtitleResource.segments = [{url: media.initSegment}].concat(media.mediaSegments.map((s) => {\r\n              return {\r\n                url: s.url,\r\n                pending: s.pending,\r\n                duration: s.segmentDuration\r\n              }\r\n            }))\r\n            this.subtitleResource.initedSegment = media.initSegment\r\n          }\r\n        }\r\n      }\r\n\r\n      resolve()\r\n      this.fetchMediaPlayListPromise = null\r\n      this.status = IOLoaderStatus.BUFFERING\r\n      this.retryCount = 0\r\n\r\n      return this.mediaPlayList\r\n    }\r\n    catch (error) {\r\n      if (this.aborted) {\r\n        this.status = IOLoaderStatus.ERROR\r\n        resolve()\r\n        return\r\n      }\r\n      if (this.retryCount < this.options.retryCount) {\r\n        this.retryCount++\r\n\r\n        logger.error(`failed fetch mpd file ${error}, retry(${this.retryCount}/3)`)\r\n\r\n        await new Sleep(this.status === IOLoaderStatus.BUFFERING ? this.options.retryInterval : 5)\r\n        return this.fetchMediaPlayList(resolve)\r\n      }\r\n      else {\r\n        this.status = IOLoaderStatus.ERROR\r\n        resolve()\r\n        logger.fatal(`DashLoader: exception, fetch slice error, error: ${error.message}`)\r\n      }\r\n    }\r\n  }\r\n\r\n  public async open(info: FetchInfo) {\r\n\r\n    if (this.status === IOLoaderStatus.BUFFERING) {\r\n      return 0\r\n    }\r\n\r\n    if (this.status !== IOLoaderStatus.IDLE) {\r\n      return errorType.INVALID_OPERATE\r\n    }\r\n\r\n    this.info = info\r\n\r\n    this.videoResource = this.createResource(AVMediaType.AVMEDIA_TYPE_VIDEO)\r\n    this.audioResource = this.createResource(AVMediaType.AVMEDIA_TYPE_AUDIO)\r\n    this.subtitleResource = this.createResource(AVMediaType.AVMEDIA_TYPE_SUBTITLE)\r\n\r\n    this.status = IOLoaderStatus.CONNECTING\r\n    this.retryCount = 0\r\n    this.aborted = false\r\n\r\n    await this.fetchMediaPlayList()\r\n\r\n    return 0\r\n  }\r\n\r\n  private async readResource(buffer: Uint8ArrayInterface, resource: Resource) {\r\n    let ret = 0\r\n\r\n    if (resource.loader) {\r\n      ret = await resource.loader.read(buffer)\r\n      if (ret !== IOError.END) {\r\n        return ret\r\n      }\r\n      else {\r\n        if (this.options.isLive) {\r\n          resource.fetchedMap.set(resource.currentUri, true)\r\n          if (resource.fetchedHistoryList.length === resource.fetchedHistoryListMax) {\r\n            resource.fetchedMap.delete(resource.fetchedHistoryList.shift())\r\n          }\r\n          resource.fetchedHistoryList.push(resource.currentUri)\r\n        }\r\n        else {\r\n          resource.segmentIndex++\r\n          if (resource.segmentIndex >= resource.segments.length) {\r\n            return IOError.END\r\n          }\r\n        }\r\n        resource.loader = null\r\n      }\r\n    }\r\n\r\n    if (this.options.isLive) {\r\n      const segments = resource.segments.filter((s) => {\r\n        return !resource.fetchedMap.get(s.url)\r\n      })\r\n\r\n      if (!segments.length) {\r\n        if (this.mediaPlayList.isEnd) {\r\n          return IOError.END\r\n        }\r\n\r\n        const wait = ((this.mediaPlayList.duration || this.mediaPlayList.minimumUpdatePeriod)\r\n          - (getTimestamp() - this.mediaPlayList.timestamp) / 1000)\r\n        if (wait > 0) {\r\n          resource.sleep = new Sleep(wait)\r\n          await resource.sleep\r\n          resource.sleep = null\r\n          if (this.aborted) {\r\n            return IOError.END\r\n          }\r\n        }\r\n        if (this.fetchMediaPlayListPromise) {\r\n          await this.fetchMediaPlayListPromise\r\n          if (this.status === IOLoaderStatus.ERROR || this.aborted) {\r\n            return IOError.END\r\n          }\r\n        }\r\n        else {\r\n          await this.fetchMediaPlayList()\r\n          if (this.aborted) {\r\n            return IOError.END\r\n          }\r\n        }\r\n        return this.readResource(buffer, resource)\r\n      }\r\n\r\n      resource.currentUri = segments[0].url\r\n      if (this.options.isLive && segments[0].pending) {\r\n        if (resource.lastPendingSegmentFetchTs) {\r\n          const wait = resource.lastPendingSegmentDuration\r\n            - ((getTimestamp() - resource.lastPendingSegmentFetchTs) / 1000)\r\n          if (wait > 0) {\r\n            resource.sleep = new Sleep(wait)\r\n            await resource.sleep\r\n            resource.sleep = null\r\n            if (this.aborted) {\r\n              return IOError.END\r\n            }\r\n          }\r\n        }\r\n        resource.lastPendingSegmentFetchTs = getTimestamp()\r\n        resource.lastPendingSegmentDuration = segments[0].duration || this.mediaPlayList.maxSegmentDuration\r\n      }\r\n\r\n      resource.loader = new FetchIOLoader(object.extend({}, this.options, { disableSegment: true, loop: false }))\r\n\r\n      await resource.loader.open(\r\n        object.extend({}, this.info, {\r\n          url: resource.currentUri\r\n        }),\r\n        {\r\n          from: 0,\r\n          to: -1\r\n        }\r\n      )\r\n      return resource.loader.read(buffer)\r\n    }\r\n    else {\r\n      resource.loader = new FetchIOLoader(object.extend({}, this.options, { disableSegment: true, loop: false }))\r\n      if (resource.initSegmentPadding) {\r\n        await resource.loader.open(\r\n          object.extend({}, this.info, {\r\n            url: resource.initSegmentPadding\r\n          }),\r\n          {\r\n            from: 0,\r\n            to: -1\r\n          }\r\n        )\r\n        resource.initSegmentPadding = null\r\n        resource.segmentIndex--\r\n      }\r\n      else {\r\n        await resource.loader.open(\r\n          object.extend({}, this.info, {\r\n            url: resource.segments[resource.segmentIndex].url\r\n          }),\r\n          {\r\n            from: 0,\r\n            to: -1\r\n          }\r\n        )\r\n      }\r\n      return resource.loader.read(buffer)\r\n    }\r\n  }\r\n\r\n  public async read(buffer: Uint8ArrayInterface, options: {\r\n    mediaType: AVMediaType\r\n  }): Promise<number> {\r\n    if (options.mediaType === AVMediaType.AVMEDIA_TYPE_AUDIO) {\r\n      return this.readResource(buffer, this.audioResource)\r\n    }\r\n    else if (options.mediaType === AVMediaType.AVMEDIA_TYPE_VIDEO) {\r\n      return this.readResource(buffer, this.videoResource)\r\n    }\r\n    else if (options.mediaType === AVMediaType.AVMEDIA_TYPE_SUBTITLE) {\r\n      return this.readResource(buffer, this.subtitleResource)\r\n    }\r\n    return errorType.INVALID_ARGUMENT\r\n  }\r\n\r\n  private async seekResource(timestamp: int64, resource: Resource) {\r\n\r\n    let currentSegment = ''\r\n\r\n    if (resource.loader) {\r\n      currentSegment = resource.loader.getUrl()\r\n      await resource.loader.abort()\r\n      resource.loader = null\r\n    }\r\n\r\n    let seekTime = static_cast<int32>(timestamp)\r\n\r\n    if (resource.segments) {\r\n      let index = 0\r\n      const mediaList = resource.type === AVMediaType.AVMEDIA_TYPE_AUDIO\r\n        ? this.mediaPlayList.mediaList.audio\r\n        : (resource.type === AVMediaType.AVMEDIA_TYPE_VIDEO\r\n          ? this.mediaPlayList.mediaList.video\r\n          : this.mediaPlayList.mediaList.subtitle\r\n        )\r\n      const segmentList = mediaList[resource.selectedIndex].mediaSegments\r\n      if (segmentList?.length) {\r\n        for (let i = 0; i < segmentList.length; i++) {\r\n          if (seekTime >= segmentList[i].start * 1000 && seekTime < segmentList[i].end * 1000) {\r\n            index = i\r\n            break\r\n          }\r\n        }\r\n      }\r\n      resource.segmentIndex = index + (mediaList[resource.selectedIndex].initSegment ? 1 : 0)\r\n      let initSegment = ''\r\n      if (resource.type === AVMediaType.AVMEDIA_TYPE_VIDEO) {\r\n        initSegment = this.mediaPlayList.mediaList.video[resource.selectedIndex].initSegment\r\n      }\r\n      else if (resource.type === AVMediaType.AVMEDIA_TYPE_AUDIO) {\r\n        initSegment = this.mediaPlayList.mediaList.audio[resource.selectedIndex].initSegment\r\n      }\r\n      else if (resource.type === AVMediaType.AVMEDIA_TYPE_SUBTITLE) {\r\n        initSegment = this.mediaPlayList.mediaList.subtitle[resource.selectedIndex].initSegment\r\n      }\r\n      if (initSegment && initSegment === currentSegment) {\r\n        resource.initSegmentPadding = initSegment\r\n      }\r\n    }\r\n  }\r\n\r\n  public async seek(timestamp: int64, options: {\r\n    mediaType: AVMediaType\r\n  }) {\r\n\r\n    if (options.mediaType === AVMediaType.AVMEDIA_TYPE_AUDIO && this.audioResource.loader) {\r\n      await this.seekResource(timestamp, this.audioResource)\r\n    }\r\n    if (options.mediaType === AVMediaType.AVMEDIA_TYPE_VIDEO && this.videoResource.loader) {\r\n      await this.seekResource(timestamp, this.videoResource)\r\n    }\r\n    if (options.mediaType === AVMediaType.AVMEDIA_TYPE_SUBTITLE && this.subtitleResource.loader) {\r\n      await this.seekResource(timestamp, this.subtitleResource)\r\n    }\r\n\r\n    if (this.status === IOLoaderStatus.COMPLETE) {\r\n      this.status = IOLoaderStatus.BUFFERING\r\n    }\r\n    this.aborted = false\r\n    return 0\r\n  }\r\n\r\n  public async size() {\r\n    return 0n\r\n  }\r\n\r\n  private abortSleep() {\r\n    this.aborted = true\r\n    if (this.videoResource.loader) {\r\n      this.videoResource.loader.abortSleep()\r\n    }\r\n    if (this.videoResource.sleep) {\r\n      this.videoResource.sleep.stop()\r\n      this.videoResource.sleep = null\r\n    }\r\n    if (this.audioResource.loader) {\r\n      this.audioResource.loader.abortSleep()\r\n    }\r\n    if (this.audioResource.sleep) {\r\n      this.audioResource.sleep.stop()\r\n      this.audioResource.sleep = null\r\n    }\r\n    if (this.subtitleResource.loader) {\r\n      this.subtitleResource.loader.abortSleep()\r\n    }\r\n    if (this.subtitleResource.sleep) {\r\n      this.subtitleResource.sleep.stop()\r\n      this.subtitleResource.sleep = null\r\n    }\r\n  }\r\n\r\n  public async abort() {\r\n    this.abortSleep()\r\n    if (this.signal) {\r\n      this.signal.abort()\r\n    }\r\n    if (this.videoResource.loader) {\r\n      await this.videoResource.loader.abort()\r\n      this.videoResource.loader = null\r\n    }\r\n    if (this.audioResource.loader) {\r\n      await this.audioResource.loader.abort()\r\n      this.audioResource.loader = null\r\n    }\r\n    if (this.subtitleResource.loader) {\r\n      await this.subtitleResource.loader.abort()\r\n      this.subtitleResource.loader = null\r\n    }\r\n  }\r\n\r\n  public async stop() {\r\n    await this.abort()\r\n    this.status = IOLoaderStatus.IDLE\r\n  }\r\n\r\n  public getDuration() {\r\n    return this.mediaPlayList.duration\r\n  }\r\n\r\n  public hasVideo() {\r\n    return this.mediaPlayList?.mediaList.video.length > 0\r\n  }\r\n\r\n  public hasAudio() {\r\n    return this.mediaPlayList?.mediaList.audio.length > 0\r\n  }\r\n\r\n  public hasSubtitle() {\r\n    return this.mediaPlayList?.mediaList.subtitle.length > 0\r\n  }\r\n\r\n  public getVideoList(): IOLoaderVideoStreamInfo {\r\n    if (this.hasVideo()) {\r\n      return {\r\n        list: this.mediaPlayList.mediaList.video.map((media) => {\r\n          return {\r\n            width: media.width,\r\n            height: media.height,\r\n            frameRate: media.frameRate,\r\n            codec: media.codecs,\r\n            bandwidth: media.bandwidth\r\n          }\r\n        }),\r\n        selectedIndex: this.videoResource.selectedIndex\r\n      }\r\n    }\r\n    return {\r\n      list: [],\r\n      selectedIndex: 0\r\n    }\r\n  }\r\n\r\n  public getAudioList(): IOLoaderAudioStreamInfo {\r\n    if (this.hasAudio()) {\r\n      return {\r\n        list: this.mediaPlayList.mediaList.audio.map((media) => {\r\n          return {\r\n            lang: media.lang,\r\n            codec: media.codecs,\r\n            bandwidth: media.bandwidth\r\n          }\r\n        }),\r\n        selectedIndex: this.audioResource.selectedIndex\r\n      }\r\n    }\r\n    return {\r\n      list: [],\r\n      selectedIndex: 0\r\n    }\r\n  }\r\n\r\n  public getSubtitleList(): IOLoaderSubtitleStreamInfo {\r\n    if (this.hasSubtitle()) {\r\n      return {\r\n        list: this.mediaPlayList.mediaList.subtitle.map((media) => {\r\n          return {\r\n            lang: media.lang,\r\n            codec: media.codecs\r\n          }\r\n        }),\r\n        selectedIndex: this.subtitleResource.selectedIndex\r\n      }\r\n    }\r\n    return {\r\n      list: [],\r\n      selectedIndex: 0\r\n    }\r\n  }\r\n\r\n  public selectVideo(index: number) {\r\n    if (index !== this.videoResource.selectedIndex\r\n      && this.hasVideo()\r\n      && index >= 0\r\n      && index < this.mediaPlayList.mediaList.video.length\r\n    ) {\r\n      this.videoResource.selectedIndex = index\r\n      const media = this.mediaPlayList.mediaList.video[this.videoResource.selectedIndex]\r\n      if (media.file) {\r\n        this.videoResource.segments = [{\r\n          url: media.file\r\n        }]\r\n      }\r\n      else {\r\n        if (this.options.isLive) {\r\n          let segmentIndex = this.videoResource.segmentIndex\r\n          this.videoResource.segments.find((s, i) => {\r\n            if (s.url === this.videoResource.currentUri) {\r\n              segmentIndex = i\r\n              return true\r\n            }\r\n          })\r\n          this.addHistory(this.videoResource, media.mediaSegments, segmentIndex + 1)\r\n        }\r\n        this.videoResource.segments = [{url: media.initSegment}].concat(media.mediaSegments.map((s) => {\r\n          return {\r\n            url: s.url,\r\n            pending: s.pending,\r\n            duration: s.segmentDuration\r\n          }\r\n        }))\r\n        this.videoResource.initSegmentPadding = media.initSegment\r\n      }\r\n    }\r\n  }\r\n\r\n  public selectAudio(index: number) {\r\n    if (index !== this.audioResource.selectedIndex\r\n      && this.hasAudio()\r\n      && index >= 0\r\n      && index < this.mediaPlayList.mediaList.audio.length\r\n    ) {\r\n      this.audioResource.selectedIndex = index\r\n      const media = this.mediaPlayList.mediaList.audio[this.audioResource.selectedIndex]\r\n      if (media.file) {\r\n        this.audioResource.segments = [{\r\n          url: media.file\r\n        }]\r\n      }\r\n      else {\r\n        if (this.options.isLive) {\r\n          let segmentIndex = this.audioResource.segmentIndex\r\n          this.audioResource.segments.find((s, i) => {\r\n            if (s.url === this.audioResource.currentUri) {\r\n              segmentIndex = i\r\n              return true\r\n            }\r\n          })\r\n          this.addHistory(this.audioResource, media.mediaSegments, segmentIndex + 1)\r\n        }\r\n        this.audioResource.segments = [{url: media.initSegment}].concat(media.mediaSegments.map((s) => {\r\n          return {\r\n            url: s.url,\r\n            pending: s.pending,\r\n            duration: s.segmentDuration\r\n          }\r\n        }))\r\n        this.audioResource.initSegmentPadding = media.initSegment\r\n      }\r\n    }\r\n  }\r\n\r\n  public selectSubtitle(index: number) {\r\n    if (index !== this.subtitleResource.selectedIndex\r\n      && this.hasSubtitle()\r\n      && index >= 0\r\n      && index < this.mediaPlayList.mediaList.subtitle.length\r\n    ) {\r\n      this.subtitleResource.selectedIndex = index\r\n      const media = this.mediaPlayList.mediaList.subtitle[this.subtitleResource.selectedIndex]\r\n      if (media.file) {\r\n        this.subtitleResource.segments = [{\r\n          url: media.file\r\n        }]\r\n      }\r\n      else {\r\n        if (this.options.isLive) {\r\n          let segmentIndex = this.subtitleResource.segmentIndex\r\n          this.subtitleResource.segments.find((s, i) => {\r\n            if (s.url === this.subtitleResource.currentUri) {\r\n              segmentIndex = i\r\n              return true\r\n            }\r\n          })\r\n          this.addHistory(this.subtitleResource, media.mediaSegments, segmentIndex + 1)\r\n        }\r\n        this.subtitleResource.segments = [{url: media.initSegment}].concat(media.mediaSegments.map((s) => {\r\n          return {\r\n            url: s.url,\r\n            pending: s.pending,\r\n            duration: s.segmentDuration\r\n          }\r\n        }))\r\n        this.subtitleResource.initSegmentPadding = media.initSegment\r\n      }\r\n    }\r\n  }\r\n\r\n  public getCurrentProtection(mediaType: AVMediaType) {\r\n    if (mediaType === AVMediaType.AVMEDIA_TYPE_AUDIO) {\r\n      const media = this.mediaPlayList.mediaList.audio[this.audioResource.selectedIndex]\r\n      return media.protection\r\n    }\r\n    else if (mediaType === AVMediaType.AVMEDIA_TYPE_VIDEO) {\r\n      const media = this.mediaPlayList.mediaList.video[this.videoResource.selectedIndex]\r\n      return media.protection\r\n    }\r\n  }\r\n\r\n  public getMinBuffer() {\r\n    return this.minBuffer\r\n  }\r\n}\r\n","/**\r\n * from https://github.com/bytedance/xgplayer/blob/main/packages/xgplayer-dash/src/m4s/mpd.js\r\n * MIT license \r\n */\r\n\r\nimport xml2Json from 'common/util/xml2Json'\r\nimport { MPD, MPDMediaList, Period, Protection, SegmentTemplate } from './type'\r\nimport { Data } from 'common/types/type'\r\nimport * as is from 'common/util/is'\r\nimport * as object from 'common/util/object'\r\nimport toString from 'common/function/toString'\r\nimport getTimestamp from 'common/function/getTimestamp'\r\n\r\nfunction parseMPD(xmlString: string) {\r\n  if (!xmlString) {\r\n    return null\r\n  }\r\n  return xml2Json(xmlString, {\r\n    aloneValueName: 'value'\r\n  }) as {\r\n    MPD: MPD\r\n  }\r\n}\r\n\r\nfunction durationConvert(value: string) {\r\n  const regex = /^PT?(?:(\\d+)Y)?(?:(\\d+)D)?(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+(?:\\.\\d+)?)S)?$/\r\n  const match = value.match(regex)\r\n  if (!match) {\r\n    throw new Error('Invalid DASH PT duration: ' + value)\r\n  }\r\n  const [, year, day, hours, minutes, seconds] = match\r\n  return (\r\n    (parseInt(year || '0') * 3600 * 24 * 365) +\r\n    (parseInt(day || '0') * 3600 * 24) +\r\n    (parseInt(hours || '0') * 3600) +\r\n    (parseInt(minutes || '0') * 60) +\r\n    parseFloat(seconds || '0')\r\n  )\r\n}\r\n\r\nfunction preFixInteger(num: number, n: number) {\r\n  const str = toString(num)\r\n  return str.length >= n ? str : '0'.repeat(n - str.length) + str\r\n}\r\n\r\nfunction parseRational(value: string) {\r\n  if (!value) {\r\n    return 0\r\n  }\r\n  if (value.indexOf('/') > -1) {\r\n    const rational = value.split('/')\r\n    return parseFloat(rational[0]) / parseFloat(rational[1])\r\n  }\r\n  return parseFloat(value)\r\n}\r\n\r\nfunction uuid2Uint8Array(s: string) {\r\n  s = s.replaceAll('-', '')\r\n  const r: number[] = []\r\n  for (let i = 0; i < s.length; i += 2) {\r\n    r.push(+`0x${s.substring(i, i + 2)}`)\r\n  }\r\n  return new Uint8Array(r)\r\n}\r\n\r\nfunction parseProtection(protection: Data[]) {\r\n  let result: Protection = {}\r\n  protection.forEach((item) => {\r\n    const obj: Data = {}\r\n    object.each(item, (value, key) => {\r\n      obj[key.toLocaleLowerCase()] = value\r\n    })\r\n    if (obj['cenc:default_kid']) {\r\n      result.kid = uuid2Uint8Array(obj['cenc:default_kid'])\r\n      result.scheme = obj.value\r\n    }\r\n    if (obj['schemeiduri']) {\r\n      const url: string[] = obj['schemeiduri'].split(':')\r\n      if (url.length === 3 && url[0] === 'urn' && url[1] === 'uuid') {\r\n        result.systemId = uuid2Uint8Array(url[2])\r\n      }\r\n    }\r\n    if (obj['clearkey:laurl']) {\r\n      result.url = obj['clearkey:laurl'].value\r\n    }\r\n    if (obj['dashif:laurl']) {\r\n      result.url = obj['dashif:laurl'].value\r\n    }\r\n  })\r\n  return result\r\n}\r\n\r\nfunction joinPath(base: string, path: string) {\r\n  if (/^https?:\\/\\//.test(path)) {\r\n    return path\r\n  }\r\n  return base + path\r\n}\r\n\r\nfunction parsePeriod(result: MPD, period: Period, url: string) {\r\n  const list: MPDMediaList = {\r\n    mediaList: {\r\n      audio: [],\r\n      video: [],\r\n      subtitle: []\r\n    },\r\n    type: 'live',\r\n    isEnd: false,\r\n    duration: 0,\r\n    minBufferTime: 0,\r\n    maxSegmentDuration: 0,\r\n    minimumUpdatePeriod: 0,\r\n    timeShiftBufferDepth: 0,\r\n    timestamp: getTimestamp()\r\n  }\r\n\r\n  const repID = []\r\n\r\n  if (result.type === 'static') {\r\n    list.type = 'vod'\r\n    list.isEnd = true\r\n  }\r\n\r\n  if (result.minBufferTime) {\r\n    list.minBufferTime = durationConvert(result.minBufferTime)\r\n  }\r\n  if (result.maxSegmentDuration) {\r\n    list.maxSegmentDuration = durationConvert(result.maxSegmentDuration)\r\n  }\r\n  if (result.minimumUpdatePeriod) {\r\n    list.minimumUpdatePeriod = Math.min(durationConvert(result.minimumUpdatePeriod), Math.max(list.maxSegmentDuration, 2) * 30)\r\n  }\r\n  if (result.availabilityStartTime) {\r\n    list.availabilityStartTime = new Date(result.availabilityStartTime).getTime()\r\n  }\r\n  if (result.timeShiftBufferDepth) {\r\n    list.timeShiftBufferDepth = durationConvert(result.timeShiftBufferDepth)\r\n  }\r\n  if (result.mediaPresentationDuration) {\r\n    list.duration = durationConvert(result.mediaPresentationDuration)\r\n  }\r\n  let MpdBaseURL = ''\r\n  if (result.BaseURL) {\r\n    MpdBaseURL = is.array(result.BaseURL) ? result.BaseURL[0].value : (is.string(result.BaseURL) ? result.BaseURL : result.BaseURL.value)\r\n  }\r\n  if (period?.duration) {\r\n    list.duration = durationConvert(period.duration)\r\n  }\r\n  if (period.BaseURL) {\r\n    MpdBaseURL = joinPath(MpdBaseURL, is.string(period.BaseURL) ? period.BaseURL : period.BaseURL.value)\r\n  }\r\n\r\n  const AdaptationSet = is.array(period.AdaptationSet) ? period.AdaptationSet : [period.AdaptationSet]\r\n\r\n  AdaptationSet.forEach((asItem, asIndex) => {\r\n    let mimeType = ''\r\n    let contentType = ''\r\n    let codecs = ''\r\n    let width = 0\r\n    let height = 0\r\n    let maxWidth = 0\r\n    let maxHeight = 0\r\n    let frameRate = 0\r\n    let sar = '1:1'\r\n    let startWithSAP = '1'\r\n    let bandwidth = 0\r\n    let adaptationSetBaseUrl = MpdBaseURL\r\n    let lang = 'und'\r\n    let protection: Protection\r\n    if (asItem.BaseURL) {\r\n      adaptationSetBaseUrl = joinPath(adaptationSetBaseUrl, is.string(asItem.BaseURL) ? asItem.BaseURL : asItem.BaseURL.value)\r\n    }\r\n    if (asItem.lang) {\r\n      lang = asItem.lang\r\n    }\r\n\r\n    if (asItem.mimeType || asItem.contentType) {\r\n      mimeType = asItem.mimeType\r\n      contentType = asItem.contentType\r\n      if (mimeType === 'video/mp4' || contentType === 'video') {\r\n        codecs = asItem.codecs\r\n        width = parseFloat(asItem.width)\r\n        height = parseFloat(asItem.height)\r\n        if (asItem.maxWidth) {\r\n          maxWidth = parseFloat(asItem.maxWidth)\r\n        }\r\n        if (asItem.maxHeight) {\r\n          maxHeight = parseFloat(asItem.maxHeight)\r\n        }\r\n        if (asItem.frameRate) {\r\n          frameRate = parseRational(asItem.frameRate)\r\n        }\r\n        sar = asItem.sar\r\n        startWithSAP = asItem.startWithSAP\r\n        bandwidth = parseFloat(asItem.bandwidth)\r\n      }\r\n      else if (mimeType === 'audio/mp4' || contentType === 'audio') {\r\n        codecs = asItem.codecs\r\n        startWithSAP = asItem.startWithSAP\r\n        bandwidth = parseFloat(asItem.bandwidth)\r\n      }\r\n    }\r\n    else {\r\n      if (asItem.maxWidth) {\r\n        maxWidth = parseFloat(asItem.maxWidth)\r\n      }\r\n      if (asItem.maxHeight) {\r\n        maxHeight = parseFloat(asItem.maxHeight)\r\n      }\r\n      if (asItem.frameRate) {\r\n        frameRate = parseRational(asItem.frameRate)\r\n      }\r\n    }\r\n\r\n    if (asItem.ContentProtection) {\r\n      protection = parseProtection(asItem.ContentProtection)\r\n    }\r\n\r\n    const Representation = is.array(asItem.Representation) ? asItem.Representation : [asItem.Representation]\r\n\r\n    Representation.forEach((rItem, rIndex: number) => {\r\n      if (repID.indexOf(rItem.id) > -1) {\r\n        rItem.id = (parseInt(repID[repID.length - 1]) + 1).toString()\r\n      }\r\n      repID.push(rItem.id)\r\n      let initSegment = ''\r\n      const mediaSegments = []\r\n      let timescale = 0\r\n      let duration = list.duration\r\n      let baseURL = joinPath(url.slice(0, url.lastIndexOf('/') + 1), adaptationSetBaseUrl)\r\n      if (rItem.mimeType) {\r\n        mimeType = rItem.mimeType\r\n      }\r\n      if (mimeType === 'video/mp4' || contentType === 'video') {\r\n        if (rItem.codecs) {\r\n          codecs = rItem.codecs\r\n        }\r\n        if (rItem.width) {\r\n          width = parseFloat(rItem.width)\r\n        }\r\n        if (rItem.height) {\r\n          height = parseFloat(rItem.height)\r\n        }\r\n        if (rItem.maxWidth) {\r\n          maxWidth = parseFloat(rItem.maxWidth)\r\n        }\r\n        if (rItem.maxHeight) {\r\n          maxHeight = parseFloat(rItem.maxHeight)\r\n        }\r\n        if (rItem.frameRate) {\r\n          frameRate = parseFloat(rItem.frameRate)\r\n        }\r\n        if (rItem.sar) {\r\n          sar = rItem.sar\r\n        }\r\n        if (rItem.startWithSAP) {\r\n          startWithSAP = rItem.startWithSAP\r\n        }\r\n        if (rItem.bandwidth) {\r\n          bandwidth = parseFloat(rItem.bandwidth)\r\n        }\r\n      }\r\n      else {\r\n        if (rItem.codecs) {\r\n          codecs = rItem.codecs\r\n        }\r\n        if (rItem.startWithSAP) {\r\n          startWithSAP = rItem.startWithSAP\r\n        }\r\n        if (rItem.bandwidth) {\r\n          bandwidth = parseFloat(rItem.bandwidth)\r\n        }\r\n      }\r\n      if (rItem.BaseURL) {\r\n        baseURL = joinPath(baseURL, is.string(rItem.BaseURL) ? rItem.BaseURL : rItem.BaseURL.value)\r\n      }\r\n      if (rItem.ContentProtection) {\r\n        protection = parseProtection(rItem.ContentProtection)\r\n      }\r\n      if (rItem.SegmentBase) {\r\n        if (mimeType === 'video/mp4' || contentType === 'video') {\r\n          list.mediaList.video.push({\r\n            id: rItem.id,\r\n            file: baseURL,\r\n            mimeType,\r\n            codecs,\r\n            width,\r\n            height,\r\n            maxWidth,\r\n            maxHeight,\r\n            frameRate,\r\n            sar,\r\n            startWithSAP: startWithSAP === '1',\r\n            bandwidth,\r\n            timescale,\r\n            duration,\r\n            protection\r\n          })\r\n        }\r\n        else if (mimeType === 'audio/mp4' || contentType === 'audio') {\r\n          list.mediaList.audio.push({\r\n            id: rItem.id,\r\n            file: baseURL,\r\n            mimeType,\r\n            codecs,\r\n            startWithSAP: startWithSAP === '1',\r\n            bandwidth,\r\n            timescale,\r\n            duration,\r\n            protection,\r\n            lang\r\n          })\r\n        }\r\n        else if (mimeType === 'application/mp4' || contentType === 'text') {\r\n          list.mediaList.subtitle.push({\r\n            id: rItem.id,\r\n            file: baseURL,\r\n            mimeType,\r\n            codecs,\r\n            startWithSAP: startWithSAP === '1',\r\n            bandwidth,\r\n            timescale,\r\n            duration,\r\n            protection,\r\n            lang\r\n          })\r\n        }\r\n      }\r\n      else {\r\n        let ST: SegmentTemplate\r\n        if (asItem.SegmentTemplate) {\r\n          ST = is.array(asItem.SegmentTemplate) ? asItem.SegmentTemplate[0] : asItem.SegmentTemplate\r\n        }\r\n        if (rItem.SegmentTemplate) {\r\n          ST = is.array(rItem.SegmentTemplate) ? rItem.SegmentTemplate[0] : rItem.SegmentTemplate\r\n        }\r\n\r\n        if (ST) {\r\n          let start = ST.startNumber ? parseInt(ST.startNumber) : 1\r\n          initSegment = ST.initialization\r\n          timescale = parseFloat(ST.timescale || '1')\r\n\r\n          if (ST.duration && !ST.SegmentTimeline) {\r\n            duration = parseFloat(ST.duration)\r\n            let segmentDuration = duration / timescale\r\n            let end = start + Math.ceil((list.duration || segmentDuration) / segmentDuration) - 1\r\n            let generateIndex = end\r\n            if (list.type === 'live' && (is.number(list.availabilityStartTime) || ST.presentationTimeOffset)) {\r\n              const now = list.timestamp || getTimestamp()\r\n              const startTs = list.availabilityStartTime\r\n              const elapsed = ((now - startTs) / 1000) - (ST.presentationTimeOffset ? parseInt(ST.presentationTimeOffset) : 0)\r\n              const segmentOffset = Math.floor(elapsed / segmentDuration)\r\n              end = start + segmentOffset\r\n              if (list.timeShiftBufferDepth) {\r\n                start = end - Math.ceil(list.timeShiftBufferDepth / segmentDuration) + 1\r\n              }\r\n              generateIndex = end\r\n              if (ST.availabilityTimeComplete === 'false' || list.minimumUpdatePeriod > list.minBufferTime * 2) {\r\n                end += Math.ceil(list.minimumUpdatePeriod / segmentDuration)\r\n              }\r\n            }\r\n            for (let i = start; i <= end; i++) {\r\n              const startTime = segmentDuration * (i - start)\r\n              let endTime = segmentDuration * (i - start + 1)\r\n              if (i === end && list.duration) {\r\n                segmentDuration = list.duration - segmentDuration * (end - start)\r\n                endTime = list.duration\r\n              }\r\n              mediaSegments.push({\r\n                idx: i,\r\n                start: startTime,\r\n                end: endTime,\r\n                url: baseURL + ST.media.replace(/\\$RepresentationID\\$/g, rItem.id).replace(/\\$Number(%(\\d+)d)?\\$/g, (s0, s1, s2) => {\r\n                  if (s2) {\r\n                    return preFixInteger(i, +s2)\r\n                  }\r\n                  return toString(i)\r\n                }),\r\n                segmentDuration,\r\n                pending: i > generateIndex\r\n              })\r\n            }\r\n          }\r\n          else if (ST.SegmentTimeline && ST.SegmentTimeline.S) {\r\n            const S = is.array(ST.SegmentTimeline.S) ? ST.SegmentTimeline.S : [ST.SegmentTimeline.S]\r\n            let startTime = 0\r\n            let index = start\r\n            for (let i = 0; i < S.length; i++) {\r\n              let d = parseFloat(S[i].d)\r\n              if (S[i].t) {\r\n                startTime = parseFloat(S[i].t)\r\n              }\r\n\r\n              let r = 1\r\n              if (S[i].r) {\r\n                r = parseInt(S[i].r)\r\n                if (r === -1 && duration) {\r\n                  r = Math.ceil(duration * timescale / d)\r\n                }\r\n                else {\r\n                  r += 1\r\n                }\r\n              }\r\n              for (let j = 0; j < r; j++) {\r\n                mediaSegments.push({\r\n                  idx: index,\r\n                  start: startTime / timescale,\r\n                  end: (startTime + d) / timescale,\r\n                  url: baseURL + ST.media.replace(/\\$RepresentationID\\$/g, rItem.id)\r\n                    .replace(/\\$Number(%(\\d+)d)?\\$/g, (s0, s1, s2) => {\r\n                      if (s2) {\r\n                        return preFixInteger(index, +s2)\r\n                      }\r\n                      return toString(index)\r\n                    })\r\n                    .replace(/\\$Time\\$/g, toString(startTime)),\r\n                  segmentDuration: d / timescale\r\n                })\r\n                index++\r\n                startTime += d\r\n              }\r\n            }\r\n          }\r\n        }\r\n        else if (rItem.SegmentList) {\r\n          const segmentList = is.array(rItem.SegmentList.SegmentURL) ? rItem.SegmentList.SegmentURL : [rItem.SegmentList.SegmentURL]\r\n          let startTime = 0\r\n          let duration = parseFloat(rItem.SegmentList.duration)\r\n          for (let i = 0; i < segmentList.length; i++) {\r\n            mediaSegments.push({\r\n              idx: i,\r\n              start: startTime / timescale,\r\n              end: (startTime + duration) / timescale,\r\n              url: baseURL + segmentList[i].media,\r\n              segmentDuration: duration / timescale\r\n            })\r\n            startTime += duration\r\n          }\r\n        }\r\n\r\n        if (mimeType === 'video/mp4' || contentType === 'video') {\r\n          list.mediaList.video.push({\r\n            id: rItem.id,\r\n            baseURL,\r\n            initSegment: baseURL + initSegment.replace(/\\$RepresentationID\\$/g, rItem.id).replace(/\\$Bandwidth\\$/g, toString(bandwidth)),\r\n            mediaSegments,\r\n            mimeType,\r\n            codecs,\r\n            width,\r\n            height,\r\n            maxWidth,\r\n            maxHeight,\r\n            frameRate,\r\n            sar,\r\n            startWithSAP: startWithSAP === '1',\r\n            bandwidth,\r\n            timescale,\r\n            duration,\r\n            protection\r\n          })\r\n        }\r\n        else if (mimeType === 'audio/mp4' || contentType === 'audio') {\r\n          list.mediaList.audio.push({\r\n            id: rItem.id,\r\n            baseURL,\r\n            initSegment: baseURL + initSegment.replace(/\\$RepresentationID\\$/g, rItem.id).replace(/\\$Bandwidth\\$/g, toString(bandwidth)),\r\n            mediaSegments,\r\n            mimeType,\r\n            codecs,\r\n            startWithSAP: startWithSAP === '1',\r\n            bandwidth,\r\n            timescale,\r\n            duration,\r\n            protection,\r\n            lang\r\n          })\r\n        }\r\n        else if (mimeType === 'application/mp4' || contentType === 'text') {\r\n          list.mediaList.subtitle.push({\r\n            id: rItem.id,\r\n            baseURL,\r\n            initSegment: baseURL + initSegment.replace(/\\$RepresentationID\\$/g, rItem.id).replace(/\\$Bandwidth\\$/g, toString(bandwidth)),\r\n            mediaSegments,\r\n            mimeType,\r\n            codecs,\r\n            startWithSAP: startWithSAP === '1',\r\n            bandwidth,\r\n            timescale,\r\n            duration,\r\n            protection,\r\n            lang\r\n          })\r\n        }\r\n      }\r\n    })\r\n  });\r\n\r\n  ['video', 'audio'].forEach((mediaType) => {\r\n    list.mediaList[mediaType].sort((a: Data, b: Data) => {\r\n      return a.bandwidth - b.bandwidth\r\n    })\r\n  })\r\n\r\n  return list\r\n}\r\n\r\nexport default function parser(xml: string, url: string) {\r\n  const result = parseMPD(xml).MPD\r\n  if (result.type === 'dynamic') {\r\n    const period = is.array(result.Period) ? result.Period[result.Period.length - 1] : result.Period\r\n    return parsePeriod(result, period, url)\r\n  }\r\n  else {\r\n    const periods = is.array(result.Period) ? result.Period : [result.Period]\r\n    const list = periods.map((period) => {\r\n      return parsePeriod(result, period, url)\r\n    })\r\n    const mediaList: MPDMediaList = list[0]\r\n    for (let i = 1; i < list.length; i++) {\r\n      mediaList.duration += list[i].duration\r\n      list[i].mediaList.video.forEach((video) => {\r\n        const prev = mediaList.mediaList.video.find((p) => {\r\n          return video.initSegment && video.initSegment === p.initSegment || video.id === p.id\r\n        })\r\n        if (prev) {\r\n          if (prev.mediaSegments?.length && video.mediaSegments?.length) {\r\n            video.mediaSegments.forEach((s) => {\r\n              s.start += prev.mediaSegments[prev.mediaSegments.length - 1].end\r\n              s.end += prev.mediaSegments[prev.mediaSegments.length - 1].end\r\n            })\r\n          }\r\n          prev.mediaSegments = (prev.mediaSegments || []).concat(video.mediaSegments || [])\r\n        }\r\n        else {\r\n          mediaList.mediaList.video.push(video)\r\n        }\r\n      })\r\n      list[i].mediaList.audio.forEach((audio) => {\r\n        const prev = mediaList.mediaList.audio.find((p) => {\r\n          return audio.initSegment && audio.initSegment === p.initSegment || audio.id === p.id\r\n        })\r\n        if (prev) {\r\n          if (prev.mediaSegments?.length && audio.mediaSegments?.length) {\r\n            audio.mediaSegments.forEach((s) => {\r\n              s.start += prev.mediaSegments[prev.mediaSegments.length - 1].end\r\n              s.end += prev.mediaSegments[prev.mediaSegments.length - 1].end\r\n            })\r\n          }\r\n          prev.mediaSegments = (prev.mediaSegments || []).concat(audio.mediaSegments || [])\r\n        }\r\n        else {\r\n          mediaList.mediaList.audio.push(audio)\r\n        }\r\n      })\r\n      list[i].mediaList.subtitle.forEach((subtitle) => {\r\n        const prev = mediaList.mediaList.subtitle.find((p) => {\r\n          return subtitle.initSegment && subtitle.initSegment === p.initSegment || subtitle.id === p.id\r\n        })\r\n        if (prev) {\r\n          if (prev.mediaSegments?.length && subtitle.mediaSegments?.length) {\r\n            subtitle.mediaSegments.forEach((s) => {\r\n              s.start += prev.mediaSegments[prev.mediaSegments.length - 1].end\r\n              s.end += prev.mediaSegments[prev.mediaSegments.length - 1].end\r\n            })\r\n          }\r\n          prev.mediaSegments = (prev.mediaSegments || []).concat(subtitle.mediaSegments || [])\r\n        }\r\n        else {\r\n          mediaList.mediaList.subtitle.push(subtitle)\r\n        }\r\n      })\r\n    }\r\n    if (result.mediaPresentationDuration) {\r\n      mediaList.duration = durationConvert(result.mediaPresentationDuration)\r\n    }\r\n    return mediaList\r\n  }\r\n}\r\n","import * as array from './array'\r\n\r\ntype Options = {\r\n  aloneValueName?: string\r\n}\r\n\r\nconst defaultOptions: Options = {\r\n  aloneValueName: '_@attribute'\r\n}\r\n\r\ninterface StackItem {\r\n  obj: Record<string, any>\r\n  tag: string\r\n  start: number\r\n}\r\n\r\nconst splitChar = [' ', '/', '\"', '\\'', '<', '>']\r\n\r\nexport default function xml2Json(xmlStr: string, options = defaultOptions) {\r\n  // remove commented lines\r\n  xmlStr = xmlStr.replace(/<!--[\\s\\S]*?-->/g, '')\r\n  // replace special characters\r\n  xmlStr = xmlStr.replace(/[\\n\\t\\r]/g, '')\r\n  // replace leading spaces and tabs between elements\r\n  xmlStr = xmlStr.replace(/>[ \\t]+</g, '><')\r\n  // delete docType tags\r\n  xmlStr = xmlStr.replace(/<\\?[^>]*\\?>/g, '')\r\n\r\n  const stack: StackItem[] = []\r\n  let pos = 0\r\n\r\n  function addData(key: string, value: any) {\r\n    const item = stack[stack.length - 1]\r\n\r\n    if (!item) {\r\n      return\r\n    }\r\n\r\n    if (key === options.aloneValueName && item.obj[options.aloneValueName] != null) {\r\n      item.obj[options.aloneValueName] = [item.obj[options.aloneValueName], {\r\n        tagName: key,\r\n        ...value\r\n      }]\r\n      return\r\n    }\r\n    if (item.obj[key] == null) {\r\n      item.obj[key] = value\r\n    }\r\n    else if (Array.isArray(item.obj[key])) {\r\n      item.obj[key].push(value)\r\n    }\r\n    else {\r\n      item.obj[key] = [item.obj[key], value]\r\n    }\r\n  }\r\n\r\n  function gotoToken(token: string) {\r\n    while (pos < xmlStr.length) {\r\n      if (xmlStr[pos] === token) {\r\n        return true\r\n      }\r\n      pos++\r\n    }\r\n    return false\r\n  }\r\n\r\n  function readIdentity() {\r\n    skipSpace()\r\n    let key = ''\r\n    while (pos < xmlStr.length) {\r\n      if (array.has(splitChar, xmlStr[pos])) {\r\n        break\r\n      }\r\n      key += xmlStr[pos]\r\n      pos++\r\n    }\r\n    return key\r\n  }\r\n\r\n  function skipSpace() {\r\n    while (pos < xmlStr.length) {\r\n      if (!/\\s|\\r|\\n/.test(xmlStr[pos])) {\r\n        break\r\n      }\r\n      pos++\r\n    }\r\n  }\r\n\r\n  const emptyEndReg = /\\s/\r\n  const singleQuotation = /'/\r\n  const doubleQuotation = /\"/\r\n\r\n  function readAttrValue() {\r\n    if (pos >= xmlStr.length) {\r\n      return true\r\n    }\r\n    skipSpace()\r\n    // 默认属性值结束符为空格\r\n    let end = emptyEndReg\r\n    if (xmlStr[pos] === '\"' || xmlStr[pos] == '\\'') {\r\n      // 属性值是引号开始则结束符也是引号\r\n      end = xmlStr[pos] === '\"' ? doubleQuotation : singleQuotation\r\n      pos++\r\n    }\r\n    let value = ''\r\n    while (pos < xmlStr.length) {\r\n      if (end.test(xmlStr[pos])) {\r\n        pos++\r\n        break\r\n      }\r\n      value += xmlStr[pos]\r\n      pos++\r\n    }\r\n    return value\r\n  }\r\n\r\n  function readAttr() {\r\n    while (true) {\r\n      skipSpace()\r\n      // 判断标签属性结束\r\n      if (xmlStr[pos] === '>' || xmlStr[pos] === '/') {\r\n        break\r\n      }\r\n      let key = readIdentity()\r\n      if (!key) {\r\n        break\r\n      }\r\n      if (key[key.length - 1] === '=') {\r\n        key = key.substring(0, key.length - 1)\r\n      }\r\n      else {\r\n        gotoToken('=')\r\n        pos++\r\n      }\r\n      const value = readAttrValue()\r\n      addData(key, value)\r\n    }\r\n  }\r\n\r\n  // innerText 当前位置到 < 之前\r\n  function readText() {\r\n    skipSpace()\r\n    let text = ''\r\n    while (pos < xmlStr.length) {\r\n      if (xmlStr[pos] === '<') {\r\n        break\r\n      }\r\n      text += xmlStr[pos]\r\n      pos++\r\n    }\r\n    return text\r\n  }\r\n\r\n\r\n  function pop() {\r\n    // 处理 </> 跳出当前 tag\r\n    // 若是 <xx 则是子标签，进入下一次处理 \r\n    while (xmlStr[pos] === '<') {\r\n      const now = pos\r\n      pos++\r\n      skipSpace()\r\n      if (xmlStr[pos] === '/') {\r\n        pos++\r\n        const tag = readIdentity()\r\n        if (tag === stack[stack.length - 1].tag) {\r\n          if (stack.length > 1) {\r\n            const item = stack.pop()\r\n            addData(item.tag, item.obj)\r\n          }\r\n          gotoToken('>')\r\n          pos++\r\n          skipSpace()\r\n        }\r\n        else {\r\n          stack.pop()\r\n          gotoToken('>')\r\n          pos++\r\n          skipSpace()\r\n        }\r\n      }\r\n      else {\r\n        pos = now\r\n        break\r\n      }\r\n    }\r\n  }\r\n\r\n  function readTag() {\r\n    if (pos >= xmlStr.length) {\r\n      return\r\n    }\r\n\r\n    let start = pos\r\n    skipSpace()\r\n    // innerText 的后面部分，中间被标签分割出现这种情况，将其加入 context 中\r\n    if (xmlStr[pos] !== '<') {\r\n      pos = start\r\n      addData(options.aloneValueName, readText())\r\n      pop()\r\n      return readTag()\r\n    }\r\n\r\n    let has = gotoToken('<')\r\n    if (!has) {\r\n      return\r\n    }\r\n\r\n    start = pos\r\n    pos++\r\n\r\n    const tag = readIdentity()\r\n    stack.push({\r\n      obj: {},\r\n      tag,\r\n      start\r\n    })\r\n\r\n    readAttr()\r\n    skipSpace()\r\n    // 自闭合 tag\r\n    if (xmlStr[pos] === '/') {\r\n      pos++\r\n      if (stack.length > 1) {\r\n        const item = stack.pop()\r\n        addData(item.tag, item.obj)\r\n      }\r\n      gotoToken('>')\r\n      pos++\r\n      pop()\r\n      return readTag()\r\n    }\r\n\r\n    has = gotoToken('>')\r\n    if (!has) {\r\n      return\r\n    }\r\n    pos++\r\n\r\n    skipSpace()\r\n    // 检查有 innerText 内容\r\n    if (xmlStr[pos] !== '<') {\r\n      addData(options.aloneValueName, readText())\r\n      skipSpace()\r\n    }\r\n    pop()\r\n    readTag()\r\n  }\r\n\r\n  readTag()\r\n\r\n  return {\r\n    [stack[0].tag]: stack[0].obj\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}