{"version":3,"file":"src_avformat_formats_flv_FlvHeader_ts-src_avformat_formats_flv_FlvScriptTag_ts.avplayer.js","mappings":"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","sources":["webpack://AVPlayer/./src/avformat/formats/flv/FlvHeader.ts","webpack://AVPlayer/./src/avformat/formats/flv/FlvScriptTag.ts","webpack://AVPlayer/./src/avformat/formats/flv/flv.ts","webpack://AVPlayer/./src/avformat/formats/flv/oflv.ts","webpack://AVPlayer/./src/avutil/util/amf.ts"],"sourcesContent":["/*\r\n * libmedia flv header format\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport IOWriter from 'common/io/IOWriterSync'\r\n\r\nexport default class FlvHeader {\r\n  /**\r\n   * 3 bytes 签名\r\n   */\r\n  public signature: string\r\n\r\n  /**\r\n   * 1 bytes 版本，比如 0x01 表示 FLV 版本 1\r\n   */\r\n  public version: number\r\n\r\n  /**\r\n   * 1 bytes 第一位标记是否有视频，第 4 位标记是否有音频，其余位保留\r\n   */\r\n  public flags: number\r\n\r\n  /**\r\n   * 4 bytes FLV header 的大小，单位是字节，目前是 9\r\n   */\r\n  public dataOffset: number\r\n\r\n  /**\r\n   * 是否有视频\r\n   */\r\n  public hasVideo: boolean\r\n\r\n  /**\r\n   * 是否有音频\r\n   */\r\n  public hasAudio: boolean\r\n\r\n  constructor() {\r\n\r\n    this.signature = 'FLV'\r\n    this.version = 1\r\n    this.flags = 0\r\n    this.dataOffset = 9\r\n\r\n    this.hasAudio = false\r\n    this.hasVideo = false\r\n  }\r\n\r\n  public async read(ioReader: IOReader) {\r\n    this.signature = await ioReader.readString(3)\r\n    this.version = await ioReader.readUint8()\r\n    this.flags = await ioReader.readUint8()\r\n    this.dataOffset = await ioReader.readUint32()\r\n\r\n    this.hasAudio = !!(this.flags & 0x04)\r\n    this.hasVideo = !!(this.flags & 0x01)\r\n  }\r\n\r\n  public write(ioWriter: IOWriter) {\r\n    this.flags = 0\r\n    if (this.hasAudio) {\r\n      this.flags |= 0x04\r\n    }\r\n    if (this.hasVideo) {\r\n      this.flags |= 0x01\r\n    }\r\n\r\n    ioWriter.writeString(this.signature)\r\n    ioWriter.writeUint8(this.version)\r\n    ioWriter.writeUint8(this.flags)\r\n    ioWriter.writeUint32(this.dataOffset)\r\n  }\r\n}\r\n","/*\r\n * libmedia flv script tag format\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport IOReader from 'common/io/IOReader'\r\nimport IOWriterSync from 'common/io/IOWriterSync'\r\n\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\nimport * as logger from 'common/util/logger'\r\nimport { FlvMetaData } from './type'\r\nimport { FlvTag } from './flv'\r\n\r\nimport * as flv from './oflv'\r\nimport * as errorType from 'avutil/error'\r\nimport { parseValue, writeValue } from 'avutil/util/amf'\r\n\r\nexport default class FlvScriptTag {\r\n\r\n  public onMetaData: Partial<FlvMetaData>\r\n\r\n  constructor() {\r\n    this.onMetaData = {\r\n      canSeekToEnd: false\r\n    }\r\n  }\r\n\r\n  public async read(ioReader: IOReader, size: number) {\r\n    const now = ioReader.getPos()\r\n    const endPos = now + static_cast<int64>(size)\r\n    const key = await parseValue(ioReader, endPos)\r\n    const value = await parseValue(ioReader, endPos)\r\n    this[key] = value\r\n\r\n    if (endPos > ioReader.getPos()) {\r\n      await ioReader.skip(static_cast<int32>(endPos - ioReader.getPos()))\r\n    }\r\n\r\n    const tagSize = Number(ioReader.getPos() - now)\r\n    const prev = await ioReader.readUint32()\r\n\r\n    if (tagSize + 11 !== prev) {\r\n      logger.warn(`script size not match, size: ${tagSize + 11}, previousTagSize: ${prev}`)\r\n\r\n      return errorType.DATA_INVALID\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  public computeSize() {\r\n    const cache = []\r\n    const cacheWriter = new IOWriterSync()\r\n    cacheWriter.onFlush = (data) => {\r\n      cache.push(data.slice())\r\n      return 0\r\n    }\r\n    writeValue(cacheWriter, 'onMetaData')\r\n    writeValue(cacheWriter, this.onMetaData)\r\n\r\n    cacheWriter.flush()\r\n\r\n    const buffer = concatTypeArray(Uint8Array, cache)\r\n\r\n    return buffer.length\r\n  }\r\n\r\n  public write(ioWriter: IOWriterSync) {\r\n    if (this.onMetaData) {\r\n      const cache = []\r\n      const cacheWriter = new IOWriterSync()\r\n      cacheWriter.onFlush = (data) => {\r\n        cache.push(data.slice())\r\n        return 0\r\n      }\r\n\r\n      writeValue(cacheWriter, 'onMetaData')\r\n      writeValue(cacheWriter, this.onMetaData)\r\n\r\n      cacheWriter.flush()\r\n\r\n      const buffer = concatTypeArray(Uint8Array, cache)\r\n      flv.writeTag(ioWriter, FlvTag.SCRIPT, 0n, undefined, buffer)\r\n    }\r\n  }\r\n\r\n  public dts2Position(dts: number) {\r\n    if (this.canSeek()) {\r\n      let index = -1\r\n      const times = this.onMetaData.keyframes.times\r\n      const position = this.onMetaData.keyframes.filepositions\r\n\r\n      let i: number\r\n      for (i = 0; i < times.length; i++) {\r\n        if (times[i] === dts) {\r\n          index = i\r\n          break\r\n        }\r\n        else if (times[i] > dts) {\r\n          index = Math.max(i - 1, 0)\r\n          break\r\n        }\r\n      }\r\n      if (i && i === times.length) {\r\n        index = times.length - 1\r\n      }\r\n      return {\r\n        pos: position[index],\r\n        dts: times[index]\r\n      }\r\n    }\r\n\r\n    return {\r\n      pos: -1,\r\n      dts: -1\r\n    }\r\n  }\r\n\r\n  public position2DTS(pos: number) {\r\n    if (this.canSeek()) {\r\n      let index = -1\r\n      const times = this.onMetaData.keyframes.times\r\n      const position = this.onMetaData.keyframes.filepositions\r\n      let i = 0\r\n      for (i = 0; i < position.length; i++) {\r\n        if (position[i] > pos) {\r\n          index = i\r\n          break\r\n        }\r\n      }\r\n      if (i === position.length) {\r\n        return this.onMetaData.duration ?? times[times.length - 1]\r\n      }\r\n      return times[index]\r\n    }\r\n    return -1\r\n  }\r\n\r\n  public canSeek(): boolean {\r\n    return !!(this.onMetaData.keyframes\r\n      && this.onMetaData.keyframes.filepositions\r\n      && this.onMetaData.keyframes.filepositions.length)\r\n  }\r\n}\r\n","/*\r\n * libmedia flv defined\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVCodecID } from 'avutil/codec'\r\n\r\nexport const enum FlvTag {\r\n  AUDIO = 8,\r\n  VIDEO = 9,\r\n  SCRIPT = 18,\r\n  SCRIPT_AMF3 = 15\r\n}\r\n\r\nexport const enum VideoFrameType {\r\n  // a seekable frame\r\n  KeyFrame = 1,\r\n  // a non - seekable frame\r\n  InterFrame = 2,\r\n  // H.263 only\r\n  DisposableInterFrame = 3,\r\n  // reserved for server use only\r\n  GeneratedKeyFrame = 4,\r\n  // If videoFrameType is not ignored and is set to VideoFrameType.Command,\r\n  // the payload will not contain video data. Instead, (Ex)VideoTagHeader\r\n  // will be followed by a UI8, representing the following meanings:\r\n  //\r\n  // 0 = Start of client-side seeking video frame sequence\r\n  // 1 = End of client-side seeking video frame sequence\r\n  //\r\n  // frameType is ignored if videoPacketType is VideoPacketType.MetaData\r\n  Command = 5\r\n}\r\n\r\nexport const enum VideoCommand {\r\n  StartSeek = 0,\r\n  EndSeek = 1\r\n}\r\n\r\nexport const enum VideoPacketType {\r\n  SequenceStart = 0,\r\n  CodedFrames = 1,\r\n  SequenceEnd = 2,\r\n  // CompositionTime Offset is implicitly set to zero. This optimization\r\n  // avoids transmitting an SI24 composition time value of zero over the wire.\r\n  // See the ExVideoTagBody section below for corresponding pseudocode.\r\n  CodedFramesX = 3,\r\n  // ExVideoTagBody does not contain video data. Instead, it contains\r\n  // an AMF-encoded metadata. Refer to the Metadata Frame section for\r\n  // an illustration of its usage. For example, the metadata might include\r\n  // HDR information. This also enables future possibilities for expressing\r\n  // additional metadata meant for subsequent video sequences.\r\n  //\r\n  // If VideoPacketType.Metadata is present, the FrameType flags\r\n  // at the top of this table should be ignored.\r\n  Metadata = 4,\r\n  // Carriage of bitstream in MPEG-2 TS format\r\n  //\r\n  // PacketTypeSequenceStart and PacketTypeMPEG2TSSequenceStart\r\n  // are mutually exclusive\r\n  MPEG2TSSequenceStart = 5,\r\n  // Turns on video multiTrack mode\r\n  MultiTrack = 6,\r\n  // ModEx is a special signal within the VideoPacketType enum that\r\n  // serves to both modify and extend the behavior of the current packet.\r\n  // When this signal is encountered, it indicates the presence of\r\n  // additional modifiers or extensions, requiring further processing to\r\n  // adjust or augment the packet's functionality. ModEx can be used to\r\n  // introduce new capabilities or modify existing ones, such as\r\n  // enabling support for high-precision timestamps or other advanced\r\n  // features that enhance the base packet structure.\r\n  ModEx = 7\r\n}\r\n\r\nexport const enum AudioPacketType {\r\n  SequenceStart = 0,\r\n  CodedFrames = 1,\r\n  SequenceEnd = 2,\r\n  MultichannelConfig = 4,\r\n  MultiTrack = 5,\r\n  ModEx = 7\r\n}\r\n\r\nexport const enum VideoPacketModExType {\r\n  TimestampOffsetNano = 0\r\n}\r\n\r\nexport const enum AudioPacketModExType {\r\n  TimestampOffsetNano = 0\r\n}\r\n\r\nexport const enum AVMultiTrackType {\r\n  OneTrack = 0,\r\n  ManyTracks,\r\n  ManyTracksManyCodecs\r\n}\r\n\r\nexport const enum AVCPacketType {\r\n  AVC_SEQUENCE_HEADER,\r\n  AVC_NALU,\r\n  AVC_END_OF_ENQUENCE\r\n}\r\n\r\nexport const enum AACPacketType {\r\n  AAC_SEQUENCE_HEADER,\r\n  AAC_RAW\r\n}\r\n\r\nexport const enum AudioChannelOrder {\r\n  Unspecified = 0,\r\n  Native = 1,\r\n  Custom = 2\r\n}\r\n\r\nexport const AVCodecID2FlvCodecType = {\r\n  [AVCodecID.AV_CODEC_ID_PCM_U8]: 0,\r\n  [AVCodecID.AV_CODEC_ID_PCM_S16LE]: 3,\r\n  [AVCodecID.AV_CODEC_ID_AAC]: 10,\r\n  [AVCodecID.AV_CODEC_ID_MP3]: 2,\r\n  [AVCodecID.AV_CODEC_ID_SPEEX]: 11,\r\n  [AVCodecID.AV_CODEC_ID_ADPCM_SWF]: 1,\r\n  [AVCodecID.AV_CODEC_ID_NELLYMOSER]: 6,\r\n  [AVCodecID.AV_CODEC_ID_PCM_ALAW]: 7,\r\n  [AVCodecID.AV_CODEC_ID_PCM_MULAW]: 8,\r\n\r\n  [AVCodecID.AV_CODEC_ID_H264]: 7,\r\n  [AVCodecID.AV_CODEC_ID_HEVC]: 12,\r\n  // [AVCodecID.AV_CODEC_ID_VVC]: 13,\r\n  [AVCodecID.AV_CODEC_ID_MPEG4]: 9,\r\n  [AVCodecID.AV_CODEC_ID_H263]: 2,\r\n  [AVCodecID.AV_CODEC_ID_FLASHSV]: 3,\r\n  [AVCodecID.AV_CODEC_ID_VP6F]: 4,\r\n  [AVCodecID.AV_CODEC_ID_VP6A]: 5,\r\n  [AVCodecID.AV_CODEC_ID_FLASHSV2]: 6\r\n}\r\n\r\nexport const FlvAudioCodecType2AVCodecID = {\r\n  10: AVCodecID.AV_CODEC_ID_AAC,\r\n  2: AVCodecID.AV_CODEC_ID_MP3,\r\n  11: AVCodecID.AV_CODEC_ID_SPEEX,\r\n\r\n  1: AVCodecID.AV_CODEC_ID_ADPCM_SWF,\r\n  4: AVCodecID.AV_CODEC_ID_NELLYMOSER,\r\n  5: AVCodecID.AV_CODEC_ID_NELLYMOSER,\r\n  6: AVCodecID.AV_CODEC_ID_NELLYMOSER,\r\n  7: AVCodecID.AV_CODEC_ID_PCM_ALAW,\r\n  8: AVCodecID.AV_CODEC_ID_PCM_MULAW\r\n}\r\n\r\nexport const FlvVideoCodecType2AVCodecID = {\r\n  7: AVCodecID.AV_CODEC_ID_H264,\r\n  12: AVCodecID.AV_CODEC_ID_HEVC,\r\n  // 13: AVCodecID.AV_CODEC_ID_VVC,\r\n  9: AVCodecID.AV_CODEC_ID_MPEG4,\r\n\r\n  2: AVCodecID.AV_CODEC_ID_H263,\r\n  3: AVCodecID.AV_CODEC_ID_FLASHSV,\r\n  4: AVCodecID.AV_CODEC_ID_VP6F,\r\n  5: AVCodecID.AV_CODEC_ID_VP6A,\r\n  6: AVCodecID.AV_CODEC_ID_FLASHSV2\r\n}\r\n\r\nexport const AVCodecID2FlvCodecTag = {\r\n  [AVCodecID.AV_CODEC_ID_H264]: 'avc1',\r\n  [AVCodecID.AV_CODEC_ID_HEVC]: 'hvc1',\r\n  [AVCodecID.AV_CODEC_ID_VVC]: 'vvc1',\r\n  [AVCodecID.AV_CODEC_ID_VP8]: 'vp08',\r\n  [AVCodecID.AV_CODEC_ID_VP9]: 'vp09',\r\n  [AVCodecID.AV_CODEC_ID_AV1]: 'av01',\r\n\r\n  [AVCodecID.AV_CODEC_ID_AC3]: 'ac-3',\r\n  [AVCodecID.AV_CODEC_ID_EAC3]: 'ec-3',\r\n  [AVCodecID.AV_CODEC_ID_OPUS]: 'Opus',\r\n  [AVCodecID.AV_CODEC_ID_FLAC]: 'fLaC',\r\n  [AVCodecID.AV_CODEC_ID_MP3]: '.mp3',\r\n  [AVCodecID.AV_CODEC_ID_AAC]: 'mp4a'\r\n}\r\n","/*\r\n * libmedia flv encode\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVCodecID } from 'avutil/codec'\r\nimport { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport IOWriterSync from 'common/io/IOWriterSync'\r\nimport { AudioPacketModExType, AudioPacketType, AVCodecID2FlvCodecTag, AVCodecID2FlvCodecType, AVMultiTrackType, FlvTag, VideoFrameType, VideoPacketModExType, VideoPacketType } from './flv'\r\nimport { FlvContext, FlvStreamContext } from './type'\r\nimport { Rational } from 'avutil/struct/rational'\r\nimport { avRescaleQ2 } from 'avutil/util/rational'\r\nimport { AV_MILLI_TIME_BASE_Q, AV_NANO_TIME_BASE_Q } from 'avutil/constant'\r\nimport mktag from '../../function/mktag'\r\nimport * as is from 'common/util/is'\r\nimport AVStream from 'avutil/AVStream'\r\n\r\nexport function updateSize(ioWriter: IOWriterSync, pos: int64, size: int32) {\r\n  const now = ioWriter.getPos()\r\n  const pointer = ioWriter.getPointer()\r\n  const minPos = now - static_cast<int64>(pointer)\r\n  if (pos < now && pos >= minPos) {\r\n    ioWriter.seekInline(pointer + Number(pos - now))\r\n    ioWriter.writeUint24(size)\r\n    ioWriter.seekInline(pointer)\r\n  }\r\n  else {\r\n    ioWriter.seek(pos)\r\n    ioWriter.writeUint24(size)\r\n    ioWriter.seek(now)\r\n  }\r\n}\r\n\r\nexport function writeTag(\r\n  ioWriter: IOWriterSync,\r\n  type: FlvTag,\r\n  timestamp: int64,\r\n  dataHeader?: (ioWriter: IOWriterSync) => void,\r\n  data?: Uint8Array | ((ioWriter: IOWriterSync) => void),\r\n  previousTagSizeCallback?: (previousTagSize: int32) => void\r\n) {\r\n  ioWriter.flush()\r\n  // tagType\r\n  ioWriter.writeUint8(type)\r\n  const sizePos = ioWriter.getPos()\r\n  // size\r\n  ioWriter.writeUint24(0)\r\n  // timestamp\r\n  ioWriter.writeUint24(Number(timestamp & 0xffffffn))\r\n  // timestampExtended\r\n  ioWriter.writeUint8(Number((timestamp >> 24n) & 0xffn))\r\n  // streamId always 0\r\n  ioWriter.writeUint24(0)\r\n\r\n  const dataPos = ioWriter.getPos()\r\n  if (dataHeader) {\r\n    dataHeader(ioWriter)\r\n  }\r\n  if (is.func(data)) {\r\n    data(ioWriter)\r\n    updateSize(ioWriter, sizePos, Number(ioWriter.getPos() - dataPos))\r\n  }\r\n  else if (data) {\r\n    updateSize(ioWriter, sizePos, data.length + Number(ioWriter.getPos() - dataPos))\r\n    ioWriter.writeBuffer(data)\r\n  }\r\n  const previousTagSize = Number(ioWriter.getPos() - sizePos) + 1\r\n  if (previousTagSizeCallback) {\r\n    previousTagSizeCallback(previousTagSize)\r\n  }\r\n  ioWriter.writeUint32(previousTagSize)\r\n}\r\n\r\nexport function isEnhancedCodecId(codecId: AVCodecID) {\r\n  if (codecId === AVCodecID.AV_CODEC_ID_AAC\r\n    || codecId === AVCodecID.AV_CODEC_ID_H264\r\n    || codecId === AVCodecID.AV_CODEC_ID_MP3\r\n    || codecId === AVCodecID.AV_CODEC_ID_MPEG4\r\n  ) {\r\n    return false\r\n  }\r\n  return !!AVCodecID2FlvCodecTag[codecId]\r\n}\r\n\r\nexport function writeVideoHeader(\r\n  ioWriter: IOWriterSync,\r\n  stream: AVStream,\r\n  context: FlvContext,\r\n  enhanced: boolean,\r\n  type: uint8,\r\n  flags: AVPacketFlags,\r\n  timestamp: int64,\r\n  timeBase: pointer<Rational>,\r\n  ct: int32 = 0\r\n) {\r\n\r\n  const streamContext = stream.privData as FlvStreamContext\r\n\r\n  let header = enhanced ? 0x80 : 0\r\n  header |= ((flags & AVPacketFlags.AV_PKT_FLAG_KEY) ? VideoFrameType.KeyFrame : VideoFrameType.InterFrame) << 4\r\n\r\n  if (enhanced) {\r\n    if (context.enableNanoTimestamp && timeBase) {\r\n      const nano = avRescaleQ2(timestamp, timeBase, AV_NANO_TIME_BASE_Q)\r\n      const mill = avRescaleQ2(timestamp, timeBase, AV_MILLI_TIME_BASE_Q)\r\n      const offset = nano - mill * 1000000n\r\n      if (offset) {\r\n        header |= VideoPacketType.ModEx\r\n        ioWriter.writeUint8(header)\r\n        // modExSize - 1\r\n        ioWriter.writeUint8(2)\r\n        ioWriter.writeUint24(static_cast<int32>(offset))\r\n        header = VideoPacketModExType.TimestampOffsetNano << 4\r\n      }\r\n    }\r\n    if (context.multiVideoTracks) {\r\n      header |= VideoPacketType.MultiTrack\r\n      ioWriter.writeUint8(header)\r\n      header = AVMultiTrackType.OneTrack << 4\r\n    }\r\n    header |= type\r\n    ioWriter.writeUint8(header)\r\n    ioWriter.writeUint32(mktag(AVCodecID2FlvCodecTag[stream.codecpar.codecId]))\r\n    if (context.multiVideoTracks) {\r\n      ioWriter.writeUint8(streamContext.trackId)\r\n    }\r\n    if (type === VideoPacketType.CodedFrames) {\r\n      ioWriter.writeInt24(ct)\r\n    }\r\n  }\r\n  else {\r\n    header |= AVCodecID2FlvCodecType[stream.codecpar.codecId] & 0x0f\r\n    ioWriter.writeUint8(header)\r\n    if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n      || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n      || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n      || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MPEG4\r\n    ) {\r\n      ioWriter.writeUint8(type)\r\n      ioWriter.writeInt24(ct)\r\n    }\r\n  }\r\n}\r\n\r\nexport function writeAudioHeader(\r\n  ioWriter: IOWriterSync,\r\n  stream: AVStream,\r\n  context: FlvContext,\r\n  enhanced: boolean,\r\n  type: uint8,\r\n  timestamp: int64,\r\n  timeBase: pointer<Rational>\r\n) {\r\n  const streamContext = stream.privData as FlvStreamContext\r\n\r\n  let header = (enhanced ? 9 : (AVCodecID2FlvCodecType[stream.codecpar.codecId] & 0x0f)) << 4\r\n\r\n  if (enhanced) {\r\n    if (context.enableNanoTimestamp) {\r\n      const nano = avRescaleQ2(timestamp, timeBase, AV_NANO_TIME_BASE_Q)\r\n      const mill = avRescaleQ2(timestamp, timeBase, AV_MILLI_TIME_BASE_Q)\r\n      const offset = nano - mill * 1000000n\r\n      if (offset) {\r\n        header |= AudioPacketType.ModEx\r\n        ioWriter.writeUint8(header)\r\n        // modExSize - 1\r\n        ioWriter.writeUint8(2)\r\n        ioWriter.writeUint24(static_cast<int32>(offset))\r\n        header = AudioPacketModExType.TimestampOffsetNano << 4\r\n      }\r\n    }\r\n    if (context.multiVideoTracks) {\r\n      header |= AudioPacketType.MultiTrack\r\n      ioWriter.writeUint8(header)\r\n      header = AVMultiTrackType.OneTrack << 4\r\n    }\r\n    header |= type\r\n    ioWriter.writeUint8(header)\r\n    ioWriter.writeUint32(mktag(AVCodecID2FlvCodecTag[stream.codecpar.codecId]))\r\n    if (context.multiVideoTracks) {\r\n      ioWriter.writeUint8(streamContext.trackId)\r\n    }\r\n  }\r\n  else {\r\n    /**\r\n     * SoundType 声道类型，对 Nellymoser 来说，永远是单声道；对 AAC 来说，永远是双声道\r\n     * - 0 sndMono 单声道\r\n     * - 1 sndStereo 双声道\r\n     */\r\n    if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC || stream.codecpar.chLayout.nbChannels > 1) {\r\n      header |= 0x01\r\n    }\r\n    /**\r\n     * SoundSize 采样精度，对于压缩过的音频，永远是 16 位\r\n     * - 0 snd8Bit\r\n     * - 1 snd16Bit\r\n     */\r\n    if (stream.codecpar.codecId !== AVCodecID.AV_CODEC_ID_PCM_U8) {\r\n      header |= 0x02\r\n    }\r\n    /**\r\n     * SoundRate 采样率，对 AAC 来说，永远等于 3\r\n     * - 0 5.5-kHz\r\n     * - 1 1-kHz\r\n     * - 2 22-kHz\r\n     * - 3 44-kHz\r\n     */\r\n    if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC || stream.codecpar.sampleRate >= 44000) {\r\n      header |= 0x0c\r\n    }\r\n    else if (stream.codecpar.sampleRate >= 22000) {\r\n      header |= 0x08\r\n    }\r\n    else if (stream.codecpar.sampleRate >= 11000) {\r\n      header |= 0x04\r\n    }\r\n    ioWriter.writeUint8(header)\r\n    if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC) {\r\n      ioWriter.writeUint8(type)\r\n    }\r\n  }\r\n}\r\n","/*\r\n * libmedia flv amf\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport IOReader from 'common/io/IOReader'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport IOWriterSync from 'common/io/IOWriterSync'\r\nimport * as is from 'common/util/is'\r\nimport * as array from 'common/util/array'\r\nimport * as object from 'common/util/object'\r\n\r\nexport async function parseObject(ioReader: IOReader | BufferReader, endPos: bigint) {\r\n  const key = await ioReader.readString(await ioReader.readUint16())\r\n  const value = await parseValue(ioReader, endPos)\r\n  return {\r\n    key,\r\n    value\r\n  }\r\n}\r\n\r\nexport async function parseValue(ioReader: IOReader | BufferReader, endPos: bigint) {\r\n  const type = await ioReader.readUint8()\r\n  let value: any\r\n\r\n  switch (type) {\r\n    // double\r\n    case 0:\r\n      value = await ioReader.readDouble()\r\n      break\r\n      // boolean\r\n    case 1:\r\n      value = await ioReader.readUint8() ? true : false\r\n      break\r\n      // string\r\n    case 2:\r\n      value = await ioReader.readString(await ioReader.readUint16())\r\n      break\r\n      // object\r\n    case 3:\r\n      value = {}\r\n      while (ioReader.getPos() < endPos) {\r\n        const { key, value: val } = await parseObject(ioReader, endPos)\r\n        value[key] = val\r\n        if (((await ioReader.peekUint24()) & 0x00FFFFFF) === 9) {\r\n          await ioReader.skip(3)\r\n          break\r\n        }\r\n      }\r\n      break\r\n      // ECMA array type (Mixed array)\r\n    case 8:\r\n      value = {}\r\n      // skip ECMAArrayLength(UI32)\r\n      await ioReader.skip(4)\r\n      while (ioReader.getPos() < endPos) {\r\n        const { key, value: val } = await parseObject(ioReader, endPos)\r\n        value[key] = val\r\n        if (((await ioReader.peekUint24()) & 0x00FFFFFF) === 9) {\r\n          await ioReader.skip(3)\r\n          break\r\n        }\r\n      }\r\n      break\r\n      // ScriptDataObjectEnd\r\n    case 9:\r\n    case 5:\r\n      value = null\r\n      break\r\n    // Strict array type\r\n    case 10:\r\n      value = []\r\n      const length = await ioReader.readUint32()\r\n      for (let i = 0; i < length; i++) {\r\n        value.push(await parseValue(ioReader, endPos))\r\n      }\r\n      break\r\n    // Date\r\n    case 11:\r\n      const timestamp = await ioReader.readDouble()\r\n      const localTimeOffset = await ioReader.readInt16()\r\n      value = new Date(timestamp + localTimeOffset * 60 * 1000)\r\n      break\r\n    // Long string type\r\n    case 12:\r\n      value = await ioReader.readString(await ioReader.readUint32())\r\n      break\r\n    default:\r\n\r\n  }\r\n\r\n  return value\r\n}\r\n\r\nexport function writeValue(ioWriter: IOWriterSync | BufferWriter, value: any) {\r\n  // double\r\n  if (is.number(value)) {\r\n    ioWriter.writeUint8(0)\r\n    ioWriter.writeDouble(value)\r\n  }\r\n  else if (is.bigint(value)) {\r\n    ioWriter.writeUint8(0)\r\n    ioWriter.writeDouble(Number(value))\r\n  }\r\n  // boolean\r\n  else if (is.boolean(value)) {\r\n    ioWriter.writeUint8(1)\r\n    ioWriter.writeUint8(value ? 1 : 0)\r\n  }\r\n  // string\r\n  else if (is.string(value)) {\r\n    // long string\r\n    if (value.length >= 65536) {\r\n      ioWriter.writeUint8(12)\r\n      ioWriter.writeUint32(value.length)\r\n      ioWriter.writeString(value)\r\n    }\r\n    // string\r\n    else {\r\n      ioWriter.writeUint8(2)\r\n      ioWriter.writeUint16(value.length)\r\n      ioWriter.writeString(value)\r\n    }\r\n  }\r\n  // array type\r\n  else if (is.array(value)) {\r\n    ioWriter.writeUint8(10)\r\n    ioWriter.writeUint32(value.length)\r\n    array.each(value, (value) => {\r\n      writeValue(ioWriter, value)\r\n    })\r\n  }\r\n  // object\r\n  else if (is.object(value)) {\r\n    ioWriter.writeUint8(3)\r\n    object.each(value, (item, key) => {\r\n      ioWriter.writeUint16(key.length)\r\n      ioWriter.writeString(key)\r\n      writeValue(ioWriter, item)\r\n    })\r\n    // object end flag\r\n    ioWriter.writeUint24(9)\r\n  }\r\n  else if (value instanceof Date) {\r\n    ioWriter.writeUint8(11)\r\n    ioWriter.writeDouble(value.getTime())\r\n    ioWriter.writeInt16(0)\r\n  }\r\n  else if (value == null) {\r\n    ioWriter.writeUint8(5)\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}