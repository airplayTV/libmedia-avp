{"version":3,"file":"src_avformat_formats_IAviFormat_ts.avplayer.js","mappings":"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;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAC9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA6B;IAE9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAClD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAiC;IAElD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,qCAA4B;IAC7C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,qCAA4B;IAC7C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,qCAA4B;IAE7C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,wCAA+B;IAChD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,wCAA+B;IAChD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,wCAA+B;IAChD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,wCAA+B;IAChD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,wCAA+B;IAChD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,wCAA+B;IAChD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,wCAA+B;IAChD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,wCAA+B;IAChD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,wCAA+B;IAChD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,wCAA+B;IAChD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,wCAA+B;IAChD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,wCAA+B;IAChD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,wCAA+B;IAChD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,wCAA+B;IAChD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,wCAA+B;IAChD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,wCAA+B;IAChD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,wCAA+B;IAEhD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAkC;IACnD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAkC;IACnD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAkC;IACnD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAkC;IACnD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAkC;IACnD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAkC;IACnD,CAAC,UAAoB,CAAC,0CAAkC;IACxD,CAAC,UAAoB,CAAC,0CAAkC;IACxD,CAAC,UAAoB,CAAC,0CAAkC;IACxD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAkC;IACnD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAkC;IACnD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAkC;IACnD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAkC;IACnD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAkC;IACnD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAkC;IACnD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAkC;IACnD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAkC;IACnD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAkC;IACnD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAkC;IACnD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAkC;IACnD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAkC;IACnD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,0CAAkC;IACnD,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,qCAA6B;IAE9C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,qCAA4B;IAC7C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,qCAA2B;IAC5C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,qCAA2B;IAC5C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,qCAA2B;IAC5C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA4B;IAC7C,CAAC,6DAAO,CAAC,MAAM,CAAC,CAAC,sCAA4B;CAC9C;AAEM,MAAM,sBAAsB,GAAG,0BAA0B;AACzD,MAAM,mBAAmB,GAAG,0BAA0B;AACtD,MAAM,gBAAgB,GAAG,0BAA0B;AAEnD,MAAM,YAAY,GAA8B;IACrD,kCAAkC,uCAA2B;IAC7D,kCAAkC,2CAA+B;IACjE,kCAAkC,0CAA8B;IAChE,kCAAkC,wCAA4B;IAC9D,kCAAkC,uCAA2B;IAC7D,kCAAkC,6CAAiC;IACnE,kCAAkC,yCAA6B;CAChE;AAEM,MAAM,QAAQ,GAA2B;IAC9C,MAAM,2CAA4B;IAClC,MAAM,6CAA6B;IACnC,MAAM,iDAA+B;IACrC,MAAM,uCAA0B;IAChC,MAAM,yCAA2B;IACjC,MAAM,+CAA8B;IACpC,MAAM,+CAA8B;IACpC,MAAM,yCAA2B;IACjC,MAAM,yCAA2B;IACjC,MAAM,yCAA2B;IACjC,MAAM,6CAA6B;IACnC,MAAM,gDAA+B;IACrC,MAAM,2CAA4B;CACnC;;;;;;;;;;;;;;;;ACnQD;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AAEyC;AAE7B,SAAS,OAAO,CAAC,GAAW;IACzC,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACrB,oDAAW,CAAC,6BAA6B,GAAG,EAAE,0BAAC;IACjD,CAAC;IAED,IAAI,KAAK,GAAG,CAAC;IACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;QAC5B,KAAK,GAAG,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC;IAC1C,CAAC;IAED,OAAO,KAAK;AACd,CAAC;;;;;;;;;;;;;;;;;;;;;ACtCD;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AAKsC;AAEE;AAmCpC,MAAM,eAAe,GAAmD;IAC7E,wCAAgC,EAAE,MAAM;IACxC,sCAA8B,EAAE,IAAI;IACpC,uCAA+B,EAAE,KAAK;IACtC,uCAA+B,EAAE,KAAK;IACtC,uCAA+B,EAAE,IAAI;IACrC,4CAAoC,EAAE,UAAU;IAChD,uCAA8B,EAAE,MAAM;IACtC,uCAA8B,EAAE,IAAI;IACpC,wCAA+B,EAAE,KAAK;CACvC;AAEM,MAAM,2BAA2B,GAAG;IACzC,KAAK,EAAE,CAAC;IACR,KAAK,EAAE,CAAC;IACR,KAAK,EAAE,CAAC;IACR,KAAK,EAAE,CAAC;IACR,KAAK,EAAE,CAAC;IACR,KAAK,EAAE,CAAC;IACR,KAAK,EAAE,CAAC;IACR,KAAK,EAAE,CAAC;IACR,KAAK,EAAE,CAAC;IACR,KAAK,EAAE,CAAC;IACR,KAAK,EAAE,EAAE;IACT,IAAI,EAAE,EAAE;IACR,IAAI,EAAE,EAAE;CACT;AAEM,MAAM,wBAAwB,GAAG;IACtC,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,IAAI;IACJ,IAAI;IACJ,kDAAW;IACX,kDAAW;IACX,kDAAW;CACZ;AAEM,MAAM,aAAa,GAAG;IAC3B,kDAAW;IACX,CAAC;IACD,CAAC;IACD,CAAC;IACD,CAAC;IACD,CAAC;IACD,CAAC;IACD,CAAC;CACF;AAED;;;;;;;;;;;;;;;GAeG;AAEI,SAAS,oBAAoB,CAAC,SAA8B;IACjE,IAAI,OAAO,GAAG,kDAAW;IACzB,IAAI,UAAU,GAAG,kDAAW;IAC5B,IAAI,QAAQ,GAAG,kDAAW;IAC1B,IAAI,SAAS,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC;QAC1B,OAAO,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI;QACpC,UAAU,GAAG,wBAAwB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;cAC9D,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;QAExB,QAAQ,GAAG,aAAa,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC;IACtD,CAAC;IAED,OAAO;QACL,OAAO;QACP,UAAU;QACV,QAAQ;KACT;AACH,CAAC;AAEM,SAAS,sBAAsB,CAAC,MAAc,EAAE,SAA+B;IACpF,IAAI,CAAC,SAAS,IAAI,MAAM,CAAC,QAAQ,wDAAgD,EAAE,CAAC;QAClF,SAAS,GAAG,MAAM,CAAC,QAAQ,wDAAgD;IAC7E,CAAC;IACD,IAAI,SAAS,EAAE,CAAC;QACd,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,oBAAoB,CAAC,SAAS,CAAC;QACzE,MAAM,CAAC,QAAQ,CAAC,OAAO,GAAG,OAAO;QACjC,MAAM,CAAC,QAAQ,CAAC,UAAU,GAAG,UAAU;QACvC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,GAAG,QAAQ;QAC9C,MAAM,CAAC,QAAQ,CAAC,SAAS,GAAG,OAAO,0CAAmC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI;QACpF,MAAM,CAAC,QAAQ,CAAC,MAAM,6CAAoC;IAC5D,CAAC;AACH,CAAC;AAEM,SAAS,2BAA2B,CAAC,QAA2B;IACrE,MAAM,iBAAiB,GAAG,2BAA2B,CAAC,QAAQ,CAAC,UAAU,CAAC;IAC1E,MAAM,aAAa,GAAG,QAAQ,CAAC,QAAQ,CAAC,UAAU;IAClD,MAAM,OAAO,GAAG,QAAQ,CAAC,OAAO,KAAK,kDAAW,CAAC,CAAC,sCAA8B,CAAC,CAAC,QAAQ,CAAC,OAAO;IAElG,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC;IACnC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,iBAAiB,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;IAC1E,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,iBAAiB,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,aAAa,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC;IAEhF,OAAO,SAAS;AAClB,CAAC;AAwBD;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AACI,SAAS,eAAe,CAAC,MAA2B;IAEzD,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QACtB,OAAO,CAAC,CAAC;IACX,CAAC;IAED,MAAM,QAAQ,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,MAAM,GAAO,IAAI,CAAC,CAAC;IAExD,IAAI,QAAQ,KAAK,KAAK,EAAE,CAAC;QACvB,OAAO,CAAC,CAAC;IACX,CAAC;IAED;;;QAGI;IACJ,MAAM,gBAAgB,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI;IACzC,MAAM,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;IACxC,MAAM,sBAAsB,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;IACvD,MAAM,oBAAoB,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;IAEnF,yBAAyB;IACzB,MAAM,cAAc,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;UAC7C,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;UAChB,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;IAE9B,MAAM,4BAA4B,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,IAAI;IAErD,IAAI,YAAY,GAAG,gBAAgB,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACjD,IAAI,kBAAkB,GAAG,cAAc,GAAG,YAAY;IAEtD,OAAO;QACL,QAAQ;QACR,OAAO,EAAE,OAAO,GAAG,CAAC;QACpB,UAAU,EAAE,wBAAwB,CAAC,sBAAsB,CAAC;QAC5D,QAAQ,EAAE,aAAa,CAAC,oBAAoB,CAAC;QAC7C,cAAc;QACd,4BAA4B;QAC5B,YAAY;QACZ,kBAAkB;KACnB;AACH,CAAC;AAEM,SAAS,eAAe,CAAC,MAA2B,EAAE,SAAqB;IAChF,IAAI,CAAC,SAAS,EAAE,CAAC;QACf,SAAS,GAAG,IAAI,2DAAS,EAAE;QAC3B,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC;IAChC,CAAC;IAED,SAAS,YAAY;QACnB,MAAM,aAAa,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QACxC,IAAI,KAAK,GAAG,CAAC;QAEb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,aAAa,EAAE,CAAC,EAAE,EAAE,CAAC;YACxC,KAAK,GAAG,KAAK,IAAI,CAAC;YAClB,KAAK,GAAG,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QACpC,CAAC;QACD,OAAO,KAAK;IACd,CAAC;IAED,MAAM,GAAG,GAAG,SAAS,CAAC,UAAU,EAAE;IAElC,MAAM,IAAI,GAAkB;QAC1B,QAAQ,EAAE,CAAC;QACX,OAAO,EAAE,CAAC;QACV,UAAU,EAAE,CAAC;QACb,QAAQ,EAAE,CAAC;QACX,gBAAgB,EAAE,KAAK;QACvB,YAAY,EAAE,CAAC;QACf,kBAAkB,EAAE,CAAC;QACrB,cAAc,EAAE,CAAC;KAClB;IAED,MAAM,QAAQ,GAAG,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC;IAEpC,IAAI,QAAQ,KAAK,KAAK,EAAE,CAAC;QACvB,OAAO,CAAC,CAAC;IACX,CAAC;IAED,IAAI,CAAC,QAAQ,GAAG,QAAQ;IAExB,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC;IAEzC,MAAM,gBAAgB,GAAG,SAAS,CAAC,MAAM,EAAE,KAAK,IAAI;IAEpD,IAAI,CAAC,gBAAgB,GAAG,gBAAgB;IAExC,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACtB,MAAM,eAAe,GAAG,SAAS,CAAC,MAAM,EAAE,KAAK,IAAI;QACnD,MAAM,gBAAgB,GAAG,eAAe,IAAI,SAAS,CAAC,MAAM,EAAE,KAAK,IAAI;QACvE,IAAI,gBAAgB,EAAE,CAAC;YACrB,OAAO,CAAC,CAAC;QACX,CAAC;QACD,IAAI,eAAe,EAAE,CAAC;YACpB,YAAY,EAAE;QAChB,CAAC;QACD,MAAM,yBAAyB,GAAG,SAAS,CAAC,MAAM,EAAE,KAAK,IAAI;QAC7D,IAAI,CAAC,yBAAyB,EAAE,CAAC;YAC/B,OAAO,CAAC,CAAC;QACX,CAAC;QACD,MAAM,YAAY,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QACvC,IAAI,YAAY,KAAK,CAAC,EAAE,CAAC;YACvB,OAAO,CAAC,CAAC;QACX,CAAC;QAED,MAAM,UAAU,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QACrC,IAAI,UAAU,KAAK,CAAC,EAAE,CAAC;YACrB,OAAO,CAAC,CAAC;QACX,CAAC;QAED,MAAM,QAAQ,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QACnC,IAAI,QAAQ,KAAK,CAAC,EAAE,CAAC;YACnB,OAAO,CAAC,CAAC;QACX,CAAC;QAED,IAAI,QAAQ,GAAG,eAAe,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,CAAC;QAEnD,MAAM,eAAe,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QAC1C,QAAQ,IAAI,CAAC;QAEb,MAAM,iBAAiB,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QAC5C,QAAQ,IAAI,CAAC;QAEb,MAAM,aAAa,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QACxC,QAAQ,IAAI,CAAC;QAEb,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QAClB,QAAQ,IAAI,CAAC;QAEb,IAAI,QAAQ,GAAG,CAAC,EAAE,CAAC;YACjB,SAAS,CAAC,KAAK,CAAC,QAAQ,CAAC;QAC3B,CAAC;QAED,MAAM,eAAe,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QAC1C,IAAI,eAAe,KAAK,CAAC,EAAE,CAAC;YAC1B,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QACpB,CAAC;aACI,CAAC;YACJ,OAAO,CAAC,CAAC;QACX,CAAC;QAED,MAAM,gBAAgB,GAAG,SAAS,CAAC,MAAM,EAAE,KAAK,IAAI;QACpD,IAAI,gBAAgB,EAAE,CAAC;YACrB,IAAI,eAAe,EAAE,CAAC;gBACpB,YAAY,EAAE;YAChB,CAAC;iBACI,CAAC;gBACJ,IAAI,gBAAgB,GAAG,CAAC;gBACxB,OAAO,IAAI,EAAE,CAAC;oBACZ,gBAAgB,GAAG,gBAAgB,IAAI,CAAC;oBACxC,MAAM,eAAe,GAAG,SAAS,CAAC,MAAM,EAAE,KAAK,IAAI;oBACnD,MAAM,eAAe,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC1C,gBAAgB,IAAI,eAAe;oBACnC,IAAI,CAAC,eAAe,EAAE,CAAC;wBACrB,MAAK;oBACP,CAAC;gBACH,CAAC;YACH,CAAC;QACH,CAAC;QAED,MAAM,eAAe,GAAG,SAAS,CAAC,MAAM,EAAE,KAAK,IAAI;QACnD,IAAI,eAAe,EAAE,CAAC;YACpB,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QACpB,CAAC;QAED,IAAI,CAAC,OAAO,GAAG,eAAe,GAAG,CAAC;QAClC,IAAI,CAAC,UAAU,GAAG,wBAAwB,CAAC,iBAAiB,CAAC;QAC7D,IAAI,CAAC,QAAQ,GAAG,aAAa,CAAC,aAAa,CAAC;IAC9C,CAAC;IAED,IAAI,MAAM,GAAG,CAAC;IACd,OAAO,IAAI,EAAE,CAAC;QACZ,MAAM,GAAG,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QAC9B,MAAM,IAAI,GAAG;QACb,IAAI,GAAG,KAAK,IAAI,EAAE,CAAC;YACjB,MAAK;QACP,CAAC;IACH,CAAC;IAED,IAAI,CAAC,kBAAkB,GAAG,MAAM;IAChC,IAAI,CAAC,YAAY,GAAG,SAAS,CAAC,UAAU,EAAE,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAEzF,OAAO,IAAI;AACb,CAAC;;;;;;;;;;;;;;;;;;;;;;;ACnY0C;AACG;AAGH;AAC0B;AAsB9D,MAAM,eAAe,GAA+B;IACzD,yBAAiB,EAAE,MAAM;IACzB,yBAAiB,EAAE,MAAM;IACzB,iCAAyB,EAAE,cAAc;CAC1C;AAEM,MAAM,iBAAiB,GAAG;IAC/B,EAAE,KAAK,EAAE,EAAE,EAAE,aAAa,SAAa,EAAE;IACzC,EAAE,KAAK,EAAE,EAAE,EAAE,aAAa,SAAa,EAAE;IACzC,EAAE,KAAK,EAAE,EAAE,EAAE,aAAa,UAAa,EAAE;IACzC,EAAE,KAAK,EAAE,EAAE,EAAE,aAAa,UAAa,EAAE;IACzC,EAAE,KAAK,EAAE,EAAE,EAAE,aAAa,UAAa,EAAE;IACzC,EAAE,KAAK,EAAE,EAAE,EAAE,aAAa,UAAa,EAAE;IACzC,EAAE,KAAK,EAAE,EAAE,EAAE,aAAa,UAAa,EAAE;IACzC,EAAE,KAAK,EAAE,EAAE,EAAE,aAAa,UAAa,EAAE;IACzC,EAAE,KAAK,EAAE,EAAE,EAAE,aAAa,UAAa,EAAE;IACzC,EAAE,KAAK,EAAE,EAAE,EAAE,aAAa,UAAa,EAAE;IACzC,EAAE,KAAK,EAAE,EAAE,EAAE,aAAa,WAAc,EAAE;IAC1C,EAAE,KAAK,EAAE,EAAE,EAAE,aAAa,WAAc,EAAE;IAC1C,EAAE,KAAK,EAAE,EAAE,EAAE,aAAa,WAAc,EAAE;IAC1C,EAAE,KAAK,EAAE,EAAE,EAAE,aAAa,WAAc,EAAE;CAC3C;AAEM,MAAM,WAAW,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;AAEpH,SAAS,oBAAoB,CAAC,KAAa,EAAE,MAAc,EAAE,GAAW;IAC7E,MAAM,UAAU,GAAG,KAAK,GAAG,MAAM;IACjC,KAAK,MAAM,KAAK,IAAI,iBAAiB,EAAE,CAAC;QACtC,IAAI,UAAU,IAAI,KAAK,CAAC,aAAa,EAAE,CAAC;YACtC,OAAO,KAAK,CAAC,KAAK;QACpB,CAAC;IACH,CAAC;AACH,CAAC;AAEM,SAAS,sBAAsB,CAAC,MAAgB,EAAE,SAA+B;IACtF,IAAI,CAAC,SAAS,IAAI,MAAM,CAAC,QAAQ,wDAAgD,EAAE,CAAC;QAClF,SAAS,GAAG,MAAM,CAAC,QAAQ,wDAAgD;IAC7E,CAAC;IACD,IAAI,SAAS,IAAI,SAAS,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC;QACvC,MAAM,MAAM,GAAG,cAAc,CAAC,SAAS,CAAC;QAExC,MAAM,CAAC,QAAQ,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO;QACxC,MAAM,CAAC,QAAQ,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK;IACtC,CAAC;AACH,CAAC;AAED;;;;;;;;;;;;;;;GAeG;AACI,SAAS,cAAc,CAAC,SAA8B;IAC3D,MAAM,SAAS,GAAG,IAAI,2DAAS,CAAC,SAAS,CAAC,MAAM,CAAC;IACjD,SAAS,CAAC,YAAY,CAAC,SAAS,CAAC;IACjC,SAAS;IACT,SAAS,CAAC,MAAM,EAAE;IAClB,UAAU;IACV,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IAElB,MAAM,OAAO,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IAClC,MAAM,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IAChC,MAAM,IAAI,GAAG,SAAS,CAAC,MAAM,EAAE;IAC/B,IAAI,QAAQ,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC1C,IAAI,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC;QACvB,QAAQ,GAAG,EAAE;IACf,CAAC;IACD,MAAM,UAAU,GAAG,SAAS,CAAC,MAAM,EAAE;IACrC,MAAM,kBAAkB,GAAG,SAAS,CAAC,MAAM,EAAE;IAC7C,MAAM,kBAAkB,GAAG,SAAS,CAAC,MAAM,EAAE;IAC7C,MAAM,oBAAoB,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IAE/C,OAAO;QACL,OAAO;QACP,KAAK;QACL,IAAI;QACJ,QAAQ;QACR,UAAU;QACV,kBAAkB;QAClB,kBAAkB;QAClB,oBAAoB;KACrB;AACH,CAAC;AAED,8BAA8B;AACvB,SAAS,mBAAmB,CAAC,MAA2B;IAC7D,MAAM,SAAS,GAAG,IAAI,2DAAS,CAAC,MAAM,CAAC,MAAM,CAAC;IAC9C,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC;IAE9B,SAAS,CAAC,MAAM,EAAE;IAClB,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IAClB,MAAM,aAAa,GAAG,SAAS,CAAC,MAAM,EAAE;IACxC,MAAM,WAAW,GAAG,SAAS,CAAC,MAAM,EAAE;IACtC,oBAAoB;IACpB,SAAS,CAAC,MAAM,EAAE;IAClB,IAAI,aAAa,EAAE,CAAC;QAClB,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IACpB,CAAC;IACD,IAAI,WAAW,EAAE,CAAC;QAChB,mDAAgB,CAAC,SAAS,CAAC;IAC7B,CAAC;IAED,MAAM,WAAW,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;IAC7C,MAAM,aAAa,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;IAC/C,MAAM,4BAA4B,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;IAE9D,IAAI,wBAAwB,GAAG,CAAC;IAChC,IAAI,+BAA+B,GAAG,CAAC;IACvC,IAAI,kCAAkC,GAAG,CAAC;IAC1C,IAAI,4BAA4B,GAAG,CAAC;IACpC,IAAI,mBAAmB,GAAa,CAAC,CAAC,CAAC;IACvC,IAAI,aAAa,GAAa,CAAC,CAAC,CAAC;IACjC,IAAI,QAAQ,GAAa,CAAC,CAAC,CAAC;IAC5B,IAAI,iCAAiC,GAAa,CAAC,CAAC,CAAC;IACrD,IAAI,yCAAyC,GAAa,CAAC,CAAC,CAAC;IAC7D,IAAI,6BAA6B,GAAa,CAAC,CAAC,CAAC;IACjD,IAAI,2BAA2B,GAAG,CAAC;IACnC,IAAI,oBAAoB,GAAa,CAAC,CAAC,CAAC;IACxC,IAAI,oBAAoB,GAAa,CAAC,CAAC,CAAC;IACxC,IAAI,mBAAmB,GAAa,CAAC,CAAC,CAAC;IAEvC,IAAI,4BAA4B,EAAE,CAAC;QACjC,aAAa,CAAC,CAAC,CAAC,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;IAC9C,CAAC;SACI,CAAC;QACJ,wBAAwB,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;QACpD,IAAI,wBAAwB,EAAE,CAAC;YAE7B,IAAI,yBAAyB,GAAG,8CAAW,CAAC,SAAS,EAAE,EAAE,CAAC;YAC1D,IAAI,UAAU,GAAG,8CAAW,CAAC,SAAS,EAAE,EAAE,CAAC;YAC3C,IAAI,sBAAsB,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;YACtD,IAAI,sBAAsB,EAAE,CAAC;gBAC3B,IAAI,6BAA6B,GAAG,iDAAc,CAAC,SAAS,CAAC;YAC/D,CAAC;YAED,IAAI,+BAA+B,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;YAC/D,IAAI,+BAA+B,EAAE,CAAC;gBACpC,2BAA2B,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;gBACvD,IAAI,0BAA0B,GAAG,8CAAW,CAAC,SAAS,EAAE,EAAE,CAAC;gBAC3D,IAAI,kCAAkC,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;gBAClE,IAAI,sCAAsC,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;YACxE,CAAC;QACH,CAAC;aACI,CAAC;YACJ,+BAA+B,GAAG,CAAC;QACrC,CAAC;QACD,IAAI,kCAAkC,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;QAClE,IAAI,4BAA4B,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;QAC5D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,4BAA4B,EAAE,CAAC,EAAE,EAAG,CAAC;YACxD,mBAAmB,CAAC,CAAC,CAAC,GAAG,8CAAW,CAAC,SAAS,EAAE,EAAE,CAAC;YACnD,aAAa,CAAC,CAAC,CAAC,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;YAC5C,IAAI,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC;gBACzB,QAAQ,CAAC,CAAC,CAAC,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;YACzC,CAAC;iBACI,CAAC;gBACJ,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC;YACjB,CAAC;YACD,IAAI,+BAA+B,EAAE,CAAC;gBACpC,iCAAiC,CAAC,CAAC,CAAC,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;gBAChE,IAAI,iCAAiC,CAAC,CAAC,CAAC,EAAE,CAAC;oBACzC,IAAI,CAAC,GAAG,2BAA2B,GAAG,CAAC;oBACvC,oBAAoB,CAAC,CAAC,CAAC,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;oBACnD,oBAAoB,CAAC,CAAC,CAAC,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;oBACnD,mBAAmB,CAAC,CAAC,CAAC,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;gBACpD,CAAC;YACH,CAAC;iBACI,CAAC;gBACJ,iCAAiC,CAAC,CAAC,CAAC,GAAG,CAAC;YAC1C,CAAC;YACD,IAAI,kCAAkC,EAAE,CAAC;gBACvC,yCAAyC,CAAC,CAAC,CAAC,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;gBACxE,IAAK,yCAAyC,CAAC,CAAC,CAAC,EAAG,CAAC;oBACnD,6BAA6B,CAAC,CAAC,CAAC,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;gBAC9D,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC;IACD,IAAI,wBAAwB,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;IACxD,IAAI,yBAAyB,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;IACzD,IAAI,CAAC,GAAG,wBAAwB,GAAG,CAAC;IACpC,IAAI,uBAAuB,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;IACvD,CAAC,GAAG,yBAAyB,GAAG,CAAC;IACjC,IAAI,wBAAwB,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;IACxD,IAAI,6BAA6B,GAAG,CAAC;IACrC,IAAI,6BAA6B,GAAG,CAAC;IACrC,IAAI,kCAAkC,GAAG,CAAC;IAC1C,IAAI,4BAA4B,EAAG,CAAC;QAClC,6BAA6B,GAAG,CAAC;IACnC,CAAC;SACI,CAAC;QACJ,6BAA6B,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;IAC3D,CAAC;IACD,IAAK,6BAA6B,EAAG,CAAC;QACpC,6BAA6B,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;QACzD,kCAAkC,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;IAChE,CAAC;IACD,IAAI,sBAAsB,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;IACtD,IAAI,mBAAmB,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;IACnD,IAAI,wBAAwB,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;IACxD,IAAI,0BAA0B,GAAG,CAAC;IAClC,IAAI,sBAAsB,GAAG,CAAC;IAC9B,IAAI,oBAAoB,GAAG,CAAC;IAC5B,IAAI,kBAAkB,GAAG,CAAC;IAC1B,IAAI,iBAAiB,GAAG,CAAC;IACzB,IAAI,eAAe,GAAG,CAAC;IACvB,IAAI,oBAAoB,GAAG,CAAC;IAC5B,IAAI,8BAA8B,GAAG,CAAC;IACtC,IAAI,oBAAoB,GAAG,CAAC;IAC5B,IAAI,aAAa,GAAG,CAAC;IACrB,IAAI,CAAC,4BAA4B,EAAE,CAAC;QAClC,IAAI,0BAA0B,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;QAC1D,sBAAsB,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;QAClD,oBAAoB,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;QAChD,kBAAkB,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;QAC9C,iBAAiB,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;QAC7C,IAAI,iBAAiB,EAAE,CAAC;YACtB,eAAe,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;YAC3C,oBAAoB,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;QAClD,CAAC;aACI,CAAC;YACJ,eAAe,GAAG,CAAC;YACnB,oBAAoB,GAAG,CAAC;QAC1B,CAAC;QACD,IAAI,+BAA+B,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;QAC/D,IAAI,+BAA+B,EAAE,CAAC;YACpC,8BAA8B,GAAG,CAAC;QACpC,CAAC;aACI,CAAC;YACJ,8BAA8B,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;QAC5D,CAAC;QAED,IAAI,8BAA8B,GAAG,CAAC,EAAE,CAAC;YACvC,IAAI,qBAAqB,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;YACrD,IAAI,qBAAqB,EAAE,CAAC;gBAC1B,oBAAoB,GAAG,CAAC;YAC1B,CAAC;iBACI,CAAC;gBACJ,oBAAoB,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;YAClD,CAAC;QACH,CAAC;aACI,CAAC;YACJ,oBAAoB,GAAG,CAAC;QAC1B,CAAC;QACD,IAAI,iBAAiB,EAAE,CAAC;YACtB,MAAM,uBAAuB,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;YACzD,aAAa,GAAG,uBAAuB,GAAG,CAAC;QAC7C,CAAC;aACI,CAAC;YACJ,aAAa,GAAG,CAAC;QACnB,CAAC;IACH,CAAC;IACD,IAAI,eAAe,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;IAC/C,IAAI,WAAW,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;IAC3C,IAAI,kBAAkB,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;IAElD,IAAI,aAAa,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;IAC7C,IAAI,UAAU,GAAG,CAAC;IAClB,IAAI,SAAS,GAAG,CAAC;IACjB,IAAI,WAAW,GAAG,CAAC;IACnB,IAAI,WAAW,IAAI,CAAC,IAAI,aAAa,EAAG,CAAC;QACvC,UAAU,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;QACtC,SAAS,GAAG,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE;IAClC,CAAC;SACI,IAAI,WAAW,IAAI,CAAC,EAAE,CAAC;QAC1B,SAAS,GAAG,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACpC,CAAC;IACD,IAAK,WAAW,IAAI,CAAC,EAAG,CAAC;QACvB,WAAW,GAAG,CAAC;IACjB,CAAC;SACI,CAAC;QACJ,WAAW,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;IACzC,CAAC;IACD,MAAM,8BAA8B,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;IAChE,IAAI,eAAe,GAAG,CAAC;IACvB,IAAI,wBAAwB,GAAG,CAAC;IAChC,IAAI,mBAAmB,GAAG,CAAC;IAC3B,IAAI,8BAA8B,EAAG,CAAC;QACpC,eAAe,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;QAC3C,wBAAwB,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;QACpD,mBAAmB,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;IACjD,CAAC;SACI,CAAC;QACJ,eAAe,GAAG,CAAC;QACnB,wBAAwB,GAAG,CAAC;QAC5B,mBAAmB,GAAG,CAAC;IACzB,CAAC;IACD,IAAI,WAAW,GAAG,CAAC;IACnB,IAAI,aAAa,GAAG,CAAC;IACrB,IAAI,aAAa,GAAG,CAAC;IACrB,IAAI,sBAAsB,GAAG,CAAC;IAC9B,IAAI,mBAAmB,GAAG,CAAC;IAC3B,IAAI,WAAW,EAAE,CAAC;QAChB,WAAW,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;QACvC,aAAa,GAAG,CAAC;QACjB,aAAa,GAAG,CAAC;QACjB,sBAAsB,GAAG,CAAC;QAC1B,mBAAmB,GAAG,CAAC;IACzB,CAAC;SACI,IAAI,eAAe,IAAI,CAAC;WACxB,wBAAwB,IAAI,EAAE;WAC9B,mBAAmB,IAAI,CAAC,EAC3B,CAAC;QACD,WAAW,GAAG,CAAC;QACf,aAAa,GAAG,CAAC;QACjB,aAAa,GAAG,CAAC;QACjB,mBAAmB,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;IACjD,CAAC;SACI,CAAC;QACJ,WAAW,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;QACvC,IAAI,WAAW,IAAI,CAAC,EAAE,CAAC;YACrB,aAAa,GAAG,CAAC;YACjB,aAAa,GAAG,CAAC;QACnB,CAAC;aACI,IAAK,WAAW,IAAI,CAAC,EAAG,CAAC;YAC5B,aAAa,GAAG,CAAC;YACjB,aAAa,GAAG,CAAC;QACnB,CAAC;aACI,CAAC;YACJ,IAAI,SAAS,IAAI,EAAE,EAAE,CAAC;gBACpB,aAAa,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;gBACzC,IAAI,aAAa,EAAE,CAAC;oBAClB,aAAa,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;gBAC3C,CAAC;qBACI,CAAC;oBACJ,aAAa,GAAG,CAAC;gBACnB,CAAC;YACH,CAAC;iBACI,CAAC;gBACJ,aAAa,GAAG,CAAC;gBACjB,aAAa,GAAG,CAAC;YACnB,CAAC;QACH,CAAC;QACD,IAAI,aAAa,IAAI,aAAa,EAAE,CAAC;YACnC,sBAAsB,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;QACpD,CAAC;QACD,mBAAmB,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;IACjD,CAAC;IAED,IAAI,yBAAyB,GAAG,8CAAW,CAAC,SAAS,EAAE,CAAC,CAAC;IAEzD,OAAO;QACL,KAAK,EAAE,uBAAuB,GAAG,CAAC;QAClC,MAAM,EAAE,wBAAwB,GAAG,CAAC;QACpC,OAAO,EAAE,WAAW;QACpB,KAAK,EAAE,WAAW,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACpC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;QACjB,QAAQ,EAAE,SAAS;QACnB,UAAU,EAAE,WAAW;QACvB,UAAU,EAAE,WAAW;QACvB,cAAc,EAAE,eAAe;QAC/B,uBAAuB,EAAE,wBAAwB;QACjD,kBAAkB,EAAE,mBAAmB;QACvC,YAAY,EAAE,aAAa;QAC3B,YAAY,EAAE,aAAa;QAC3B,oBAAoB,EAAE,sBAAsB;KAC7C;AACH,CAAC;AAEM,SAAS,QAAQ,CAAC,MAA2B;IAClD,MAAM,SAAS,GAAG,IAAI,2DAAS,EAAE;IAEjC,SAAS,CAAC,YAAY,CAAC,MAAM,CAAC;IAE9B,MAAM,IAAI,GAA0B,EAAE;IAEtC,OAAO,SAAS,CAAC,eAAe,EAAE,EAAE,CAAC;QACnC,MAAM,GAAG,GAAG,SAAS,CAAC,UAAU,EAAE;QAClC,oBAAoB;QACpB,SAAS,CAAC,MAAM,EAAE;QAClB,MAAM,IAAI,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QAC/B,MAAM,aAAa,GAAG,SAAS,CAAC,MAAM,EAAE;QACxC,MAAM,WAAW,GAAG,SAAS,CAAC,MAAM,EAAE;QACtC,oBAAoB;QACpB,SAAS,CAAC,MAAM,EAAE;QAElB,IAAI,aAAa,EAAE,CAAC;YAClB,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QACpB,CAAC;QAED,MAAM,IAAI,GAAG,WAAW,CAAC,CAAC,CAAC,mDAAgB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,GAAG,aAAa;QAE1F,MAAM,UAAU,GAAG,SAAS,CAAC,UAAU,EAAE,GAAG,GAAG;QAE/C,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,GAAG,UAAU,GAAG,IAAI,CAAC,CAAC;QAExD,SAAS,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;IAC1B,CAAC;IAED,OAAO,IAAI;AACb,CAAC;AAEM,SAAS,iBAAiB,CAAC,QAAoC,EAAE,MAA2B;IACjG,MAAM,SAAS,GAAG,IAAI,2DAAS,CAAC,CAAC,CAAC;IAClC,SAAS;IACT,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC;IACpB,UAAU;IACV,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;IAEtB,MAAM,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;QAC9C,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAAC,oCAA4B;IAC/D,CAAC,CAAC;IAEF,IAAI,MAAM,EAAE,CAAC;QACX,MAAM,MAAM,GAAG,mBAAmB,CAAC,MAAM,CAAC;QAC1C,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,OAAO,CAAC;QACnC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC;QACjC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,IAAI,CAAC;QAChC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAChD,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,QAAQ,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACnD,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,UAAU,CAAC;QACtC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,YAAY,CAAC;QACxC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,YAAY,CAAC;QACxC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,oBAAoB,CAAC;IAClD,CAAC;SACI,CAAC;QACJ,MAAM,IAAI,GAAG,kFAA0B,CAAC,2EAAQ,MAAwB,CAAC;QACzE,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,2EAAQ,OAAS;QACrC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,2EAAQ,OAAO;QACnC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;QACtB,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACnD,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtD,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;QACtB,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;QACtB,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;QACtB,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;IACxB,CAAC;IACD,UAAU;IACV,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;IACtB,SAAS,CAAC,OAAO,EAAE;IACnB,OAAO,SAAS,CAAC,SAAS,EAAE;AAC9B,CAAC;;;;;;;;;;;;;;;;;;;;;AC9eD;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AAE8C;AAsB1C,MAAM,oBAAoB,GAAG,EAAE;AAC/B,MAAM,iBAAiB,GAAG,CAAC;AAC3B,MAAM,kBAAkB,GAAG,EAAE;AAC7B,MAAM,kBAAkB,GAAG,KAAK;AAChC,MAAM,mBAAmB,GAAG,EAAE;AAE9B,MAAM,eAAe,GAAa,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;AAE/D,MAAM,eAAe,GAAa;IACvC,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK;IAC5C,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK;IACjC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;CACX;AAEM,MAAM,cAAc,GAAa;IACtC,CAAC,EAAE,GAAG;;;;;IAA0C,CAAC,EAAE,CAAC;;;;;;;;;CAErD;AAoBM,SAAS,sBAAsB,CAAC,MAAc,EAAE,SAA+B;IACpF,IAAI,CAAC,SAAS,IAAI,MAAM,CAAC,QAAQ,wDAAgD,EAAE,CAAC;QAClF,SAAS,GAAG,MAAM,CAAC,QAAQ,wDAAgD;IAC7E,CAAC;IACD,IAAI,SAAS,IAAI,SAAS,CAAC,MAAM,KAAK,oBAAoB,EAAE,CAAC;QAC3D,MAAM,EAAE,gBAAgB,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,oBAAoB,CAAC,SAAS,CAAC;QAClF,MAAM,CAAC,QAAQ,CAAC,gBAAgB,GAAG,gBAAgB;QACnD,MAAM,CAAC,QAAQ,CAAC,UAAU,GAAG,UAAU;QACvC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,GAAG,QAAQ;IAChD,CAAC;AACH,CAAC;AAED,SAAS,oBAAoB,CAAC,SAA8B;IAC1D,MAAM,YAAY,GAAG,IAAI,8DAAY,CAAC,SAAS,CAAC;IAChD,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC;IACrB,MAAM,KAAK,GAAG,YAAY,CAAC,UAAU,EAAE;IACvC,MAAM,UAAU,GAAG,CAAC,KAAK,IAAI,CAAC,CAAC;IAC/B,MAAM,QAAQ,GAAG,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC;IAC3C,MAAM,YAAY,GAAG,YAAY,CAAC,SAAS,EAAE;IAC7C,OAAO;QACL,UAAU;QACV,QAAQ;QACR,gBAAgB,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC;KAC9E;AACH,CAAC;;;;;;;;;;;;;;;;;;;;AC5GD;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AAK8C;AACA;AACJ;AAGtC,MAAM,SAAS,GAAG;IACvB,aAAa;IACb,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI;IACpB,aAAa;IACb,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI;IACpB,aAAa;IACb,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI;IACpB,gBAAgB;IAChB,GAAG,EAAE,GAAG;IACR,eAAe;IACf,GAAG,EAAE,GAAG;IACR,aAAa;IACb,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IAClB,aAAa;IACb,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IAClB,aAAa;IACb,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IAClB,aAAa;IACb,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;CACnB;AAGM,SAAS,gBAAgB,CAAC,MAAkB;IACjD,IAAI,GAAG,GAAG,CAAC,EAAE,aAAa,GAAG,CAAC,EAAE,OAAO,GAAG,CAAC;IAE3C,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;QACtB,OAAO,CAAC;IACV,CAAC;IAED,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC;IAEf,aAAa,GAAG,SAAS,CAAC,GAAG,IAAI,CAAC,CAAC;IAEnC,QAAQ,GAAG,GAAG,CAAC,EAAE,CAAC;QAChB,KAAK,CAAC;YACJ,OAAO,GAAG,CAAC;YACX,MAAK;QACP,KAAK,CAAC;YACJ,OAAO,GAAG,CAAC;YACX,MAAK;QACP,KAAK,CAAC;YACJ,OAAO,GAAG,CAAC;YACX,MAAK;QACP,KAAK,CAAC;YACJ,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBACtB,OAAO,CAAC;YACV,CAAC;YACD,OAAO,GAAG,MAAM,CAAC,CAAC,CAAC,GAAG,EAAE;YACxB,MAAK;IACT,CAAC;IACD,OAAO,OAAO,GAAG,aAAa;AAChC,CAAC;AAED;;;;;;;;;;;;;;;GAeG;AACI,SAAS,sBAAsB,CAAC,MAAgB,EAAE,SAA+B;IACtF,IAAI,CAAC,SAAS,IAAI,MAAM,CAAC,QAAQ,wDAAgD,EAAE,CAAC;QAClF,SAAS,GAAG,MAAM,CAAC,QAAQ,wDAAgD;IAC7E,CAAC;IACD,IAAI,SAAS,IAAI,SAAS,CAAC,MAAM,IAAI,EAAE,EAAE,CAAC;QACxC,MAAM,MAAM,GAAG,IAAI,8DAAY,CAAC,SAAS,EAAE,KAAK,CAAC;QACjD,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QACd,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,GAAG,MAAM,CAAC,SAAS,EAAE;QACxD,MAAM,CAAC,QAAQ,CAAC,cAAc,GAAG,MAAM,CAAC,UAAU,EAAE;QACpD,MAAM,CAAC,QAAQ,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,EAAE;QAEhD,MAAM,CAAC,QAAQ,CAAC,WAAW,GAAG,MAAM,CAAC,0DAAU,aAE7C;YACE,GAAG,EAAE,IAAI;YACT,GAAG,EAAE,CAAC;SACP,EACD;YACE,GAAG,EAAE,KAAK;YACV,GAAG,EAAE,CAAC;SACP,CACF,CAAC;IACJ,CAAC;AACH,CAAC;AAEM,SAAS,2BAA2B,CAAC,QAA2B;IACrE,MAAM,SAAS,GAAG,IAAI,UAAU,CAAC,EAAE,CAAC;IAEpC,MAAM,MAAM,GAAG,IAAI,8DAAY,CAAC,SAAS,EAAE,KAAK,CAAC;IAEjD,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC;IAC9B,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC;IACvB,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,CAAC;IAC/C,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,cAAc,CAAC;IAC3C,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,UAAU,CAAC;IAEvC,OAAO,SAAS;AAClB,CAAC;;;;;;;;;;;;;;;;;;;AC/G0C;AAGpC,SAAS,sBAAsB,CAAC,MAAgB,EAAE,SAA+B;IACtF,IAAI,CAAC,SAAS,IAAI,MAAM,CAAC,QAAQ,wDAAgD,EAAE,CAAC;QAClF,SAAS,GAAG,MAAM,CAAC,QAAQ,wDAAgD;IAC7E,CAAC;IACD,IAAI,SAAS,IAAI,SAAS,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC;QACvC,MAAM,MAAM,GAAG,cAAc,CAAC,SAAS,CAAC;QACxC,MAAM,CAAC,QAAQ,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO;QACxC,MAAM,CAAC,QAAQ,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK;IACtC,CAAC;AACH,CAAC;AAED;;;;;;;;;;;GAWG;AACI,SAAS,cAAc,CAAC,SAA8B;IAC3D,MAAM,SAAS,GAAG,IAAI,2DAAS,CAAC,SAAS,CAAC,MAAM,CAAC;IACjD,SAAS,CAAC,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;IAC7C,MAAM,OAAO,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IAClC,MAAM,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IAChC,IAAI,QAAQ,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IACjC,MAAM,iBAAiB,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IAC5C,MAAM,aAAa,GAAG,SAAS,CAAC,MAAM,EAAE;IACxC,MAAM,cAAc,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IACzC,MAAM,QAAQ,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IACnC,MAAM,UAAU,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IAErC,OAAO;QACL,OAAO;QACP,KAAK;QACL,QAAQ;QACR,iBAAiB;QACjB,aAAa;QACb,cAAc;QACd,QAAQ;QACR,UAAU;KACX;AACH,CAAC;AAEM,SAAS,KAAK,CAAC,QAA2B;IAC/C,MAAM,KAAK,GAAG,qIAAS,QAAQ,OAAM;IACrC,OAAO,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC;AACvB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrD0C;AAEF;AAC4B;AAC7B;AAES;AAU1C,MAAM,eAAe,GAA+B;IACzD,6BAAqB,EAAE,UAAU;IACjC,6BAAqB,EAAE,UAAU;IACjC,6BAAqB,EAAE,UAAU;IACjC,6BAAqB,EAAE,UAAU;CAClC;AAEM,MAAM,iBAAiB,GAAG;IAC/B,EAAE,KAAK,EAAE,EAAE,EAAE,aAAa,QAAW,EAAE,YAAY,EAAE,EAAE,EAAE;IACzD,EAAE,KAAK,EAAE,EAAE,EAAE,aAAa,QAAW,EAAE,YAAY,EAAE,EAAE,EAAE;IACzD,EAAE,KAAK,EAAE,EAAE,EAAE,aAAa,QAAW,EAAE,YAAY,EAAE,EAAE,EAAE;IACzD,EAAE,KAAK,EAAE,EAAE,EAAE,aAAa,QAAW,EAAE,YAAY,EAAE,EAAE,EAAE;IACzD,EAAE,KAAK,EAAE,EAAE,EAAE,aAAa,SAAa,EAAE,YAAY,EAAE,EAAE,EAAE;IAC3D,EAAE,KAAK,EAAE,EAAE,EAAE,aAAa,SAAa,EAAE,YAAY,EAAE,EAAE,EAAE;IAC3D,EAAE,KAAK,EAAE,EAAE,EAAE,aAAa,SAAa,EAAE,YAAY,EAAE,EAAE,EAAE;IAC3D,EAAE,KAAK,EAAE,EAAE,EAAE,aAAa,SAAa,EAAE,YAAY,EAAE,EAAE,EAAE;IAC3D,EAAE,KAAK,EAAE,EAAE,EAAE,aAAa,SAAa,EAAE,YAAY,EAAE,EAAE,EAAE;IAC3D,EAAE,KAAK,EAAE,EAAE,EAAE,aAAa,SAAa,EAAE,YAAY,EAAE,EAAE,EAAE;IAC3D,EAAE,KAAK,EAAE,EAAE,EAAE,aAAa,SAAa,EAAE,YAAY,EAAE,EAAE,EAAE;IAC3D,EAAE,KAAK,EAAE,EAAE,EAAE,aAAa,SAAa,EAAE,YAAY,EAAE,EAAE,EAAE;IAC3D,EAAE,KAAK,EAAE,EAAE,EAAE,aAAa,UAAa,EAAE,YAAY,EAAE,EAAE,EAAE;IAC3D,EAAE,KAAK,EAAE,EAAE,EAAE,aAAa,UAAa,EAAE,YAAY,EAAE,EAAE,EAAE;CAC5D;AAEM,SAAS,oBAAoB,CAAC,KAAa,EAAE,MAAc,EAAE,GAAW;IAC7E,MAAM,UAAU,GAAG,KAAK,GAAG,MAAM;IACjC,KAAK,MAAM,KAAK,IAAI,iBAAiB,EAAE,CAAC;QACtC,IAAI,UAAU,IAAI,KAAK,CAAC,aAAa,IAAI,GAAG,IAAI,KAAK,CAAC,YAAY,EAAE,CAAC;YACnE,OAAO,KAAK,CAAC,KAAK;QACpB,CAAC;IACH,CAAC;AACH,CAAC;AAEM,SAAS,sBAAsB,CAAC,MAAgB,EAAE,SAA+B;IACtF,IAAI,CAAC,SAAS,IAAI,MAAM,CAAC,QAAQ,wDAAgD,EAAE,CAAC;QAClF,SAAS,GAAG,MAAM,CAAC,QAAQ,wDAAgD;IAC7E,CAAC;IACD,IAAI,SAAS,IAAI,SAAS,CAAC,MAAM,IAAI,CAAC,EAAE,CAAC;QACvC,MAAM,MAAM,GAAG,cAAc,CAAC,SAAS,CAAC;QACxC,MAAM,CAAC,QAAQ,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO;QACxC,MAAM,CAAC,QAAQ,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK;IACtC,CAAC;AACH,CAAC;AAED;;;;;;;;;;;GAWG;AACI,SAAS,cAAc,CAAC,SAA8B;IAC3D,MAAM,SAAS,GAAG,IAAI,2DAAS,CAAC,SAAS,CAAC,MAAM,CAAC;IACjD,SAAS,CAAC,YAAY,CAAC,SAAS,CAAC;IACjC,MAAM,OAAO,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IAClC,MAAM,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IAChC,IAAI,QAAQ,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IACjC,MAAM,iBAAiB,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IAC5C,MAAM,aAAa,GAAG,SAAS,CAAC,MAAM,EAAE;IACxC,MAAM,cAAc,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IACzC,MAAM,QAAQ,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IACnC,MAAM,UAAU,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IAErC,OAAO;QACL,OAAO;QACP,KAAK;QACL,QAAQ;QACR,iBAAiB;QACjB,aAAa;QACb,cAAc;QACd,QAAQ;QACR,UAAU;KACX;AACH,CAAC;AASD,SAAS,cAAc,CAAC,QAAoC;IAC1D,IAAI,OAAO,GAAG,2EAAQ,MAAQ;IAC9B,IAAI,KAAK,GAAG,2EAAQ,MAAM;IAC1B,IAAI,KAAK,KAAK,kDAAW,EAAE,CAAC;QAC1B,KAAK,GAAG,oBAAoB,CAAC,2EAAQ,2EAAQ,QAAQ,QAAS,qDAAK,CAAC,2EAAQ,+DAAW,CAAC;IAC1F,CAAC;IACD,MAAM,IAAI,GAAG,kFAA0B,CAAC,2EAAQ,MAAwB,CAAC;IAEzE,IAAI,QAAQ,GAAG,2EAAQ,MAAmB;IAC1C,IAAI,iBAAiB,0EAAkE;IACvF,IAAI,IAAI,EAAE,CAAC;QACT,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,KAAK;QAC7B,IAAI,IAAI,CAAC,WAAW,KAAK,CAAC,IAAI,IAAI,CAAC,WAAW,KAAK,CAAC,EAAE,CAAC;YACrD,IAAI,2EAAQ,sDAAsD,EAAE,CAAC;gBACnE,iBAAiB,+DAAsD;YACzE,CAAC;QACH,CAAC;aACI,IAAI,IAAI,CAAC,WAAW,KAAK,CAAC,IAAI,IAAI,CAAC,WAAW,KAAK,CAAC,EAAE,CAAC;YAC1D,iBAAiB,sDAA6C;QAChE,CAAC;aACI,IAAI,IAAI,CAAC,WAAW,KAAK,CAAC,IAAI,IAAI,CAAC,WAAW,KAAK,CAAC,EAAE,CAAC;YAC1D,iBAAiB,sDAA6C;QAChE,CAAC;IACH,CAAC;IACD,MAAM,SAAS,GAAG,2EAAQ,gDAA6C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAE/E,IAAI,OAAO,KAAK,kDAAW,IAAI,QAAQ,EAAE,CAAC;QACxC,IAAI,iBAAiB,+DAAuD;eACvE,iBAAiB,2EAAmE,EACvF,CAAC;YACD,OAAO,GAAG,CAAC,QAAQ,IAAI,CAAC,CAAC,CAAC,CAAC,6BAAqB,CAAC,4BAAoB;QACvE,CAAC;aACI,CAAC;YACJ,OAAO,GAAG,CAAC,QAAQ,IAAI,CAAC,CAAC,CAAC,CAAC,6BAAqB,CAAC,4BAAoB;QACvE,CAAC;IACH,CAAC;IACD,OAAO;QACL,OAAO;QACP,KAAK;QACL,QAAQ;QACR,iBAAiB;QACjB,SAAS;KACV;AACH,CAAC;AAEM,SAAS,iBAAiB,CAAC,QAAoC;IACpE,MAAM,QAAQ,GAAG,IAAI,8DAAY,CAAC,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC;IACpD,MAAM,IAAI,GAAG,cAAc,CAAC,QAAQ,CAAC;IACrC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC;IACjC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC;IAC/B,QAAQ,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,iBAAiB,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC;IAC1F,QAAQ,CAAC,UAAU,CAAC,2EAAQ,OAAgB;IAC5C,QAAQ,CAAC,UAAU,CAAC,2EAAQ,OAAU;IACtC,QAAQ,CAAC,UAAU,CAAC,2EAAQ,OAAY;IACxC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;IACvB,OAAO,QAAQ,CAAC,cAAc,EAAE;AAClC,CAAC;AAEM,SAAS,KAAK,CAAC,QAA2B;IAC/C,MAAM,KAAK,GAAG,qIAAS,QAAQ,OAAM;IAErC,MAAM,OAAO,GAAG,CAAC,KAAK,KAAK,CAAC,CAAC,GAAG,IAAI;IACpC,MAAM,IAAI,GAAG,CAAC,KAAK,KAAK,CAAC,CAAC,GAAG,IAAI;IACjC,MAAM,OAAO,GAAG,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,OAAO;IAErC,MAAM,iBAAiB,GAAG,CAAC,KAAK,KAAK,CAAC,OAAO,gCAAwB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI;IAEtF,IAAI,iBAAiB,EAAE,CAAC;QACtB,OAAO,KAAK;IACd,CAAC;IAED,OAAO,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,OAAO,gCAAwB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;AACxE,CAAC;;;;;;;;;;;;;;;AC3MD;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AAEI,MAAM,cAAc,GAAG,IAAI;AAC3B,MAAM,eAAe,GAAG,GAAG;AAC3B,MAAM,mBAAmB,GAAG,CAAC;;;;;;;;;;;;;;;;;AC3BpC;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AAII,SAAS,CAAC,CAAC,SAAoB,EAAE,CAAS;IAC/C,IAAI,CAAC,GAAG,CAAC;IACT,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAG,CAAC;QAC5B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE;IAChC,CAAC;IACD,OAAO,CAAC;AACV,CAAC;AAEM,SAAS,IAAI,CAAC,SAAoB;IACvC,IAAI,YAAY,GAAG,CAAC;IACpB,OAAO,IAAI,EAAE,CAAC;QACZ,IAAI,IAAI,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC;QAC1B,IAAI,IAAI,EAAE,CAAC;YACT,MAAK;QACP,CAAC;QACD,YAAY,EAAE;IAChB,CAAC;IACD,IAAI,YAAY,IAAI,EAAE,EAAE,CAAC;QACvB,OAAO,GAAS,GAAG,CAAC;IACtB,CAAC;IACD,MAAM,KAAK,GAAG,CAAC,CAAC,SAAS,EAAE,YAAY,CAAC;IACxC,OAAO,KAAK,GAAG,CAAC,CAAC,IAAI,YAAY,CAAC,GAAG,CAAC;AACxC,CAAC;AAEM,SAAS,EAAE,CAAC,SAAoB,EAAE,CAAS;IAChD,IAAI,CAAC,GAAG,CAAC;IACT,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;QAC3B,IAAI,IAAI,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC;QAC1B,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IACxB,CAAC;IACD,OAAO,CAAC;AACV,CAAC;AAEM,SAAS,MAAM,CAAC,SAAoB;IACzC,IAAI,KAAK,GAAG,CAAC;IACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAG,CAAC;QAC5B,IAAI,IAAI,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC;QAC1B,KAAK,IAAI,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;QACnC,IAAI,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC;YACnB,MAAK;QACP,CAAC;IACH,CAAC;IACD,OAAO,KAAK;AACd,CAAC;AAEM,SAAS,EAAE,CAAC,SAAoB,EAAE,CAAS;IAChD,IAAI,KAAK,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC;IAC3B,IAAI,QAAQ,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC;IAC3B,IAAI,KAAK,GAAG,QAAQ,EAAE,CAAC;QACrB,KAAK,GAAG,KAAK,GAAG,CAAC,GAAG,QAAQ;IAC9B,CAAC;IACD,OAAO,KAAK;AACd,CAAC;AAEM,SAAS,EAAE,CAAC,SAAoB,EAAE,CAAS;IAChD,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IACpC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC;IACpB,IAAI,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC,GAAG,CAAC,CAAC;IAC3B,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;QACV,OAAO,CAAC;IACV,CAAC;IACD,IAAI,QAAQ,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC;IAC9B,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,QAAQ;AAChC,CAAC;AAEM,SAAS,CAAC,CAAC,SAAoB,EAAE,CAAS;IAC/C,IAAI,CAAC,GAAG,CAAC;IACT,KAAK,IAAI,CAAC,GAAG,CAAC,EAAG,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAG,CAAC;QAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE;IAChC,CAAC;IACD,OAAO,CAAC;AACV,CAAC;AAEM,SAAS,EAAE,CAAC,SAAoB,EAAE,CAAS;IAChD,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;IACpC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC;IACpB,IAAI,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC,GAAG,CAAC,CAAC;IAC3B,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;QACV,OAAO,CAAC;IACV,CAAC;IACD,IAAI,QAAQ,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC,CAAC;IAC9B,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,GAAG,QAAQ;AAChC,CAAC;;;;;;;;;;;;;;;;AC7GD;;;;;;;;;;;;;;;;;;;;;;;GAuBG;AAII,SAAS,aAAa,CAAC,GAAU,EAAE,GAAY,EAAE,EAAW,EAAE,KAAY;IAC/E,IAAI,GAAG,IAAI,CAAC,IAAI,GAAG,GAAG,EAAE,EAAE,CAAC;QACzB,0CAAiC;IACnC,CAAC;IAED,IAAI,GAAG,EAAE,CAAC;QACR,QAAQ,GAAG,EAAE,CAAC;YACZ,KAAK,EAAE;gBACL,OAAO,EAAE,CAAC,CAAC,6CAAiC,CAAC,4CAAgC;YAC/E,KAAK,EAAE;gBACL,OAAO,EAAE,CAAC,CAAC,6CAAiC,CAAC,4CAAgC;YAC/E;gBACE,0CAAiC;QACrC,CAAC;IACH,CAAC;SACI,CAAC;QACJ,GAAG,IAAI,CAAC;QACR,GAAG,MAAM,CAAC;QAEV,IAAI,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;YAC7B,QAAQ,GAAG,EAAE,CAAC;gBACZ,KAAK,CAAC;oBACJ,gDAAmC;gBACrC,KAAK,CAAC;oBACJ,OAAO,EAAE,CAAC,CAAC,6CAAiC,CAAC,4CAAgC;gBAC/E,KAAK,CAAC;oBACJ,OAAO,EAAE,CAAC,CAAC,6CAAiC,CAAC,4CAAgC;gBAC/E,KAAK,CAAC;oBACJ,OAAO,EAAE,CAAC,CAAC,6CAAiC,CAAC,4CAAgC;gBAC/E,KAAK,CAAC;oBACJ,OAAO,EAAE,CAAC,CAAC,6CAAiC,CAAC,4CAAgC;gBAC/E;oBACE,0CAAiC;YACrC,CAAC;QACH,CAAC;aACI,CAAC;YACJ,QAAQ,GAAG,EAAE,CAAC;gBACZ,KAAK,CAAC;oBACJ,gDAAmC;gBACrC,KAAK,CAAC;oBACJ,OAAO,EAAE,CAAC,CAAC,6CAAiC,CAAC,4CAAgC;gBAC/E,KAAK,CAAC;oBACJ,OAAO,EAAE,CAAC,CAAC,6CAAiC,CAAC,4CAAgC;gBAC/E,KAAK,CAAC;oBACJ,OAAO,EAAE,CAAC,CAAC,6CAAiC,CAAC,4CAAgC;gBAC/E;oBACE,0CAAiC;YACrC,CAAC;QACH,CAAC;IACH,CAAC;AACH,CAAC;AAEM,SAAS,qBAAqB,CAAC,OAAkB;IACtD,QAAQ,OAAO,EAAE,CAAC;QAChB,gDAAoC;QACpC,gDAAoC;QACpC,kDAAsC;QACtC,gDAAoC;QACpC,qDAAyC;QACzC,qDAAyC;QACzC,qDAAyC;QACzC,qDAAyC;QACzC,yDAA6C;QAC7C,qDAAyC;QACzC,oDAAwC;QACxC,qDAAyC;QACzC,kDAAsC;QACtC,oDAAwC;QACxC;YACE,OAAO,CAAC;QACV,gDAAoC;QACpC,gDAAoC;QACpC,uDAA2C;QAC3C,uDAA2C;QAC3C,gDAAoC;QACpC,iDAAqC;QACrC,gDAAoC;QACpC,8CAAkC;QAClC,qDAAyC;QACzC,+CAAmC;QACnC,8CAAkC;QAClC,iDAAqC;QACrC;YACE,OAAO,CAAC;QACV,iDAAqC;QACrC,wDAA4C;QAC5C,iDAAqC;QACrC,wDAA4C;QAC5C,iDAAqC;QACrC;YACE,OAAO,EAAE;QACX,mDAAuC;QACvC,iDAAqC;QACrC,iDAAqC;QACrC,wDAA4C;QAC5C,iDAAqC;QACrC;YACE,OAAO,EAAE;QACX,iDAAqC;QACrC,iDAAqC;QACrC,wDAA4C;QAC5C,iDAAqC;QACrC,iDAAqC;QACrC,iDAAqC;QACrC,iDAAqC;QACrC,iDAAqC;QACrC;YACE,OAAO,EAAE;QACX,iDAAqC;QACrC,iDAAqC;QACrC,iDAAqC;QACrC;YACE,OAAO,EAAE;QACX;YACE,OAAO,CAAC;IACZ,CAAC;AACH,CAAC;AAEM,SAAS,gBAAgB,CAAC,OAAkB;IACjD,QAAQ,OAAO,EAAE,CAAC;QAChB;YACE,OAAO,CAAC;QACV;YACE,OAAO,CAAC;QACV,qDAAyC;QACzC,qDAAyC;QACzC,oDAAwC;QACxC,iDAAqC;QACrC;YACE,OAAO,CAAC;QACV;YACE,OAAO,qBAAqB,CAAC,OAAO,CAAC;IACzC,CAAC;AACH,CAAC","sources":["webpack://AVPlayer/./src/avformat/formats/IAviFormat.ts","webpack://AVPlayer/./src/avformat/formats/IFormat.ts","webpack://AVPlayer/./src/avformat/formats/riff/iriff.ts","webpack://AVPlayer/./src/avformat/formats/riff/riff.ts","webpack://AVPlayer/./src/avformat/function/mktagle.ts","webpack://AVPlayer/./src/avutil/codecs/aac.ts","webpack://AVPlayer/./src/avutil/codecs/av1.ts","webpack://AVPlayer/./src/avutil/codecs/flac.ts","webpack://AVPlayer/./src/avutil/codecs/opus.ts","webpack://AVPlayer/./src/avutil/codecs/vp8.ts","webpack://AVPlayer/./src/avutil/codecs/vp9.ts","webpack://AVPlayer/./src/avutil/pixfmt.ts","webpack://AVPlayer/./src/avutil/util/av1syntax.ts","webpack://AVPlayer/./src/avutil/util/pcm.ts"],"sourcesContent":["/*\r\n * libmedia avi decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVStream from 'avutil/AVStream'\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVPacket, { AVPacketFlags } from 'avutil/struct/avpacket'\r\nimport { AVCodecID, AVMediaType, AVPacketSideDataType } from 'avutil/codec'\r\nimport * as logger from 'common/util/logger'\r\nimport * as errorType from 'avutil/error'\r\nimport IFormat from './IFormat'\r\nimport { AVFormat, AVSeekFlags, IOFlags } from 'avutil/avformat'\r\nimport { mapSafeUint8Array, mapUint8Array, memcpyFromUint8Array, readCString } from 'cheap/std/memory'\r\nimport { avFree, avMalloc } from 'avutil/util/mem'\r\nimport { addAVPacketData, addAVPacketSideData } from 'avutil/util/avpacket'\r\nimport { IOError } from 'common/io/error'\r\nimport { readInfo, readBmpHeader, readWavHeader } from './riff/iriff'\r\nimport { AV_TIME_BASE_Q, INT32_MAX, INT64_MAX, NOPTS_VALUE, NOPTS_VALUE_BIGINT } from 'avutil/constant'\r\nimport concatTypeArray from 'common/function/concatTypeArray'\r\nimport * as is from 'common/util/is'\r\nimport mktagle from 'avformat/function/mktagle'\r\nimport { AVFIndexFlags, AVIFlags, AVIMainHeader, AVISample, AVIStreamContext } from './avi/type'\r\nimport { avReduce, avRescaleQ } from 'avutil/util/rational'\r\nimport * as intread from 'avutil/util/intread'\r\nimport { codecBmpTags } from './riff/riff'\r\nimport * as naluUtil from 'avutil/util/nalu'\r\nimport * as bigint from 'common/util/bigint'\r\nimport * as array from 'common/util/array'\r\nimport * as object from 'common/util/object'\r\n\r\nimport * as h264 from 'avutil/codecs/h264'\r\nimport * as aac from 'avutil/codecs/aac'\r\nimport * as hevc from 'avutil/codecs/hevc'\r\nimport * as vvc from 'avutil/codecs/vvc'\r\nimport * as av1 from 'avutil/codecs/av1'\r\nimport * as vp9 from 'avutil/codecs/vp9'\r\nimport * as vp8 from 'avutil/codecs/vp8'\r\nimport * as flac from 'avutil/codecs/flac'\r\nimport * as opus from 'avutil/codecs/opus'\r\nimport { AVPALETTE_SIZE } from 'avutil/pixfmt'\r\nimport { MPEG4AudioObjectTypes } from 'avutil/codecs/aac'\r\nimport { AVCodecParameterFlags } from 'avutil/struct/avcodecparameters'\r\n\r\nconst AVI_HEADER = [\r\n  ['R', 'I', 'F', 'F', 'A', 'V', 'I', ' '],\r\n  ['R', 'I', 'F', 'F', 'A', 'V', 'I', 'X'],\r\n  ['R', 'I', 'F', 'F', 'A', 'V', 'I', 0x19],\r\n  ['O', 'N', '2', ' ', 'O', 'N', '2', 'f'],\r\n  ['R', 'I', 'F', 'F', 'A', 'M', 'V', ' ']\r\n]\r\n\r\ninterface AVIContext {\r\n  riffEndPos: int64\r\n  ioFileSize: int64\r\n  fileSize: int64\r\n  moviList: int64\r\n  moviEnd: int64\r\n  isOdml: boolean\r\n  header: AVIMainHeader\r\n  dvDemux: any\r\n  lastPktPos: int64\r\n\r\n  currentIndex: number\r\n  remaining: number\r\n  packetSize: number\r\n\r\n  odmlRead: int64\r\n  odmlMaxPos: int64\r\n  nonInterleaved: boolean\r\n  hasVideoKey: boolean\r\n  indexLoaded: boolean\r\n}\r\n\r\nexport interface IAviFormatOptions {\r\n  useOdml?: boolean\r\n}\r\n\r\nconst DefaultIAviFormatOptions: IAviFormatOptions = {\r\n  useOdml: true\r\n}\r\nexport default class IAviFormat extends IFormat {\r\n\r\n  public type: AVFormat = AVFormat.AVI\r\n\r\n  private context: AVIContext\r\n\r\n  private options: IAviFormatOptions\r\n\r\n  constructor(options: IAviFormatOptions = {}) {\r\n    super()\r\n    this.options = object.extend(DefaultIAviFormatOptions, options)\r\n  }\r\n\r\n  public init(formatContext: AVIFormatContext): void {\r\n    formatContext.ioReader.setEndian(false)\r\n    this.context = {\r\n      riffEndPos: NOPTS_VALUE_BIGINT,\r\n      fileSize: NOPTS_VALUE_BIGINT,\r\n      moviList: NOPTS_VALUE_BIGINT,\r\n      moviEnd: NOPTS_VALUE_BIGINT,\r\n      isOdml: false,\r\n      header: {} as AVIMainHeader,\r\n      dvDemux: false,\r\n      lastPktPos: 0n,\r\n      ioFileSize: 0n,\r\n\r\n      currentIndex: -1,\r\n      packetSize: 0,\r\n      remaining: 0,\r\n\r\n      odmlRead: 0n,\r\n      odmlMaxPos: 0n,\r\n      nonInterleaved: false,\r\n      hasVideoKey: false,\r\n      indexLoaded: false\r\n    }\r\n    formatContext.privateData = this.context\r\n  }\r\n\r\n  private getStreamIndex(s: string) {\r\n    if (s[0] >= '0' && s[0] <= '9'\r\n      && s[1] >= '0' && s[0] <= '9'\r\n    ) {\r\n      return +s[0] * 10 + (+s[1])\r\n    }\r\n    return 100\r\n  }\r\n\r\n  private getDuration(context: AVIStreamContext, len: int32) {\r\n    if (context.dwSampleSize) {\r\n      return static_cast<int64>(len)\r\n    }\r\n    else if (context.dshowBlockAlign) {\r\n      return static_cast<int64>(Math.floor((len + context.dshowBlockAlign - 1) / context.dshowBlockAlign) as int32)\r\n    }\r\n    return 1n\r\n  }\r\n\r\n  public async readHeader(formatContext: AVIFormatContext): Promise<number> {\r\n    let header = await formatContext.ioReader.readBuffer(4)\r\n    this.context.riffEndPos = static_cast<int64>((await formatContext.ioReader.readUint32()) as uint32)\r\n    this.context.riffEndPos += formatContext.ioReader.getPos()\r\n    header = concatTypeArray(Uint8Array, [header, await formatContext.ioReader.readBuffer(4)])\r\n\r\n    let signature: (string | number)[]\r\n\r\n    for (let i = 0; i < AVI_HEADER.length; i++) {\r\n      const s = AVI_HEADER[i]\r\n      let j = 0\r\n      for (; j < s.length; j++) {\r\n        let code = s[j]\r\n        if (is.string(code)) {\r\n          code = code.charCodeAt(0)\r\n        }\r\n        if (code !== header[j]) {\r\n          break\r\n        }\r\n      }\r\n      if (j === s.length) {\r\n        signature = s\r\n        break\r\n      }\r\n    }\r\n\r\n    if (!signature) {\r\n      logger.error('the file format is not avi')\r\n      return errorType.DATA_INVALID\r\n    }\r\n    if (signature[7] === 0x19) {\r\n      logger.warn('This file has been generated by a totally broken muxer.')\r\n    }\r\n\r\n    this.context.ioFileSize = this.context.fileSize = await formatContext.ioReader.fileSize()\r\n    if (this.context.fileSize <= 0 || this.context.fileSize < this.context.riffEndPos) {\r\n      this.context.fileSize = this.context.riffEndPos === 8n ? INT64_MAX : this.context.riffEndPos\r\n    }\r\n\r\n    let moviGot = false\r\n    let listEnd = 0n\r\n    let subTag = ''\r\n    let amvFileFormat = false\r\n\r\n    try {\r\n      while (formatContext.ioReader.getPos() < this.context.fileSize && !moviGot) {\r\n        const tag = await formatContext.ioReader.readString(4)\r\n        let size = await formatContext.ioReader.readUint32()\r\n\r\n        switch (tag) {\r\n          case 'LIST': {\r\n            listEnd = formatContext.ioReader.getPos() + static_cast<int64>(size as uint32)\r\n            subTag = await formatContext.ioReader.readString(4)\r\n            if (subTag === 'movi') {\r\n              this.context.moviList = formatContext.ioReader.getPos() - 4n\r\n              if (size) {\r\n                this.context.moviEnd = this.context.moviList + static_cast<int64>(size as uint32) + (static_cast<int64>(size as uint32) & 1n)\r\n              }\r\n              else {\r\n                this.context.moviEnd = this.context.fileSize\r\n              }\r\n              moviGot = true\r\n            }\r\n            else if (subTag === 'INFO') {\r\n              await readInfo(formatContext.ioReader,  static_cast<int64>(size as uint32), formatContext.metadata)\r\n            }\r\n            else if (subTag === 'ncdt') {\r\n              logger.warn('ignore tag ncdt')\r\n            }\r\n            break\r\n          }\r\n          case 'IDIT': {\r\n            size += size & 1\r\n            const len = Math.min(size, 63)\r\n            formatContext.metadata['creation_time'] = await formatContext.ioReader.readString(len)\r\n            if (len < size) {\r\n              await formatContext.ioReader.skip(size - len)\r\n            }\r\n            break\r\n          }\r\n          case 'dmlh': {\r\n            this.context.isOdml = true\r\n            await formatContext.ioReader.skip(size + (size & 1))\r\n            break\r\n          }\r\n          case 'amvh':\r\n            amvFileFormat = true\r\n          case 'avih': {\r\n            this.context.header.dwMicroSecPerFrame = await formatContext.ioReader.readUint32()\r\n            this.context.header.dwMaxBytesPerSec = await formatContext.ioReader.readUint32()\r\n            this.context.header.dwPaddingGranularity = await formatContext.ioReader.readUint32()\r\n            this.context.header.dwFlages = await formatContext.ioReader.readUint32()\r\n            this.context.header.dwTotalFrame = await formatContext.ioReader.readUint32()\r\n            this.context.header.dwInitialFrames = await formatContext.ioReader.readUint32()\r\n            this.context.header.dwStreams = await formatContext.ioReader.readUint32()\r\n            this.context.header.dwSuggestedBufferSize = await formatContext.ioReader.readUint32()\r\n\r\n            this.context.header.dwWidth = await formatContext.ioReader.readUint32()\r\n            this.context.header.dwHeight = await formatContext.ioReader.readUint32()\r\n\r\n            if (this.context.header.dwFlages & AVIFlags.AVIF_MUSTUSEINDEX) {\r\n              this.context.nonInterleaved = true\r\n            }\r\n\r\n            await formatContext.ioReader.skip(size - 40)\r\n            break\r\n          }\r\n          case 'strh': {\r\n            const streamContext: AVIStreamContext = {\r\n              sampleEnd: false,\r\n              currentSample: 0\r\n            } as AVIStreamContext\r\n            streamContext.fccType = await formatContext.ioReader.readString(4)\r\n            streamContext.fccHandler = await formatContext.ioReader.readString(4)\r\n\r\n            if (streamContext.fccType === 'pads') {\r\n              await formatContext.ioReader.skip(size - 8)\r\n              break\r\n            }\r\n            const stream = formatContext.createStream()\r\n            stream.privData = streamContext\r\n            if (amvFileFormat) {\r\n              streamContext.fccType = stream.index ? 'auds' : 'vids'\r\n            }\r\n\r\n            if (streamContext.fccType === 'iavs' || streamContext.fccType === 'ivas') {\r\n              logger.error('dv format in avi not support now')\r\n              return errorType.FORMAT_NOT_SUPPORT\r\n            }\r\n\r\n            streamContext.dwFlags = await formatContext.ioReader.readUint32()\r\n            streamContext.wPriority = await formatContext.ioReader.readUint16()\r\n            streamContext.wLanguage = await formatContext.ioReader.readUint16()\r\n            streamContext.dwInitalFrames = await formatContext.ioReader.readUint32()\r\n\r\n            streamContext.dwScale = await formatContext.ioReader.readUint32()\r\n            streamContext.dwRate = await formatContext.ioReader.readUint32()\r\n\r\n            if (!(streamContext.dwScale && streamContext.dwRate)) {\r\n              if (this.context.header.dwMicroSecPerFrame) {\r\n                streamContext.dwRate = 1000000\r\n                streamContext.dwScale = this.context.header.dwMicroSecPerFrame\r\n              }\r\n              else {\r\n                streamContext.dwRate = 25\r\n                streamContext.dwScale = 1\r\n              }\r\n            }\r\n            stream.timeBase = {\r\n              num: streamContext.dwScale,\r\n              den: streamContext.dwRate\r\n            }\r\n            avReduce(stream.timeBase)\r\n\r\n            streamContext.dwStart = await formatContext.ioReader.readUint32()\r\n            streamContext.dwLength = await formatContext.ioReader.readUint32()\r\n            streamContext.dwSuggestedBufferSize = await formatContext.ioReader.readUint32()\r\n            streamContext.dwQuality = await formatContext.ioReader.readUint32()\r\n            streamContext.dwSampleSize = await formatContext.ioReader.readUint32()\r\n\r\n            stream.startTime = 0n\r\n            stream.duration = static_cast<int64>(streamContext.dwLength as uint32)\r\n            if (streamContext.dwStart > 3600 * streamContext.dwRate / streamContext.dwScale) {\r\n              logger.warn('crazy start time, iam scared, giving up')\r\n              streamContext.dwStart = 0\r\n            }\r\n            if (streamContext.dwSampleSize < 0) {\r\n              logger.error(`Invalid sample_size ${streamContext.dwSampleSize} at stream ${stream.index} setting it to 0`)\r\n              streamContext.dwSampleSize = 0\r\n            }\r\n            streamContext.dwStart *= Math.max(1, streamContext.dwSampleSize)\r\n\r\n            switch (streamContext.fccType) {\r\n              case 'vids': {\r\n                stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_VIDEO\r\n                streamContext.dwSampleSize = 0\r\n                break\r\n              }\r\n              case 'auds': {\r\n                stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_AUDIO\r\n                break\r\n              }\r\n              case 'txts': {\r\n                stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_SUBTITLE\r\n                break\r\n              }\r\n              case 'dats': {\r\n                stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_DATA\r\n                break\r\n              }\r\n              default:\r\n                logger.warn(`unknown stream type ${streamContext.fccType}`)\r\n                break\r\n            }\r\n            streamContext.currentDts = static_cast<int64>(streamContext.dwStart as int32)\r\n            await formatContext.ioReader.skip(size - 12 * 4)\r\n            break\r\n          }\r\n          case 'strf': {\r\n            const stream = formatContext.streams[formatContext.streams.length - 1]\r\n            if (!stream || this.context.dvDemux) {\r\n              await formatContext.ioReader.skip(size)\r\n              break\r\n            }\r\n            const streamContext = stream.privData as AVIStreamContext\r\n            if (!size && (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_AUDIO\r\n              || stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_VIDEO)\r\n            ) {\r\n              break\r\n            }\r\n            if (formatContext.ioReader.getPos() < listEnd) {\r\n              size = Math.min(size, static_cast<int32>(listEnd - formatContext.ioReader.getPos()))\r\n            }\r\n            switch (stream.codecpar.codecType) {\r\n              case AVMediaType.AVMEDIA_TYPE_VIDEO: {\r\n                if (amvFileFormat) {\r\n                  stream.codecpar.width = this.context.header.dwWidth || 0\r\n                  stream.codecpar.height = this.context.header.dwHeight || 0\r\n                  stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_AMV\r\n                  await formatContext.ioReader.skip(size)\r\n                  break\r\n                }\r\n                const esize = await readBmpHeader(formatContext.ioReader, stream)\r\n\r\n                if (stream.codecpar.codecTag === mktagle('DXSB')\r\n                  || stream.codecpar.codecTag === mktagle('DXSA')\r\n                ) {\r\n                  stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_SUBTITLE\r\n                  stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_XSUB\r\n                  break\r\n                }\r\n                if (size > 10 * 4 && size < (1 << 30) && size < this.context.fileSize) {\r\n                  if (esize === size - 1 && (esize & 1)) {\r\n                    stream.codecpar.extradataSize = esize - 10 * 4\r\n                  }\r\n                  else {\r\n                    stream.codecpar.extradataSize = size - 10 * 4\r\n                  }\r\n                  stream.codecpar.extradata = avMalloc(reinterpret_cast<size>(stream.codecpar.extradataSize))\r\n                  await formatContext.ioReader.readBuffer(\r\n                    stream.codecpar.extradataSize,\r\n                    mapSafeUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(stream.codecpar.extradataSize))\r\n                  )\r\n                }\r\n\r\n                if (stream.codecpar.extradataSize & 1) {\r\n                  await formatContext.ioReader.skip(1)\r\n                }\r\n                if (stream.codecpar.extradataSize && stream.codecpar.bitsPerCodedSample <= 8) {\r\n                  let palSize = (1 << stream.codecpar.bitsPerCodedSample) << 2\r\n                  let palSrc: pointer<uint8>\r\n                  palSize = Math.min(palSize, stream.codecpar.extradataSize)\r\n                  palSrc = reinterpret_cast<pointer<uint8>>(stream.codecpar.extradata + reinterpret_cast<size>(stream.codecpar.extradataSize - palSize))\r\n                  if (static_cast<uint32>((palSrc - stream.codecpar.extradata) as size) >= 9\r\n                    && readCString(\r\n                      reinterpret_cast<pointer<char>>(stream.codecpar.extradata + reinterpret_cast<size>(stream.codecpar.extradataSize - 9)),\r\n                      8\r\n                    ) === 'BottomUp'\r\n                  ) {\r\n                    palSrc = reinterpret_cast<pointer<uint8>>(palSrc - reinterpret_cast<size>(9))\r\n                  }\r\n                  streamContext.pal = new Uint32Array(256)\r\n                  for (let i = 0; i < palSize / 4; i++) {\r\n                    streamContext.pal[i] = 0xFF << 24 | intread.rl32(palSrc + reinterpret_cast<size>(4 * i))\r\n                  }\r\n                  streamContext.hasPal = true\r\n                }\r\n                stream.codecpar.codecId = codecBmpTags[stream.codecpar.codecTag]\r\n                break\r\n              }\r\n              case AVMediaType.AVMEDIA_TYPE_AUDIO: {\r\n                let ret = await readWavHeader(formatContext.ioReader, stream, size)\r\n                if (ret < 0) {\r\n                  return ret\r\n                }\r\n                streamContext.dshowBlockAlign = stream.codecpar.blockAlign\r\n                if (streamContext.dwSampleSize && stream.codecpar.blockAlign && streamContext.dwSampleSize !== stream.codecpar.blockAlign) {\r\n                  logger.warn(`sample size (${streamContext.dwSampleSize}) != block align (${stream.codecpar.blockAlign})`)\r\n                  streamContext.dwSampleSize = stream.codecpar.blockAlign\r\n                }\r\n                if (size & 1) {\r\n                  await formatContext.ioReader.skip(1)\r\n                }\r\n                if (streamContext.fccHandler === 'Axan') {\r\n                  stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_XAN_DPCM\r\n                  stream.codecpar.codecTag = 0\r\n                  streamContext.dshowBlockAlign = 0\r\n                }\r\n                if (amvFileFormat) {\r\n                  stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_ADPCM_IMA_AMV\r\n                  streamContext.dshowBlockAlign = 0\r\n                }\r\n                if ((stream.codecpar.codecId == AVCodecID.AV_CODEC_ID_AAC\r\n                  || stream.codecpar.codecId == AVCodecID.AV_CODEC_ID_FTR\r\n                  || stream.codecpar.codecId == AVCodecID.AV_CODEC_ID_FLAC\r\n                  || stream.codecpar.codecId == AVCodecID.AV_CODEC_ID_MP2 )\r\n                  && streamContext.dshowBlockAlign <= 4 && streamContext.dshowBlockAlign\r\n                ) {\r\n                  logger.debug(`overriding invalid dshow_block_align of ${streamContext.dshowBlockAlign}`)\r\n                  streamContext.dshowBlockAlign = 0\r\n                }\r\n                if (stream.codecpar.codecId == AVCodecID.AV_CODEC_ID_AAC && streamContext.dshowBlockAlign == 1024 && streamContext.dwSampleSize == 1024\r\n                  || stream.codecpar.codecId == AVCodecID.AV_CODEC_ID_AAC && streamContext.dshowBlockAlign == 4096 && streamContext.dwSampleSize == 4096\r\n                  || stream.codecpar.codecId == AVCodecID.AV_CODEC_ID_MP3 && streamContext.dshowBlockAlign == 1152 && streamContext.dwSampleSize == 1152\r\n                ) {\r\n                  logger.debug('overriding sample_size')\r\n                  streamContext.dwSampleSize = 0\r\n                }\r\n                break\r\n              }\r\n              case AVMediaType.AVMEDIA_TYPE_SUBTITLE: {\r\n                await formatContext.ioReader.skip(size)\r\n                break\r\n              }\r\n              default: {\r\n                stream.codecpar.codecType = AVMediaType.AVMEDIA_TYPE_DATA\r\n                stream.codecpar.codecId = AVCodecID.AV_CODEC_ID_NONE\r\n                stream.codecpar.codecTag = 0\r\n                await formatContext.ioReader.skip(size)\r\n                break\r\n              }\r\n            }\r\n            break\r\n          }\r\n          case 'strd': {\r\n            const stream = formatContext.streams[formatContext.streams.length - 1]\r\n            if (!stream || stream.codecpar.extradataSize || stream.codecpar.codecTag === mktagle('H264')) {\r\n              await formatContext.ioReader.skip(size)\r\n              break\r\n            }\r\n            if (formatContext.ioReader.getPos() < listEnd) {\r\n              size = Math.min(size, static_cast<double>(listEnd - formatContext.ioReader.getPos()))\r\n            }\r\n            if (stream.codecpar.extradata) {\r\n              avFree(stream.codecpar.extradata)\r\n            }\r\n            stream.codecpar.extradataSize = size\r\n            stream.codecpar.extradata = avMalloc(reinterpret_cast<size>(size as uint32))\r\n            await formatContext.ioReader.readBuffer(size, mapSafeUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(size as uint32)))\r\n            if (stream.codecpar.extradataSize & 1) {\r\n              await formatContext.ioReader.skip(1)\r\n            }\r\n            break\r\n          }\r\n          case 'indx': {\r\n            const pos = formatContext.ioReader.getPos()\r\n            if (formatContext.ioReader.flags & IOFlags.SEEKABLE && this.options.useOdml) {\r\n              const currentDts: Record<int32, int64> = {}\r\n              formatContext.streams.forEach((stream) => {\r\n                const streamContext = stream.privData as AVIStreamContext\r\n                currentDts[stream.index] = streamContext.currentDts\r\n              })\r\n              const ret = await this.readOdmlIndex(formatContext)\r\n              if (ret < 0) {\r\n                return ret\r\n              }\r\n              formatContext.streams.forEach((stream) => {\r\n                const streamContext = stream.privData as AVIStreamContext\r\n                streamContext.currentDts = currentDts[stream.index]\r\n              })\r\n            }\r\n            await formatContext.ioReader.seek(pos + static_cast<int64>(size as uint32))\r\n            break\r\n          }\r\n          default: {\r\n            if (size > 1000000) {\r\n              this.context.moviList = formatContext.ioReader.getPos() - 4n\r\n              this.context.moviEnd = this.context.fileSize\r\n              moviGot = true\r\n              break\r\n            }\r\n          }\r\n          case 'idx1': {\r\n            size += (size & 1)\r\n            await formatContext.ioReader.seek(formatContext.ioReader.getPos() + static_cast<int64>(size as uint32))\r\n            break\r\n          }\r\n        }\r\n      }\r\n\r\n      formatContext.streams.forEach((stream) => {\r\n        if (stream.codecpar.extradataSize) {\r\n          stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA] = mapUint8Array(\r\n            stream.codecpar.extradata,\r\n            reinterpret_cast<size>(stream.codecpar.extradataSize)\r\n          ).slice()\r\n\r\n          if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264) {\r\n            h264.parseAVCodecParameters(stream)\r\n          }\r\n          else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC) {\r\n            hevc.parseAVCodecParameters(stream)\r\n          }\r\n          else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC) {\r\n            vvc.parseAVCodecParameters(stream)\r\n          }\r\n          else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AV1) {\r\n            av1.parseAVCodecParameters(stream)\r\n          }\r\n          else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VP9) {\r\n            vp9.parseAVCodecParameters(stream)\r\n          }\r\n          else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VP8) {\r\n            vp8.parseAVCodecParameters(stream)\r\n          }\r\n          else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC) {\r\n            aac.parseAVCodecParameters(stream)\r\n          }\r\n          else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_FLAC) {\r\n            flac.parseAVCodecParameters(stream)\r\n          }\r\n          else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_OPUS) {\r\n            opus.parseAVCodecParameters(stream)\r\n          }\r\n\r\n          if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n            || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n            || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n          ) {\r\n            if (naluUtil.isAnnexb(stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA])) {\r\n              stream.codecpar.flags |= AVCodecParameterFlags.AV_CODECPAR_FLAG_H26X_ANNEXB\r\n            }\r\n          }\r\n        }\r\n        else if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC) {\r\n          const extradata = aac.avCodecParameters2Extradata(stream.codecpar)\r\n          const data: pointer<uint8> = avMalloc(reinterpret_cast<size>(extradata.length))\r\n          memcpyFromUint8Array(data, extradata.length, extradata)\r\n          stream.codecpar.extradata = data\r\n          stream.codecpar.extradataSize = extradata.length\r\n          if (stream.codecpar.profile === NOPTS_VALUE) {\r\n            stream.codecpar.profile = MPEG4AudioObjectTypes.AAC_LC\r\n          }\r\n        }\r\n\r\n        if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_H264\r\n          || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_HEVC\r\n          || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_VVC\r\n          || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MPEG2VIDEO\r\n          || stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_MPEG4\r\n        ) {\r\n          stream.codecpar.flags |= AVCodecParameterFlags.AV_CODECPAR_FLAG_NO_PTS\r\n        }\r\n      })\r\n\r\n      await formatContext.ioReader.seek(this.context.moviList)\r\n\r\n      if (!this.context.indexLoaded) {\r\n        await this.loadIndex(formatContext)\r\n      }\r\n\r\n      if (this.context.dvDemux) {\r\n        this.context.nonInterleaved = false\r\n      }\r\n      else if (!formatContext.streams.some((stream) => {\r\n        const context = stream.privData as AVIStreamContext\r\n        return !!context.samples\r\n      })) {\r\n        this.context.nonInterleaved = false\r\n      }\r\n\r\n    }\r\n    catch (error) {\r\n      return errorType.DATA_INVALID\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  private async readOdmlIndex(formatContext: AVIFormatContext): Promise<int32> {\r\n    const longsPerEntry = await formatContext.ioReader.readUint16()\r\n    const indexSubType = await formatContext.ioReader.readUint8()\r\n    const indexType = await formatContext.ioReader.readUint8()\r\n    const entriesInUse = await formatContext.ioReader.readInt32()\r\n    const chunkId = await formatContext.ioReader.readString(4)\r\n    let base = await formatContext.ioReader.readUint64()\r\n\r\n    const index = this.getStreamIndex(chunkId)\r\n\r\n    if (index >= formatContext.streams.length) {\r\n      return errorType.DATA_INVALID\r\n    }\r\n\r\n    let lastPos = -1n\r\n    let fileSize = this.context.fileSize\r\n\r\n    const stream = formatContext.streams[index]\r\n    const streamContext = stream.privData as AVIStreamContext\r\n\r\n    if (!streamContext.samples) {\r\n      streamContext.samples = []\r\n    }\r\n\r\n    if (indexSubType || entriesInUse < 0) {\r\n      return errorType.DATA_INVALID\r\n    }\r\n    await formatContext.ioReader.skip(4)\r\n    if (indexType && longsPerEntry !== 2) {\r\n      return errorType.DATA_INVALID\r\n    }\r\n    if (indexType > 1) {\r\n      return errorType.DATA_INVALID\r\n    }\r\n    if (fileSize > 0 && base >= fileSize) {\r\n      if (base >> 32n == (base & 0xFFFFFFFFn)\r\n        && (base & 0xFFFFFFFFn) < fileSize\r\n        && fileSize <= 0xFFFFFFFF\r\n      ) {\r\n        base &= 0xFFFFFFFFn\r\n      }\r\n      else {\r\n        return errorType.DATA_INVALID\r\n      }\r\n    }\r\n    for (let i = 0; i < entriesInUse; i++) {\r\n      this.context.odmlMaxPos = bigint.max(this.context.odmlMaxPos, formatContext.ioReader.getPos())\r\n      // If we read more than there are bytes then we must have been reading something twice\r\n      if (this.context.odmlRead > this.context.odmlMaxPos) {\r\n        return errorType.DATA_INVALID\r\n      }\r\n      if (indexType) {\r\n        const pos = static_cast<int64>((await formatContext.ioReader.readUint32()) as uint32) + base - 8n\r\n        let len = await formatContext.ioReader.readInt32()\r\n        const key = len >= 0\r\n        len &= 0x7FFFFFFF\r\n        this.context.odmlRead += 8n\r\n\r\n        if (lastPos == pos || pos == base - 8n) {\r\n          this.context.nonInterleaved = true\r\n        }\r\n        if (lastPos != pos && len) {\r\n          streamContext.samples.push({\r\n            pos,\r\n            size: len,\r\n            key,\r\n            dts: streamContext.currentDts\r\n          })\r\n        }\r\n        streamContext.currentDts += this.getDuration(streamContext, len)\r\n        lastPos = pos\r\n      }\r\n      else {\r\n        this.context.odmlRead += 16n\r\n        let offset = await formatContext.ioReader.readUint64()\r\n        await formatContext.ioReader.skip(8)\r\n        let pos = formatContext.ioReader.getPos()\r\n        await formatContext.ioReader.seek(offset + 8n)\r\n        let ret = await this.readOdmlIndex(formatContext)\r\n        if (ret < 0) {\r\n          return ret\r\n        }\r\n        await formatContext.ioReader.seek(pos)\r\n      }\r\n    }\r\n    this.context.indexLoaded = true\r\n    return 0\r\n  }\r\n\r\n  private async readIdx1(formatContext: AVIFormatContext, size: int32): Promise<int32> {\r\n\r\n    let firstPacket = true\r\n    let lastPos = -1n\r\n    let lastIdx = -1n\r\n    let firstPacketPos = 0n\r\n    let dataOffset = 0n\r\n    let anyKey = false\r\n\r\n    let nbIndexEntries = size / 16\r\n\r\n    if (nbIndexEntries <= 0) {\r\n      return errorType.DATA_INVALID\r\n    }\r\n\r\n    let idx1Pos = formatContext.ioReader.getPos()\r\n    await formatContext.ioReader.seek(this.context.moviList + 4n)\r\n\r\n    if ((await this.syncChunk(formatContext)) === 0) {\r\n      firstPacketPos = formatContext.ioReader.getPos() - 8n\r\n    }\r\n    this.context.currentIndex = -1\r\n\r\n    await formatContext.ioReader.seek(idx1Pos)\r\n\r\n    if (formatContext.streams.length === 1\r\n      && formatContext.streams[0].codecpar.codecTag === mktagle('MMES')\r\n    ) {\r\n      firstPacketPos = 0n\r\n      dataOffset = this.context.moviList\r\n    }\r\n\r\n    for (let i = 0; i < nbIndexEntries; i++) {\r\n      const tag = await formatContext.ioReader.readString(4)\r\n      const flags = await formatContext.ioReader.readUint32()\r\n      let pos = static_cast<int64>(await formatContext.ioReader.readUint32())\r\n      const len = await formatContext.ioReader.readUint32()\r\n\r\n      const index = this.getStreamIndex(tag)\r\n      if (index >= formatContext.streams.length) {\r\n        continue\r\n      }\r\n      const stream = formatContext.streams[index]\r\n      const streamContext = stream.privData as AVIStreamContext\r\n      if (!streamContext.samples) {\r\n        streamContext.samples = []\r\n      }\r\n\r\n      if (tag[2] === 'p' && tag[3] === 'c') {\r\n        continue\r\n      }\r\n      if (firstPacket && firstPacketPos) {\r\n        if (this.context.moviList + 4n !== pos || pos + 500n > firstPacketPos) {\r\n          dataOffset = firstPacketPos - pos\r\n        }\r\n        firstPacket = false\r\n      }\r\n      pos += dataOffset\r\n      if (lastPos === pos) {\r\n        this.context.nonInterleaved = true\r\n      }\r\n      if (lastIdx !== pos && len) {\r\n        streamContext.samples.push({\r\n          pos,\r\n          size: len,\r\n          key: (flags & AVFIndexFlags.AVIIF_INDEX) > 0,\r\n          dts: streamContext.currentDts\r\n        })\r\n        lastIdx = pos\r\n      }\r\n      streamContext.currentDts += this.getDuration(streamContext, len)\r\n      lastPos = pos\r\n      if (flags & AVFIndexFlags.AVIIF_INDEX) {\r\n        anyKey = true\r\n      }\r\n    }\r\n    if (!anyKey) {\r\n      formatContext.streams.forEach((stream) => {\r\n        const streamContext = stream.privData as AVIStreamContext\r\n        if (streamContext.samples?.length) {\r\n          streamContext.samples[0].key = true\r\n        }\r\n      })\r\n    }\r\n    return 0\r\n  }\r\n\r\n  private async loadIndex(formatContext: AVIFormatContext) {\r\n    let pos = formatContext.ioReader.getPos()\r\n\r\n    const currentDts: Record<int32, int64> = {}\r\n    formatContext.streams.forEach((stream) => {\r\n      const streamContext = stream.privData as AVIStreamContext\r\n      currentDts[stream.index] = streamContext.currentDts\r\n    })\r\n\r\n    if (this.context.moviEnd >= this.context.fileSize) {\r\n      return\r\n    }\r\n\r\n    await formatContext.ioReader.seek(this.context.moviEnd)\r\n\r\n    while (true) {\r\n      const tag = await formatContext.ioReader.readString(4)\r\n      const size = await formatContext.ioReader.readUint32()\r\n      let next = formatContext.ioReader.getPos()\r\n      if (next < 0 || next > INT64_MAX - static_cast<int64>(size + (size & 1))) {\r\n        break\r\n      }\r\n      next += static_cast<int64>(size + (size & 1))\r\n      if (tag === 'idx1') {\r\n        await this.readIdx1(formatContext, size)\r\n        break\r\n      }\r\n      await formatContext.ioReader.seek(next)\r\n    }\r\n\r\n    await formatContext.ioReader.seek(pos)\r\n\r\n    this.context.indexLoaded = true\r\n    formatContext.streams.forEach((stream) => {\r\n      const streamContext = stream.privData as AVIStreamContext\r\n      streamContext.currentDts = currentDts[stream.index]\r\n    })\r\n  }\r\n\r\n  private getNextSample(formatContext: AVIFormatContext) {\r\n    let sample: AVISample\r\n    let stream: AVStream\r\n\r\n    let bestDts = 0n\r\n\r\n    let posSample: AVISample\r\n    let posStream: AVStream\r\n\r\n    let dtsSample: AVISample\r\n    let dtsStream: AVStream\r\n\r\n    formatContext.streams.forEach((s) => {\r\n      const context = s.privData as AVIStreamContext\r\n\r\n      if (!context.samples || !context.samples.length) {\r\n        context.sampleEnd = true\r\n        return true\r\n      }\r\n\r\n      if (!context.sampleEnd\r\n        && (!posSample\r\n          || (context.samples[context.currentSample].pos < posSample.pos)\r\n        )\r\n      ) {\r\n        posSample = context.samples[context.currentSample]\r\n        posStream = s\r\n      }\r\n\r\n      if (!context.sampleEnd\r\n        && (!dtsSample\r\n          || avRescaleQ(context.samples[context.currentSample].dts, s.timeBase, AV_TIME_BASE_Q)\r\n            < bestDts\r\n        )\r\n      ) {\r\n        dtsSample = context.samples[context.currentSample]\r\n        bestDts = avRescaleQ(dtsSample.dts, s.timeBase, AV_TIME_BASE_Q)\r\n        dtsStream = s\r\n      }\r\n    })\r\n\r\n    if (posSample && dtsSample) {\r\n      const posDts = avRescaleQ(posSample.dts, posStream.timeBase, AV_TIME_BASE_Q)\r\n      const dtsDts = avRescaleQ(dtsSample.dts, dtsStream.timeBase, AV_TIME_BASE_Q)\r\n      const diff = Math.abs(Number(posDts - dtsDts))\r\n\r\n      if (!(formatContext.ioReader.flags & IOFlags.SEEKABLE)) {\r\n        sample = posSample\r\n        stream = posStream\r\n      }\r\n      else {\r\n        // 两者时间差值在 5s 内优先 pos，避免来回 seek\r\n        if (diff < 5000000) {\r\n          const posDiff = Math.abs(Number(posSample.pos - formatContext.ioReader.getPos()))\r\n          const dtsDiff = Math.abs(Number(dtsSample.pos - formatContext.ioReader.getPos()))\r\n          if (posDiff > dtsDiff) {\r\n            sample = dtsSample\r\n            stream = dtsStream\r\n          }\r\n          else {\r\n            sample = posSample\r\n            stream = posStream\r\n          }\r\n        }\r\n        else {\r\n          sample = dtsSample\r\n          stream = dtsStream\r\n        }\r\n      }\r\n    }\r\n    else if (posSample) {\r\n      sample = posSample\r\n      stream = posStream\r\n    }\r\n    else if (dtsSample) {\r\n      sample = dtsSample\r\n      stream = dtsStream\r\n    }\r\n\r\n    if (stream) {\r\n      const streamContext = (stream.privData as AVIStreamContext)\r\n      streamContext.currentSample++\r\n      if (streamContext.currentSample\r\n        >= streamContext.samples.length\r\n      ) {\r\n        streamContext.sampleEnd = true\r\n      }\r\n    }\r\n    return {\r\n      sample,\r\n      stream\r\n    }\r\n  }\r\n\r\n  public async readAVPacket_(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number> {\r\n\r\n    if (this.context.currentIndex < 0) {\r\n      if (this.context.nonInterleaved && formatContext.streams.length > 1) {\r\n        const { sample, stream } = this.getNextSample(formatContext)\r\n        if (sample) {\r\n          await formatContext.ioReader.seek(sample.pos)\r\n          const streamContext = stream.privData as AVIStreamContext\r\n          streamContext.currentDts = sample.dts\r\n        }\r\n        else {\r\n          return IOError.END\r\n        }\r\n      }\r\n      while (true) {\r\n        let ret = await this.syncChunk(formatContext)\r\n        if (ret < 0) {\r\n          return ret\r\n        }\r\n        // 可能存在一些空帧\r\n        if (this.context.remaining) {\r\n          break\r\n        }\r\n        const stream = formatContext.streams[this.context.currentIndex]\r\n        if (!stream) {\r\n          return errorType.DATA_INVALID\r\n        }\r\n        const streamContext = stream.privData as AVIStreamContext\r\n        streamContext.currentDts += this.getDuration(streamContext, 0)\r\n      }\r\n    }\r\n\r\n    const stream = formatContext.streams[this.context.currentIndex]\r\n\r\n    if (!stream) {\r\n      return errorType.DATA_INVALID\r\n    }\r\n\r\n    const streamContext = stream.privData as AVIStreamContext\r\n\r\n    avpacket.timeBase.den = stream.timeBase.den\r\n    avpacket.timeBase.num = stream.timeBase.num\r\n    avpacket.streamIndex = stream.index\r\n    avpacket.dts = streamContext.currentDts\r\n    avpacket.pos = formatContext.ioReader.getPos() - 8n\r\n\r\n    if (stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_VIDEO) {\r\n      if (streamContext.samples?.length) {\r\n        let index = array.binarySearch(streamContext.samples, (sample) => {\r\n          if (sample.dts > streamContext.currentDts) {\r\n            return -1\r\n          }\r\n          else if (sample.dts === streamContext.currentDts) {\r\n            return 0\r\n          }\r\n          return 1\r\n        })\r\n        if (index > -1) {\r\n          if (streamContext.samples[index].key) {\r\n            avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n          }\r\n        }\r\n      }\r\n      else {\r\n        if (!this.context.hasVideoKey) {\r\n          avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n          this.context.hasVideoKey = true\r\n        }\r\n      }\r\n    }\r\n    else {\r\n      avpacket.flags |= AVPacketFlags.AV_PKT_FLAG_KEY\r\n    }\r\n\r\n    this.context.lastPktPos = formatContext.ioReader.getPos()\r\n\r\n    let size: number\r\n    if (streamContext.dwSampleSize <= 1) {\r\n      size = INT32_MAX\r\n    }\r\n    else if (streamContext.dwSampleSize < 32) {\r\n      size = 1024 * streamContext.dwSampleSize\r\n    }\r\n    else {\r\n      size = streamContext.dwSampleSize\r\n    }\r\n    if (size > this.context.remaining) {\r\n      size = this.context.remaining\r\n    }\r\n\r\n    const data: pointer<uint8> = avMalloc(reinterpret_cast<size>(size as uint32))\r\n    await formatContext.ioReader.readBuffer(size, mapSafeUint8Array(data, reinterpret_cast<size>(size as uint32)))\r\n    addAVPacketData(avpacket, data, size)\r\n\r\n    if (streamContext.hasPal && size < INT32_MAX / 2 && !this.context.dvDemux) {\r\n      const pal: pointer<uint8> = avMalloc(reinterpret_cast<size>(AVPALETTE_SIZE))\r\n      memcpyFromUint8Array(pal, AVPALETTE_SIZE, new Uint8Array(streamContext.pal.buffer))\r\n      addAVPacketSideData(avpacket, AVPacketSideDataType.AV_PKT_DATA_PALETTE, pal, AVPALETTE_SIZE)\r\n      streamContext.hasPal = false\r\n    }\r\n\r\n    if (streamContext.dwSampleSize) {\r\n      avpacket.dts /= static_cast<int64>(streamContext.dwSampleSize as int32)\r\n    }\r\n    if (!(stream.codecpar.flags & AVCodecParameterFlags.AV_CODECPAR_FLAG_NO_PTS)) {\r\n      avpacket.pts = avpacket.dts\r\n    }\r\n    streamContext.currentDts += this.getDuration(streamContext, size)\r\n    this.context.remaining -= size\r\n    if (!this.context.remaining) {\r\n      this.context.currentIndex = -1\r\n      this.context.packetSize = 0\r\n    }\r\n\r\n    return 0\r\n  }\r\n\r\n  public async readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number> {\r\n    try {\r\n      return await this.readAVPacket_(formatContext, avpacket)\r\n    }\r\n    catch (error) {\r\n      if (formatContext.ioReader.error !== IOError.END\r\n          && formatContext.ioReader.error !== IOError.ABORT\r\n      ) {\r\n        logger.error(`read packet error, ${error}`)\r\n        return errorType.DATA_INVALID\r\n      }\r\n      return formatContext.ioReader.error\r\n    }\r\n  }\r\n\r\n  private async syncChunk(formatContext: AVIFormatContext) {\r\n    let pos: int64 = NOPTS_VALUE_BIGINT\r\n\r\n    while (true) {\r\n      try {\r\n        if (formatContext.ioReader.flags & IOFlags.ABORT) {\r\n          break\r\n        }\r\n        const now = formatContext.ioReader.getPos()\r\n        const type = await formatContext.ioReader.readString(4)\r\n        const size = await formatContext.ioReader.readUint32()\r\n\r\n        if ((this.context.ioFileSize ? now : 0n) + static_cast<int64>(size as uint32) > this.context.fileSize\r\n          || type.charCodeAt(0) > 127\r\n        ) {\r\n          await formatContext.ioReader.seek(now + 1n)\r\n          continue\r\n        }\r\n\r\n        if (type[0] === 'i' && type[1] === 'x' && this.getStreamIndex(type.slice(2)) < formatContext.streams.length\r\n          || type === 'JUNK'\r\n          || type === 'idx1'\r\n          || type === 'indx'\r\n        ) {\r\n          await formatContext.ioReader.skip(size)\r\n          continue\r\n        }\r\n\r\n        if (type === 'LIST') {\r\n          await formatContext.ioReader.skip(4)\r\n          continue\r\n        }\r\n\r\n        const index = this.getStreamIndex(type)\r\n\r\n        if (!((now - this.context.lastPktPos) & 1n) && this.getStreamIndex(type.slice(1)) < formatContext.streams.length) {\r\n          continue\r\n        }\r\n\r\n        if (type[2] == 'i' && type[3] == 'x' && index < formatContext.streams.length) {\r\n          await formatContext.ioReader.skip(size)\r\n          continue\r\n        }\r\n\r\n        if (type[2] == 'w' && type[3] == 'c' && index < formatContext.streams.length) {\r\n          await formatContext.ioReader.skip(16 * 3 + 8)\r\n          continue\r\n        }\r\n\r\n        if (this.context.dvDemux && index !== 0) {\r\n          continue\r\n        }\r\n\r\n        if (index < formatContext.streams.length) {\r\n          const stream = formatContext.streams[index]\r\n          const streamContext = stream.privData as AVIStreamContext\r\n\r\n          if (type[2] == 'p' && type[3] == 'c' && size <= 4 * 256 + 4) {\r\n            let k = await formatContext.ioReader.readUint8()\r\n            const last = (k + (await formatContext.ioReader.readUint8()) - 1) & 0xFF\r\n            await formatContext.ioReader.skip(2)\r\n            for (; k <= last; k++) {\r\n              streamContext.pal[k] = 0xFF << 24 | (await formatContext.ioReader.readUint32()) >> 8\r\n            }\r\n            streamContext.hasPal = true\r\n            continue\r\n          }\r\n          else {\r\n            this.context.currentIndex = index\r\n            this.context.remaining = size\r\n            this.context.packetSize = size + 8\r\n            // streamContext.currentDts += this.getDuration(streamContext, size)\r\n            pos = formatContext.ioReader.getPos()\r\n            break\r\n          }\r\n        }\r\n\r\n        await formatContext.ioReader.seek(now + 1n)\r\n      }\r\n      catch (error) {\r\n        if (formatContext.ioReader.error !== IOError.END\r\n          && formatContext.ioReader.error !== IOError.ABORT\r\n        ) {\r\n          logger.error(`read packet error, ${error}`)\r\n          return errorType.DATA_INVALID\r\n        }\r\n        return formatContext.ioReader.error\r\n      }\r\n    }\r\n\r\n    if (pos !== NOPTS_VALUE_BIGINT) {\r\n      await formatContext.ioReader.seek(pos)\r\n    }\r\n    return 0\r\n  }\r\n\r\n  public async seek(formatContext: AVIFormatContext, stream: AVStream, timestamp: int64, flags: int32): Promise<int64> {\r\n\r\n    const now = formatContext.ioReader.getPos()\r\n\r\n    if (flags & AVSeekFlags.BYTE) {\r\n      await formatContext.ioReader.seek(timestamp)\r\n      if (!(flags & AVSeekFlags.ANY)) {\r\n        await this.syncChunk(formatContext)\r\n      }\r\n      return now\r\n    }\r\n\r\n    if (!this.context.indexLoaded) {\r\n      static_cast<int64>(errorType.OPERATE_NOT_SUPPORT)\r\n    }\r\n\r\n    const streamContext = stream.privData as AVIStreamContext\r\n\r\n    let pos = NOPTS_VALUE_BIGINT\r\n\r\n    let index = array.binarySearch(streamContext.samples, (item) => {\r\n      if (item.dts > timestamp) {\r\n        return -1\r\n      }\r\n      else if (item.dts === timestamp) {\r\n        return 0\r\n      }\r\n      return 1\r\n    })\r\n\r\n    if (index > -1 && stream.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_VIDEO) {\r\n      let i = index\r\n      for (; i >= 0; i--) {\r\n        if (streamContext.samples[i].key) {\r\n          index = i\r\n          break\r\n        }\r\n      }\r\n      if (i < 0) {\r\n        index = -1\r\n      }\r\n    }\r\n\r\n    if (index > -1) {\r\n      streamContext.currentDts = streamContext.samples[index].dts\r\n      streamContext.sampleEnd = false\r\n      streamContext.currentSample = index\r\n      pos = streamContext.samples[index].pos\r\n      array.each(formatContext.streams, (st) => {\r\n        if (st !== stream) {\r\n          const stContext = st.privData as AVIStreamContext\r\n          let timestamp = avRescaleQ(streamContext.currentDts, stream.timeBase, st.timeBase)\r\n\r\n          let index = array.binarySearch(stContext.samples, (sample) => {\r\n            if (sample.dts > timestamp) {\r\n              return -1\r\n            }\r\n            else if (sample.dts === timestamp) {\r\n              return 0\r\n            }\r\n            return 1\r\n          })\r\n\r\n          if (index > -1 && st.codecpar.codecType === AVMediaType.AVMEDIA_TYPE_VIDEO) {\r\n            let i = index\r\n            for (; i >= 0; i--) {\r\n              if (stContext.samples[i].key) {\r\n                index = i\r\n                break\r\n              }\r\n            }\r\n            if (i < 0) {\r\n              index = -1\r\n            }\r\n          }\r\n\r\n          if (index >= 0) {\r\n            pos = bigint.min(pos, stContext.samples[index].pos)\r\n            stContext.currentDts = stContext.samples[index].dts\r\n            stContext.currentSample = index\r\n            stContext.sampleEnd = false\r\n          }\r\n        }\r\n      })\r\n\r\n      if (pos !== NOPTS_VALUE_BIGINT) {\r\n        await formatContext.ioReader.seek(pos)\r\n        this.context.currentIndex = -1\r\n      }\r\n      return now\r\n    }\r\n    return static_cast<int64>(errorType.OPERATE_NOT_SUPPORT)\r\n  }\r\n\r\n  public getAnalyzeStreamsCount(): number {\r\n    return this.context.header.dwStreams\r\n  }\r\n}\r\n","/*\r\n * libmedia abstract format decoder\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport Stream from 'avutil/AVStream'\r\nimport { AVIFormatContext } from '../AVFormatContext'\r\nimport AVPacket from 'avutil/struct/avpacket'\r\nimport { AVFormat } from 'avutil/avformat'\r\n\r\nexport default abstract class IFormat {\r\n\r\n  public type: AVFormat = AVFormat.UNKNOWN\r\n\r\n  public onStreamAdd: (stream: Stream) => void\r\n\r\n  public abstract init(formatContext: AVIFormatContext): void\r\n\r\n  public async destroy(formatContext: AVIFormatContext): Promise<void> {}\r\n\r\n  public abstract getAnalyzeStreamsCount(): number\r\n  public abstract readHeader(formatContext: AVIFormatContext): Promise<number>\r\n  public abstract readAVPacket(formatContext: AVIFormatContext, avpacket: pointer<AVPacket>): Promise<number>\r\n\r\n  /**\r\n   * seek\r\n   * \r\n   * @param context \r\n   * @param stream \r\n   * @param timestamp 毫秒时间戳\r\n   * @param flags \r\n   * \r\n   * @returns 返回 seek 之前的下一个 avpacket pos（若不知道返回 0n 方便之后可以再 seek 回来）返回负数表示 seek 失败\r\n   */\r\n  public abstract seek(\r\n    formatContext: AVIFormatContext,\r\n    stream: Stream,\r\n    timestamp: int64,\r\n    flags: int32\r\n  ): Promise<int64>\r\n}\r\n","import AVCodecParameters from 'avutil/struct/avcodecparameters'\r\nimport IOReader from 'common/io/IOReader'\r\nimport * as logger from 'common/util/logger'\r\nimport * as errorType from 'avutil/error'\r\nimport { AVCodecID, AVMediaType } from 'avutil/codec'\r\nimport { AMBISONIC_BASE_GUID, BROKEN_BASE_GUID, codecBmpGuid, MEDIASUBTYPE_BASE_GUID, WavTag2CodecId } from './riff'\r\nimport { getPcmCodecId } from 'avutil/util/pcm'\r\nimport { avFree, avMalloc } from 'avutil/util/mem'\r\nimport { mapSafeUint8Array, mapUint8Array } from 'cheap/std/memory'\r\nimport * as intread from 'avutil/util/intread'\r\nimport { AVChannelOrder } from 'avutil/audiosamplefmt'\r\nimport { Data } from 'common/types/type'\r\nimport AVStream from 'avutil/AVStream'\r\nimport { setChannelLayoutFromMask, unInitChannelLayout } from 'avutil/util/channel'\r\n\r\nexport function getWavCodecId(tag: int32, bitsPerCodedSample: int32) {\r\n  let codecId: AVCodecID = WavTag2CodecId[tag]\r\n\r\n  if (!codecId) {\r\n    return AVCodecID.AV_CODEC_ID_NONE\r\n  }\r\n\r\n  if (codecId === AVCodecID.AV_CODEC_ID_PCM_U8) {\r\n    codecId = getPcmCodecId(bitsPerCodedSample, false, false, ~1)\r\n  }\r\n  else if (codecId === AVCodecID.AV_CODEC_ID_PCM_F32LE) {\r\n    codecId = getPcmCodecId(bitsPerCodedSample, true, false, 0)\r\n  }\r\n\r\n  if (codecId === AVCodecID.AV_CODEC_ID_ADPCM_IMA_WAV && bitsPerCodedSample === 8) {\r\n    codecId = AVCodecID.AV_CODEC_ID_ADPCM_ZORK\r\n  }\r\n\r\n  return codecId\r\n}\r\n\r\nexport function getGuidCodecId(guid: string) {\r\n  let codecId: AVCodecID = codecBmpGuid[guid.toLocaleUpperCase()]\r\n\r\n  if (!codecId) {\r\n    return AVCodecID.AV_CODEC_ID_NONE\r\n  }\r\n\r\n  return codecId\r\n}\r\n\r\nexport async function readFormatTag(ioReader: IOReader, codecpar: pointer<AVCodecParameters>, size: int32) {\r\n  if (size < 14) {\r\n    logger.error('wav format size < 14')\r\n    return errorType.DATA_INVALID\r\n  }\r\n\r\n  codecpar.codecType = AVMediaType.AVMEDIA_TYPE_AUDIO\r\n\r\n  const audioFormat = await ioReader.readUint16()\r\n  let channels = await ioReader.readUint16()\r\n  const sampleRate = await ioReader.readUint32()\r\n  let bitrate = await ioReader.readUint32() * 8\r\n  const blockAlgin = await ioReader.readUint16()\r\n\r\n  codecpar.sampleRate = sampleRate\r\n  codecpar.blockAlign = blockAlgin\r\n\r\n  if (size === 14) {\r\n    codecpar.bitsPerCodedSample = 8\r\n  }\r\n  else {\r\n    codecpar.bitsPerCodedSample = await ioReader.readUint16()\r\n  }\r\n\r\n  if (audioFormat === 0xfffe) {\r\n    codecpar.codecTag = 0\r\n  }\r\n  else {\r\n    codecpar.codecTag = audioFormat\r\n    codecpar.codecId = getWavCodecId(audioFormat, codecpar.bitsPerCodedSample)\r\n  }\r\n\r\n  if (size >= 18 && audioFormat !== 0x0165) {\r\n    let cbSize = await ioReader.readUint16()\r\n    size -= 18\r\n\r\n    cbSize = Math.min(size, cbSize)\r\n\r\n    if (cbSize >= 22 && audioFormat === 0xfffe) {\r\n      // TODO parse wave format ex\r\n      await ioReader.skip(22)\r\n      cbSize -= 22\r\n      size   -= 22\r\n    }\r\n\r\n    if (cbSize > 0) {\r\n      codecpar.extradata = avMalloc(cbSize)\r\n      codecpar.extradataSize = cbSize\r\n      await ioReader.readBuffer(cbSize, mapSafeUint8Array(codecpar.extradata, cbSize))\r\n\r\n      size -= cbSize\r\n    }\r\n\r\n    if (size > 0) {\r\n      await ioReader.skip(size)\r\n    }\r\n  }\r\n  else if (audioFormat === 0x0165 && size >= 32) {\r\n    size -= 4\r\n\r\n    codecpar.extradata = avMalloc(reinterpret_cast<size>(size))\r\n    codecpar.extradataSize = size\r\n    await ioReader.readBuffer(size, mapSafeUint8Array(codecpar.extradata, reinterpret_cast<size>(size)))\r\n\r\n    const streams = intread.rl16(codecpar.extradata + 4)\r\n    codecpar.sampleRate = intread.rl32(codecpar.extradata + 12)\r\n\r\n    channels = 0\r\n    bitrate = 0\r\n\r\n    if (size < 8 + streams * 20) {\r\n      return errorType.DATA_INVALID\r\n    }\r\n\r\n    for (let i = 0; i < streams; i++) {\r\n      channels += codecpar.extradata[8 + i * 20 + 17]\r\n    }\r\n  }\r\n\r\n  codecpar.bitrate = BigInt(bitrate)\r\n\r\n  if (codecpar.sampleRate < 0) {\r\n    logger.error(`Invalid sample rate: ${codecpar.sampleRate}`)\r\n    return errorType.DATA_INVALID\r\n  }\r\n\r\n  if (codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC_LATM) {\r\n    channels = 0\r\n    codecpar.sampleRate = 0\r\n  }\r\n\r\n  if (codecpar.codecId == AVCodecID.AV_CODEC_ID_ADPCM_G726 && codecpar.sampleRate) {\r\n    codecpar.bitsPerCodedSample = static_cast<int32>(codecpar.bitrate) / codecpar.sampleRate\r\n  }\r\n  if (channels != codecpar.chLayout.nbChannels) {\r\n    codecpar.chLayout.order = AVChannelOrder.AV_CHANNEL_ORDER_UNSPEC\r\n    codecpar.chLayout.nbChannels = channels\r\n  }\r\n  return 0\r\n}\r\n\r\nexport async function readInfo(ioReader: IOReader, size: int64, metadata: Data) {\r\n  const end = ioReader.getPos() + size\r\n  while (ioReader.getPos() < end) {\r\n    const key = await ioReader.readString(4)\r\n    const size = await ioReader.readUint32()\r\n    const value = await ioReader.readString(size)\r\n    metadata[key] = value\r\n    if (size % 2) {\r\n      await ioReader.skip(1)\r\n    }\r\n  }\r\n}\r\n\r\nexport async function readBmpHeader(ioReader: IOReader, stream: AVStream) {\r\n  const esize = await ioReader.readUint32()\r\n  stream.codecpar.width = await ioReader.readUint32()\r\n  stream.codecpar.height = await ioReader.readUint32()\r\n  await ioReader.skip(2)\r\n  stream.codecpar.bitsPerCodedSample = await ioReader.readUint16()\r\n  stream.codecpar.codecTag = await ioReader.readUint32()\r\n  await ioReader.skip(20)\r\n  return esize\r\n}\r\n\r\nexport async function readWaveformatex(ioReader: IOReader, stream: AVStream) {\r\n  const bsp = await ioReader.readUint16()\r\n  if (bsp) {\r\n    stream.codecpar.bitsPerCodedSample = bsp\r\n  }\r\n  const mask: uint32 = await ioReader.readUint32()\r\n  setChannelLayoutFromMask(addressof(stream.codecpar.chLayout), static_cast<uint64>(mask))\r\n  const subFormat = (await ioReader.readHex(16)).toLocaleUpperCase()\r\n  if (subFormat.slice(4) === AMBISONIC_BASE_GUID\r\n    || subFormat.slice(4) === BROKEN_BASE_GUID\r\n    || subFormat.slice(4) === MEDIASUBTYPE_BASE_GUID\r\n  ) {\r\n    stream.codecpar.codecTag = await ioReader.readUint32()\r\n    stream.codecpar.codecId = getWavCodecId(reinterpret_cast<int32>(stream.codecpar.codecTag), stream.codecpar.bitsPerCodedSample)\r\n  }\r\n  else {\r\n    stream.codecpar.codecId = getGuidCodecId(subFormat)\r\n    if (!stream.codecpar.codecId) {\r\n      logger.warn(`unknown subformat: ${subFormat}`)\r\n    }\r\n  }\r\n}\r\n\r\nexport async function readWavHeader(ioReader: IOReader, stream: AVStream, size: int32) {\r\n  if (size < 14) {\r\n    logger.error('wav header size < 14')\r\n    return errorType.DATA_INVALID\r\n  }\r\n  unInitChannelLayout(addressof(stream.codecpar.chLayout))\r\n  let id: number\r\n  let channels: number\r\n  let bitrate: number\r\n\r\n  id = await ioReader.readUint16()\r\n  if (id !== 0x0165 || ioReader.isBigEndian()) {\r\n    channels = await ioReader.readUint16()\r\n    stream.codecpar.sampleRate = await ioReader.readUint32()\r\n    bitrate = (await ioReader.readUint32()) * 8\r\n    stream.codecpar.blockAlign = await ioReader.readUint16()\r\n  }\r\n\r\n  if (size === 14) {\r\n    stream.codecpar.bitsPerCodedSample = 8\r\n  }\r\n  else {\r\n    stream.codecpar.bitsPerCodedSample = await ioReader.readUint16()\r\n  }\r\n  if (id === 0xFFFE) {\r\n    stream.codecpar.codecTag = 0\r\n  }\r\n  else {\r\n    stream.codecpar.codecTag = id\r\n    stream.codecpar.codecId = getWavCodecId(id, stream.codecpar.bitsPerCodedSample)\r\n  }\r\n  if (size >= 18 && id != 0x0165) {\r\n    let cbSize = await ioReader.readUint16()\r\n    if (ioReader.isBigEndian()) {\r\n      logger.error('WAVEFORMATEX support for RIFX files')\r\n      return errorType.DATA_INVALID\r\n    }\r\n    size  -= 18\r\n    cbSize = Math.min(cbSize, size)\r\n    if (cbSize >= 22 && id == 0xfffe) {\r\n      await readWaveformatex(ioReader, stream)\r\n      cbSize -= 22\r\n      size -= 22\r\n    }\r\n    if (cbSize > 0) {\r\n      if (stream.codecpar.extradata) {\r\n        avFree(stream.codecpar.extradata)\r\n      }\r\n      stream.codecpar.extradataSize = cbSize\r\n      stream.codecpar.extradata = avMalloc(reinterpret_cast<size>(cbSize as uint32))\r\n      await ioReader.readBuffer(cbSize, mapSafeUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(cbSize as uint32)))\r\n      size -= cbSize\r\n    }\r\n    if (size > 0) {\r\n      await ioReader.skip(size)\r\n    }\r\n  }\r\n  else if (id == 0x0165 && size >= 32) {\r\n    size -= 4\r\n    if (stream.codecpar.extradata) {\r\n      avFree(stream.codecpar.extradata)\r\n    }\r\n    stream.codecpar.extradataSize = size\r\n    stream.codecpar.extradata = avMalloc(reinterpret_cast<size>(size))\r\n    await ioReader.readBuffer(size, mapSafeUint8Array(stream.codecpar.extradata, reinterpret_cast<size>(size)))\r\n    const nbStreams = intread.rl16(stream.codecpar.extradata + 4)\r\n    stream.codecpar.sampleRate = intread.rl32(stream.codecpar.extradata + 12)\r\n    if (size < 8 + nbStreams * 20) {\r\n      return errorType.DATA_INVALID\r\n    }\r\n    for (let i = 0; i < nbStreams; i++) {\r\n      channels += stream.codecpar.extradata[8 + i * 20 + 17]\r\n    }\r\n  }\r\n\r\n  stream.codecpar.bitrate = static_cast<int64>(bitrate as int32)\r\n  if (stream.codecpar.sampleRate < 0) {\r\n    logger.error(`Invalid sample rate ${stream.codecpar.sampleRate}`)\r\n    return errorType.DATA_INVALID\r\n  }\r\n  if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_AAC_LATM) {\r\n    channels = 0\r\n    stream.codecpar.sampleRate = 0\r\n  }\r\n  if (stream.codecpar.codecId === AVCodecID.AV_CODEC_ID_ADPCM_G726 && stream.codecpar.sampleRate) {\r\n    stream.codecpar.bitsPerCodedSample = static_cast<double>(stream.codecpar.bitrate) / stream.codecpar.sampleRate\r\n  }\r\n  if (channels !== stream.codecpar.chLayout.nbChannels) {\r\n    unInitChannelLayout(addressof(stream.codecpar.chLayout))\r\n    stream.codecpar.chLayout.order = AVChannelOrder.AV_CHANNEL_ORDER_UNSPEC\r\n    stream.codecpar.chLayout.nbChannels = channels\r\n  }\r\n  return 0\r\n}\r\n","import { AVStreamMetadataKey } from 'avutil/AVStream'\r\nimport mktagle from '../../function/mktagle'\r\nimport { AVCodecID } from 'avutil/codec'\r\n\r\nexport const WavTag2CodecId = {\r\n  0x0001: AVCodecID.AV_CODEC_ID_PCM_U8,\r\n  0x0002: AVCodecID.AV_CODEC_ID_ADPCM_MS,\r\n  0x0003: AVCodecID.AV_CODEC_ID_PCM_F32LE,\r\n  0x0006: AVCodecID.AV_CODEC_ID_PCM_ALAW,\r\n  0x0007: AVCodecID.AV_CODEC_ID_PCM_MULAW,\r\n  0x000A: AVCodecID.AV_CODEC_ID_WMAVOICE,\r\n  0x0010: AVCodecID.AV_CODEC_ID_ADPCM_IMA_OKI,\r\n  0x0011: AVCodecID.AV_CODEC_ID_ADPCM_IMA_WAV,\r\n  0x0017: AVCodecID.AV_CODEC_ID_ADPCM_IMA_OKI,\r\n  0x0020: AVCodecID.AV_CODEC_ID_ADPCM_YAMAHA,\r\n  0x0022: AVCodecID.AV_CODEC_ID_TRUESPEECH,\r\n  0x0031: AVCodecID.AV_CODEC_ID_GSM_MS,\r\n  0x0032: AVCodecID.AV_CODEC_ID_GSM_MS,\r\n  0x0038: AVCodecID.AV_CODEC_ID_AMR_NB,\r\n  0x0042: AVCodecID.AV_CODEC_ID_G723_1,\r\n  0x0045: AVCodecID.AV_CODEC_ID_ADPCM_G726,\r\n  0x0014: AVCodecID.AV_CODEC_ID_ADPCM_G726,\r\n  0x0040: AVCodecID.AV_CODEC_ID_ADPCM_G726,\r\n  0x0050: AVCodecID.AV_CODEC_ID_MP2,\r\n  0x0055: AVCodecID.AV_CODEC_ID_MP3,\r\n  0x0057: AVCodecID.AV_CODEC_ID_AMR_NB,\r\n  0x0058: AVCodecID.AV_CODEC_ID_AMR_WB,\r\n  0x0061: AVCodecID.AV_CODEC_ID_ADPCM_IMA_DK4,\r\n  0x0062: AVCodecID.AV_CODEC_ID_ADPCM_IMA_DK3,\r\n  0x0064: AVCodecID.AV_CODEC_ID_ADPCM_G726,\r\n  0x0069: AVCodecID.AV_CODEC_ID_ADPCM_IMA_WAV,\r\n  0x0075: AVCodecID.AV_CODEC_ID_METASOUND,\r\n  0x0083: AVCodecID.AV_CODEC_ID_G729,\r\n  0x00ff: AVCodecID.AV_CODEC_ID_AAC,\r\n  0x0111: AVCodecID.AV_CODEC_ID_G723_1,\r\n  0x0130: AVCodecID.AV_CODEC_ID_SIPR,\r\n  0x0135: AVCodecID.AV_CODEC_ID_ACELP_KELVIN,\r\n  0x0160: AVCodecID.AV_CODEC_ID_WMAV1,\r\n  0x0161: AVCodecID.AV_CODEC_ID_WMAV2,\r\n  0x0162: AVCodecID.AV_CODEC_ID_WMAPRO,\r\n  0x0163: AVCodecID.AV_CODEC_ID_WMALOSSLESS,\r\n  0x0165: AVCodecID.AV_CODEC_ID_XMA1,\r\n  0x0166: AVCodecID.AV_CODEC_ID_XMA2,\r\n  0x0180: AVCodecID.AV_CODEC_ID_FTR,\r\n  0x0200: AVCodecID.AV_CODEC_ID_ADPCM_CT,\r\n  0x0215: AVCodecID.AV_CODEC_ID_DVAUDIO,\r\n  0x0216: AVCodecID.AV_CODEC_ID_DVAUDIO,\r\n  0x0270: AVCodecID.AV_CODEC_ID_ATRAC3,\r\n  0x028E: AVCodecID.AV_CODEC_ID_MSNSIREN,\r\n  0x028F: AVCodecID.AV_CODEC_ID_ADPCM_G722,\r\n  0x0350: AVCodecID.AV_CODEC_ID_MISC4,\r\n  0x0401: AVCodecID.AV_CODEC_ID_IMC,\r\n  0x0402: AVCodecID.AV_CODEC_ID_IAC,\r\n  0x0500: AVCodecID.AV_CODEC_ID_ON2AVC,\r\n  0x0501: AVCodecID.AV_CODEC_ID_ON2AVC,\r\n  0x1500: AVCodecID.AV_CODEC_ID_GSM_MS,\r\n  0x1501: AVCodecID.AV_CODEC_ID_TRUESPEECH,\r\n\r\n  // ADTS AAC\r\n  0x1600: AVCodecID.AV_CODEC_ID_AAC,\r\n  0x1602: AVCodecID.AV_CODEC_ID_AAC_LATM,\r\n  0x2000: AVCodecID.AV_CODEC_ID_AC3,\r\n  0x2001: AVCodecID.AV_CODEC_ID_DTS,\r\n  0x2048: AVCodecID.AV_CODEC_ID_SONIC,\r\n  0x2222: AVCodecID.AV_CODEC_ID_G729,\r\n  0x6c75: AVCodecID.AV_CODEC_ID_PCM_MULAW,\r\n  0x706d: AVCodecID.AV_CODEC_ID_AAC,\r\n  0x4143: AVCodecID.AV_CODEC_ID_AAC,\r\n  0x4180: AVCodecID.AV_CODEC_ID_FTR,\r\n  0x594a: AVCodecID.AV_CODEC_ID_XAN_DPCM,\r\n  0x729A: AVCodecID.AV_CODEC_ID_G729,\r\n  0x8180: AVCodecID.AV_CODEC_ID_FTR,\r\n  0xA100: AVCodecID.AV_CODEC_ID_G723_1,\r\n  0xA106: AVCodecID.AV_CODEC_ID_AAC,\r\n  0xA109: AVCodecID.AV_CODEC_ID_SPEEX,\r\n  0xF1AC: AVCodecID.AV_CODEC_ID_FLAC,\r\n  0xFFFE: AVCodecID.AV_CODEC_ID_DFPWM,\r\n  0x5346: AVCodecID.AV_CODEC_ID_ADPCM_SWF,\r\n  0x566f: AVCodecID.AV_CODEC_ID_VORBIS\r\n}\r\n\r\nexport const codecBmpTags: Record<int32, AVCodecID> = {\r\n  [mktagle('H261')]: AVCodecID.AV_CODEC_ID_H261,\r\n  [mktagle('H263')]: AVCodecID.AV_CODEC_ID_H263,\r\n  [mktagle('X263')]: AVCodecID.AV_CODEC_ID_H263,\r\n  [mktagle('T263')]: AVCodecID.AV_CODEC_ID_H263,\r\n  [mktagle('L263')]: AVCodecID.AV_CODEC_ID_H263,\r\n  [mktagle('VX1K')]: AVCodecID.AV_CODEC_ID_H263,\r\n  [mktagle('ZyGo')]: AVCodecID.AV_CODEC_ID_H263,\r\n  [mktagle('M263')]: AVCodecID.AV_CODEC_ID_H263,\r\n  [mktagle('lsvm')]: AVCodecID.AV_CODEC_ID_H263,\r\n  [mktagle('I263')]: AVCodecID.AV_CODEC_ID_H263I,\r\n  [mktagle('U263')]: AVCodecID.AV_CODEC_ID_H263,\r\n  [mktagle('VSM4')]: AVCodecID.AV_CODEC_ID_H263,\r\n\r\n  [mktagle('H264')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('h264')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('X264')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('x264')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('avc1')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('DAVC')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('SMV2')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('VSSH')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('Q264')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('V264')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('GAVC')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('UMSV')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('tshd')]: AVCodecID.AV_CODEC_ID_H264,\r\n  [mktagle('INMC')]: AVCodecID.AV_CODEC_ID_H264,\r\n\r\n  [mktagle('FMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DIVX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DX50')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('XVID')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('MP4S')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('M4S2')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DIVX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [0x04 as int32]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('ZMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DIV1')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('BLZ0')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('mp4v')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('UMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('WV1F')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('SEDG')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('RMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('3IV2')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('WAWV')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('FFDS')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('FVFW')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DCOD')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('MVXM')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('PM4V')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('SMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DXGM')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('VIDM')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('M4T3')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('GEOX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('G264')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('HDX4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DM4V')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DMK2')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DYM4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DIGI')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('EPHV')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('EM4A')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('M4CC')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('SN40')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('VSPX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('ULDX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('GEOV')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('SIPP')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('SM4V')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('XVIX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('DreX')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('QMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('PLV1')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('GLV4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('GMP4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('MNM4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n  [mktagle('GTM4')]: AVCodecID.AV_CODEC_ID_MPEG4,\r\n\r\n  [mktagle('MPG4')]: AVCodecID.AV_CODEC_ID_MSMPEG4V1,\r\n  [mktagle('MP41')]: AVCodecID.AV_CODEC_ID_MSMPEG4V1,\r\n  [mktagle('MP42')]: AVCodecID.AV_CODEC_ID_MSMPEG4V2,\r\n  [mktagle('DIV2')]: AVCodecID.AV_CODEC_ID_MSMPEG4V2,\r\n  [mktagle('MP43')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('DIV3')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('MPG3')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('DIV5')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('DIV6')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('DIV4')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('DVX3')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('AP41')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('COL1')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n  [mktagle('COL0')]: AVCodecID.AV_CODEC_ID_MSMPEG4V3,\r\n\r\n  [mktagle('WMV1')]: AVCodecID.AV_CODEC_ID_WMV1,\r\n  [mktagle('WMV2')]: AVCodecID.AV_CODEC_ID_WMV2,\r\n  [mktagle('GXVE')]: AVCodecID.AV_CODEC_ID_WMV2,\r\n\r\n  [mktagle('dvsd')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('dvhd')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('dvh1')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('dvsl')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('dv25')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('dv50')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('cdvc')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('CDVH')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('CDV5')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('dvc ')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('dvcs')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('dvh1')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('dvis')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('pdvc')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('SL25')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('SLDV')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n  [mktagle('AVd1')]: AVCodecID.AV_CODEC_ID_DVVIDEO,\r\n\r\n  [mktagle('mpg1')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('mpg2')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('MPEG')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('PIM1')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('PIM2')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('VCR2')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [0x10000001 as uint32]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [0x10000002 as uint32]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [0x10000004 as uint32]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('DVR ')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('MMES')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('LMP2')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('slif')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('EM2V')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('M701')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('M702')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('M703')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('M704')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('M705')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('mpgv')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('BW10')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('XMPG')]: AVCodecID.AV_CODEC_ID_MPEG2VIDEO,\r\n  [mktagle('MJPG')]: AVCodecID.AV_CODEC_ID_MJPEG,\r\n\r\n  [mktagle('RV40')]: AVCodecID.AV_CODEC_ID_RV40,\r\n  [mktagle('AV01')]: AVCodecID.AV_CODEC_ID_AV1,\r\n  [mktagle('VP80')]: AVCodecID.AV_CODEC_ID_VP8,\r\n  [mktagle('VP90')]: AVCodecID.AV_CODEC_ID_VP9,\r\n  [mktagle('HEVC')]: AVCodecID.AV_CODEC_ID_HEVC,\r\n  [mktagle('H265')]: AVCodecID.AV_CODEC_ID_HEVC\r\n}\r\n\r\nexport const MEDIASUBTYPE_BASE_GUID = '00001000800000AA00389B71'\r\nexport const AMBISONIC_BASE_GUID = '2107D3118644C8C1CA000000'\r\nexport const BROKEN_BASE_GUID = '0000000000001000800000AA'\r\n\r\nexport const codecBmpGuid: Record<string, AVCodecID> = {\r\n  '2C806DE046DBCF11B4D100805F6CBBEA': AVCodecID.AV_CODEC_ID_AC3,\r\n  'BFAA23E958CB7144A119FFFA01E4CE62': AVCodecID.AV_CODEC_ID_ATRAC3P,\r\n  'D242E147BA368D4D88FC61654F8C836C': AVCodecID.AV_CODEC_ID_ATRAC9,\r\n  'AF87FBA7022DFB42A4D405CD93843BDD': AVCodecID.AV_CODEC_ID_EAC3,\r\n  '2B806DE046DBCF11B4D100805F6CBBEA': AVCodecID.AV_CODEC_ID_MP2,\r\n  '82EC1F6ACADB1945BDE756D3B3EF981D': AVCodecID.AV_CODEC_ID_ADPCM_AGM,\r\n  '3AC1FA38811D4361A40DCE53CA607CD1': AVCodecID.AV_CODEC_ID_DFPWM\r\n}\r\n\r\nexport const RiffInfo: Record<string, string> = {\r\n  'IART': AVStreamMetadataKey.ARTIST,\r\n  'ICMT': AVStreamMetadataKey.COMMENT,\r\n  'ICOP': AVStreamMetadataKey.COPYRIGHT,\r\n  'ICRD': AVStreamMetadataKey.DATE,\r\n  'IGNR': AVStreamMetadataKey.GENRE,\r\n  'ILNG': AVStreamMetadataKey.LANGUAGE,\r\n  'INAM': AVStreamMetadataKey.LANGUAGE,\r\n  'IPRD': AVStreamMetadataKey.ALBUM,\r\n  'IPRT': AVStreamMetadataKey.TRACK,\r\n  'ITRK': AVStreamMetadataKey.TRACK,\r\n  'ISFT': AVStreamMetadataKey.ENCODER,\r\n  'ISMP': AVStreamMetadataKey.TIME_CODE,\r\n  'ITCH': AVStreamMetadataKey.VENDOR\r\n}\r\n","/*\r\n * libmedia string tag to uint32 in litten end\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport * as logger from 'common/util/logger'\r\n\r\nexport default function mktagle(tag: string): number {\r\n  if (tag.length !== 4) {\r\n    logger.warn(`tag length is not 4, tag: ${tag}`)\r\n  }\r\n\r\n  let value = 0\r\n  for (let i = 3; i >= 0; i--) {\r\n    value = (value << 8) | tag.charCodeAt(i)\r\n  }\r\n\r\n  return value\r\n}\r\n","/*\r\n * libmedia aac util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVSampleFormat } from '../audiosamplefmt'\r\nimport Stream from '../AVStream'\r\nimport { AVPacketSideDataType } from '../codec'\r\nimport { NOPTS_VALUE } from '../constant'\r\nimport AVCodecParameters from '../struct/avcodecparameters'\r\nimport BitReader from 'common/io/BitReader'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport const enum MPEG4AudioObjectTypes {\r\n  NULL = 0,\r\n  /**\r\n   * Main-AAC\r\n   */\r\n  AAC_MAIN,\r\n  /**\r\n   * LC-AAC\r\n   */\r\n  AAC_LC,\r\n  AAC_SSR,\r\n  AAC_LTP,\r\n  /**\r\n   * HE-AAC\r\n   */\r\n  AAC_SBR,\r\n  AAC_SCALABLE,\r\n\r\n  AAC_LD = 23,\r\n\r\n  AAC_PS = 29,\r\n\r\n  LAYER1 = 32,\r\n  LAYER2,\r\n  /**\r\n   * MP3\r\n   */\r\n  LAYER3,\r\n\r\n  AAC_ELD = 39\r\n}\r\n\r\nexport const AACProfile2Name: Partial<Record<MPEG4AudioObjectTypes, string>> = {\r\n  [MPEG4AudioObjectTypes.AAC_MAIN]: 'Main',\r\n  [MPEG4AudioObjectTypes.AAC_LC]: 'LC',\r\n  [MPEG4AudioObjectTypes.AAC_SSR]: 'SSR',\r\n  [MPEG4AudioObjectTypes.AAC_LTP]: 'LTP',\r\n  [MPEG4AudioObjectTypes.AAC_SBR]: 'HE',\r\n  [MPEG4AudioObjectTypes.AAC_SCALABLE]: 'SCALABLE',\r\n  [MPEG4AudioObjectTypes.AAC_PS]: 'HEv2',\r\n  [MPEG4AudioObjectTypes.AAC_LD]: 'LD',\r\n  [MPEG4AudioObjectTypes.AAC_ELD]: 'ELD'\r\n}\r\n\r\nexport const MPEG4SamplingFrequencyIndex = {\r\n  96000: 0,\r\n  88200: 1,\r\n  64000: 2,\r\n  48000: 3,\r\n  44100: 4,\r\n  32000: 5,\r\n  24000: 6,\r\n  22050: 7,\r\n  16000: 8,\r\n  12000: 9,\r\n  11025: 10,\r\n  8000: 11,\r\n  7350: 12\r\n}\r\n\r\nexport const MPEG4SamplingFrequencies = [\r\n  96000,\r\n  88200,\r\n  64000,\r\n  48000,\r\n  44100,\r\n  32000,\r\n  24000,\r\n  22050,\r\n  16000,\r\n  12000,\r\n  11025,\r\n  8000,\r\n  7350,\r\n  NOPTS_VALUE,\r\n  NOPTS_VALUE,\r\n  NOPTS_VALUE\r\n]\r\n\r\nexport const MPEG4Channels = [\r\n  NOPTS_VALUE,\r\n  1,\r\n  2,\r\n  3,\r\n  4,\r\n  5,\r\n  6,\r\n  7\r\n]\r\n\r\n/**\r\n * 解析 AAC AudioSpecificConfig\r\n *    \r\n *             frequency\r\n *              44100Hz        fill bit\r\n *               4 bit          3 bit\r\n *              -------         -----\r\n *    0 0 0 1 0 0 1 0 0 0 0 1 0 0 0 0\r\n *    ---------         -------\r\n *      5 bit            4 bit\r\n *     AAC LC           fl, fr\r\n *    profile           channel\r\n * \r\n * url: https://wiki.multimedia.cx/index.php/MPEG-4_Audio#Audio_Specific_Config\r\n * \r\n */\r\n\r\nexport function getAVCodecParameters(extradata: Uint8ArrayInterface) {\r\n  let profile = NOPTS_VALUE\r\n  let sampleRate = NOPTS_VALUE\r\n  let channels = NOPTS_VALUE\r\n  if (extradata.length >= 2) {\r\n    profile = (extradata[0] >> 3) & 0x1f\r\n    sampleRate = MPEG4SamplingFrequencies[((extradata[0] & 0x07) << 1)\r\n      | (extradata[1] >> 7)]\r\n\r\n    channels = MPEG4Channels[(extradata[1] >> 3) & 0x0f]\r\n  }\r\n\r\n  return {\r\n    profile,\r\n    sampleRate,\r\n    channels\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: Stream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata) {\r\n    const { profile, sampleRate, channels } = getAVCodecParameters(extradata)\r\n    stream.codecpar.profile = profile\r\n    stream.codecpar.sampleRate = sampleRate\r\n    stream.codecpar.chLayout.nbChannels = channels\r\n    stream.codecpar.frameSize = profile ===  MPEG4AudioObjectTypes.AAC_SBR ? 2048 : 1024\r\n    stream.codecpar.format = AVSampleFormat.AV_SAMPLE_FMT_FLTP\r\n  }\r\n}\r\n\r\nexport function avCodecParameters2Extradata(codecpar: AVCodecParameters) {\r\n  const samplingFreqIndex = MPEG4SamplingFrequencyIndex[codecpar.sampleRate]\r\n  const channelConfig = codecpar.chLayout.nbChannels\r\n  const profile = codecpar.profile === NOPTS_VALUE ? MPEG4AudioObjectTypes.AAC_LC : codecpar.profile\r\n\r\n  const extradata = new Uint8Array(2)\r\n  extradata[0] = ((profile & 0x1f) << 3) | ((samplingFreqIndex & 0x0e) >> 1)\r\n  extradata[1] = ((samplingFreqIndex & 0x01) << 7) | ((channelConfig & 0x0f) << 3)\r\n\r\n  return extradata\r\n}\r\n\r\nexport interface AACADTSHeader {\r\n  syncWord: number\r\n  profile: number\r\n  sampleRate: number\r\n  channels: number\r\n  aacFrameLength: number\r\n  numberOfRawDataBlocksInFrame: number\r\n  headerLength: number\r\n  framePayloadLength: number\r\n}\r\n\r\nexport interface AACLATMHeader {\r\n  syncWord: number\r\n  profile: number\r\n  sampleRate: number\r\n  channels: number\r\n  useSameStreamMux: boolean\r\n  headerLength: number\r\n  framePayloadLength: number\r\n  muxLengthBytes: number\r\n}\r\n\r\n/**\r\n * \r\n * adts 封装转 raw\r\n * \r\n * bits    \r\n * - 12  syncword\r\n * - 1   ID (MPEG 标识位，固定为 1)\r\n * - 2   Layer ( 固定为 0)\r\n * - 1   Protection Absent ( 指示是否有 CRC 校验，1 表示没有校验）\r\n * - 2   Profile\r\n * - 4   Sampling Frequency Index ( 采样率的索引）\r\n * - 1   Private Bit ( 保留位，一般设置为 0)\r\n * - 3   Channel Configuration ( 音频通道数）\r\n * - 1   Original Copy ( 原始拷贝标志位，一般设置为 0)\r\n * - 1   Home ( 保留位，一般设置为 0)\r\n * - 1   Copyright Identification Bit（置 0）\r\n * - 1   Copyright Identification Start（置 0）\r\n * - 13  Frame Length ( 帧长度，包括 ADTS 头和音频帧数据的长度）\r\n * - 11  Buffer Fullness ( 缓冲区满度，可用于音频流的同步）\r\n * - 2   Number of Raw Data Blocks in Frame ( 帧中原始数据块的数量）\r\n * - 16  CRC (Protection Absent 控制）\r\n * - N  raw aac data\r\n * \r\n */\r\nexport function parseADTSHeader(buffer: Uint8ArrayInterface): AACADTSHeader | number {\r\n\r\n  if (buffer.length < 7) {\r\n    return -1\r\n  }\r\n\r\n  const syncWord = (buffer[0] << 4) | (buffer[0 + 1] >> 4)\r\n\r\n  if (syncWord !== 0xFFF) {\r\n    return -1\r\n  }\r\n\r\n  /*\r\n    * const id = (buffer[1] & 0x08) >>> 3\r\n    * const layer = (buffer[1] & 0x06) >>> 1\r\n    */\r\n  const protectionAbsent = buffer[1] & 0x01\r\n  const profile = (buffer[2] & 0xC0) >>> 6\r\n  const samplingFrequencyIndex = (buffer[2] & 0x3C) >>> 2\r\n  const channelConfiguration = ((buffer[2] & 0x01) << 2) | ((buffer[3] & 0xC0) >>> 6)\r\n\r\n  // adts_variable_header()\r\n  const aacFrameLength = ((buffer[3] & 0x03) << 11)\r\n    | (buffer[4] << 3)\r\n    | ((buffer[5] & 0xE0) >>> 5)\r\n\r\n  const numberOfRawDataBlocksInFrame = buffer[6] & 0x03\r\n\r\n  let headerLength = protectionAbsent === 1 ? 7 : 9\r\n  let framePayloadLength = aacFrameLength - headerLength\r\n\r\n  return {\r\n    syncWord,\r\n    profile: profile + 1,\r\n    sampleRate: MPEG4SamplingFrequencies[samplingFrequencyIndex],\r\n    channels: MPEG4Channels[channelConfiguration],\r\n    aacFrameLength,\r\n    numberOfRawDataBlocksInFrame,\r\n    headerLength,\r\n    framePayloadLength\r\n  }\r\n}\r\n\r\nexport function parseLATMHeader(buffer: Uint8ArrayInterface, bitReader?: BitReader) {\r\n  if (!bitReader) {\r\n    bitReader = new BitReader()\r\n    bitReader.appendBuffer(buffer)\r\n  }\r\n\r\n  function getLATMValue() {\r\n    const bytesForValue = bitReader.readU(2)\r\n    let value = 0\r\n\r\n    for (let i = 0; i <= bytesForValue; i++) {\r\n      value = value << 8\r\n      value = value | bitReader.readU(8)\r\n    }\r\n    return value\r\n  }\r\n\r\n  const now = bitReader.getPointer()\r\n\r\n  const info: AACLATMHeader = {\r\n    syncWord: 0,\r\n    profile: 0,\r\n    sampleRate: 0,\r\n    channels: 0,\r\n    useSameStreamMux: false,\r\n    headerLength: 0,\r\n    framePayloadLength: 0,\r\n    muxLengthBytes: 0\r\n  }\r\n\r\n  const syncWord = bitReader.readU(11)\r\n\r\n  if (syncWord !== 0x2B7) {\r\n    return -1\r\n  }\r\n\r\n  info.syncWord = syncWord\r\n\r\n  info.muxLengthBytes = bitReader.readU(13)\r\n\r\n  const useSameStreamMux = bitReader.readU1() === 0x01\r\n\r\n  info.useSameStreamMux = useSameStreamMux\r\n\r\n  if (!useSameStreamMux) {\r\n    const audioMuxVersion = bitReader.readU1() === 0x01\r\n    const audioMuxVersionA = audioMuxVersion && bitReader.readU1() === 0x01\r\n    if (audioMuxVersionA) {\r\n      return -1\r\n    }\r\n    if (audioMuxVersion) {\r\n      getLATMValue()\r\n    }\r\n    const allStreamsSameTimeFraming = bitReader.readU1() === 0x01\r\n    if (!allStreamsSameTimeFraming) {\r\n      return -1\r\n    }\r\n    const numSubFrames = bitReader.readU(6)\r\n    if (numSubFrames !== 0) {\r\n      return -1\r\n    }\r\n\r\n    const numProgram = bitReader.readU(4)\r\n    if (numProgram !== 0) {\r\n      return -1\r\n    }\r\n\r\n    const numLayer = bitReader.readU(3)\r\n    if (numLayer !== 0) {\r\n      return -1\r\n    }\r\n\r\n    let fillBits = audioMuxVersion ? getLATMValue() : 0\r\n\r\n    const audioObjectType = bitReader.readU(5)\r\n    fillBits -= 5\r\n\r\n    const samplingFreqIndex = bitReader.readU(4)\r\n    fillBits -= 4\r\n\r\n    const channelConfig = bitReader.readU(4)\r\n    fillBits -= 4\r\n\r\n    bitReader.readU(3)\r\n    fillBits -= 3\r\n\r\n    if (fillBits > 0) {\r\n      bitReader.readU(fillBits)\r\n    }\r\n\r\n    const frameLengthType = bitReader.readU(3)\r\n    if (frameLengthType === 0) {\r\n      bitReader.readU(8)\r\n    }\r\n    else {\r\n      return -1\r\n    }\r\n\r\n    const otherDataPresent = bitReader.readU1() === 0x01\r\n    if (otherDataPresent) {\r\n      if (audioMuxVersion) {\r\n        getLATMValue()\r\n      }\r\n      else {\r\n        let otherDataLenBits = 0\r\n        while (true) {\r\n          otherDataLenBits = otherDataLenBits << 8\r\n          const otherDataLenEsc = bitReader.readU1() === 0x01\r\n          const otherDataLenTmp = bitReader.readU(8)\r\n          otherDataLenBits += otherDataLenTmp\r\n          if (!otherDataLenEsc) {\r\n            break\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const crcCheckPresent = bitReader.readU1() === 0x01\r\n    if (crcCheckPresent) {\r\n      bitReader.readU(8)\r\n    }\r\n\r\n    info.profile = audioObjectType + 1\r\n    info.sampleRate = MPEG4SamplingFrequencies[samplingFreqIndex]\r\n    info.channels = MPEG4Channels[channelConfig]\r\n  }\r\n\r\n  let length = 0\r\n  while (true) {\r\n    const tmp = bitReader.readU(8)\r\n    length += tmp\r\n    if (tmp !== 0xff) {\r\n      break\r\n    }\r\n  }\r\n\r\n  info.framePayloadLength = length\r\n  info.headerLength = bitReader.getPointer() - now + (bitReader.getBitLeft() === 8 ? 0 : 1)\r\n\r\n  return info\r\n}\r\n","/*\r\n * libmedia av1 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVStream from '../AVStream'\r\nimport { AVPacketSideDataType } from '../codec'\r\nimport BitReader from 'common/io/BitReader'\r\nimport * as av1syntax from '../util/av1syntax'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport AVCodecParameters from '../struct/avcodecparameters'\r\nimport BitWriter from 'common/io/BitWriter'\r\nimport { getAVPixelFormatDescriptor } from '../pixelFormatDescriptor'\r\nimport { AVPixelFormat } from '../pixfmt'\r\n\r\nexport const enum AV1Profile {\r\n  Main,\r\n  High,\r\n  Professional\r\n}\r\n\r\nexport const enum OBUType {\r\n  Reserved,\r\n  SEQUENCE_HEADER,\r\n  TEMPORAL_DELIMITER,\r\n  FRAME_HEADER,\r\n  TILE_GROUP,\r\n  METADATA,\r\n  FRAME,\r\n  REDUNDANT_FRAME_HEADER,\r\n  TILE_LIST,\r\n  PADDING = 15\r\n}\r\n\r\nexport const AV1Profile2Name: Record<AV1Profile, string> = {\r\n  [AV1Profile.Main]: 'Main',\r\n  [AV1Profile.High]: 'High',\r\n  [AV1Profile.Professional]: 'Professional'\r\n}\r\n\r\nexport const LevelCapabilities = [\r\n  { level: 20, maxResolution: 2048 * 1152 },\r\n  { level: 21, maxResolution: 2816 * 1584 },\r\n  { level: 30, maxResolution: 4352 * 2448 },\r\n  { level: 31, maxResolution: 5504 * 3096 },\r\n  { level: 40, maxResolution: 6144 * 3456 },\r\n  { level: 41, maxResolution: 6144 * 3456 },\r\n  { level: 50, maxResolution: 8192 * 4352 },\r\n  { level: 51, maxResolution: 8192 * 4352 },\r\n  { level: 52, maxResolution: 8192 * 4352 },\r\n  { level: 53, maxResolution: 8192 * 4352 },\r\n  { level: 60, maxResolution: 16384 * 8704 },\r\n  { level: 61, maxResolution: 16384 * 8704 },\r\n  { level: 62, maxResolution: 16384 * 8704 },\r\n  { level: 63, maxResolution: 16384 * 8704 }\r\n]\r\n\r\nexport const AV1LevelIdx = [20, 21, 22, 23, 30, 31, 32, 33, 40, 41, 42, 43, 50, 51, 52, 53, 60, 61, 62, 63, 70, 71, 72, 73]\r\n\r\nexport function getLevelByResolution(width: number, height: number, fps: number) {\r\n  const resolution = width * height\r\n  for (const level of LevelCapabilities) {\r\n    if (resolution <= level.maxResolution) {\r\n      return level.level\r\n    }\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 4) {\r\n    const params = parseExtraData(extradata)\r\n\r\n    stream.codecpar.profile = params.profile\r\n    stream.codecpar.level = params.level\r\n  }\r\n}\r\n\r\n/**\r\n * - 1 bit marker\r\n * - 7 bit version\r\n * - 3 bit profile\r\n * - 5 bit level\r\n * - 1 bit tier\r\n * - 1 bit bitdepth > 8\r\n * - 1 bit bitdepth == 12\r\n * - 1 bit monochrome\r\n * - 1 bit chroma_subsampling_x\r\n * - 1 bit chroma_subsampling_y\r\n * - 2 bit chroma_sample_position\r\n * - 8 bit padding\r\n * \r\n * @param header \r\n */\r\nexport function parseExtraData(extradata: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader(extradata.length)\r\n  bitReader.appendBuffer(extradata)\r\n  // marker\r\n  bitReader.readU1()\r\n  // version\r\n  bitReader.readU(7)\r\n\r\n  const profile = bitReader.readU(3)\r\n  const level = bitReader.readU(5)\r\n  const tier = bitReader.readU1()\r\n  let bitDepth = bitReader.readU1() ? 10 : 8\r\n  if (bitReader.readU1()) {\r\n    bitDepth = 12\r\n  }\r\n  const monochrome = bitReader.readU1()\r\n  const chromaSubsamplingX = bitReader.readU1()\r\n  const chromaSubsamplingY = bitReader.readU1()\r\n  const chromaSamplePosition = bitReader.readU(2)\r\n\r\n  return {\r\n    profile,\r\n    level,\r\n    tier,\r\n    bitDepth,\r\n    monochrome,\r\n    chromaSubsamplingX,\r\n    chromaSubsamplingY,\r\n    chromaSamplePosition\r\n  }\r\n}\r\n\r\n/* eslint-disable camelcase */\r\nexport function parseSequenceHeader(header: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader(header.length)\r\n  bitReader.appendBuffer(header)\r\n\r\n  bitReader.readU1()\r\n  bitReader.readU(4)\r\n  const extensionFlag = bitReader.readU1()\r\n  const hasSizeFlag = bitReader.readU1()\r\n  // obu_reserved_1bit\r\n  bitReader.readU1()\r\n  if (extensionFlag) {\r\n    bitReader.readU(8)\r\n  }\r\n  if (hasSizeFlag) {\r\n    av1syntax.leb128(bitReader)\r\n  }\r\n\r\n  const seq_profile =\tav1syntax.f(bitReader, 3)\r\n  const still_picture =\tav1syntax.f(bitReader, 1)\r\n  const reduced_still_picture_header = av1syntax.f(bitReader, 1)\r\n\r\n  let timing_info_present_flag = 0\r\n  let decoder_model_info_present_flag = 0\r\n  let initial_display_delay_present_flag = 0\r\n  let operating_points_cnt_minus_1 = 0\r\n  let operating_point_idc: number[] = [0]\r\n  let seq_level_idx: number[] = [0]\r\n  let seq_tier: number[] = [0]\r\n  let decoder_model_present_for_this_op: number[] = [0]\r\n  let initial_display_delay_present_for_this_op: number[] = [0]\r\n  let initial_display_delay_minus_1: number[] = [0]\r\n  let buffer_delay_length_minus_1 = 0\r\n  let decoder_buffer_delay: number[] = [0]\r\n  let encoder_buffer_delay: number[] = [0]\r\n  let low_delay_mode_flag: number[] = [0]\r\n\r\n  if (reduced_still_picture_header) {\r\n    seq_level_idx[0] = av1syntax.f(bitReader, 5)\r\n  }\r\n  else {\r\n    timing_info_present_flag = av1syntax.f(bitReader, 1)\r\n    if (timing_info_present_flag) {\r\n\r\n      let num_units_in_display_tick =\tav1syntax.f(bitReader, 32)\r\n      let time_scale = av1syntax.f(bitReader, 32)\r\n      let equal_picture_interval = av1syntax.f(bitReader, 1)\r\n      if (equal_picture_interval) {\r\n        let num_ticks_per_picture_minus_1 = av1syntax.uvlc(bitReader)\r\n      }\r\n\r\n      let decoder_model_info_present_flag =\tav1syntax.f(bitReader, 1)\r\n      if (decoder_model_info_present_flag) {\r\n        buffer_delay_length_minus_1 =\tav1syntax.f(bitReader, 5)\r\n        let num_units_in_decoding_tick = av1syntax.f(bitReader, 32)\r\n        let buffer_removal_time_length_minus_1 = av1syntax.f(bitReader, 5)\r\n        let frame_presentation_time_length_minus_1 = av1syntax.f(bitReader, 5)\r\n      }\r\n    }\r\n    else {\r\n      decoder_model_info_present_flag = 0\r\n    }\r\n    let initial_display_delay_present_flag = av1syntax.f(bitReader, 1)\r\n    let operating_points_cnt_minus_1 = av1syntax.f(bitReader, 5)\r\n    for (let i = 0; i <= operating_points_cnt_minus_1; i++ ) {\r\n      operating_point_idc[i] = av1syntax.f(bitReader, 12)\r\n      seq_level_idx[i] = av1syntax.f(bitReader, 5)\r\n      if (seq_level_idx[i] > 7) {\r\n        seq_tier[i] = av1syntax.f(bitReader, 1)\r\n      }\r\n      else {\r\n        seq_tier[i] = 0\r\n      }\r\n      if (decoder_model_info_present_flag) {\r\n        decoder_model_present_for_this_op[i] = av1syntax.f(bitReader, 1)\r\n        if (decoder_model_present_for_this_op[i]) {\r\n          let n = buffer_delay_length_minus_1 + 1\r\n          decoder_buffer_delay[i] =\tav1syntax.f(bitReader, n)\r\n          encoder_buffer_delay[i] =\tav1syntax.f(bitReader, n)\r\n          low_delay_mode_flag[i] = av1syntax.f(bitReader, 1)\r\n        }\r\n      }\r\n      else {\r\n        decoder_model_present_for_this_op[i] = 0\r\n      }\r\n      if (initial_display_delay_present_flag) {\r\n        initial_display_delay_present_for_this_op[i] = av1syntax.f(bitReader, 1)\r\n        if ( initial_display_delay_present_for_this_op[i] ) {\r\n          initial_display_delay_minus_1[i] = av1syntax.f(bitReader, 4)\r\n        }\r\n      }\r\n    }\r\n  }\r\n  let frame_width_bits_minus_1 = av1syntax.f(bitReader, 4)\r\n  let frame_height_bits_minus_1 =\tav1syntax.f(bitReader, 4)\r\n  let n = frame_width_bits_minus_1 + 1\r\n  let max_frame_width_minus_1 =\tav1syntax.f(bitReader, n)\r\n  n = frame_height_bits_minus_1 + 1\r\n  let max_frame_height_minus_1 = av1syntax.f(bitReader, n)\r\n  let frame_id_numbers_present_flag = 0\r\n  let delta_frame_id_length_minus_2 = 0\r\n  let additional_frame_id_length_minus_1 = 0\r\n  if (reduced_still_picture_header ) {\r\n    frame_id_numbers_present_flag = 0\r\n  }\r\n  else {\r\n    frame_id_numbers_present_flag =\tav1syntax.f(bitReader, 1)\r\n  }\r\n  if ( frame_id_numbers_present_flag ) {\r\n    delta_frame_id_length_minus_2 =\tav1syntax.f(bitReader, 4)\r\n    additional_frame_id_length_minus_1 = av1syntax.f(bitReader, 3)\r\n  }\r\n  let use_128x128_superblock = av1syntax.f(bitReader, 1)\r\n  let enable_filter_intra =\tav1syntax.f(bitReader, 1)\r\n  let enable_intra_edge_filter = av1syntax.f(bitReader, 1)\r\n  let enable_interintra_compound = 0\r\n  let enable_masked_compound = 0\r\n  let enable_warped_motion = 0\r\n  let enable_dual_filter = 0\r\n  let enable_order_hint = 0\r\n  let enable_jnt_comp = 0\r\n  let enable_ref_frame_mvs = 0\r\n  let seq_force_screen_content_tools = 2\r\n  let seq_force_integer_mv = 2\r\n  let OrderHintBits = 0\r\n  if (!reduced_still_picture_header) {\r\n    let enable_interintra_compound = av1syntax.f(bitReader, 1)\r\n    enable_masked_compound = av1syntax.f(bitReader, 1)\r\n    enable_warped_motion = av1syntax.f(bitReader, 1)\r\n    enable_dual_filter = av1syntax.f(bitReader, 1)\r\n    enable_order_hint = av1syntax.f(bitReader, 1)\r\n    if (enable_order_hint) {\r\n      enable_jnt_comp = av1syntax.f(bitReader, 1)\r\n      enable_ref_frame_mvs = av1syntax.f(bitReader, 1)\r\n    }\r\n    else {\r\n      enable_jnt_comp = 0\r\n      enable_ref_frame_mvs = 0\r\n    }\r\n    let seq_choose_screen_content_tools =\tav1syntax.f(bitReader, 1)\r\n    if (seq_choose_screen_content_tools) {\r\n      seq_force_screen_content_tools = 2\r\n    }\r\n    else {\r\n      seq_force_screen_content_tools = av1syntax.f(bitReader, 1)\r\n    }\r\n\r\n    if (seq_force_screen_content_tools > 0) {\r\n      let seq_choose_integer_mv =\tav1syntax.f(bitReader, 1)\r\n      if (seq_choose_integer_mv) {\r\n        seq_force_integer_mv = 2\r\n      }\r\n      else {\r\n        seq_force_integer_mv = av1syntax.f(bitReader, 1)\r\n      }\r\n    }\r\n    else {\r\n      seq_force_integer_mv = 2\r\n    }\r\n    if (enable_order_hint) {\r\n      const order_hint_bits_minus_1 =\tav1syntax.f(bitReader, 3)\r\n      OrderHintBits = order_hint_bits_minus_1 + 1\r\n    }\r\n    else {\r\n      OrderHintBits = 0\r\n    }\r\n  }\r\n  let enable_superres =\tav1syntax.f(bitReader, 1)\r\n  let enable_cdef =\tav1syntax.f(bitReader, 1)\r\n  let enable_restoration = av1syntax.f(bitReader, 1)\r\n\r\n  let high_bitdepth =\tav1syntax.f(bitReader, 1)\r\n  let twelve_bit = 0\r\n  let bit_depth = 0\r\n  let mono_chrome = 0\r\n  if (seq_profile == 2 && high_bitdepth ) {\r\n    twelve_bit = av1syntax.f(bitReader, 1)\r\n    bit_depth = twelve_bit ? 12 : 10\r\n  }\r\n  else if (seq_profile <= 2) {\r\n    bit_depth = high_bitdepth ? 10 : 8\r\n  }\r\n  if ( seq_profile == 1 ) {\r\n    mono_chrome = 0\r\n  }\r\n  else {\r\n    mono_chrome = av1syntax.f(bitReader, 1)\r\n  }\r\n  const color_description_present_flag = av1syntax.f(bitReader, 1)\r\n  let color_primaries = 0\r\n  let transfer_characteristics = 0\r\n  let matrix_coefficients = 0\r\n  if (color_description_present_flag ) {\r\n    color_primaries =\tav1syntax.f(bitReader, 8)\r\n    transfer_characteristics = av1syntax.f(bitReader, 8)\r\n    matrix_coefficients = av1syntax.f(bitReader, 8)\r\n  }\r\n  else {\r\n    color_primaries = 2\r\n    transfer_characteristics = 2\r\n    matrix_coefficients = 2\r\n  }\r\n  let color_range = 0\r\n  let subsampling_x = 0\r\n  let subsampling_y = 0\r\n  let chroma_sample_position = 0\r\n  let separate_uv_delta_q = 0\r\n  if (mono_chrome) {\r\n    color_range =\tav1syntax.f(bitReader, 1)\r\n    subsampling_x = 1\r\n    subsampling_y = 1\r\n    chroma_sample_position = 0\r\n    separate_uv_delta_q = 0\r\n  }\r\n  else if (color_primaries == 1\r\n    && transfer_characteristics == 13\r\n    && matrix_coefficients == 0\r\n  ) {\r\n    color_range = 1\r\n    subsampling_x = 0\r\n    subsampling_y = 0\r\n    separate_uv_delta_q = av1syntax.f(bitReader, 1)\r\n  }\r\n  else {\r\n    color_range =\tav1syntax.f(bitReader, 1)\r\n    if (seq_profile == 0) {\r\n      subsampling_x = 1\r\n      subsampling_y = 1\r\n    }\r\n    else if ( seq_profile == 1 ) {\r\n      subsampling_x = 0\r\n      subsampling_y = 0\r\n    }\r\n    else {\r\n      if (bit_depth == 12) {\r\n        subsampling_x\t= av1syntax.f(bitReader, 1)\r\n        if (subsampling_x) {\r\n          subsampling_y =\tav1syntax.f(bitReader, 1)\r\n        }\r\n        else {\r\n          subsampling_y = 0\r\n        }\r\n      }\r\n      else {\r\n        subsampling_x = 1\r\n        subsampling_y = 0\r\n      }\r\n    }\r\n    if (subsampling_x && subsampling_y) {\r\n      chroma_sample_position = av1syntax.f(bitReader, 2)\r\n    }\r\n    separate_uv_delta_q = av1syntax.f(bitReader, 1)\r\n  }\r\n\r\n  let film_grain_params_present\t= av1syntax.f(bitReader, 1)\r\n\r\n  return {\r\n    width: max_frame_width_minus_1 + 1,\r\n    height: max_frame_height_minus_1 + 1,\r\n    profile: seq_profile,\r\n    level: AV1LevelIdx[seq_level_idx[0]],\r\n    tier: seq_tier[0],\r\n    bitDepth: bit_depth,\r\n    monoChrome: mono_chrome,\r\n    colorRange: color_range,\r\n    colorPrimaries: color_primaries,\r\n    transferCharacteristics: transfer_characteristics,\r\n    matrixCoefficients: matrix_coefficients,\r\n    subsamplingX: subsampling_x,\r\n    subsamplingY: subsampling_y,\r\n    chromaSamplePosition: chroma_sample_position\r\n  }\r\n}\r\n\r\nexport function splitOBU(buffer: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader()\r\n\r\n  bitReader.appendBuffer(buffer)\r\n\r\n  const list: Uint8ArrayInterface[] = []\r\n\r\n  while (bitReader.remainingLength()) {\r\n    const now = bitReader.getPointer()\r\n    // obu_forbidden_bit\r\n    bitReader.readU1()\r\n    const type = bitReader.readU(4)\r\n    const extensionFlag = bitReader.readU1()\r\n    const hasSizeFlag = bitReader.readU1()\r\n    // obu_reserved_1bit\r\n    bitReader.readU1()\r\n\r\n    if (extensionFlag) {\r\n      bitReader.readU(8)\r\n    }\r\n\r\n    const size = hasSizeFlag ? av1syntax.leb128(bitReader) : buffer.length - 1 - extensionFlag\r\n\r\n    const headerSize = bitReader.getPointer() - now\r\n\r\n    list.push(buffer.subarray(now, now + headerSize + size))\r\n\r\n    bitReader.skip(size * 8)\r\n  }\r\n\r\n  return list\r\n}\r\n\r\nexport function generateExtradata(codecpar: pointer<AVCodecParameters>, buffer: Uint8ArrayInterface) {\r\n  const bitWriter = new BitWriter(4)\r\n  // marker\r\n  bitWriter.writeU1(1)\r\n  // version\r\n  bitWriter.writeU(7, 1)\r\n\r\n  const header = splitOBU(buffer).find((buffer) => {\r\n    return ((buffer[0] >>> 3) & 0x0f) === OBUType.SEQUENCE_HEADER\r\n  })\r\n\r\n  if (header) {\r\n    const params = parseSequenceHeader(header)\r\n    bitWriter.writeU(3, params.profile)\r\n    bitWriter.writeU(5, params.level)\r\n    bitWriter.writeU(1, params.tier)\r\n    bitWriter.writeU(1, params.bitDepth > 8 ? 1 : 0)\r\n    bitWriter.writeU(1, params.bitDepth === 12 ? 1 : 0)\r\n    bitWriter.writeU(1, params.monoChrome)\r\n    bitWriter.writeU(1, params.subsamplingX)\r\n    bitWriter.writeU(1, params.subsamplingY)\r\n    bitWriter.writeU(1, params.chromaSamplePosition)\r\n  }\r\n  else {\r\n    const desc = getAVPixelFormatDescriptor(codecpar.format as AVPixelFormat)\r\n    bitWriter.writeU(3, codecpar.profile)\r\n    bitWriter.writeU(5, codecpar.level)\r\n    bitWriter.writeU(1, 0)\r\n    bitWriter.writeU(1, desc.comp[0].depth > 8 ? 1 : 0)\r\n    bitWriter.writeU(1, desc.comp[0].depth === 12 ? 1 : 0)\r\n    bitWriter.writeU(1, 0)\r\n    bitWriter.writeU(1, 1)\r\n    bitWriter.writeU(1, 1)\r\n    bitWriter.writeU(1, 0)\r\n  }\r\n  // padding\r\n  bitWriter.writeU(8, 0)\r\n  bitWriter.padding()\r\n  return bitWriter.getBuffer()\r\n}\r\n","/*\r\n * libmedia flac util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport Stream from '../AVStream'\r\nimport { AVPacketSideDataType } from '../codec'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport const enum MetaDataBlockType {\r\n  STREAMINFO,\r\n  PADDING,\r\n  APPLICATION,\r\n  SEEKTABLE,\r\n  VORBIS_COMMENT,\r\n  CUESHEET,\r\n  PICTURE\r\n}\r\n\r\nexport const enum FlacCHMode {\r\n  INDEPENDENT = 0,\r\n  LEFT_SIDE = 1,\r\n  RIGHT_SIDE = 2,\r\n  MID_SIDE = 3\r\n}\r\n\r\nexport const FLAC_STREAMINFO_SIZE = 34\r\nexport const FLAC_MAX_CHANNELS = 8\r\nexport const FLAC_MIN_BLOCKSIZE = 16\r\nexport const FLAC_MAX_BLOCKSIZE = 65535\r\nexport const FLAC_MIN_FRAME_SIZE = 10\r\n\r\nexport const SampleSizeTable: number[] = [0, 8, 12, 0, 16, 20, 24, 32]\r\n\r\nexport const SampleRateTable: number[] = [\r\n  0, 88200, 176400, 192000, 8000, 16000, 22050,\r\n  24000, 32000, 44100, 48000, 96000,\r\n  0, 0, 0, 0\r\n]\r\n\r\nexport const BlockSizeTable: number[] = [\r\n  0, 192, 576 << 0, 576 << 1, 576 << 2, 576 << 3, 0, 0,\r\n  256 << 0, 256 << 1, 256 << 2, 256 << 3, 256 << 4, 256 << 5, 256 << 6, 256 << 7\r\n]\r\n\r\nexport const enum FlacChmode {\r\n  FLAC_CHMODE_INDEPENDENT = 0,\r\n  FLAC_CHMODE_LEFT_SIDE   = 1,\r\n  FLAC_CHMODE_RIGHT_SIDE  = 2,\r\n  FLAC_CHMODE_MID_SIDE    = 3,\r\n}\r\n\r\nexport const enum FlacMetadataType {\r\n  FLAC_METADATA_TYPE_STREAMINFO = 0,\r\n  FLAC_METADATA_TYPE_PADDING,\r\n  FLAC_METADATA_TYPE_APPLICATION,\r\n  FLAC_METADATA_TYPE_SEEKTABLE,\r\n  FLAC_METADATA_TYPE_VORBIS_COMMENT,\r\n  FLAC_METADATA_TYPE_CUESHEET,\r\n  FLAC_METADATA_TYPE_PICTURE,\r\n  FLAC_METADATA_TYPE_INVALID = 127\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: Stream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length === FLAC_STREAMINFO_SIZE) {\r\n    const { bitsPerRawSample, sampleRate, channels } = getAVCodecParameters(extradata)\r\n    stream.codecpar.bitsPerRawSample = bitsPerRawSample\r\n    stream.codecpar.sampleRate = sampleRate\r\n    stream.codecpar.chLayout.nbChannels = channels\r\n  }\r\n}\r\n\r\nfunction getAVCodecParameters(extradata: Uint8ArrayInterface) {\r\n  const bufferReader = new BufferReader(extradata)\r\n  bufferReader.skip(10)\r\n  const value = bufferReader.readUint24()\r\n  const sampleRate = (value >> 4)\r\n  const channels = ((value & 0x0f) >>> 1) + 1\r\n  const bitPerSample = bufferReader.readUint8()\r\n  return {\r\n    sampleRate,\r\n    channels,\r\n    bitsPerRawSample: (((value & 0x01) << 4) | ((bitPerSample & 0xf0) >>> 4)) + 1\r\n  }\r\n}\r\n","/*\r\n * libmedia opus util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVPacketSideDataType } from '../codec'\r\nimport AVStream from '../AVStream'\r\nimport AVCodecParameters from '../struct/avcodecparameters'\r\nimport BufferReader from 'common/io/BufferReader'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport { avRescaleQ } from '../util/rational'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport const durations = [\r\n  /* Silk NB */\r\n  480, 960, 1920, 2880,\r\n  /* Silk MB */\r\n  480, 960, 1920, 2880,\r\n  /* Silk WB */\r\n  480, 960, 1920, 2880,\r\n  /* Hybrid SWB */\r\n  480, 960,\r\n  /* Hybrid FB */\r\n  480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960,\r\n  /* CELT NB */\r\n  120, 240, 480, 960\r\n]\r\n\r\n\r\nexport function getBufferSamples(buffer: Uint8Array) {\r\n  let toc = 0, frameDuration = 0, nframes = 0\r\n\r\n  if (buffer.length < 1) {\r\n    return 0\r\n  }\r\n\r\n  toc = buffer[0]\r\n\r\n  frameDuration = durations[toc >> 3]\r\n\r\n  switch (toc & 3) {\r\n    case 0:\r\n      nframes = 1\r\n      break\r\n    case 1:\r\n      nframes = 2\r\n      break\r\n    case 2:\r\n      nframes = 2\r\n      break\r\n    case 3:\r\n      if (buffer.length < 2) {\r\n        return 0\r\n      }\r\n      nframes = buffer[1] & 63\r\n      break\r\n  }\r\n  return nframes * frameDuration\r\n}\r\n\r\n/**\r\n * opus extradata\r\n * \r\n * - 8 bytes Magic Signature: OpusHead\r\n * - 1 bytes unsigned, 对应值 0x01 version\r\n * - 1 bytes unsigned, channels 它可能和编码声道数不一致， 它可能被修改成 packet-by-packet, 对应值 0x01\r\n * - 2 bytes unsigned, preSkip 这是要从开始播放时的解码器输出， 从页面的颗粒位置减去以计算其 PCM 样本位置。\r\n * - 4 bytes unsigned, sampleRate 原始输入采样率\r\n * - 2 bytes signed, outputGain 这是解码时要应用的增益， 20 * log10 缩放解码器输出以实现所需的播放音量\r\n * - 1 bytes unsigned, channelMappingFamily 指示输出渠道的顺序和语音含义。该八位位组的每个当前指定的值表示一个映射系列，它定义了一组允许的通道数，以及每个允许的通道数的通道名称的有序集合\r\n * - channelMappingTable 可选， 当 Channel Mapping Family 为 0 时被省略。\r\n *  - 1 bytes, streamCount, unsigned ogg packet 里面编码了多少路 stream\r\n *  - 1 bytes, coupledStreamCount, unsigned 标识有多少路流是双声声道，必须小于 streamCount\r\n *  - C bytes, C 为总输出声道数 coupledStreamCount + streamCount\r\n * \r\n */\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 19) {\r\n    const reader = new BufferReader(extradata, false)\r\n    reader.skip(9)\r\n    stream.codecpar.chLayout.nbChannels = reader.readUint8()\r\n    stream.codecpar.initialPadding = reader.readUint16()\r\n    stream.codecpar.sampleRate = reader.readUint32()\r\n\r\n    stream.codecpar.seekPreroll = Number(avRescaleQ(\r\n      80n,\r\n      {\r\n        den: 1000,\r\n        num: 1\r\n      },\r\n      {\r\n        den: 48000,\r\n        num: 1\r\n      }\r\n    ))\r\n  }\r\n}\r\n\r\nexport function avCodecParameters2Extradata(codecpar: AVCodecParameters) {\r\n  const extradata = new Uint8Array(19)\r\n\r\n  const writer = new BufferWriter(extradata, false)\r\n\r\n  writer.writeString('OpusHead')\r\n  writer.writeUint8(0x01)\r\n  writer.writeUint8(codecpar.chLayout.nbChannels)\r\n  writer.writeUint16(codecpar.initialPadding)\r\n  writer.writeUint32(codecpar.sampleRate)\r\n\r\n  return extradata\r\n}\r\n","/*\r\n * libmedia vp8 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVStream from '../AVStream'\r\nimport { AVPacketSideDataType } from '../codec'\r\nimport AVPacket from '../struct/avpacket'\r\nimport BitReader from 'common/io/BitReader'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 6) {\r\n    const params = parseExtraData(extradata)\r\n    stream.codecpar.profile = params.profile\r\n    stream.codecpar.level = params.level\r\n  }\r\n}\r\n\r\n/**\r\n * - 1 byte profile\r\n * - 1 byte level\r\n * - 4 bit bitdepth\r\n * - 3 bit chroma_subsampling\r\n * - 1 bit full_range_flag\r\n * - 1 byte color_primaries\r\n * - 1 byte color_trc\r\n * - 1 byte color_space\r\n * \r\n * @param extradata \r\n */\r\nexport function parseExtraData(extradata: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader(extradata.length)\r\n  bitReader.appendBuffer(extradata.subarray(4))\r\n  const profile = bitReader.readU(8)\r\n  const level = bitReader.readU(8)\r\n  let bitDepth = bitReader.readU(4)\r\n  const chromaSubsampling = bitReader.readU(3)\r\n  const fullRangeFlag = bitReader.readU1()\r\n  const colorPrimaries = bitReader.readU(8)\r\n  const colorTrc = bitReader.readU(8)\r\n  const colorSpace = bitReader.readU(8)\r\n\r\n  return {\r\n    profile,\r\n    level,\r\n    bitDepth,\r\n    chromaSubsampling,\r\n    fullRangeFlag,\r\n    colorPrimaries,\r\n    colorTrc,\r\n    colorSpace\r\n  }\r\n}\r\n\r\nexport function isIDR(avpacket: pointer<AVPacket>) {\r\n  const first = accessof(avpacket.data)\r\n  return !(first >>> 7)\r\n}\r\n","/*\r\n * libmedia vp9 util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport AVStream from '../AVStream'\r\nimport { AVPacketSideDataType } from '../codec'\r\nimport { Uint8ArrayInterface } from 'common/io/interface'\r\nimport BitReader from 'common/io/BitReader'\r\nimport AVCodecParameters from '../struct/avcodecparameters'\r\nimport { NOPTS_VALUE } from '../constant'\r\nimport { getAVPixelFormatDescriptor } from '../pixelFormatDescriptor'\r\nimport { avQ2D } from '../util/rational'\r\nimport { AVChromaLocation, AVColorRange, AVPixelFormat } from '../pixfmt'\r\nimport BufferWriter from 'common/io/BufferWriter'\r\nimport AVPacket from '../struct/avpacket'\r\n\r\nexport const enum VP9Profile {\r\n  Profile0,\r\n  Profile1,\r\n  Profile2,\r\n  Profile3\r\n}\r\n\r\nexport const VP9Profile2Name: Record<VP9Profile, string> = {\r\n  [VP9Profile.Profile0]: 'Profile0',\r\n  [VP9Profile.Profile1]: 'Profile1',\r\n  [VP9Profile.Profile2]: 'Profile2',\r\n  [VP9Profile.Profile3]: 'Profile3'\r\n}\r\n\r\nexport const LevelCapabilities = [\r\n  { level: 10, maxResolution: 512 * 384, maxFrameRate: 30 },\r\n  { level: 11, maxResolution: 512 * 384, maxFrameRate: 60 },\r\n  { level: 20, maxResolution: 960 * 540, maxFrameRate: 30 },\r\n  { level: 21, maxResolution: 960 * 540, maxFrameRate: 60 },\r\n  { level: 30, maxResolution: 1920 * 1080, maxFrameRate: 30 },\r\n  { level: 31, maxResolution: 1920 * 1080, maxFrameRate: 60 },\r\n  { level: 40, maxResolution: 2560 * 1440, maxFrameRate: 30 },\r\n  { level: 41, maxResolution: 2560 * 1440, maxFrameRate: 60 },\r\n  { level: 50, maxResolution: 3840 * 2160, maxFrameRate: 30 },\r\n  { level: 51, maxResolution: 3840 * 2160, maxFrameRate: 60 },\r\n  { level: 60, maxResolution: 4096 * 2160, maxFrameRate: 30 },\r\n  { level: 61, maxResolution: 4096 * 2160, maxFrameRate: 60 },\r\n  { level: 70, maxResolution: 8192 * 4320, maxFrameRate: 30 },\r\n  { level: 71, maxResolution: 8192 * 4320, maxFrameRate: 60 }\r\n]\r\n\r\nexport function getLevelByResolution(width: number, height: number, fps: number) {\r\n  const resolution = width * height\r\n  for (const level of LevelCapabilities) {\r\n    if (resolution <= level.maxResolution && fps <= level.maxFrameRate) {\r\n      return level.level\r\n    }\r\n  }\r\n}\r\n\r\nexport function parseAVCodecParameters(stream: AVStream, extradata?: Uint8ArrayInterface) {\r\n  if (!extradata && stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]) {\r\n    extradata = stream.sideData[AVPacketSideDataType.AV_PKT_DATA_NEW_EXTRADATA]\r\n  }\r\n  if (extradata && extradata.length >= 6) {\r\n    const params = parseExtraData(extradata)\r\n    stream.codecpar.profile = params.profile\r\n    stream.codecpar.level = params.level\r\n  }\r\n}\r\n\r\n/**\r\n * - 1 byte profile\r\n * - 1 byte level\r\n * - 4 bit bitdepth\r\n * - 3 bit chroma_subsampling\r\n * - 1 bit full_range_flag\r\n * - 1 byte color_primaries\r\n * - 1 byte color_trc\r\n * - 1 byte color_space\r\n * \r\n * @param extradata \r\n */\r\nexport function parseExtraData(extradata: Uint8ArrayInterface) {\r\n  const bitReader = new BitReader(extradata.length)\r\n  bitReader.appendBuffer(extradata)\r\n  const profile = bitReader.readU(8)\r\n  const level = bitReader.readU(8)\r\n  let bitDepth = bitReader.readU(4)\r\n  const chromaSubsampling = bitReader.readU(3)\r\n  const fullRangeFlag = bitReader.readU1()\r\n  const colorPrimaries = bitReader.readU(8)\r\n  const colorTrc = bitReader.readU(8)\r\n  const colorSpace = bitReader.readU(8)\r\n\r\n  return {\r\n    profile,\r\n    level,\r\n    bitDepth,\r\n    chromaSubsampling,\r\n    fullRangeFlag,\r\n    colorPrimaries,\r\n    colorTrc,\r\n    colorSpace\r\n  }\r\n}\r\n\r\nconst enum VPX_CHROMA_SUBSAMPLING {\r\n  VPX_SUBSAMPLING_420_VERTICAL = 0,\r\n  VPX_SUBSAMPLING_420_COLLOCATED_WITH_LUMA = 1,\r\n  VPX_SUBSAMPLING_422 = 2,\r\n  VPX_SUBSAMPLING_444 = 3\r\n}\r\n\r\nfunction getVpccFeature(codecpar: pointer<AVCodecParameters>) {\r\n  let profile = codecpar.profile\r\n  let level = codecpar.level\r\n  if (level === NOPTS_VALUE) {\r\n    level = getLevelByResolution(codecpar.width, codecpar.height, avQ2D(codecpar.framerate))\r\n  }\r\n  const desc = getAVPixelFormatDescriptor(codecpar.format as AVPixelFormat)\r\n\r\n  let bitDepth = codecpar.bitsPerCodedSample\r\n  let chromaSubsampling = VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_420_COLLOCATED_WITH_LUMA\r\n  if (desc) {\r\n    bitDepth = desc.comp[0].depth\r\n    if (desc.log2ChromaW === 1 && desc.log2ChromaH === 1) {\r\n      if (codecpar.chromaLocation === AVChromaLocation.AVCHROMA_LOC_LEFT) {\r\n        chromaSubsampling = VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_420_VERTICAL\r\n      }\r\n    }\r\n    else if (desc.log2ChromaW === 1 && desc.log2ChromaH === 0) {\r\n      chromaSubsampling = VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_422\r\n    }\r\n    else if (desc.log2ChromaW === 0 && desc.log2ChromaH === 0) {\r\n      chromaSubsampling = VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_444\r\n    }\r\n  }\r\n  const fullRange = codecpar.colorRange === AVColorRange.AVCOL_RANGE_JPEG ? 1 : 0\r\n\r\n  if (profile === NOPTS_VALUE && bitDepth) {\r\n    if (chromaSubsampling == VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_420_VERTICAL\r\n      || chromaSubsampling == VPX_CHROMA_SUBSAMPLING.VPX_SUBSAMPLING_420_COLLOCATED_WITH_LUMA\r\n    ) {\r\n      profile = (bitDepth == 8) ? VP9Profile.Profile0 : VP9Profile.Profile2\r\n    }\r\n    else {\r\n      profile = (bitDepth == 8) ? VP9Profile.Profile1 : VP9Profile.Profile3\r\n    }\r\n  }\r\n  return {\r\n    profile,\r\n    level,\r\n    bitDepth,\r\n    chromaSubsampling,\r\n    fullRange\r\n  }\r\n}\r\n\r\nexport function generateExtradata(codecpar: pointer<AVCodecParameters>) {\r\n  const ioWriter = new BufferWriter(new Uint8Array(8))\r\n  const vpcc = getVpccFeature(codecpar)\r\n  ioWriter.writeUint8(vpcc.profile)\r\n  ioWriter.writeUint8(vpcc.level)\r\n  ioWriter.writeUint8((vpcc.bitDepth << 4) | (vpcc.chromaSubsampling << 1) | vpcc.fullRange)\r\n  ioWriter.writeUint8(codecpar.colorPrimaries)\r\n  ioWriter.writeUint8(codecpar.colorTrc)\r\n  ioWriter.writeUint8(codecpar.colorSpace)\r\n  ioWriter.writeUint16(0)\r\n  return ioWriter.getWroteBuffer()\r\n}\r\n\r\nexport function isIDR(avpacket: pointer<AVPacket>) {\r\n  const first = accessof(avpacket.data)\r\n\r\n  const version = (first >>> 5) & 0x01\r\n  const high = (first >>> 4) & 0x01\r\n  const profile = (high << 1) + version\r\n\r\n  const showExistingFrame = (first >>> (profile === VP9Profile.Profile3 ? 2 : 3)) & 0x01\r\n\r\n  if (showExistingFrame) {\r\n    return false\r\n  }\r\n\r\n  return !((first >>> (profile === VP9Profile.Profile3 ? 1 : 2)) & 0x01)\r\n}\r\n","/*\r\n * libmedia AVPixelFormat\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nexport const AVPALETTE_SIZE = 1024\r\nexport const AVPALETTE_COUNT = 256\r\nexport const AV_VIDEO_MAX_PLANES = 4\r\n\r\nexport const enum AVPixelFormat {\r\n  AV_PIX_FMT_NONE = -1,\r\n  /**\r\n   * planar YUV 4:2:0, 12bpp, (1 Cr & Cb sample per 2x2 Y samples)\r\n   */\r\n  AV_PIX_FMT_YUV420P,\r\n  /**\r\n   * packed YUV 4:2:2, 16bpp, Y0 Cb Y1 Cr\r\n   */\r\n  AV_PIX_FMT_YUYV422,\r\n  /**\r\n   * packed RGB 8:8:8, 24bpp, RGBRGB...\r\n   */\r\n  AV_PIX_FMT_RGB24,\r\n  /**\r\n   * packed RGB 8:8:8, 24bpp, BGRBGR...\r\n   */\r\n  AV_PIX_FMT_BGR24,\r\n  /**\r\n   * planar YUV 4:2:2, 16bpp, (1 Cr & Cb sample per 2x1 Y samples)\r\n   */\r\n  AV_PIX_FMT_YUV422P,\r\n  /**\r\n   * planar YUV 4:4:4, 24bpp, (1 Cr & Cb sample per 1x1 Y samples)\r\n   */\r\n  AV_PIX_FMT_YUV444P,\r\n  /**\r\n   * planar YUV 4:1:0,  9bpp, (1 Cr & Cb sample per 4x4 Y samples)\r\n   */\r\n  AV_PIX_FMT_YUV410P,\r\n  /**\r\n   * planar YUV 4:1:1, 12bpp, (1 Cr & Cb sample per 4x1 Y samples)\r\n   */\r\n  AV_PIX_FMT_YUV411P,\r\n  /**\r\n   * Y 8bpp\r\n   */\r\n  AV_PIX_FMT_GRAY8,\r\n  /**\r\n   * Y 1bpp, 0 is white, 1 is black, in each byte pixels are ordered from the msb to the lsb\r\n   */\r\n  AV_PIX_FMT_MONOWHITE,\r\n  /**\r\n   *  Y ,  1bpp, 0 is black, 1 is white, in each byte pixels are ordered from the msb to the lsb\r\n   */\r\n  AV_PIX_FMT_MONOBLACK,\r\n  /**\r\n   * 8 bits with AV_PIX_FMT_RGB32 palette\r\n   */\r\n  AV_PIX_FMT_PAL8,\r\n  /**\r\n   * planar YUV 4:2:0, 12bpp, full scale (JPEG), deprecated in favor of AV_PIX_FMT_YUV420P and setting color_range\r\n   */\r\n  AV_PIX_FMT_YUVJ420P,\r\n  /**\r\n   * planar YUV 4:2:2, 16bpp, full scale (JPEG), deprecated in favor of AV_PIX_FMT_YUV422P and setting color_range\r\n   */\r\n  AV_PIX_FMT_YUVJ422P,\r\n  /**\r\n   * planar YUV 4:4:4, 24bpp, full scale (JPEG), deprecated in favor of AV_PIX_FMT_YUV444P and setting color_range\r\n   */\r\n  AV_PIX_FMT_YUVJ444P,\r\n  /**\r\n   * packed YUV 4:2:2, 16bpp, Cb Y0 Cr Y1\r\n   */\r\n  AV_PIX_FMT_UYVY422,\r\n  /**\r\n   * packed YUV 4:1:1, 12bpp, Cb Y0 Y1 Cr Y2 Y3\r\n   */\r\n  AV_PIX_FMT_UYYVYY411,\r\n  /**\r\n   * packed RGB 3:3:2,  8bpp, (msb)2B 3G 3R(lsb)\r\n   */\r\n  AV_PIX_FMT_BGR8,\r\n  /**\r\n   * packed RGB 1:2:1 bitstream,  4bpp, (msb)1B 2G 1R(lsb), a byte contains two pixels, the first pixel in the byte is the one composed by the 4 msb bits\r\n   */\r\n  AV_PIX_FMT_BGR4,\r\n  /**\r\n   * packed RGB 1:2:1,  8bpp, (msb)1B 2G 1R(lsb)\r\n   */\r\n  AV_PIX_FMT_BGR4_BYTE,\r\n  /**\r\n   * \r\n   */\r\n  AV_PIX_FMT_RGB8,\r\n  /**\r\n   * packed RGB 1:2:1 bitstream,  4bpp, (msb)1R 2G 1B(lsb), a byte contains two pixels, the first pixel in the byte is the one composed by the 4 msb bits\r\n   */\r\n  AV_PIX_FMT_RGB4,\r\n  /**\r\n   * packed RGB 1:2:1,  8bpp, (msb)1R 2G 1B(lsb)\r\n   */\r\n  AV_PIX_FMT_RGB4_BYTE,\r\n  /**\r\n   * planar YUV 4:2:0, 12bpp, 1 plane for Y and 1 plane for the UV components, which are interleaved (first byte U and the following byte V)\r\n   */\r\n  AV_PIX_FMT_NV12,\r\n  /**\r\n   * as above, but U and V bytes are swapped\r\n   */\r\n  AV_PIX_FMT_NV21,\r\n\r\n  /**\r\n   * packed ARGB 8:8:8:8, 32bpp, ARGBARGB...\r\n   */\r\n  AV_PIX_FMT_ARGB,\r\n  /**\r\n   * packed RGBA 8:8:8:8, 32bpp, RGBARGBA...\r\n   */\r\n  AV_PIX_FMT_RGBA,\r\n  /**\r\n   * packed ABGR 8:8:8:8, 32bpp, ABGRABGR...\r\n   */\r\n  AV_PIX_FMT_ABGR,\r\n  /**\r\n   * packed BGRA 8:8:8:8, 32bpp, BGRABGRA...\r\n   */\r\n  AV_PIX_FMT_BGRA,\r\n\r\n  /**\r\n   *  Y , 16bpp, big-endian\r\n   */\r\n  AV_PIX_FMT_GRAY16BE,\r\n  /**\r\n   * Y , 16bpp, little-endian\r\n   */\r\n  AV_PIX_FMT_GRAY16LE,\r\n  /**\r\n   * planar YUV 4:4:0 (1 Cr & Cb sample per 1x2 Y samples)\r\n   */\r\n  AV_PIX_FMT_YUV440P,\r\n  /**\r\n   * planar YUV 4:4:0 full scale (JPEG), deprecated in favor of AV_PIX_FMT_YUV440P and setting color_range\r\n   */\r\n  AV_PIX_FMT_YUVJ440P,\r\n  /**\r\n   * planar YUV 4:2:0, 20bpp, (1 Cr & Cb sample per 2x2 Y & A samples)\r\n   */\r\n  AV_PIX_FMT_YUVA420P,\r\n  /**\r\n   * packed RGB 16:16:16, 48bpp, 16R, 16G, 16B, the 2-byte value for each R/G/B component is stored as big-endian\r\n   */\r\n  AV_PIX_FMT_RGB48BE,\r\n  /**\r\n   * packed RGB 16:16:16, 48bpp, 16R, 16G, 16B, the 2-byte value for each R/G/B component is stored as little-endian\r\n   */\r\n  AV_PIX_FMT_RGB48LE,\r\n\r\n  /**\r\n   * packed RGB 5:6:5, 16bpp, (msb)   5R 6G 5B(lsb), big-endian\r\n   */\r\n  AV_PIX_FMT_RGB565BE,\r\n  /**\r\n   * packed RGB 5:6:5, 16bpp, (msb)   5R 6G 5B(lsb), little-endian\r\n   */\r\n  AV_PIX_FMT_RGB565LE,\r\n  /**\r\n   * packed RGB 5:5:5, 16bpp, (msb)1X 5R 5G 5B(lsb), big-endian   , X=unused/undefined\r\n   */\r\n  AV_PIX_FMT_RGB555BE,\r\n  /**\r\n   * packed RGB 5:5:5, 16bpp, (msb)1X 5R 5G 5B(lsb), little-endian, X=unused/undefined\r\n   */\r\n  AV_PIX_FMT_RGB555LE,\r\n\r\n  /**\r\n   * packed BGR 5:6:5, 16bpp, (msb)   5B 6G 5R(lsb), big-endian\r\n   */\r\n  AV_PIX_FMT_BGR565BE,\r\n  /**\r\n   * packed BGR 5:6:5, 16bpp, (msb)   5B 6G 5R(lsb), little-endian\r\n   */\r\n  AV_PIX_FMT_BGR565LE,\r\n  /**\r\n   * packed BGR 5:5:5, 16bpp, (msb)1X 5B 5G 5R(lsb), big-endian   , X=unused/undefined\r\n   */\r\n  AV_PIX_FMT_BGR555BE,\r\n  /**\r\n   * packed BGR 5:5:5, 16bpp, (msb)1X 5B 5G 5R(lsb), little-endian, X=unused/undefined\r\n   */\r\n  AV_PIX_FMT_BGR555LE,\r\n\r\n  /**\r\n   *  Hardware acceleration through VA-API, data[3] contains a\r\n   *  VASurfaceID.\r\n   */\r\n  AV_PIX_FMT_VAAPI,\r\n\r\n  /**\r\n   * planar YUV 4:2:0, 24bpp, (1 Cr & Cb sample per 2x2 Y samples), little-endian\r\n   */\r\n  AV_PIX_FMT_YUV420P16LE,\r\n  /**\r\n   * planar YUV 4:2:0, 24bpp, (1 Cr & Cb sample per 2x2 Y samples), big-endian\r\n   */\r\n  AV_PIX_FMT_YUV420P16BE,\r\n  /**\r\n   * planar YUV 4:2:2, 32bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian\r\n   */\r\n  AV_PIX_FMT_YUV422P16LE,\r\n  /**\r\n   *  planar YUV 4:2:2, 32bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian\r\n   */\r\n  AV_PIX_FMT_YUV422P16BE,\r\n  /**\r\n   * planar YUV 4:4:4, 48bpp, (1 Cr & Cb sample per 1x1 Y samples), little-endian\r\n   */\r\n  AV_PIX_FMT_YUV444P16LE,\r\n  /**\r\n   * planar YUV 4:4:4, 48bpp, (1 Cr & Cb sample per 1x1 Y samples), big-endian\r\n   */\r\n  AV_PIX_FMT_YUV444P16BE,\r\n  /**\r\n   * HW decoding through DXVA2, Picture.data[3] contains a LPDIRECT3DSURFACE9 pointer\r\n   */\r\n  AV_PIX_FMT_DXVA2_VLD,\r\n\r\n  /**\r\n   * packed RGB 4:4:4, 16bpp, (msb)4X 4R 4G 4B(lsb), little-endian, X=unused/undefined\r\n   */\r\n  AV_PIX_FMT_RGB444LE,\r\n  /**\r\n   * packed RGB 4:4:4, 16bpp, (msb)4X 4R 4G 4B(lsb), big-endian,    X=unused/undefined\r\n   */\r\n  AV_PIX_FMT_RGB444BE,\r\n  /**\r\n   * packed BGR 4:4:4, 16bpp, (msb)4X 4B 4G 4R(lsb), little-endian, X=unused/undefined\r\n   */\r\n  AV_PIX_FMT_BGR444LE,\r\n  /**\r\n   * packed BGR 4:4:4, 16bpp, (msb)4X 4B 4G 4R(lsb), big-endian,    X=unused/undefined\r\n   */\r\n  AV_PIX_FMT_BGR444BE,\r\n  /**\r\n   * 8 bits gray, 8 bits alpha\r\n   */\r\n  AV_PIX_FMT_YA8,\r\n\r\n  /**\r\n   * alias for AV_PIX_FMT_YA8\r\n   */\r\n  AV_PIX_FMT_Y400A = AV_PIX_FMT_YA8,\r\n  /**\r\n   * alias for AV_PIX_FMT_YA8\r\n   */\r\n  AV_PIX_FMT_GRAY8A = AV_PIX_FMT_YA8,\r\n\r\n  /**\r\n   * packed RGB 16:16:16, 48bpp, 16B, 16G, 16R, the 2-byte value for each R/G/B component is stored as big-endian\r\n   */\r\n  AV_PIX_FMT_BGR48BE,\r\n  /**\r\n   * packed RGB 16:16:16, 48bpp, 16B, 16G, 16R, the 2-byte value for each R/G/B component is stored as little-endian\r\n   */\r\n  AV_PIX_FMT_BGR48LE,\r\n\r\n  /**\r\n   * The following 12 formats have the disadvantage of needing 1 format for each bit depth.\r\n   * Notice that each 9/10 bits sample is stored in 16 bits with extra padding.\r\n   * If you want to support multiple bit depths, then using AV_PIX_FMT_YUV420P16* with the bpp stored separately is better.\r\n   */\r\n\r\n  /**\r\n   * planar YUV 4:2:0, 13.5bpp, (1 Cr & Cb sample per 2x2 Y samples), big-endian\r\n   */\r\n  AV_PIX_FMT_YUV420P9BE,\r\n  /**\r\n   * planar YUV 4:2:0, 13.5bpp, (1 Cr & Cb sample per 2x2 Y samples), little-endian\r\n   */\r\n  AV_PIX_FMT_YUV420P9LE,\r\n  /**\r\n   * planar YUV 4:2:0, 15bpp, (1 Cr & Cb sample per 2x2 Y samples), big-endian\r\n   */\r\n  AV_PIX_FMT_YUV420P10BE,\r\n  /**\r\n   * planar YUV 4:2:0, 15bpp, (1 Cr & Cb sample per 2x2 Y samples), little-endian\r\n   */\r\n  AV_PIX_FMT_YUV420P10LE,\r\n  /**\r\n   * planar YUV 4:2:2, 20bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian\r\n   */\r\n  AV_PIX_FMT_YUV422P10BE,\r\n  /**\r\n   * planar YUV 4:2:2, 20bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian\r\n   */\r\n  AV_PIX_FMT_YUV422P10LE,\r\n  /**\r\n   *  planar YUV 4:4:4, 27bpp, (1 Cr & Cb sample per 1x1 Y samples), big-endian\r\n   */\r\n  AV_PIX_FMT_YUV444P9BE,\r\n  /**\r\n   * planar YUV 4:4:4, 27bpp, (1 Cr & Cb sample per 1x1 Y samples), little-endian\r\n   */\r\n  AV_PIX_FMT_YUV444P9LE,\r\n  /**\r\n   * planar YUV 4:4:4, 30bpp, (1 Cr & Cb sample per 1x1 Y samples), big-endian\r\n   */\r\n  AV_PIX_FMT_YUV444P10BE,\r\n  /**\r\n   * planar YUV 4:4:4, 30bpp, (1 Cr & Cb sample per 1x1 Y samples), little-endian\r\n   */\r\n  AV_PIX_FMT_YUV444P10LE,\r\n  /**\r\n   * planar YUV 4:2:2, 18bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian\r\n   */\r\n  AV_PIX_FMT_YUV422P9BE,\r\n  /**\r\n   *  planar YUV 4:2:2, 18bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian\r\n   */\r\n  AV_PIX_FMT_YUV422P9LE,\r\n  /**\r\n   * planar GBR 4:4:4 24bpp\r\n   */\r\n  AV_PIX_FMT_GBRP,\r\n  /**\r\n   * alias for #AV_PIX_FMT_GBRP\r\n   */\r\n  AV_PIX_FMT_GBR24P = AV_PIX_FMT_GBRP,\r\n  /**\r\n   * planar GBR 4:4:4 27bpp, big-endian\r\n   */\r\n  AV_PIX_FMT_GBRP9BE,\r\n  /**\r\n   * planar GBR 4:4:4 27bpp, little-endian\r\n   */\r\n  AV_PIX_FMT_GBRP9LE,\r\n  /**\r\n   * planar GBR 4:4:4 30bpp, big-endian\r\n   */\r\n  AV_PIX_FMT_GBRP10BE,\r\n  /**\r\n   *  planar GBR 4:4:4 30bpp, little-endian\r\n   */\r\n  AV_PIX_FMT_GBRP10LE,\r\n  /**\r\n   * planar GBR 4:4:4 48bpp, big-endian\r\n   */\r\n  AV_PIX_FMT_GBRP16BE,\r\n  /**\r\n   * planar GBR 4:4:4 48bpp, little-endian\r\n   */\r\n  AV_PIX_FMT_GBRP16LE,\r\n  /**\r\n   * planar YUV 4:2:2 24bpp, (1 Cr & Cb sample per 2x1 Y & A samples)\r\n   */\r\n  AV_PIX_FMT_YUVA422P,\r\n  /**\r\n   * planar YUV 4:4:4 32bpp, (1 Cr & Cb sample per 1x1 Y & A samples)\r\n   */\r\n  AV_PIX_FMT_YUVA444P,\r\n  /**\r\n   * planar YUV 4:2:0 22.5bpp, (1 Cr & Cb sample per 2x2 Y & A samples), big-endian\r\n   */\r\n  AV_PIX_FMT_YUVA420P9BE,\r\n  /**\r\n   * planar YUV 4:2:0 22.5bpp, (1 Cr & Cb sample per 2x2 Y & A samples), little-endian\r\n   */\r\n  AV_PIX_FMT_YUVA420P9LE,\r\n  /**\r\n   * planar YUV 4:2:2 27bpp, (1 Cr & Cb sample per 2x1 Y & A samples), big-endian\r\n   */\r\n  AV_PIX_FMT_YUVA422P9BE,\r\n  /**\r\n   *  planar YUV 4:2:2 27bpp, (1 Cr & Cb sample per 2x1 Y & A samples), little-endian\r\n   */\r\n  AV_PIX_FMT_YUVA422P9LE,\r\n  /**\r\n   * planar YUV 4:4:4 36bpp, (1 Cr & Cb sample per 1x1 Y & A samples), big-endian\r\n   */\r\n  AV_PIX_FMT_YUVA444P9BE,\r\n  /**\r\n   * planar YUV 4:4:4 36bpp, (1 Cr & Cb sample per 1x1 Y & A samples), little-endian\r\n   */\r\n  AV_PIX_FMT_YUVA444P9LE,\r\n  /**\r\n   * planar YUV 4:2:0 25bpp, (1 Cr & Cb sample per 2x2 Y & A samples, big-endian)\r\n   */\r\n  AV_PIX_FMT_YUVA420P10BE,\r\n  /**\r\n   * planar YUV 4:2:0 25bpp, (1 Cr & Cb sample per 2x2 Y & A samples, little-endian)\r\n   */\r\n  AV_PIX_FMT_YUVA420P10LE,\r\n  /**\r\n   * planar YUV 4:2:2 30bpp, (1 Cr & Cb sample per 2x1 Y & A samples, big-endian)\r\n   */\r\n  AV_PIX_FMT_YUVA422P10BE,\r\n  /**\r\n   * planar YUV 4:2:2 30bpp, (1 Cr & Cb sample per 2x1 Y & A samples, little-endian)\r\n   */\r\n  AV_PIX_FMT_YUVA422P10LE,\r\n  /**\r\n   * planar YUV 4:4:4 40bpp, (1 Cr & Cb sample per 1x1 Y & A samples, big-endian)\r\n   */\r\n  AV_PIX_FMT_YUVA444P10BE,\r\n  /**\r\n   * planar YUV 4:4:4 40bpp, (1 Cr & Cb sample per 1x1 Y & A samples, little-endian)\r\n   */\r\n  AV_PIX_FMT_YUVA444P10LE,\r\n  /**\r\n   * planar YUV 4:2:0 40bpp, (1 Cr & Cb sample per 2x2 Y & A samples, big-endian)\r\n   */\r\n  AV_PIX_FMT_YUVA420P16BE,\r\n  /**\r\n   * planar YUV 4:2:0 40bpp, (1 Cr & Cb sample per 2x2 Y & A samples, little-endian)\r\n   */\r\n  AV_PIX_FMT_YUVA420P16LE,\r\n  /**\r\n   * planar YUV 4:2:2 48bpp, (1 Cr & Cb sample per 2x1 Y & A samples, big-endian)\r\n   */\r\n  AV_PIX_FMT_YUVA422P16BE,\r\n  /**\r\n   * planar YUV 4:2:2 48bpp, (1 Cr & Cb sample per 2x1 Y & A samples, little-endian)\r\n   */\r\n  AV_PIX_FMT_YUVA422P16LE,\r\n  /**\r\n   * planar YUV 4:4:4 64bpp, (1 Cr & Cb sample per 1x1 Y & A samples, big-endian)\r\n   */\r\n  AV_PIX_FMT_YUVA444P16BE,\r\n  /**\r\n   * planar YUV 4:4:4 64bpp, (1 Cr & Cb sample per 1x1 Y & A samples, little-endian)\r\n   */\r\n  AV_PIX_FMT_YUVA444P16LE,\r\n\r\n  /**\r\n   * HW acceleration through VDPAU, Picture.data[3] contains a VdpVideoSurface\r\n   */\r\n  AV_PIX_FMT_VDPAU,\r\n\r\n  /**\r\n   * packed XYZ 4:4:4, 36 bpp, (msb) 12X, 12Y, 12Z (lsb), the 2-byte value for each X/Y/Z is stored as little-endian, the 4 lower bits are set to 0\r\n   */\r\n  AV_PIX_FMT_XYZ12LE,\r\n  /**\r\n   * packed XYZ 4:4:4, 36 bpp, (msb) 12X, 12Y, 12Z (lsb), the 2-byte value for each X/Y/Z is stored as big-endian, the 4 lower bits are set to 0\r\n   */\r\n  AV_PIX_FMT_XYZ12BE,\r\n  /**\r\n   * interleaved chroma YUV 4:2:2, 16bpp, (1 Cr & Cb sample per 2x1 Y samples)\r\n   */\r\n  AV_PIX_FMT_NV16,\r\n  /**\r\n   * interleaved chroma YUV 4:2:2, 20bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian\r\n   */\r\n  AV_PIX_FMT_NV20LE,\r\n  /**\r\n   * interleaved chroma YUV 4:2:2, 20bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian\r\n   */\r\n  AV_PIX_FMT_NV20BE,\r\n\r\n  /**\r\n   * packed RGBA 16:16:16:16, 64bpp, 16R, 16G, 16B, 16A, the 2-byte value for each R/G/B/A component is stored as big-endian\r\n   */\r\n  AV_PIX_FMT_RGBA64BE,\r\n  /**\r\n   * packed RGBA 16:16:16:16, 64bpp, 16R, 16G, 16B, 16A, the 2-byte value for each R/G/B/A component is stored as little-endian\r\n   */\r\n  AV_PIX_FMT_RGBA64LE,\r\n  /**\r\n   * packed RGBA 16:16:16:16, 64bpp, 16B, 16G, 16R, 16A, the 2-byte value for each R/G/B/A component is stored as big-endian\r\n   */\r\n  AV_PIX_FMT_BGRA64BE,\r\n  /**\r\n   * packed RGBA 16:16:16:16, 64bpp, 16B, 16G, 16R, 16A, the 2-byte value for each R/G/B/A component is stored as little-endian\r\n   */\r\n  AV_PIX_FMT_BGRA64LE,\r\n\r\n  /**\r\n   * packed YUV 4:2:2, 16bpp, Y0 Cr Y1 Cb\r\n   */\r\n  AV_PIX_FMT_YVYU422,\r\n\r\n  /**\r\n   * 16 bits gray, 16 bits alpha (big-endian)\r\n   */\r\n  AV_PIX_FMT_YA16BE,\r\n  /**\r\n   * 16 bits gray, 16 bits alpha (little-endian)\r\n   */\r\n  AV_PIX_FMT_YA16LE,\r\n\r\n  /**\r\n   * planar GBRA 4:4:4:4 32bpp\r\n   */\r\n  AV_PIX_FMT_GBRAP,\r\n  /**\r\n   * planar GBRA 4:4:4:4 64bpp, big-endian\r\n   */\r\n  AV_PIX_FMT_GBRAP16BE,\r\n  /**\r\n   * planar GBRA 4:4:4:4 64bpp, little-endian\r\n   */\r\n  AV_PIX_FMT_GBRAP16LE,\r\n  /**\r\n   * HW acceleration through QSV, data[3] contains a pointer to the\r\n   * mfxFrameSurface1 structure.\r\n   *\r\n   * Before FFmpeg 5.0:\r\n   * mfxFrameSurface1.Data.MemId contains a pointer when importing\r\n   * the following frames as QSV frames:\r\n   *\r\n   * VAAPI:\r\n   * mfxFrameSurface1.Data.MemId contains a pointer to VASurfaceID\r\n   *\r\n   * DXVA2:\r\n   * mfxFrameSurface1.Data.MemId contains a pointer to IDirect3DSurface9\r\n   *\r\n   * FFmpeg 5.0 and above:\r\n   * mfxFrameSurface1.Data.MemId contains a pointer to the mfxHDLPair\r\n   * structure when importing the following frames as QSV frames:\r\n   *\r\n   * VAAPI:\r\n   * mfxHDLPair.first contains a VASurfaceID pointer.\r\n   * mfxHDLPair.second is always MFX_INFINITE.\r\n   *\r\n   * DXVA2:\r\n   * mfxHDLPair.first contains IDirect3DSurface9 pointer.\r\n   * mfxHDLPair.second is always MFX_INFINITE.\r\n   *\r\n   * D3D11:\r\n   * mfxHDLPair.first contains a ID3D11Texture2D pointer.\r\n   * mfxHDLPair.second contains the texture array index of the frame if the\r\n   * ID3D11Texture2D is an array texture, or always MFX_INFINITE if it is a\r\n   * normal texture.\r\n   */\r\n  AV_PIX_FMT_QSV,\r\n  /**\r\n   * HW acceleration though MMAL, data[3] contains a pointer to the\r\n   * MMAL_BUFFER_HEADER_T structure.\r\n   */\r\n  AV_PIX_FMT_MMAL,\r\n\r\n  /**\r\n   * HW decoding through Direct3D11 via old API, Picture.data[3] contains a ID3D11VideoDecoderOutputView pointer\r\n   */\r\n  AV_PIX_FMT_D3D11VA_VLD,\r\n\r\n  /**\r\n   * HW acceleration through CUDA. data[i] contain CUdeviceptr pointers\r\n   * exactly as for system memory frames.\r\n   */\r\n  AV_PIX_FMT_CUDA,\r\n\r\n  /**\r\n   * packed RGB 8:8:8, 32bpp, XRGBXRGB...   X=unused/undefined\r\n   */\r\n  AV_PIX_FMT_0RGB,\r\n  /**\r\n   * packed RGB 8:8:8, 32bpp, RGBXRGBX...   X=unused/undefined\r\n   */\r\n  AV_PIX_FMT_RGB0,\r\n  /**\r\n   * packed BGR 8:8:8, 32bpp, XBGRXBGR...   X=unused/undefined\r\n   */\r\n  AV_PIX_FMT_0BGR,\r\n  /**\r\n   * packed BGR 8:8:8, 32bpp, BGRXBGRX...   X=unused/undefined\r\n   */\r\n  AV_PIX_FMT_BGR0,\r\n\r\n  /**\r\n   * planar YUV 4:2:0,18bpp, (1 Cr & Cb sample per 2x2 Y samples), big-endian\r\n   */\r\n  AV_PIX_FMT_YUV420P12BE,\r\n  /**\r\n   * planar YUV 4:2:0,18bpp, (1 Cr & Cb sample per 2x2 Y samples), little-endian\r\n   */\r\n  AV_PIX_FMT_YUV420P12LE,\r\n  /**\r\n   * planar YUV 4:2:0,21bpp, (1 Cr & Cb sample per 2x2 Y samples), big-endian\r\n   */\r\n  AV_PIX_FMT_YUV420P14BE,\r\n  /**\r\n   * planar YUV 4:2:0,21bpp, (1 Cr & Cb sample per 2x2 Y samples), little-endian\r\n   */\r\n  AV_PIX_FMT_YUV420P14LE,\r\n  /**\r\n   * planar YUV 4:2:2,24bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian\r\n   */\r\n  AV_PIX_FMT_YUV422P12BE,\r\n  /**\r\n   * planar YUV 4:2:2,24bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian\r\n   */\r\n  AV_PIX_FMT_YUV422P12LE,\r\n  /**\r\n   * planar YUV 4:2:2,28bpp, (1 Cr & Cb sample per 2x1 Y samples), big-endian\r\n   */\r\n  AV_PIX_FMT_YUV422P14BE,\r\n  /**\r\n   * planar YUV 4:2:2,28bpp, (1 Cr & Cb sample per 2x1 Y samples), little-endian\r\n   */\r\n  AV_PIX_FMT_YUV422P14LE,\r\n  /**\r\n   * planar YUV 4:4:4,36bpp, (1 Cr & Cb sample per 1x1 Y samples), big-endian\r\n   */\r\n  AV_PIX_FMT_YUV444P12BE,\r\n  /**\r\n   * planar YUV 4:4:4,36bpp, (1 Cr & Cb sample per 1x1 Y samples), little-endian\r\n   */\r\n  AV_PIX_FMT_YUV444P12LE,\r\n  /**\r\n   * planar YUV 4:4:4,42bpp, (1 Cr & Cb sample per 1x1 Y samples), big-endian\r\n   */\r\n  AV_PIX_FMT_YUV444P14BE,\r\n  /**\r\n   * planar YUV 4:4:4,42bpp, (1 Cr & Cb sample per 1x1 Y samples), little-endian\r\n   */\r\n  AV_PIX_FMT_YUV444P14LE,\r\n  /**\r\n   * planar GBR 4:4:4 36bpp, big-endian\r\n   */\r\n  AV_PIX_FMT_GBRP12BE,\r\n  /**\r\n   * planar GBR 4:4:4 36bpp, little-endian\r\n   */\r\n  AV_PIX_FMT_GBRP12LE,\r\n  /**\r\n   * planar GBR 4:4:4 42bpp, big-endian\r\n   */\r\n  AV_PIX_FMT_GBRP14BE,\r\n  /**\r\n   * planar GBR 4:4:4 42bpp, little-endian\r\n   */\r\n  AV_PIX_FMT_GBRP14LE,\r\n  /**\r\n   * planar YUV 4:1:1, 12bpp, (1 Cr & Cb sample per 4x1 Y samples) full scale (JPEG), deprecated in favor of AV_PIX_FMT_YUV411P and setting color_range\r\n   */\r\n  AV_PIX_FMT_YUVJ411P,\r\n\r\n  /**\r\n   * bayer, BGBG..(odd line), GRGR..(even line), 8-bit samples\r\n   */\r\n  AV_PIX_FMT_BAYER_BGGR8,\r\n  /**\r\n   * bayer, RGRG..(odd line), GBGB..(even line), 8-bit samples\r\n   */\r\n  AV_PIX_FMT_BAYER_RGGB8,\r\n  /**\r\n   * bayer, GBGB..(odd line), RGRG..(even line), 8-bit samples\r\n   */\r\n  AV_PIX_FMT_BAYER_GBRG8,\r\n  /**\r\n   * bayer, GRGR..(odd line), BGBG..(even line), 8-bit samples\r\n   */\r\n  AV_PIX_FMT_BAYER_GRBG8,\r\n  /**\r\n   * bayer, BGBG..(odd line), GRGR..(even line), 16-bit samples, little-endian\r\n   */\r\n  AV_PIX_FMT_BAYER_BGGR16LE,\r\n  /**\r\n   * bayer, BGBG..(odd line), GRGR..(even line), 16-bit samples, big-endian\r\n   */\r\n  AV_PIX_FMT_BAYER_BGGR16BE,\r\n  /**\r\n   * bayer, RGRG..(odd line), GBGB..(even line), 16-bit samples, little-endian\r\n   */\r\n  AV_PIX_FMT_BAYER_RGGB16LE,\r\n  /**\r\n   * bayer, RGRG..(odd line), GBGB..(even line), 16-bit samples, big-endian\r\n   */\r\n  AV_PIX_FMT_BAYER_RGGB16BE,\r\n  /**\r\n   * bayer, GBGB..(odd line), RGRG..(even line), 16-bit samples, little-endian\r\n   */\r\n  AV_PIX_FMT_BAYER_GBRG16LE,\r\n  /**\r\n   * bayer, GBGB..(odd line), RGRG..(even line), 16-bit samples, big-endian\r\n   */\r\n  AV_PIX_FMT_BAYER_GBRG16BE,\r\n  /**\r\n   *  bayer, GRGR..(odd line), BGBG..(even line), 16-bit samples, little-endian\r\n   */\r\n  AV_PIX_FMT_BAYER_GRBG16LE,\r\n  /**\r\n   * bayer, GRGR..(odd line), BGBG..(even line), 16-bit samples, big-endian\r\n   */\r\n  AV_PIX_FMT_BAYER_GRBG16BE,\r\n\r\n  /**\r\n   * planar YUV 4:4:0,20bpp, (1 Cr & Cb sample per 1x2 Y samples), little-endian\r\n   */\r\n  AV_PIX_FMT_YUV440P10LE,\r\n  /**\r\n   * planar YUV 4:4:0,20bpp, (1 Cr & Cb sample per 1x2 Y samples), big-endian\r\n   */\r\n  AV_PIX_FMT_YUV440P10BE,\r\n  /**\r\n   * planar YUV 4:4:0,24bpp, (1 Cr & Cb sample per 1x2 Y samples), little-endian\r\n   */\r\n  AV_PIX_FMT_YUV440P12LE,\r\n  /**\r\n   * planar YUV 4:4:0,24bpp, (1 Cr & Cb sample per 1x2 Y samples), big-endian\r\n   */\r\n  AV_PIX_FMT_YUV440P12BE,\r\n  /**\r\n   * packed AYUV 4:4:4,64bpp (1 Cr & Cb sample per 1x1 Y & A samples), little-endian\r\n   */\r\n  AV_PIX_FMT_AYUV64LE,\r\n  /**\r\n   * packed AYUV 4:4:4,64bpp (1 Cr & Cb sample per 1x1 Y & A samples), big-endian\r\n   */\r\n  AV_PIX_FMT_AYUV64BE,\r\n\r\n  /**\r\n   * hardware decoding through Videotoolbox\r\n   */\r\n  AV_PIX_FMT_VIDEOTOOLBOX,\r\n\r\n  /**\r\n   * like NV12, with 10bpp per component, data in the high bits, zeros in the low bits, little-endian\r\n   */\r\n  AV_PIX_FMT_P010LE,\r\n  /**\r\n   * like NV12, with 10bpp per component, data in the high bits, zeros in the low bits, big-endian\r\n   */\r\n  AV_PIX_FMT_P010BE,\r\n\r\n  /**\r\n   * planar GBR 4:4:4:4 48bpp, big-endian\r\n   */\r\n  AV_PIX_FMT_GBRAP12BE,\r\n  /**\r\n   * planar GBR 4:4:4:4 48bpp, little-endian\r\n   */\r\n  AV_PIX_FMT_GBRAP12LE,\r\n\r\n  /**\r\n   * planar GBR 4:4:4:4 40bpp, big-endian\r\n   */\r\n  AV_PIX_FMT_GBRAP10BE,\r\n  /**\r\n   * planar GBR 4:4:4:4 40bpp, little-endian\r\n   */\r\n  AV_PIX_FMT_GBRAP10LE,\r\n\r\n  /**\r\n   * hardware decoding through MediaCodec\r\n   */\r\n  AV_PIX_FMT_MEDIACODEC,\r\n\r\n  /**\r\n   * Y , 12bpp, big-endian\r\n   */\r\n  AV_PIX_FMT_GRAY12BE,\r\n  /**\r\n   *  Y , 12bpp, little-endian\r\n   */\r\n  AV_PIX_FMT_GRAY12LE,\r\n  /**\r\n   * Y , 10bpp, big-endian\r\n   */\r\n  AV_PIX_FMT_GRAY10BE,\r\n  /**\r\n   * Y , 10bpp, little-endian\r\n   */\r\n  AV_PIX_FMT_GRAY10LE,\r\n\r\n  /**\r\n   * like NV12, with 16bpp per component, little-endian\r\n   */\r\n  AV_PIX_FMT_P016LE,\r\n  /**\r\n   * like NV12, with 16bpp per component, big-endian\r\n   */\r\n  AV_PIX_FMT_P016BE,\r\n\r\n  /**\r\n   * Hardware surfaces for Direct3D11.\r\n   *\r\n   * This is preferred over the legacy AV_PIX_FMT_D3D11VA_VLD. The new D3D11\r\n   * hwaccel API and filtering support AV_PIX_FMT_D3D11 only.\r\n   *\r\n   * data[0] contains a ID3D11Texture2D pointer, and data[1] contains the\r\n   * texture array index of the frame as intptr_t if the ID3D11Texture2D is\r\n   * an array texture (or always 0 if it's a normal texture).\r\n   */\r\n  AV_PIX_FMT_D3D11,\r\n\r\n  /**\r\n   * Y, 9bpp, big-endian\r\n   */\r\n  AV_PIX_FMT_GRAY9BE,\r\n  /**\r\n   *  Y , 9bpp, little-endian\r\n   */\r\n  AV_PIX_FMT_GRAY9LE,\r\n\r\n  /**\r\n   * IEEE-754 single precision planar GBR 4:4:4,     96bpp, big-endian\r\n   */\r\n  AV_PIX_FMT_GBRPF32BE,\r\n  /**\r\n   *  IEEE-754 single precision planar GBR 4:4:4,     96bpp, little-endian\r\n   */\r\n  AV_PIX_FMT_GBRPF32LE,\r\n  /**\r\n   * IEEE-754 single precision planar GBRA 4:4:4:4, 128bpp, big-endian\r\n   */\r\n  AV_PIX_FMT_GBRAPF32BE,\r\n  /**\r\n   * IEEE-754 single precision planar GBRA 4:4:4:4, 128bpp, little-endian\r\n   */\r\n  AV_PIX_FMT_GBRAPF32LE,\r\n\r\n  /**\r\n   * DRM-managed buffers exposed through PRIME buffer sharing.\r\n   *\r\n   * data[0] points to an AVDRMFrameDescriptor.\r\n   */\r\n  AV_PIX_FMT_DRM_PRIME,\r\n  /**\r\n   * Hardware surfaces for OpenCL.\r\n   *\r\n   * data[i] contain 2D image objects (typed in C as cl_mem, used\r\n   * in OpenCL as image2d_t) for each plane of the surface.\r\n   */\r\n  AV_PIX_FMT_OPENCL,\r\n\r\n  /**\r\n   * Y , 14bpp, big-endian\r\n   */\r\n  AV_PIX_FMT_GRAY14BE,\r\n  /**\r\n   * Y 14bpp, little-endian\r\n   */\r\n  AV_PIX_FMT_GRAY14LE,\r\n\r\n  /**\r\n   * IEEE-754 single precision Y, 32bpp, big-endian\r\n   */\r\n  AV_PIX_FMT_GRAYF32BE,\r\n  /**\r\n   * IEEE-754 single precision Y, 32bpp, little-endian\r\n   */\r\n  AV_PIX_FMT_GRAYF32LE,\r\n\r\n  /**\r\n   * lanar YUV 4:2:2,24bpp, (1 Cr & Cb sample per 2x1 Y samples), 12b alpha, big-endian\r\n   */\r\n  AV_PIX_FMT_YUVA422P12BE,\r\n  /**\r\n   * planar YUV 4:2:2,24bpp, (1 Cr & Cb sample per 2x1 Y samples), 12b alpha, little-endian\r\n   */\r\n  AV_PIX_FMT_YUVA422P12LE,\r\n  /**\r\n   * planar YUV 4:4:4,36bpp, (1 Cr & Cb sample per 1x1 Y samples), 12b alpha, big-endian\r\n   */\r\n  AV_PIX_FMT_YUVA444P12BE,\r\n  /**\r\n   *  planar YUV 4:4:4,36bpp, (1 Cr & Cb sample per 1x1 Y samples), 12b alpha, little-endian\r\n   */\r\n  AV_PIX_FMT_YUVA444P12LE,\r\n\r\n  /**\r\n   * planar YUV 4:4:4, 24bpp, 1 plane for Y and 1 plane for the UV components, which are interleaved (first byte U and the following byte V)\r\n   */\r\n  AV_PIX_FMT_NV24,\r\n  /**\r\n   * as above, but U and V bytes are swapped\r\n   */\r\n  AV_PIX_FMT_NV42,\r\n\r\n  /**\r\n   * Vulkan hardware images.\r\n   *\r\n   * data[0] points to an AVVkFrame\r\n   */\r\n  AV_PIX_FMT_VULKAN,\r\n\r\n  /**\r\n   * packed YUV 4:2:2 like YUYV422, 20bpp, data in the high bits, big-endian\r\n   */\r\n  AV_PIX_FMT_Y210BE,\r\n  /**\r\n   *  packed YUV 4:2:2 like YUYV422, 20bpp, data in the high bits, little-endian\r\n   */\r\n  AV_PIX_FMT_Y210LE,\r\n\r\n  /**\r\n   * packed RGB 10:10:10, 30bpp, (msb)2X 10R 10G 10B(lsb), little-endian, X=unused/undefined\r\n   */\r\n  AV_PIX_FMT_X2RGB10LE,\r\n  /**\r\n   * packed RGB 10:10:10, 30bpp, (msb)2X 10R 10G 10B(lsb), big-endian, X=unused/undefined\r\n   */\r\n  AV_PIX_FMT_X2RGB10BE,\r\n  /**\r\n   *  packed BGR 10:10:10, 30bpp, (msb)2X 10B 10G 10R(lsb), little-endian, X=unused/undefined\r\n   */\r\n  AV_PIX_FMT_X2BGR10LE,\r\n  /**\r\n   * packed BGR 10:10:10, 30bpp, (msb)2X 10B 10G 10R(lsb), big-endian, X=unused/undefined\r\n   */\r\n  AV_PIX_FMT_X2BGR10BE,\r\n\r\n  /**\r\n   * interleaved chroma YUV 4:2:2, 20bpp, data in the high bits, big-endian\r\n   */\r\n  AV_PIX_FMT_P210BE,\r\n  /**\r\n   * interleaved chroma YUV 4:2:2, 20bpp, data in the high bits, little-endian\r\n   */\r\n  AV_PIX_FMT_P210LE,\r\n\r\n  /**\r\n   * interleaved chroma YUV 4:4:4, 30bpp, data in the high bits, big-endian\r\n   */\r\n  AV_PIX_FMT_P410BE,\r\n  /**\r\n   * interleaved chroma YUV 4:4:4, 30bpp, data in the high bits, little-endian\r\n   */\r\n  AV_PIX_FMT_P410LE,\r\n\r\n  /**\r\n   * interleaved chroma YUV 4:2:2, 32bpp, big-endian\r\n   */\r\n  AV_PIX_FMT_P216BE,\r\n  /**\r\n   * interleaved chroma YUV 4:2:2, 32bpp, little-endian\r\n   */\r\n  AV_PIX_FMT_P216LE,\r\n\r\n  /**\r\n   * interleaved chroma YUV 4:4:4, 48bpp, big-endian\r\n   */\r\n  AV_PIX_FMT_P416BE,\r\n  /**\r\n   * interleaved chroma YUV 4:4:4, 48bpp, little-endian\r\n   */\r\n  AV_PIX_FMT_P416LE,\r\n\r\n  /**\r\n   * packed VUYA 4:4:4, 32bpp, VUYAVUYA...\r\n   */\r\n  AV_PIX_FMT_VUYA,\r\n\r\n  /**\r\n   * IEEE-754 half precision packed RGBA 16:16:16:16, 64bpp, RGBARGBA..., big-endian\r\n   */\r\n  AV_PIX_FMT_RGBAF16BE,\r\n  /**\r\n   * IEEE-754 half precision packed RGBA 16:16:16:16, 64bpp, RGBARGBA..., little-endian\r\n   */\r\n  AV_PIX_FMT_RGBAF16LE,\r\n\r\n  /**\r\n   * packed VUYX 4:4:4, 32bpp, Variant of VUYA where alpha channel is left undefined\r\n   */\r\n  AV_PIX_FMT_VUYX,\r\n\r\n  /**\r\n   * like NV12, with 12bpp per component, data in the high bits, zeros in the low bits, little-endian\r\n   */\r\n  AV_PIX_FMT_P012LE,\r\n  /**\r\n   * like NV12, with 12bpp per component, data in the high bits, zeros in the low bits, big-endian\r\n   */\r\n  AV_PIX_FMT_P012BE,\r\n\r\n  /**\r\n   * packed YUV 4:2:2 like YUYV422, 24bpp, data in the high bits, zeros in the low bits, big-endian\r\n   */\r\n  AV_PIX_FMT_Y212BE,\r\n  /**\r\n   * packed YUV 4:2:2 like YUYV422, 24bpp, data in the high bits, zeros in the low bits, little-endian\r\n   */\r\n  AV_PIX_FMT_Y212LE,\r\n\r\n  /**\r\n   * packed XVYU 4:4:4, 32bpp, (msb)2X 10V 10Y 10U(lsb), big-endian, variant of Y410 where alpha channel is left undefined\r\n   */\r\n  AV_PIX_FMT_XV30BE,\r\n  /**\r\n   * packed XVYU 4:4:4, 32bpp, (msb)2X 10V 10Y 10U(lsb), little-endian, variant of Y410 where alpha channel is left undefined\r\n   */\r\n  AV_PIX_FMT_XV30LE,\r\n\r\n  /**\r\n   * packed XVYU 4:4:4, 48bpp, data in the high bits, zeros in the low bits, big-endian, variant of Y412 where alpha channel is left undefined\r\n   */\r\n  AV_PIX_FMT_XV36BE,\r\n  /**\r\n   * packed XVYU 4:4:4, 48bpp, data in the high bits, zeros in the low bits, little-endian, variant of Y412 where alpha channel is left undefined\r\n   */\r\n  AV_PIX_FMT_XV36LE,\r\n\r\n  /**\r\n   * IEEE-754 single precision packed RGB 32:32:32, 96bpp, RGBRGB..., big-endian\r\n   */\r\n  AV_PIX_FMT_RGBF32BE,\r\n  /**\r\n   * IEEE-754 single precision packed RGB 32:32:32, 96bpp, RGBRGB..., little-endian\r\n   */\r\n  AV_PIX_FMT_RGBF32LE,\r\n\r\n  /**\r\n   * IEEE-754 single precision packed RGBA 32:32:32:32, 128bpp, RGBARGBA..., big-endian\r\n   */\r\n  AV_PIX_FMT_RGBAF32BE,\r\n  /**\r\n   * IEEE-754 single precision packed RGBA 32:32:32:32, 128bpp, RGBARGBA..., little-endian\r\n   */\r\n  AV_PIX_FMT_RGBAF32LE,\r\n\r\n  /**\r\n   * interleaved chroma YUV 4:2:2, 24bpp, data in the high bits, big-endian\r\n   */\r\n  AV_PIX_FMT_P212BE,\r\n  /**\r\n   * interleaved chroma YUV 4:2:2, 24bpp, data in the high bits, little-endian\r\n   */\r\n  AV_PIX_FMT_P212LE,\r\n\r\n  /**\r\n   * interleaved chroma YUV 4:4:4, 36bpp, data in the high bits, big-endian\r\n   */\r\n  AV_PIX_FMT_P412BE,\r\n  /**\r\n   * interleaved chroma YUV 4:4:4, 36bpp, data in the high bits, little-endian\r\n   */\r\n  AV_PIX_FMT_P412LE,\r\n\r\n  /**\r\n   * planar GBR 4:4:4:4 56bpp, big-endian\r\n   */\r\n  AV_PIX_FMT_GBRAP14BE,\r\n  /**\r\n   * planar GBR 4:4:4:4 56bpp, little-endian\r\n   */\r\n  AV_PIX_FMT_GBRAP14LE,\r\n\r\n  /**\r\n   * Hardware surfaces for Direct3D 12.\r\n   *\r\n   * data[0] points to an AVD3D12VAFrame\r\n   */\r\n  AV_PIX_FMT_D3D12,\r\n\r\n  /**\r\n   * number of pixel formats, DO NOT USE THIS if you want to link with shared libav* because the number of formats might differ between versions\r\n   */\r\n  AV_PIX_FMT_NB\r\n}\r\n\r\n/**\r\n * Chromaticity coordinates of the source primaries.\r\n * These values match the ones defined by ISO/IEC 23091-2_2019 subclause 8.1 and ITU-T H.273.\r\n */\r\nexport const enum AVColorPrimaries {\r\n  AVCOL_PRI_RESERVED0 = 0,\r\n  /**\r\n   * also ITU-R BT1361 / IEC 61966-2-4 / SMPTE RP 177 Annex B\r\n   */\r\n  AVCOL_PRI_BT709 = 1,\r\n  AVCOL_PRI_UNSPECIFIED = 2,\r\n  AVCOL_PRI_RESERVED = 3,\r\n  /**\r\n   * also FCC Title 47 Code of Federal Regulations 73.682 (a)(20)\r\n   */\r\n  AVCOL_PRI_BT470M = 4,\r\n\r\n  /**\r\n   * also ITU-R BT601-6 625 / ITU-R BT1358 625 / ITU-R BT1700 625 PAL & SECAM\r\n   */\r\n  AVCOL_PRI_BT470BG = 5,\r\n  /**\r\n   * also ITU-R BT601-6 525 / ITU-R BT1358 525 / ITU-R BT1700 NTSC\r\n   */\r\n  AVCOL_PRI_SMPTE170M = 6,\r\n  /**\r\n   * identical to above, also called \"SMPTE C\" even though it uses D65\r\n   */\r\n  AVCOL_PRI_SMPTE240M = 7,\r\n  /**\r\n   * colour filters using Illuminant C\r\n   */\r\n  AVCOL_PRI_FILM = 8,\r\n  /**\r\n   * ITU-R BT2020\r\n   */\r\n  AVCOL_PRI_BT2020 = 9,\r\n  /**\r\n   * SMPTE ST 428-1 (CIE 1931 XYZ)\r\n   */\r\n  AVCOL_PRI_SMPTE428 = 10,\r\n  AVCOL_PRI_SMPTEST428_1 = AVCOL_PRI_SMPTE428,\r\n  /**\r\n   * SMPTE ST 431-2 (2011) / DCI P3\r\n   */\r\n  AVCOL_PRI_SMPTE431 = 11,\r\n  /**\r\n   * SMPTE ST 432-1 (2010) / P3 D65 / Display P3\r\n   */\r\n  AVCOL_PRI_SMPTE432 = 12,\r\n  /**\r\n   * EBU Tech. 3213-E (nothing there) / one of JEDEC P22 group phosphors\r\n   */\r\n  AVCOL_PRI_EBU3213 = 22,\r\n  AVCOL_PRI_JEDEC_P22 = AVCOL_PRI_EBU3213,\r\n  /**\r\n   * Not part of ABI\r\n   */\r\n  AVCOL_PRI_NB\r\n}\r\n\r\n/**\r\n * Color Transfer Characteristic.\r\n * These values match the ones defined by ISO/IEC 23091-2_2019 subclause 8.2.\r\n */\r\nexport const enum AVColorTransferCharacteristic {\r\n  AVCOL_TRC_RESERVED0 = 0,\r\n  /**\r\n   * also ITU-R BT1361\r\n   */\r\n  AVCOL_TRC_BT709 = 1,\r\n  AVCOL_TRC_UNSPECIFIED = 2,\r\n  AVCOL_TRC_RESERVED = 3,\r\n  /**\r\n   * also ITU-R BT470M / ITU-R BT1700 625 PAL & SECAM\r\n   */\r\n  AVCOL_TRC_GAMMA22 = 4,\r\n  /**\r\n   * also ITU-R BT470BG\r\n   */\r\n  AVCOL_TRC_GAMMA28 = 5,\r\n  /**\r\n   * also ITU-R BT601-6 525 or 625 / ITU-R BT1358 525 or 625 / ITU-R BT1700 NTSC\r\n   */\r\n  AVCOL_TRC_SMPTE170M = 6,\r\n  AVCOL_TRC_SMPTE240M  = 7,\r\n  /**\r\n   * Linear transfer characteristics\r\n   */\r\n  AVCOL_TRC_LINEAR = 8,\r\n  /**\r\n   * Logarithmic transfer characteristic (100:1 range)\r\n   */\r\n  AVCOL_TRC_LOG = 9,\r\n  /**\r\n   * Logarithmic transfer characteristic (100 * Sqrt(10) : 1 range)\r\n   */\r\n  AVCOL_TRC_LOG_SQRT = 10,\r\n  /**\r\n   * IEC 61966-2-4\r\n   */\r\n  AVCOL_TRC_IEC61966_2_4 = 11,\r\n  /**\r\n   * ITU-R BT1361 Extended Colour Gamut\r\n   */\r\n  AVCOL_TRC_BT1361_ECG = 12,\r\n  /**\r\n   * IEC 61966-2-1 (sRGB or sYCC)\r\n   */\r\n  AVCOL_TRC_IEC61966_2_1 = 13,\r\n  /**\r\n   * ITU-R BT2020 for 10-bit system\r\n   */\r\n  AVCOL_TRC_BT2020_10 = 14,\r\n  /**\r\n   * ITU-R BT2020 for 12-bit system\r\n   */\r\n  AVCOL_TRC_BT2020_12 = 15,\r\n  /**\r\n   * SMPTE ST 2084 for 10-, 12-, 14- and 16-bit systems\r\n   */\r\n  AVCOL_TRC_SMPTE2084 = 16,\r\n  AVCOL_TRC_SMPTEST2084 = AVCOL_TRC_SMPTE2084,\r\n  /**\r\n   * SMPTE ST 428-1\r\n   */\r\n  AVCOL_TRC_SMPTE428 = 17,\r\n  AVCOL_TRC_SMPTEST428_1 = AVCOL_TRC_SMPTE428,\r\n  /**\r\n   * ARIB STD-B67, known as \"Hybrid log-gamma\"\r\n   */\r\n  AVCOL_TRC_ARIB_STD_B67 = 18,\r\n  /**\r\n   * Not part of ABI\r\n   */\r\n  AVCOL_TRC_NB\r\n}\r\n\r\n/**\r\n * YUV colorspace type.\r\n * These values match the ones defined by ISO/IEC 23091-2_2019 subclause 8.3.\r\n */\r\nexport const enum AVColorSpace {\r\n  /**\r\n   * order of coefficients is actually GBR, also IEC 61966-2-1 (sRGB), YZX and ST 428-1\r\n   */\r\n  AVCOL_SPC_RGB = 0,\r\n  /**\r\n   * also ITU-R BT1361 / IEC 61966-2-4 xvYCC709 / derived in SMPTE RP 177 Annex B\r\n   */\r\n  AVCOL_SPC_BT709 = 1,\r\n  AVCOL_SPC_UNSPECIFIED = 2,\r\n  /**\r\n   * reserved for future use by ITU-T and ISO/IEC just like 15-255 are\r\n   */\r\n  AVCOL_SPC_RESERVED = 3,\r\n  /**\r\n   * FCC Title 47 Code of Federal Regulations 73.682 (a)(20)\r\n   */\r\n  AVCOL_SPC_FCC = 4,\r\n  /**\r\n   * also ITU-R BT601-6 625 / ITU-R BT1358 625 / ITU-R BT1700 625 PAL & SECAM / IEC 61966-2-4 xvYCC601\r\n   */\r\n  AVCOL_SPC_BT470BG = 5,\r\n  /**\r\n   * also ITU-R BT601-6 525 / ITU-R BT1358 525 / ITU-R BT1700 NTSC / functionally identical to above\r\n   */\r\n  AVCOL_SPC_SMPTE170M = 6,\r\n  /**\r\n   * derived from 170M primaries and D65 white point, 170M is derived from BT470 System M's primaries\r\n   */\r\n  AVCOL_SPC_SMPTE240M = 7,\r\n  /**\r\n   * used by Dirac / VC-2 and H.264 FRext, see ITU-T SG16\r\n   */\r\n  AVCOL_SPC_YCGCO = 8,\r\n  AVCOL_SPC_YCOCG = AVCOL_SPC_YCGCO,\r\n  /**\r\n   * ITU-R BT2020 non-constant luminance system\r\n   */\r\n  AVCOL_SPC_BT2020_NCL = 9,\r\n  /**\r\n   * ITU-R BT2020 constant luminance system\r\n   */\r\n  AVCOL_SPC_BT2020_CL = 10,\r\n  /**\r\n   * SMPTE 2085, Y'D'zD'x\r\n   */\r\n  AVCOL_SPC_SMPTE2085 = 11,\r\n  /**\r\n   * Chromaticity-derived non-constant luminance system\r\n   */\r\n  AVCOL_SPC_CHROMA_DERIVED_NCL = 12,\r\n  /**\r\n   * Chromaticity-derived constant luminance system\r\n   */\r\n  AVCOL_SPC_CHROMA_DERIVED_CL = 13,\r\n  /**\r\n   * ITU-R BT.2100-0, ICtCp\r\n   */\r\n  AVCOL_SPC_ICTCP = 14,\r\n  /**\r\n   * Not part of ABI\r\n   */\r\n  AVCOL_SPC_NB\r\n}\r\n\r\n/**\r\n * Visual content value range.\r\n *\r\n * These values are based on definitions that can be found in multiple\r\n * specifications, such as ITU-T BT.709 (3.4 - Quantization of RGB, luminance\r\n * and colour-difference signals), ITU-T BT.2020 (Table 5 - Digital\r\n * Representation) as well as ITU-T BT.2100 (Table 9 - Digital 10- and 12-bit\r\n * integer representation). At the time of writing, the BT.2100 one is\r\n * recommended, as it also defines the full range representation.\r\n *\r\n * Common definitions:\r\n *   - For RGB and luma planes such as Y in YCbCr and I in ICtCp,\r\n *     'E' is the original value in range of 0.0 to 1.0.\r\n *   - For chroma planes such as Cb, Cr and Ct, Cp, 'E' is the original\r\n *     value in range of -0.5 to 0.5.\r\n *   - 'n' is the output bit depth.\r\n *   - For additional definitions such as rounding and clipping to valid n\r\n *     bit unsigned integer range, please refer to BT.2100 (Table 9).\r\n */\r\nexport const enum AVColorRange {\r\n  AVCOL_RANGE_UNSPECIFIED = 0,\r\n\r\n  /**\r\n   * Narrow or limited range content.\r\n   *\r\n   * - For luma planes:\r\n   *\r\n   *       (219 * E + 16) * 2^(n-8)\r\n   *\r\n   *   F.ex. the range of 16-235 for 8 bits\r\n   *\r\n   * - For chroma planes:\r\n   *\r\n   *       (224 * E + 128) * 2^(n-8)\r\n   *\r\n   *   F.ex. the range of 16-240 for 8 bits\r\n   */\r\n  AVCOL_RANGE_MPEG = 1,\r\n\r\n  /**\r\n   * Full range content.\r\n   *\r\n   * - For RGB and luma planes:\r\n   *\r\n   *       (2^n - 1) * E\r\n   *\r\n   *   F.ex. the range of 0-255 for 8 bits\r\n   *\r\n   * - For chroma planes:\r\n   *\r\n   *       (2^n - 1) * E + 2^(n - 1)\r\n   *\r\n   *   F.ex. the range of 1-255 for 8 bits\r\n   */\r\n  AVCOL_RANGE_JPEG = 2,\r\n  /**\r\n   *  Not part of ABI\r\n   */\r\n  AVCOL_RANGE_NB\r\n}\r\n\r\n/**\r\n * Location of chroma samples.\r\n *\r\n * Illustration showing the location of the first (top left) chroma sample of the\r\n * image, the left shows only luma, the right\r\n * shows the location of the chroma sample, the 2 could be imagined to overlay\r\n * each other but are drawn separately due to limitations of ASCII\r\n *\r\n *                1st 2nd       1st 2nd horizontal luma sample positions\r\n *                 v   v         v   v\r\n *                 ______        ______\r\n *1st luma line > |X   X ...    |3 4 X ...     X are luma samples,\r\n *                |             |1 2           1-6 are possible chroma positions\r\n *2nd luma line > |X   X ...    |5 6 X ...     0 is undefined/unknown position\r\n */\r\nexport const enum AVChromaLocation {\r\n  AVCHROMA_LOC_UNSPECIFIED = 0,\r\n  /**\r\n   * MPEG-2/4 4:2:0, H.264 default for 4:2:0\r\n   */\r\n  AVCHROMA_LOC_LEFT = 1,\r\n  /**\r\n   * MPEG-1 4:2:0, JPEG 4:2:0, H.263 4:2:0\r\n   */\r\n  AVCHROMA_LOC_CENTER = 2,\r\n  /**\r\n   * ITU-R 601, SMPTE 274M 296M S314M(DV 4:1:1), mpeg2 4:2:2\r\n   */\r\n  AVCHROMA_LOC_TOPLEFT = 3,\r\n  AVCHROMA_LOC_TOP = 4,\r\n  AVCHROMA_LOC_BOTTOMLEFT = 5,\r\n  AVCHROMA_LOC_BOTTOM = 6,\r\n  /**\r\n   *  Not part of ABI\r\n   */\r\n  AVCHROMA_LOC_NB\r\n}\r\n\r\nexport const enum AVFieldOrder {\r\n  AV_FIELD_UNKNOWN,\r\n  AV_FIELD_PROGRESSIVE,\r\n  // < Top coded_first, top displayed first\r\n  AV_FIELD_TT,\r\n  // < Bottom coded first, bottom displayed first\r\n  AV_FIELD_BB,\r\n  // < Top coded first, bottom displayed first          \r\n  AV_FIELD_TB,\r\n  // < Bottom coded first, top displayed first\r\n  AV_FIELD_BT,\r\n}\r\n","/*\r\n * libmedia av1 syntax util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport BitReader from 'common/io/BitReader'\r\n\r\nexport function f(bitReader: BitReader, n: number) {\r\n  let x = 0\r\n  for (let i = 0; i < n; i++ ) {\r\n    x = 2 * x + bitReader.readU1()\r\n  }\r\n  return x\r\n}\r\n\r\nexport function uvlc(bitReader: BitReader) {\r\n  let leadingZeros = 0\r\n  while (true) {\r\n    let done = f(bitReader, 1)\r\n    if (done) {\r\n      break\r\n    }\r\n    leadingZeros++\r\n  }\r\n  if (leadingZeros >= 32) {\r\n    return (1 << 32) - 1\r\n  }\r\n  const value =\tf(bitReader, leadingZeros)\r\n  return value + (1 << leadingZeros) - 1\r\n}\r\n\r\nexport function le(bitReader: BitReader, n: number) {\r\n  let t = 0\r\n  for (let i = 0; i < n; i++) {\r\n    let byte = f(bitReader, 8)\r\n    t += (byte << (i * 8))\r\n  }\r\n  return t\r\n}\r\n\r\nexport function leb128(bitReader: BitReader) {\r\n  let value = 0\r\n  for (let i = 0; i < 8; i++ ) {\r\n    let next = f(bitReader, 8)\r\n    value |= ((next & 0x7f) << (i * 7))\r\n    if (!(next & 0x80)) {\r\n      break\r\n    }\r\n  }\r\n  return value\r\n}\r\n\r\nexport function su(bitReader: BitReader, n: number) {\r\n  let value = f(bitReader, n)\r\n  let signMask = 1 << (n - 1)\r\n  if (value & signMask) {\r\n    value = value - 2 * signMask\r\n  }\r\n  return value\r\n}\r\n\r\nexport function ns(bitReader: BitReader, n: number) {\r\n  let w = Math.floor(Math.log2(n)) + 1\r\n  let m = (1 << w) - n\r\n  let v =\tf(bitReader, w - 1)\r\n  if (v < m) {\r\n    return v\r\n  }\r\n  let extraBit =\tf(bitReader, 1)\r\n  return (v << 1) - m + extraBit\r\n}\r\n\r\nexport function L(bitReader: BitReader, n: number) {\r\n  let x = 0\r\n  for (let i = 0 ; i < n; i++ ) {\r\n    x = 2 * x + bitReader.readU1()\r\n  }\r\n  return x\r\n}\r\n\r\nexport function NS(bitReader: BitReader, n: number) {\r\n  let w = Math.floor(Math.log2(n)) + 1\r\n  let m = (1 << w) - n\r\n  let v =\tL(bitReader, w - 1)\r\n  if (v < m) {\r\n    return v\r\n  }\r\n  let extraBit = L(bitReader, 1)\r\n  return (v << 1) - m + extraBit\r\n}\r\n","/*\r\n * libmedia pcm util\r\n *\r\n * 版权所有 (C) 2024 赵高兴\r\n * Copyright (C) 2024 Gaoxing Zhao\r\n *\r\n * 此文件是 libmedia 的一部分\r\n * This file is part of libmedia.\r\n * \r\n * libmedia 是自由软件；您可以根据 GNU Lesser General Public License（GNU LGPL）3.1\r\n * 或任何其更新的版本条款重新分发或修改它\r\n * libmedia is free software; you can redistribute it and/or\r\n * modify it under the terms of the GNU Lesser General Public\r\n * License as published by the Free Software Foundation; either\r\n * version 3.1 of the License, or (at your option) any later version.\r\n * \r\n * libmedia 希望能够为您提供帮助，但不提供任何明示或暗示的担保，包括但不限于适销性或特定用途的保证\r\n * 您应自行承担使用 libmedia 的风险，并且需要遵守 GNU Lesser General Public License 中的条款和条件。\r\n * libmedia is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\r\n * Lesser General Public License for more details.\r\n *\r\n */\r\n\r\nimport { AVCodecID } from '../codec'\r\n\r\nexport function getPcmCodecId(bps: int32, flt: boolean, be: boolean, flags: int32) {\r\n  if (bps <= 0 || bps > 64) {\r\n    return AVCodecID.AV_CODEC_ID_NONE\r\n  }\r\n\r\n  if (flt) {\r\n    switch (bps) {\r\n      case 32:\r\n        return be ? AVCodecID.AV_CODEC_ID_PCM_F32BE : AVCodecID.AV_CODEC_ID_PCM_F32LE\r\n      case 64:\r\n        return be ? AVCodecID.AV_CODEC_ID_PCM_F64BE : AVCodecID.AV_CODEC_ID_PCM_F64LE\r\n      default:\r\n        return AVCodecID.AV_CODEC_ID_NONE\r\n    }\r\n  }\r\n  else {\r\n    bps += 7\r\n    bps >>>= 3\r\n\r\n    if (flags & (1 << (bps - 1))) {\r\n      switch (bps) {\r\n        case 1:\r\n          return AVCodecID.AV_CODEC_ID_PCM_S8\r\n        case 2:\r\n          return be ? AVCodecID.AV_CODEC_ID_PCM_S16BE : AVCodecID.AV_CODEC_ID_PCM_S16LE\r\n        case 3:\r\n          return be ? AVCodecID.AV_CODEC_ID_PCM_S24BE : AVCodecID.AV_CODEC_ID_PCM_S24LE\r\n        case 4:\r\n          return be ? AVCodecID.AV_CODEC_ID_PCM_S32BE : AVCodecID.AV_CODEC_ID_PCM_S32LE\r\n        case 8:\r\n          return be ? AVCodecID.AV_CODEC_ID_PCM_S64BE : AVCodecID.AV_CODEC_ID_PCM_S64LE\r\n        default:\r\n          return AVCodecID.AV_CODEC_ID_NONE\r\n      }\r\n    }\r\n    else {\r\n      switch (bps) {\r\n        case 1:\r\n          return AVCodecID.AV_CODEC_ID_PCM_U8\r\n        case 2:\r\n          return be ? AVCodecID.AV_CODEC_ID_PCM_U16BE : AVCodecID.AV_CODEC_ID_PCM_U16LE\r\n        case 3:\r\n          return be ? AVCodecID.AV_CODEC_ID_PCM_U24BE : AVCodecID.AV_CODEC_ID_PCM_U24LE\r\n        case 4:\r\n          return be ? AVCodecID.AV_CODEC_ID_PCM_U32BE : AVCodecID.AV_CODEC_ID_PCM_U32LE\r\n        default:\r\n          return AVCodecID.AV_CODEC_ID_NONE\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function getExactBitsPerSample(codecId: AVCodecID) {\r\n  switch (codecId) {\r\n    case AVCodecID.AV_CODEC_ID_8SVX_EXP:\r\n    case AVCodecID.AV_CODEC_ID_8SVX_FIB:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_ARGO:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_CT:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_IMA_ALP:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_IMA_AMV:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_IMA_APC:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_IMA_APM:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_IMA_EA_SEAD:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_IMA_OKI:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_IMA_WS:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_IMA_SSI:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_G722:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_YAMAHA:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_AICA:\r\n      return 4\r\n    case AVCodecID.AV_CODEC_ID_DSD_LSBF:\r\n    case AVCodecID.AV_CODEC_ID_DSD_MSBF:\r\n    case AVCodecID.AV_CODEC_ID_DSD_LSBF_PLANAR:\r\n    case AVCodecID.AV_CODEC_ID_DSD_MSBF_PLANAR:\r\n    case AVCodecID.AV_CODEC_ID_PCM_ALAW:\r\n    case AVCodecID.AV_CODEC_ID_PCM_MULAW:\r\n    case AVCodecID.AV_CODEC_ID_PCM_VIDC:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S8:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S8_PLANAR:\r\n    case AVCodecID.AV_CODEC_ID_PCM_SGA:\r\n    case AVCodecID.AV_CODEC_ID_PCM_U8:\r\n    case AVCodecID.AV_CODEC_ID_SDX2_DPCM:\r\n    case AVCodecID.AV_CODEC_ID_DERF_DPCM:\r\n      return 8\r\n    case AVCodecID.AV_CODEC_ID_PCM_S16BE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S16BE_PLANAR:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S16LE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S16LE_PLANAR:\r\n    case AVCodecID.AV_CODEC_ID_PCM_U16BE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_U16LE:\r\n      return 16\r\n    case AVCodecID.AV_CODEC_ID_PCM_S24DAUD:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S24BE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S24LE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S24LE_PLANAR:\r\n    case AVCodecID.AV_CODEC_ID_PCM_U24BE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_U24LE:\r\n      return 24\r\n    case AVCodecID.AV_CODEC_ID_PCM_S32BE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S32LE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S32LE_PLANAR:\r\n    case AVCodecID.AV_CODEC_ID_PCM_U32BE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_U32LE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_F32BE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_F32LE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_F24LE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_F16LE:\r\n      return 32\r\n    case AVCodecID.AV_CODEC_ID_PCM_F64BE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_F64LE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S64BE:\r\n    case AVCodecID.AV_CODEC_ID_PCM_S64LE:\r\n      return 64\r\n    default:\r\n      return 0\r\n  }\r\n}\r\n\r\nexport function getBitsPerSample(codecId: AVCodecID) {\r\n  switch (codecId) {\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_SBPRO_2:\r\n      return 2\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_SBPRO_3:\r\n      return 3\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_SBPRO_4:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_IMA_WAV:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_IMA_QT:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_SWF:\r\n    case AVCodecID.AV_CODEC_ID_ADPCM_MS:\r\n      return 4\r\n    default:\r\n      return getExactBitsPerSample(codecId)\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}